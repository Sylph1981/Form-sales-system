"""Subclass of MyFrame2, which is generated by wxFormBuilder."""

from cgitb import text
from gspread_formatting.batch_update_requests import format_cell_range
import wx
import app
import json
import codecs
import wx.grid
import gspread
#from datetime import datetime
from MyProject1MyDialog3 import MyProject1MyDialog3
from MyProject1MyDialog4 import MyProject1MyDialog4
from MyProject1MyDialog6 import MyProject1MyDialog6
from MyProject1MyDialog8 import MyProject1MyDialog8
#from MyProject1MyFrame5 import MyProject1MyFrame5
from MyProject1MyFrame6 import MyProject1MyFrame6


# セルに色や枠線を付けたりする標準機能
from gspread_formatting import *

#import requests

# ServiceAccountCredentials：Googleの各サービスへアクセスできるservice変数を生成します。
from oauth2client.service_account import ServiceAccountCredentials

import time
import re
from bs4 import BeautifulSoup
from tqdm import tqdm

# 2つのAPIを記述しないとリフレッシュトークンを3600秒毎に発行し続けなければならない
scope = ['https://spreadsheets.google.com/feeds',
         'https://www.googleapis.com/auth/drive']


# 色付けの初期化
data_fmt0 = CellFormat(backgroundColor=Color(1, 1, 1))

# 色付けの準備（red）
data_fmt1 = CellFormat(backgroundColor=Color(1, 0, 0))

# 色付けの準備（gray）
data_fmt2 = CellFormat(backgroundColor=Color(0.5, 0.5, 0.5))

# 色付けの準備（black）
data_fmt3 = CellFormat(backgroundColor=Color(0, 0, 0))

# 色付けの準備（yellow）→backgroundColor=Color(1, 1, 0)
data_fmt4 = CellFormat(backgroundColor=Color(1, 1, 0))

# 色付けの準備（blue）
data_fmt5 = CellFormat(backgroundColor=Color(0.7, 0.7, 1))


# Implementing MyFrame2
class MyProject1MyFrame2(app.MyFrame2):
    def __init__(self, parent):
        app.MyFrame2.__init__(self, parent)

    def inquiry_post(self, event):
        import datetime
        import importlib

        adid3 = MyProject1MyDialog3(self)
        adid_4 = MyProject1MyDialog4(self)
        adid_5 = MyProject1MyDialog6(self)
        adid8 = MyProject1MyDialog8(self)
        credentials = ServiceAccountCredentials.from_json_keyfile_name(
            adid3.m_textCtrl11.GetValue(), scope)
        gc = gspread.authorize(credentials)

# 「AttributeError: 'int' object has no attribute 'GetValue'」
# が表示されてしまうので、try~exceptにより回避
        try:
            row3 = self.row11.GetValue()
            row4 = self.row21.GetValue()
            print(row3)
            print(row4)

#文字コードをUTF-8に変換しないとエラー発生がするため注意！！
            with open('setting.json','w',encoding='utf-8') as f:
                w_data = {}
                w_data['verificationkey'] = adid3.m_textCtrl11.GetValue()
                w_data['spreadsheetkey'] = adid3.m_comboBox6.GetValue()
                w_data['tempfile'] = adid3.m_textCtrl111.GetValue()
                w_data['profile_path'] = adid3.m_textCtrl112.GetValue()
                w_data['user'] = adid3.m_textCtrl4.GetValue()
                w_data['password'] = adid3.m_textCtrl5.GetValue()
                w_data['remember'] = adid3.m_checkBox1.GetValue()
                w_data['date'] = adid8.m_textCtrl52.GetValue()
                w_data['posts'] = adid8.m_textCtrl53.GetValue()
#			w_data['sheetname1'] = self.m_comboBox12.GetValue()
#			w_data['sheetname2'] = self.m_comboBox1.GetValue()
                w_data['sheetname3'] = self.m_comboBox11.GetValue()
#			w_data['row1'] = self.row1.GetValue()
#			w_data['row2'] = self.row2.GetValue()

# 属性GetValue()は不要
                w_data['row11'] = row3
                w_data['row21'] = row4
                
                json.dump(w_data, f, ensure_ascii=False, indent=1, sort_keys=True, separators=(',', ': '))
                print('WRITE:')

        except Exception as e:
            wx.MessageBox(u'A system error has occurred. Please restart the application!!'
                           + '\n'
                           + '\n' + str(e)
                           + '\n' +
                          'Note:If you do not restart, the settings values previously written to "setting.json" will be used as a reference.',
                          u'Information', wx.ICON_ERROR)

        with codecs.open('setting.json','r',encoding='utf-8') as f:
            j = json.load(f,strict=False)
            f.close()
            row3 = j["row11"]
            row4 = j["row21"]
            print(str(row3))
            print(str(row4))

# 今日の日付を取得
        d_today = datetime.date.today()

# 文字列に変換
#		print(d_today.strftime('%Y年%m月%d日'))

# 設定漏れや誤った値が入力されていないかの確認
        if self.m_comboBox11.GetValue() == '選択して下さい':
            self.m_comboBox11.SetBackgroundColour("#f56cbe")
            wx.MessageBox(u'Please select the Worksheet title!!',
                          u'Setting value error', wx.ICON_ERROR)
        elif row3 == 0 and row4 == 0:
            self.row11.SetBackgroundColour('#f56cbe')
            self.row21.SetBackgroundColour('#f56cbe')
            self.m_comboBox11.SetBackgroundColour("#FFFFFF")
            wx.MessageBox(u'Please set the range!!',
                          u'Setting value error', wx.ICON_ERROR)
        elif row4 - row3 > 10000:
            self.row11.SetBackgroundColour('#f56cbe')
            self.row21.SetBackgroundColour('#f56cbe')
            self.m_comboBox11.SetBackgroundColour("#FFFFFF")
            wx.MessageBox(u'The value exceeds the configurable range!!',
                          u'Setting value error', wx.ICON_ERROR)
        elif row4 - row3 < 0:
            self.row11.SetBackgroundColour('#f56cbe')
            self.row21.SetBackgroundColour('#f56cbe')
            self.m_comboBox11.SetBackgroundColour("#FFFFFF")
            wx.MessageBox(u'Illegal range!!',
                          u'Setting value error', wx.ICON_ERROR)
        elif self.m_comboBox11.GetValue() == '選択して下さい' \
                and row3 == 0 \
                and row4 == 0:
            self.row11.SetBackgroundColour('#f56cbe')
            self.row21.SetBackgroundColour('#f56cbe')
            self.m_comboBox11.SetBackgroundColour("#f56cbe")
            wx.MessageBox(u'Please select the Worksheet title and Illegal range!!',
                          u'Setting value error', wx.ICON_ERROR)

# １日当たりの件数が制限オーバーしていないか確認
        elif adid8.m_textCtrl52.GetValue() == d_today.strftime('%Y-%m-%d') \
                and int(adid8.m_textCtrl53.GetValue()) == 10000:
            wx.MessageBox(
                u'The number of posts that can be posted per day has been exceeded!!', u'Over limit', wx.ICON_ERROR)

        # Set cell values.
        else:
          mb = wx.MessageBox(
                u'Do you want to run with these settings?' + '\n' + '\n'
                    + 'start' + ':' + str(row3) + '\n' 
                    + 'last' + ':' + str(row4) + '\n'
                    + 'sheet' + ':' + str(self.m_comboBox11.GetValue()) + '\n' + '\n'
                    + 'Note:Please understand that this system is linked with API, so if the processing capacity exceeds a certain level, an error may occur or the process may freeze.'
                        , u'Final confirm', wx.YES_NO)
          if mb == wx.YES:
#            from selenium.webdriver.support.ui import WebDriverWait
            from selenium import webdriver
#            from selenium.webdriver.support import expected_conditions as EC
            from selenium.webdriver.chrome.options import Options

# Selectモジュールをインポート
            from selenium.webdriver.support.select import Select

# "OK or Cancel"の確認でOKを選択
            from selenium.webdriver.common.alert import Alert

# Python Seleniumでフォームのテキストボックスclearができない時の対応
            from selenium.webdriver.common.keys import Keys

# 例外処理用のlibraryをimport
#		 from selenium.common.exceptions import NoSuchElementException
            from selenium.common.exceptions import NoAlertPresentException
            from selenium.common.exceptions import WebDriverException
            from selenium.common.exceptions import TimeoutException
            from selenium.common.exceptions import ElementNotInteractableException
#            from selenium.common.exceptions import SessionNotCreatedException
            from selenium.common.exceptions import InvalidArgumentException
            from selenium.common.exceptions import UnexpectedAlertPresentException

# Selectモジュールをインポート
#		 from selenium.webdriver.support.select import Select

            from webdriver_manager.chrome import ChromeDriverManager

# User-Agent
#            user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Safari/537.36"

# オプションの作成
            option = Options()

# 起動オプション
#Chromeのバージョン情報（Chromeのアドレスバーにchrome://version/と入力すると出てくる）の「プロフィール パス」に対応するパス
            # Profile_path = adid3.m_textCtrl112.GetValue()
            # option.add_argument('--user-data-dir=' + Profile_path)
            # option.add_argument('--profile-directory=Default') 

# 「unknown error: net::ERR_CONNECTION_CLOSED」の回避用
            option.add_argument('--disable-dev-shm-usage')
            option.add_argument('no-sandbox')
            option.add_argument('--disable-extensions')
            option.add_argument('--disable-gpu')
            option.add_argument('disable-infobars')
            option.add_argument('--incognito') # シークレットモードモード
            # option.add_argument('--remote-debugging-port=9222')

# ヘッドレスモードを有効にする（次の行をコメントアウトすると画面が表示される）。
            option.add_argument('--headless')
#            option.add_argument('--user-agent=' + user_agent)

# ChromeのWebDriverオブジェクトを作成する。
            try:
#                driver = webdriver.Chrome(
#                    adid3.m_textCtrl111.GetValue(), options=option)
# 自動でPCのChromeと同じバージョンのdriverをインストールする処理
                driver = webdriver.Chrome(executable_path=ChromeDriverManager().install(), options=option)
# 例外発生時、配布されているもののうち最新のdriverをインストールする処理
            except Exception as e:
                print(e)
                import requests
                res = requests.get('https://chromedriver.storage.googleapis.com/LATEST_RELEASE')
                driver = webdriver.Chrome(ChromeDriverManager(res.text).install(),options=option)
                
            driver.set_page_load_timeout(60)

# エラー「ElementNotInteractableException: element not interactable」が出ないようにするため追加
            driver.set_window_size('1200', '1000')

            wb = gc.open_by_key(adid3.m_comboBox6.GetValue())
            ws3 = wb.worksheet(self.m_comboBox11.GetValue())
            self.row11.SetBackgroundColour('#FFFFFF')
            self.row21.SetBackgroundColour('#FFFFFF')
            self.m_comboBox11.SetBackgroundColour("#FFFFFF")
#                adid = MyProject1MyFrame5(self)
#                adid.grid.ClearGrid()
#		 self.m_gauge2.SetValue( 0 )
#		 self.m_gauge2.SetRange(row2-row1)

# Chromeドライバーのバージョンがブラウザのバージョンと合わない場合のエラーメッセージ
#            except SessionNotCreatedException as e:
#                print("error:", e)
#                wx.MessageBox(f'{e}', u'driver error', wx.ICON_ERROR)

#            else:
            dlg = wx.ProgressDialog(
                    title="自動投稿プログラム実行中",
                    message="0/100",
                    maximum=100,
                    style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME | wx.PD_CAN_ABORT)

# ダイアログ表示
            dlg.Show()
            rate = 0

# 所要時間計測開始
            start = time.time()

# プレビュー表示するためのダイアログ生成条件
            t = 0
            col = 25
            adid6 = MyProject1MyFrame6(self)
            adid6.grid.ClearGrid()
            adid6.grid.CreateGrid(10000, col)
            adid6.grid.SetColLabelValue(0, "法人名称")
            adid6.grid.SetColLabelValue(1, "結果・エラー情報等（１）")
            adid6.grid.SetColLabelValue(2, "結果・エラー情報等（２）")
            adid6.grid.SetColLabelValue(3, "投稿日時")
#		  adid6.grid.AutoSize()
            adid6.Show()

#		  global input_history

# お問い合わせフォームへの自動投稿本体プログラム
# ws1の行数を取得
#		 lastrow = len(ws3.col_values(1))
            for k in tqdm(range(row3, row4+1)):

                    # フォームの各入力履歴
                    input_history = []

                    try:
# 「setting.json」に保存
# 文字コードをUTF-8に変換しないとエラー発生がするため注意！！
                        with open('setting.json', 'w', encoding='utf-8') as f:
                            w_data = {}
                            w_data['verificationkey'] = adid3.m_textCtrl11.GetValue(
                                    )
                            w_data['spreadsheetkey'] = adid3.m_comboBox6.GetValue(
                                    )
                            w_data['tempfile'] = adid3.m_textCtrl111.GetValue()
                            w_data['profile_path'] = adid3.m_textCtrl112.GetValue()
                            w_data['user'] = adid3.m_textCtrl4.GetValue()
                            w_data['password'] = adid3.m_textCtrl5.GetValue()
                            w_data['remember'] = adid3.m_checkBox1.GetValue()
                            w_data['date'] = adid8.m_textCtrl52.GetValue()
                            w_data['posts'] = adid8.m_textCtrl53.GetValue()
#                           w_data['sheetname1'] = self.m_comboBox12.GetValue()
#                           w_data['sheetname2'] = self.m_comboBox1.GetValue()
                            w_data['sheetname3'] = self.m_comboBox11.GetValue()
#                           w_data['row1'] = self.row1.GetValue()
#                           w_data['row2'] = self.row2.GetValue()
                            w_data['row11'] = self.row11.GetValue()
                            w_data['row21'] = self.row21.GetValue()

                            json.dump(
                                w_data, f, ensure_ascii=False, indent=1, sort_keys=True, separators=(',', ': '))
                            print('WRITE:')
#               print(w_data)

                        lastcol = len(list(ws3.row_values(k)))
                        cell_list2 = ws3.range(k, 7, k, lastcol)
                        print(cell_list2)
                        for cell in cell_list2:
                            cell.value = ""
#             time.sleep(1)
                        ws3.update_cells(cell_list2)

                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt0)
                        print("シートの初期化（投稿日時・色付け）")
# try:
# 		   try:
# 読み込み不可能なキーワード設定に該当しないかの確認
                        keywords1 = []
                        keywords2 = []
                        import filter
                        importlib.reload(filter)

                        for i in filter.Not_applicable_value_inc:
                            if i in ws3.cell(k, 6).value:
                                keywords1.append(i)
                        print(keywords1)

                        for j in filter.Not_applicable_value_mat:
                            if j == ws3.cell(k, 6).value:
                                keywords2.append(j)
                        print(keywords2)

                        # print("ページを読み込み中")
                        if len(keywords1) > 0 \
                                and len(keywords2) == 0:
                            ws3.update_cell(k, 7, keywords1[0])
                            print("アクセス不可能")

# 現在日時（日付と時刻）のオブジェクトを取得
                            dt_now = datetime.datetime.now()

# 取得したdatetimeオブジェクトでstrftime()メソッドを使うことで、元の文字列と異なるフォーマットで日付や時刻を表すことができる。
                            ws3.update_cell(
                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                            format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)

                        elif len(keywords1) == 0 \
                                and len(keywords2) > 0:
                            ws3.update_cell(k, 7, keywords2[0])

# 現在日時（日付と時刻）のオブジェクトを取得
                            dt_now = datetime.datetime.now()

# 取得したdatetimeオブジェクトでstrftime()メソッドを使うことで、元の文字列と異なるフォーマットで日付や時刻を表すことができる。
                            ws3.update_cell(
                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                            format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)
                            print("ページが見つかりません")

# 		    if ws3.cell(k, 6).value == r"-" \
# 		         or "Not Found" in ws3.cell(k, 6).value \
# 		             or "Time out!!" in ws3.cell(k, 6).value \
# 		                 or "unknown error!!" in ws3.cell(k, 6).value \
#                              or "mailto" in ws3.cell(k, 6).value:
# 		     ws3.update_cell(k, 7, "-")

# 現在日時（日付と時刻）のオブジェクトを取得
# 		     dt_now = datetime.datetime.now()

# 取得したdatetimeオブジェクトでstrftime()メソッドを使うことで、元の文字列と異なるフォーマットで日付や時刻を表すことができる。
# 		     ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
# 		     format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)

                        else:
                            # USERNAME = "design"
                            # PASSWORD = "test123"
                            # driver.get('http://' + USERNAME + ':' + PASSWORD + '@' + ws3.cell(k, 6).value)
                            driver.get(ws3.cell(k, 6).value)
# 		      driver.implicitly_wait(10)
                          # 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                          #一旦try~exceptで様子見
                            # try:
                            #   alert = driver.switch_to.alert
                            #   alert.send_keys(USERNAME + u'\ue004' + PASSWORD)
                            #   alert.accept()
                            # except InvalidArgumentException:
                            #   pass
                            # except NoAlertPresentException:
                            #   pass
                            time.sleep(1)
                            html = driver.page_source
                            soup = BeautifulSoup(html, 'html.parser')

                            file = adid3.m_textCtrl111.GetValue()
                            with open(file, mode='wt', encoding='utf-8') as f:
                                f.write(html)
                                print("ＨＴＭＬファイルに一次保存しました")

                            print("お問い合わせＮＧフィルターを実行します。")

# ＮＧフィルター（標準仕様）
                            import filter
                            importlib.reload(filter)
                            if len(filter.keywords3) > 0 \
                                and len(filter.keywords4) == 0 \
                                and len(filter.keywords5) == 0 \
                                and len(filter.keywords6) > 0 \
                                and len(filter.keywords7) == 0 \
                                and len(filter.keywords8) == 0:
                                print("営業禁止ワードあり")
                                ws3.update_cell(k, 7, "営業お断り！！")
                                dt_now = datetime.datetime.now()
                                ws3.update_cell(
                                    k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt1)

# 設定追加（2023.02.16）
                            elif len(filter.keywords3) > 0 \
                                and len(filter.keywords4) == 0 \
                                and len(filter.keywords5) > 0 \
                                and len(filter.keywords6) > 0 \
                                and len(filter.keywords7) == 0 \
                                and len(filter.keywords8) == 0:
                                print("営業禁止ワードあり")
                                ws3.update_cell(k, 7, "営業お断り！！")
                                dt_now = datetime.datetime.now()
                                ws3.update_cell(
                                    k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt1)

# 設定追加（2023.02.16）
                            elif len(filter.keywords3) > 0 \
                                and len(filter.keywords4) > 0 \
                                and len(filter.keywords5) > 0 \
                                and len(filter.keywords6) > 0 \
                                and len(filter.keywords7) == 0 \
                                and len(filter.keywords8) == 0:
                                print("営業禁止ワードあり")
                                ws3.update_cell(k, 7, "営業お断り！！")
                                dt_now = datetime.datetime.now()
                                ws3.update_cell(
                                    k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt1)

# 設定追加（2023.02.16）
                            elif len(filter.keywords3) > 0 \
                                and len(filter.keywords4) > 0 \
                                and len(filter.keywords5) == 0 \
                                and len(filter.keywords6) > 0 \
                                and len(filter.keywords7) == 0 \
                                and len(filter.keywords8) == 0:
                                print("営業禁止ワードあり")
                                ws3.update_cell(k, 7, "営業お断り！！")
                                dt_now = datetime.datetime.now()
                                ws3.update_cell(
                                    k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt1)

# 設定追加（2023.02.16）
                            elif len(filter.keywords3) == 0 \
                                and len(filter.keywords4) == 0 \
                                and len(filter.keywords5) == 0 \
                                and len(filter.keywords6) > 0 \
                                and len(filter.keywords7) > 0 \
                                and len(filter.keywords8) == 0:
                                print("自動入力不可")
                                ws3.update_cell(
                                    k, 7, "このフォームは自動入力に対応していません：" 
                                    + str(filter.keywords7[0]))
                                dt_now = datetime.datetime.now()
                                ws3.update_cell(
                                    k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)

# 設定追加（2023.02.16）
                            elif len(filter.keywords3) == 0 \
                                and len(filter.keywords4) == 0 \
                                and len(filter.keywords5) == 0 \
                                and len(filter.keywords6) > 0 \
                                and len(filter.keywords7) == 0 \
                                and len(filter.keywords8) > 0:
                                print("Googleフォーム")
                                ws3.update_cell(k, 7, "Googleフォームからの自動送信はオプション対応です")
                                dt_now = datetime.datetime.now()
                                ws3.update_cell(
                                    k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)

# 設定追加（2023.02.26）
                            elif len(filter.keywords3) == 0 \
                                and len(filter.keywords4) == 0 \
                                and len(filter.keywords5) == 0 \
                                and len(filter.keywords6) == 0 \
                                and len(filter.keywords7) == 0 \
                                and len(filter.keywords8) > 0:
                                print("Googleフォーム")
                                ws3.update_cell(k, 7, "Googleフォームからの自動送信はオプション対応です")
                                dt_now = datetime.datetime.now()
                                ws3.update_cell(
                                    k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)
                            elif len(filter.keywords3) == 0 \
                                and len(filter.keywords4) > 0 \
                                and len(filter.keywords5) == 0 \
                                and len(filter.keywords6) > 0 \
                                and len(filter.keywords7) == 0 \
                                and len(filter.keywords8) == 0:
                                print("その他の専用フォーム")
                                ws3.update_cell(k, 7, "その他の専用フォーム")
                                dt_now = datetime.datetime.now()
                                ws3.update_cell(
                                    k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)

# 設定追加（2023.05.26）
                            elif len(filter.keywords3) == 0 \
                                and len(filter.keywords4) > 0 \
                                and len(filter.keywords5) > 0 \
                                and len(filter.keywords6) > 0 \
                                and len(filter.keywords7) == 0 \
                                and len(filter.keywords8) == 0:
                                print("その他の専用フォーム")
                                ws3.update_cell(k, 7, "その他の専用フォーム")
                                dt_now = datetime.datetime.now()
                                ws3.update_cell(
                                    k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)
                            elif len(filter.keywords3) == 0 \
                                and len(filter.keywords4) == 0 \
                                and len(filter.keywords5) > 0 \
                                and len(filter.keywords6) > 0 \
                                and len(filter.keywords7) == 0 \
                                and len(filter.keywords8) == 0:
                                print("その他の専用フォーム")
                                ws3.update_cell(k, 7, "その他の専用フォーム")
                                dt_now = datetime.datetime.now()
                                ws3.update_cell(
                                    k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)

                            elif len(filter.keywords3) == 0 \
                                and len(filter.keywords4) == 0 \
                                and len(filter.keywords5) == 0 \
                                and len(filter.keywords6) > 0 \
                                and len(filter.keywords7) == 0 \
                                and len(filter.keywords8) == 0:
                                print("フォーム要素あり")
                                ws3.update_cell(k, 7, "フォーム要素あり")
                                dt_now = datetime.datetime.now()
                                ws3.update_cell(
                                    k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))

# 最後に投稿を行った日付が今日でない場合、件数はリセットされる
                                if not adid8.m_textCtrl52.GetValue() == d_today.strftime('%Y-%m-%d'):
                                    cnt = 0
                                    adid8.m_textCtrl53.SetValue(str(cnt))

# 使用状況ダイアログに値を反映
# 		          cnt += 1
# 		          d_today = datetime.date.today()
# 		          print(d_today.strftime('%Y年%m月%d日'))
# 		          print(cnt)
# 		          adid8.m_textCtrl52.SetValue(d_today.strftime('%Y年%m月%d日'))
# 		          adid8.m_textCtrl53.SetValue(str(cnt))

# 		        else:
# 		          cnt = int(adid8.m_textCtrl53.GetValue())
# 		          cnt += 1
# 		          d_today = datetime.date.today()
# 		          print(d_today.strftime('%Y年%m月%d日'))
# 		          print(cnt)
# 		          adid8.m_textCtrl52.SetValue(d_today.strftime('%Y年%m月%d日'))
# 		          adid8.m_textCtrl53.SetValue(str(cnt))

# 「setting.json」に保存
# 文字コードをUTF-8に変換しないとエラー発生がするため注意！！
                                with open('setting.json', 'w', encoding='utf-8') as f:
                                    w_data = {}
                                    w_data['verificationkey'] = adid3.m_textCtrl11.GetValue(
                                    )
                                    w_data['spreadsheetkey'] = adid3.m_comboBox6.GetValue(
                                    )
                                    w_data['tempfile'] = adid3.m_textCtrl111.GetValue()
                                    w_data['profile_path'] = adid3.m_textCtrl112.GetValue()
                                    w_data['user'] = adid3.m_textCtrl4.GetValue()
                                    w_data['password'] = adid3.m_textCtrl5.GetValue()
                                    w_data['remember'] = adid3.m_checkBox1.GetValue()
                                    w_data['date'] = adid8.m_textCtrl52.GetValue()
                                    w_data['posts'] = adid8.m_textCtrl53.GetValue()
#                                    w_data['sheetname1'] = self.m_comboBox12.GetValue()
#                                    w_data['sheetname2'] = self.m_comboBox1.GetValue()
                                    w_data['sheetname3'] = self.m_comboBox11.GetValue()
#                                    w_data['row1'] = self.row1.GetValue()
#                                    w_data['row2'] = self.row2.GetValue()
                                    w_data['row11'] = self.row11.GetValue()
                                    w_data['row21'] = self.row21.GetValue()

                                    json.dump(
                                        w_data, f, ensure_ascii=False, indent=1, sort_keys=True, separators=(',', ': '))
                                    print('WRITE:')

#各タグのテキスト処理module
                                import Get_tag_text

#すでにmoduleをインポート済みの場合はリロード実施
                                importlib.reload(Get_tag_text)

#inputタグの値抽出処理module
                                import input_tag

#すでにmoduleをインポート済みの場合はリロード実施
                                importlib.reload(input_tag)

# 各属性値
                                for elem in input_tag.element2:
                                    Get_tag_text.items_1.append(elem.get("placeholder"))

# 		        for elem in element3:
# 		          Get_tag_text.items_1.append(name.get("placeholder"))
# 		          list_3t.append(elem.get("type"))
# 		        print(list_3t)


# リストにNoneが含まれていると「TypeError: argument of type 'NoneType' is not iterable」
# が発生するので、リスト内包表記で処理

# placeholder
                                try:
                                    Get_tag_text.items_1 = [i for i in Get_tag_text.items_1 if i is not None]
#                                print(Get_tag_text.items_1)
                                except Exception as e:
                                    print(e)

# （お問い合わせ内容）
# プルダウンメニュー
# ※選択後にページがリロードされる場合があるためこの位置に移動（2022.12.17）
                                import Select_contents
                                importlib.reload(Select_contents)

                                try:
# optionタグ内のvalue値が1個もない
# selectタグ内のname値が0個でない
# selectタグ内のid値が1個もない
                                 if len(Select_contents.select_option) == 0 \
                                    and not Select_contents.option_value == [] \
                                    and not len(Select_contents.select_name_value) == 0 \
                                    and len(Select_contents.select_id_value) == 0:
                                    print("プルダウン選択（パターン１）")

                                    if len([i for i in Get_tag_text.items_1 if "連絡方法" in i]) > 0 \
                                            or len([i for i in Get_tag_text.list_1 if "連絡方法" in i]) > 0:
                                        if not Select_contents.select_name_value == [] \
                                                and not Select_contents.method_name == []:
                                            print("「連絡方法」関連がテキスト要素及び値に含まれている")
                                            dropdown = driver.find_element_by_name(
                                                Select_contents.method_name[0])
                                            select = Select(dropdown)
                                            select.select_by_index(
                                                len(select.options)-1)
                                            input_history.append(
                                                len(select.options)-1)
                                            print("selectタグから取得可能な選択肢の最後を選択済み")

                                            if len(Select_contents.select_name_Time) > 0:
                                                dropdown = driver.find_element_by_name(
                                                    Select_contents.select_name_Time[0])
                                                print(
                                                    Select_contents.select_name_Time[0])
                                                select = Select(dropdown)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                                select.select_by_index(
                                                    len(select.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
                                                input_history.append(
                                                    len(select.options)-1)
                                                print(
                                                    "ドロップダウンボックス要素：" + str(Select_contents.select_name_Time[0]))
                                                print("時間帯指定済み")

                                                dropdown = driver.find_element_by_name(
                                                    Select_contents.select_name_value[0])
                                                select = Select(dropdown)
                                                select.select_by_index(
                                                    len(select.options)-1)
                                                input_history.append(
                                                    len(select.options)-1)
                                                print(
                                                    "ドロップダウンボックス要素：" + str(Select_contents.select_name_value[0]))
                                                print("お問い合わせ内容選択済み")
                                    else:
                                        if not Select_contents.select_name_value == []:
                                            dropdown = driver.find_element_by_name(
                                                Select_contents.select_name_value[0])
                                            print(
                                                Select_contents.select_name_value[0])
                                            select = Select(dropdown)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                            select.select_by_index(
                                                len(select.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
                                            input_history.append(
                                                len(select.options)-1)
# 		           		            print("ドロップダウンボックス要素：" + Select_contents.select_name_value[0])
                                            print(
                                                "選択肢の数が不明な為、select.optionにより選択肢の数を求めて最終選択肢を指定：" + str(len(select.options)-1))

# 2022.11.22（パターン追加）
# optionタグ内のvalue値が0個以上
# selectタグ内のname値が0個でない
# selectタグ内のid値が1個もない
                                 elif len(Select_contents.select_option) > 0 \
                                    and not Select_contents.option_value == [] \
                                    and not len(Select_contents.select_name_value) == 0 \
                                    and len(Select_contents.select_id_value) == 0:
                                    print("プルダウン選択（パターン２）")

                                    if len([i for i in Get_tag_text.items_1 if "連絡方法" in i]) > 0 \
                                            or len([i for i in Get_tag_text.list_1 if "連絡方法" in i]) > 0:
                                        if not Select_contents.select_name_value == [] \
                                                and not Select_contents.method_name == []:
                                            print("「連絡方法」関連がテキスト要素及び値に含まれている")
                                            dropdown = driver.find_element_by_name(
                                                Select_contents.method_name[0])
                                            select = Select(dropdown)
                                            select.select_by_value(
                                                Select_contents.option_contact[len(Select_contents.option_contact)-1])
                                            input_history.append(Select_contents.option_contact[len(
                                                Select_contents.option_contact)-1])
                                            print("optionタグから取得可能なvalue値の最後を選択：" + str(
                                                Select_contents.option_value[len(Select_contents.option_value)-1]))

                                            if len(Select_contents.select_name_Time) > 0:
                                                dropdown = driver.find_element_by_name(
                                                    Select_contents.select_name_Time[0])
                                                print(
                                                    Select_contents.select_name_Time[0])
                                                select = Select(dropdown)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                                select.select_by_index(
                                                    len(select.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
                                                input_history.append(
                                                    len(select.options)-1)
                                                print(
                                                    "ドロップダウンボックス要素：" + str(Select_contents.select_name_Time[0]))
                                                print(
                                                    "時間帯指定：" + str(len(select.options)-1))

                                                dropdown = driver.find_element_by_name(
                                                    Select_contents.select_name_value[0])
                                                select = Select(dropdown)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                                select.select_by_index(
                                                    len(select.options)-1)
                                                input_history.append(
                                                    Select_contents.option_value[len(Select_contents.option_value)-1])
                                                print(
                                                    "ドロップダウンボックス要素：" + str(Select_contents.select_name_value[0]))
                                                print(
                                                    "お問い合わせ内容：" + str(Select_contents.option_value[len(Select_contents.option_value)-1]))

                                        elif not Select_contents.select_name_value == [] \
                                                and Select_contents.method_name == []:
                                            print("「連絡方法」関連がテキスト要素及び値に含まれている")
                                            
                                            if len(Select_contents.select_name_value) > 0:
                                                dropdown = driver.find_element_by_name(
                                                    Select_contents.select_name_value[0])
                                                print(
                                                    Select_contents.select_name_value[0])
                                                select = Select(dropdown)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                                select.select_by_index(len(select.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
                                                input_history.append(
                                                    Select_contents.select_name_value[0])
# 		           		            print("ドロップダウンボックス要素：" + Select_contents.select_name_value[0])
                                                print(
                                                    "選択肢の数が不明な為、select.optionにより選択肢の数を求めて最終選択肢を指定：" + str(len(select.options)-1))

# 連絡方法
                                            if len(Select_contents.option_contact) > 0:
                                                print("optionタグのvalue値（連絡方法）：0個ではない")
                                                print("select_name_value値（個）：" + str(len(Select_contents.select_name_value)))
                                                dropdown = driver.find_element_by_name(
                                                    Select_contents.select_name_value[len(Select_contents.select_name_value)-1])
                                                print(
                                                    Select_contents.select_name_value[len(Select_contents.select_name_value)-1])
                                                select = Select(dropdown)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                                select.select_by_index(
                                                    len(select.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
                                                input_history.append(
                                                    len(select.options)-1)
                                                print(
                                                    "ドロップダウンボックス要素：" +
                                                    str(Select_contents.select_name_value[
                                                        len(Select_contents.select_name_value)-1
                                                        ]))

# 連絡希望時間帯
                                            if len(Select_contents.select_name_Time) > 0:
                                                dropdown = driver.find_element_by_name(
                                                    Select_contents.select_name_Time[0])
                                                print(
                                                    Select_contents.select_name_Time[0])
                                                select = Select(dropdown)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                                select.select_by_index(
                                                    len(select.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
                                                input_history.append(
                                                    len(select.options)-1)
                                                print(
                                                    "ドロップダウンボックス要素：" + str(Select_contents.select_name_Time[0]))
                                                print(
                                                    "時間帯指定：" + str(len(select.options)-1))

                                                dropdown = driver.find_element_by_name(
                                                    Select_contents.select_name_value[0])
                                                select = Select(dropdown)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                                select.select_by_index(
                                                    len(select.options)-1)
                                                input_history.append(
                                                    Select_contents.option_value[len(Select_contents.option_value)-1])
                                                print(
                                                    "ドロップダウンボックス要素：" + str(Select_contents.select_name_value[0]))
                                                print(
                                                    "お問い合わせ内容：" + str(Select_contents.option_value[len(Select_contents.option_value)-1]))

#パターン追加（2022.09.29）
#「select_name_value」が１個のみの場合、２個の場合の処理
                                    else:
                                        if len(Select_contents.select_name_value) == 1:
                                            dropdown = driver.find_element_by_name(
                                                Select_contents.select_name_value[0])
                                            print(
                                                Select_contents.select_name_value[0])
                                            select = Select(dropdown)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                            select.select_by_index(
                                                len(select.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
                                            input_history.append(
                                                Select_contents.select_name_value[0])
# 		           		            print("ドロップダウンボックス要素：" + Select_contents.select_name_value[0])
                                            print(
                                                "選択肢の数が不明な為、select.optionにより選択肢の数を求めて最終選択肢を指定：" + str(len(select.options)-1))

                                        elif len(Select_contents.select_name_value) == 2:
                                            dropdown_1 = driver.find_element_by_name(
                                                Select_contents.select_name_value[0])
                                            print("select_name_value（１個目）:" + str(
                                                Select_contents.select_name_value[0]))
                                            select_1 = Select(dropdown_1)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                            select_1.select_by_index(
                                                len(select_1.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
                                            input_history.append(
                                                Select_contents.select_name_value[0])
# 		           		            print("ドロップダウンボックス要素：" + Select_contents.select_name_value[0])
                                            print(
                                                "選択肢の数が不明な為、select.optionにより選択肢の数を求めて最終選択肢を指定（１個目）：" + str(len(select_1.options)-1))

                                            dropdown_2 = driver.find_element_by_name(
                                                Select_contents.select_name_value[1])
                                            print("select_name_value（２個目）:" + str(
                                                Select_contents.select_name_value[1]))
                                            select_2 = Select(dropdown_2)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                            select_2.select_by_index(
                                                len(select_2.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
                                            input_history.append(
                                                Select_contents.select_name_value[1])
# 		           		            print("ドロップダウンボックス要素：" + Select_contents.select_name_value[0])
                                            print(
                                                "選択肢の数が不明な為、select.optionにより選択肢の数を求めて最終選択肢を指定（２個目）：" + str(len(select_2.options)-1))

# optionタグ内のvalue値が0個以上
# selectタグ内のname値が1個もない
# selectタグ内のid値が0個でない
                                 elif len(Select_contents.select_option) > 0 \
                                    and not Select_contents.option_value == [] \
                                    and len(Select_contents.select_name_value) == 0 \
                                    and not len(Select_contents.select_id_value) == 0:
                                    print("プルダウン選択（パターン３）")

                                    if len([i for i in Get_tag_text.items_1 if "連絡方法" in i]) > 0 \
                                            or len([i for i in Get_tag_text.list_1 if "連絡方法" in i]) > 0:
                                        if not Select_contents.select_id_value == [] \
                                                and not Select_contents.method_id == []:
                                            print("「連絡方法」関連がテキスト要素及び値に含まれている")
                                            dropdown = driver.find_element_by_id(
                                                Select_contents.method_id[0])
                                            select = Select(dropdown)
                                            select.select_by_value(
                                                Select_contents.option_contact[len(Select_contents.option_contact)-1])
                                            input_history.append(Select_contents.option_contact[len(
                                                Select_contents.option_contact)-1])
                                            print("optionタグから取得可能なvalue値の最後を選択：" + str(
                                                Select_contents.option_value[len(Select_contents.option_value)-1]))

                                            if len(Select_contents.select_id_Time) > 0:
                                                dropdown = driver.find_element_by_id(
                                                    Select_contents.select_id_Time[0])
                                                print(
                                                    Select_contents.select_id_Time[0])
                                                select = Select(dropdown)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                                select.select_by_index(
                                                    len(select.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
                                                input_history.append(
                                                    len(select.options)-1)
                                                print(
                                                    "ドロップダウンボックス要素：" + str(Select_contents.select_id_Time[0]))
                                                print(
                                                    "時間帯指定：" + str(len(select.options)-1))

                                                dropdown = driver.find_element_by_id(
                                                    Select_contents.select_id_value[0])
                                                select = Select(dropdown)
                                                select.select_by_value(
                                                    Select_contents.option_value[len(Select_contents.option_value)-1])
                                                input_history.append(
                                                    Select_contents.option_value[len(Select_contents.option_value)-1])
                                                print(
                                                    "ドロップダウンボックス要素：" + str(Select_contents.select_id_value[0]))
                                                print(
                                                    "お問い合わせ内容：" + str(Select_contents.option_value[len(Select_contents.option_value)-1]))

                                    else:
                                        if not Select_contents.select_id_value == []:
                                            dropdown = driver.find_element_by_id(
                                                Select_contents.select_id_value[0])
                                            print(
                                                Select_contents.select_id_value[0])
                                            select = Select(dropdown)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                            select.select_by_index(
                                                len(select.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
                                            input_history.append(
                                                len(select.options)-1)
# 		           		            print("ドロップダウンボックス要素：" + Select_contents.select_id_value[0])
                                            print(
                                                "選択肢の数が不明な為、select.optionにより選択肢の数を求めて最終選択肢を指定：" + str(len(select.options)-1))

# お問い合わせ種別関係のパターン追加（2023.02.14）
# optionタグ内のvalue値が0個以上
# selectタグ内のname値が0個でない
# selectタグ内のid値が0個でない
                                 elif len(Select_contents.select_option) > 0 \
                                    and not Select_contents.option_value == [] \
                                    and not len(Select_contents.select_name_value) == 0 \
                                    and not len(Select_contents.select_id_value) == 0:
                                    print("プルダウン選択（パターン４）")
                                    print("種別項目：" + str([
                                        i for i in Select_contents.select_name_value if 
                                        "種別" in i]))

# テキスト要素に「連絡方法」が含まれる
                                    if len([i for i in Get_tag_text.items_1 if 
                                    "連絡方法" in i]) > 0 \
                                        or len([i for i in Get_tag_text.list_1 if 
                                        "連絡方法" in i]) > 0:
                                        if not Select_contents.select_id_value == [] \
                                                and not Select_contents.method_id == []:
                                            print("「連絡方法」関連がテキスト要素及び値に含まれている")
                                            dropdown = driver.find_element_by_id(
                                                Select_contents.method_id[0])
                                            select = Select(dropdown)
                                            select.select_by_value(
                                                Select_contents.option_contact[len(Select_contents.option_contact)-1])
                                            input_history.append(Select_contents.option_contact[len(
                                                Select_contents.option_contact)-1])
                                            print("optionタグから取得可能なvalue値の最後を選択：" + str(
                                                Select_contents.option_value[len(Select_contents.option_value)-1]))

                                            if len(Select_contents.select_id_Time) > 0:
                                                dropdown = driver.find_element_by_id(
                                                    Select_contents.select_id_Time[0])
                                                print(
                                                    Select_contents.select_id_Time[0])
                                                select = Select(dropdown)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                                select.select_by_index(
                                                    len(select.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
                                                input_history.append(
                                                    len(select.options)-1)
                                                print(
                                                    "ドロップダウンボックス要素：" + str(Select_contents.select_id_Time[0]))
                                                print(
                                                    "時間帯指定：" + str(len(select.options)-1))

                                                dropdown = driver.find_element_by_id(
                                                    Select_contents.select_id_value[0])
                                                select = Select(dropdown)
                                                select.select_by_value(
                                                    Select_contents.option_value[len(Select_contents.option_value)-1])
                                                input_history.append(
                                                    Select_contents.option_value[len(Select_contents.option_value)-1])
                                                print(
                                                    "ドロップダウンボックス要素：" + str(Select_contents.select_id_value[0]))
                                                print(
                                                    "お問い合わせ内容：" + str(Select_contents.option_value[len(Select_contents.option_value)-1]))

# お問い合わせ種別
                                    if len([i for i in Select_contents.select_name_value if 
                                        "種別" in i]) > 0:
                                        print("「種別」関連がname値に含まれている")
                                        dropdown = driver.find_element_by_name(
                                            Select_contents.select_name_value[0])
                                        select = Select(dropdown)
                                        select.select_by_value(
                                            Select_contents.select_option[
                                                len(Select_contents.select_option)-1])
                                        input_history.append(Select_contents.select_option[
                                            len(Select_contents.select_option)-1])
                                        print("optionタグから取得可能なvalue値の最後を選択：" + str(
                                            Select_contents.option_value[
                                                len(Select_contents.option_value)-1]))

#「種別」がテキスト要素に見当たらない
                                    else:
                                        dropdown = driver.find_element_by_id(
                                            Select_contents.select_id_value[0])
                                        select = Select(dropdown)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                        select.select_by_index(
                                            len(select.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
                                        input_history.append(
                                            len(select.options)-1)
# 		           		            print("ドロップダウンボックス選択済み：" + str(Select_contents.select_id_value[len(Select_contents.select_id_value)-1]))
                                        print(
                                            "選択肢の数が不明な為、select.optionにより選択肢の数を求めて最終選択肢を指定：" + str(len(select.options)-1))

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
# 		                   select.select_by_index(len(select.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
# 		                   select.select_by_value(Select_contents.option_value[len(Select_contents.option_value)-1])
# 		                   input_history.append(Select_contents.option_value[len(Select_contents.option_value)-1])


# optionタグ内のvalue値が0個以上
# 「Select_contents.option_value」が文字列以外（数字等）
# selectタグ内のname値が0個でない
# selectタグ内のid値が0個である
                                 elif len(Select_contents.select_option) > 0 \
                                    and Select_contents.option_value == [] \
                                    and not len(Select_contents.select_name_value) == 0 \
                                    and len(Select_contents.select_id_value) == 0:
                                    print("プルダウン選択（パターン５）")

                                    if len([i for i in Get_tag_text.items_1 if "連絡方法" in i]) > 0 \
                                            or len([i for i in Get_tag_text.list_1 if "連絡方法" in i]) > 0:
                                        # 		           		          if not Select_contents.select_id_value == []:
                                        print("「連絡方法」関連がテキスト要素に含まれていることを確認")
                                        dropdown = driver.find_element_by_id(
                                            Select_contents.select_id_value[0])
                                        select = Select(dropdown)
                                        select.select_by_value(
                                            Select_contents.option_value[len(Select_contents.option_value)-1])
                                        input_history.append(
                                            Select_contents.option_value[len(Select_contents.option_value)-1])
# 		           		            print("ドロップダウンボックス要素：" + Select_contents.select_id_value[0])
                                        print("optionタグから取得可能なvalue値の最後を選択：" + str(
                                            Select_contents.option_value[len(Select_contents.option_value)-1]))

                                    else:
                                        # 		           		          if not Select_contents.select_id_value == []:
                                        # 		           		            dropdown = driver.find_element_by_id(Select_contents.select_id_value[0])
                                        dropdown = driver.find_element_by_name(Select_contents.select_name_value[0])
                                        select = Select(dropdown)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                        select.select_by_index(
                                            len(select.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
                                        input_history.append(
                                            len(select.options)-1)
                                        print(
                                            "選択肢の数が不明な為、select.optionにより選択肢の数を求めて最終選択肢を指定：" + str(len(select.options)-1))

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
# 		                   select.select_by_index(len(select.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
# 		                   select.select_by_value(Select_contents.option_value[len(Select_contents.option_value)-1])
# 		                   input_history.append(Select_contents.option_value[len(Select_contents.option_value)-1])

#パターン追加（2022.10.6）
# optionタグ内のvalue値が0個以上
# selectタグ内のname値が0個でない
# selectタグ内のid値が0個でない
                                 elif len(Select_contents.select_option) > 0 \
                                    and Select_contents.option_value == [] \
                                    and not len(Select_contents.select_name_value) == 0 \
                                    and not len(Select_contents.select_id_value) == 0:
                                    print("プルダウン選択（パターン６）")

                                    if len([i for i in Get_tag_text.items_1 if "種別" in i]) > 0 \
                                            or len([i for i in Get_tag_text.list_1 if "種別" in i]) > 0:
                                        # 		           		          if not Select_contents.select_id_value == []:
                                        # if not Select_contents.select_id_value == [] \
                                        #         and not Select_contents.method_id == []:
                                            print("「種別」がページ要素に含まれている")
                                            dropdown = driver.find_element_by_name(
                                                Select_contents.select_name[0])
                                            select = Select(dropdown)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                            select.select_by_index(len(select.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
                                            input_history.append(len(select.options)-1)
                                            print(
                                                "選択肢の数が不明な為、select.optionにより選択肢の数を求めて最終選択肢を指定：" + 
                                                str(len(select.options)-1))

                                    else:
                                        if len(Select_contents.select_name_value) == 1:
                                            dropdown = driver.find_element_by_name(
                                                Select_contents.select_name_value[0])
                                            print(
                                                Select_contents.select_name_value[0])
                                            select = Select(dropdown)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                            select.select_by_index(
                                                len(select.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
                                            input_history.append(
                                                Select_contents.select_name_value[0])
                                            print(
                                                "選択肢の数が不明な為、select.optionにより選択肢の数を求めて最終選択肢を指定："
                                                + str(len(select.options)-1) + str(Select_contents.select_name_value[0]))

#パターン追加（2022.12.16）
# optionタグ内のvalue値が0個以上
# selectタグ内のname値が0個でない
# selectタグ内のid値が1個もない
                                 elif len(Select_contents.select_option) > 0 \
                                    and not Select_contents.option_value == [] \
                                    and len(Select_contents.select_name_value) == 0 \
                                    and len(Select_contents.select_id_value) == 0:
                                    print("プルダウン選択（パターン７）")

                                    if len([i for i in Get_tag_text.items_1 if "連絡方法" in i]) > 0 \
                                            or len([i for i in Get_tag_text.list_1 if "連絡方法" in i]) > 0:
                                        if not Select_contents.select_name_value == [] \
                                                and not Select_contents.method_name == []:
                                            print("「連絡方法」関連がテキスト要素及び値に含まれている")
                                            dropdown = driver.find_element_by_name(
                                                Select_contents.method_name[0])
                                            select = Select(dropdown)
                                            select.select_by_value(
                                                Select_contents.option_contact[len(Select_contents.option_contact)-1])
                                            input_history.append(Select_contents.option_contact[len(
                                                Select_contents.option_contact)-1])
                                            print("optionタグから取得可能なvalue値の最後を選択：" + str(
                                                Select_contents.option_value[len(Select_contents.option_value)-1]))

                                            if len(Select_contents.select_name_Time) > 0:
                                                dropdown = driver.find_element_by_name(
                                                    Select_contents.select_name_Time[0])
                                                print(
                                                    Select_contents.select_name_Time[0])
                                                select = Select(dropdown)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                                select.select_by_index(
                                                    len(select.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
                                                input_history.append(
                                                    len(select.options)-1)
                                                print(
                                                    "ドロップダウンボックス要素：" + str(Select_contents.select_name_Time[0]))
                                                print(
                                                    "時間帯指定：" + str(len(select.options)-1))

                                                dropdown = driver.find_element_by_name(
                                                    Select_contents.select_name_value[0])
                                                select = Select(dropdown)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                                select.select_by_index(
                                                    len(select.options)-1)
                                                input_history.append(
                                                    Select_contents.option_value[len(Select_contents.option_value)-1])
                                                print(
                                                    "ドロップダウンボックス要素：" + str(Select_contents.select_name_value[0]))
                                                print(
                                                    "お問い合わせ内容：" + str(Select_contents.option_value[len(Select_contents.option_value)-1]))

                                    else:
                                        if len(Select_contents.select_name) == 1:
                                            dropdown = driver.find_element_by_name(
                                                Select_contents.select_name[0])
                                            print(
                                                Select_contents.select_name[0])
                                            select = Select(dropdown)

# 選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
                                            select.select_by_index(
                                                len(select.options)-1)

# select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
# len()を使うことで選択肢の数を求めて最終選択肢を指定。
                                            input_history.append(
                                                Select_contents.option_value[0])
                                            print(
                                                "選択肢の数が不明な為、select.optionにより選択肢の数を求めて最終選択肢を指定：" + str(len(select.options)-1))

                                 else:
                                    input_history.append("ドロップボックスなし（又は未選択）")

                                except Exception as e:
                                    print(e)


# 会社名
                                import company
                                importlib.reload(company)

                                try:

# 「company.company1」又は「company.company2」内のどちらかで要素が１つ以上存在する場合、「list_2d（id値）」内の要素と一致するかを確認
                                    if len(company.company1) > 0 \
                                        or len(company.company2) > 0:
                                        print("「company1」又は「company2」内のどちらかにテキスト要素が１つ以上存在する")

                                        if len(company.company5) > 0 \
                                            and len(company.company6) == 0:
                                            driver.find_element_by_name(company.company5[0]).send_keys(
                                                adid_4.m_textCtrl11.GetValue() + "　")
                                            input_history.append("会社名")

                                        elif len(company.company5) == 0 \
                                            and len(company.company6) > 0:
                                            driver.find_element_by_name(company.company6[0]).send_keys(
                                                adid_4.m_textCtrl11.GetValue() + "　")
                                            input_history.append("会社名")

                                        elif len(company.company5) > 0 \
                                            and len(company.company6) > 0:
                                            driver.find_element_by_name(company.company5[0]).send_keys(
                                                adid_4.m_textCtrl11.GetValue() + "　")
                                            input_history.append("会社名")

                                        elif len(company.company3) > 0 \
                                            and len(company.company4) == 0:
                                            # 		               print(company.company3)
                                            driver.find_element_by_id(company.company3[0]).send_keys(
                                                adid_4.m_textCtrl11.GetValue())
                                            input_history.append("会社名")

                                        elif len(company.company3) == 0 \
                                            and len(company.company4) > 0:
                                            # 		               print(company.company4)
                                            driver.find_element_by_id(company.company4[0]).send_keys(
                                                adid_4.m_textCtrl11.GetValue())
                                            input_history.append("会社名")

                                        elif len(company.company3) > 0 \
                                            and len(company.company4) > 0:
                                            driver.find_element_by_id(company.company3[0]).send_keys(
                                                adid_4.m_textCtrl11.GetValue())
                                            input_history.append("会社名")

# 「company.company1」又は「company.company2」内のどちらにもテキスト要素が無い場合、「list_2（name値）」内の要素と一致するかを確認
                                    elif len(company.company1) == 0 \
                                        and len(company.company2) == 0:
                                        print("「company1」及び「company2」内のどちらにもテキスト要素が無い場合、\
                        「list_2（name値）」内の要素と一致するかを確認")

                                        if len(company.company5) > 0 \
                                            and len(company.company6) == 0:
                                            driver.find_element_by_name(company.company5[0]).send_keys(
                                                adid_4.m_textCtrl11.GetValue() + "　")
                                            input_history.append("会社名")

                                        elif len(company.company5) == 0 \
                                            and len(company.company6) > 0:
                                            driver.find_element_by_name(company.company6[0]).send_keys(
                                                adid_4.m_textCtrl11.GetValue() + "　")
                                            input_history.append("会社名")

# その他（要素にclass値が与えられている）
                                        elif len(company.company7) > 0 \
                                            and len(company.company8) == 0:
                                            driver.find_element_by_class_name(company.company7[0]).send_keys(
                                                adid_4.m_textCtrl11.GetValue() + "　")
                                            input_history.append("会社名")

                                        elif len(company.company7) == 0 \
                                            and len(company.company8) > 0:
                                            driver.find_element_by_class_name(company.company8[0]).send_keys(
                                                adid_4.m_textCtrl11.GetValue() + "　")
                                            input_history.append("会社名")


                                    elif company.company1 == [] \
                                        and company.company2 == []:
                                        input_history.append("会社名入力欄なし")

# （Googleフォーム）
# <input type="text" class="whsOnd zHQkBf" jsname="YPqjbf" autocomplete="off" tabindex="0" aria-labelledby="i1" aria-describedby="i2 i3" required="" dir="auto" data-initial-dir="auto" data-initial-value="">
# ※「class="quantumWizTextinputPaperinputInput exportInput"」は現在使えないので注意！！（2022.03.02）
                                    # if not len([i for i in input_tag.list_2c if "zHQkBf" in i]) == 0:
                                    #     import google_form
                                    #     importlib.reload(google_form)
                                    #     if google_form.index_company == [0]:
                                    #         driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
                                    #             0].clear()
                                    #         driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
                                    #             0].send_keys(adid_4.m_textCtrl11.GetValue())
                                    #         input_history.append("会社名")
                                    #     elif google_form.index_company == []:
                                    #         pass

#                                except:
#                                    pass

# リストインデックスに関するエラー回避
                                except Exception as e:
                                    print(e)


# 会社名フリガナ
                                import furigana
                                importlib.reload(furigana)

                                try:

# 「furigana.comp_furi1」又は「furigana.comp_furi2」のどちらかに含まれる場合は以下のコーディングを実行
                                    if not len(furigana.comp_furi1) == 0 \
                                            or not len(furigana.comp_furi2) == 0:
                                        print(
                                        "「furigana.comp_furi1」又は「furigana.comp_furi2」のどちらかに含まれる場合は以下のコーディングを実行")

                                        if len(furigana.comp_furi3) > 0 \
                                                and len(furigana.comp_furi4) == 0:
                                            driver.find_element_by_name(
                                                furigana.comp_furi3[0]).clear()
                                            driver.find_element_by_name(furigana.comp_furi3[0]).send_keys(
                                                adid_4.m_textCtrl13.GetValue())
                                            input_history.append("会社名カナ")

                                        elif len(furigana.comp_furi3) == 0 \
                                                and len(furigana.comp_furi4) > 0:
                                            driver.find_element_by_name(
                                                furigana.comp_furi4[0]).clear()
                                            driver.find_element_by_name(furigana.comp_furi4[0]).send_keys(
                                                adid_4.m_textCtrl13.GetValue())
                                            input_history.append("会社名カナ")

# リストインデックスに関するエラー回避
                                except Exception as e:
                                    print(e)


# フルネーム（氏名）に関するテキスト要素があるか否かの確認
                                import full_name
                                importlib.reload(full_name)

# 「full_name.full_name1」又は「full_name.full_name2」のどちらかに含まれる場合は以下のコーディングを実行
# 		        try:
                                if not len(full_name.full_name1) == 0 \
                                    or not len(full_name.full_name2) == 0:
                                  print(
                                    "「full_name.full_name1」又は「full_name.full_name2」内のどちらかに要素が含まれることを確認")

# フルネーム（姓＋名）
                                  if len(full_name.full_name3) > 0 \
                                    and len(full_name.full_name4) == 0:
                                    print(
                                        "フルネーム（姓＋名）：リスト「seimei_value_inc」内の要素あり")
                                    elemName0 = driver.find_element_by_name(
                                        full_name.full_name3[0])
                                    elemName1 = driver.find_element_by_name(
                                        full_name.full_name3[1])

# 要素が３つ以上存在する（お問い合わせフォームが用途によって切り替えられる場合）
                                    try:
                                        if len(full_name.full_name3) == 3:
                                            print(
                                                "要素が３つ存在する")
                                            elemName2 = driver.find_element_by_name(
                                                full_name.full_name4[0])
                                            elemName3 = driver.find_element_by_name(
                                                full_name.full_name4[1])
                                            elemName4 = driver.find_element_by_name(
                                                full_name.full_name3[2])
                                            for j in range(1, len(full_name.full_name3)+1):
                                                if elemName0.is_displayed() is False \
                                                        or elemName1.is_displayed() is False \
                                                        or elemName2.is_displayed() is False \
                                                    or elemName3.is_displayed() is False \
                                                        or elemName4.is_displayed() is False:
                                                    print(
                                                        full_name.full_name3[j-1])
                                                    if "1" in full_name.full_name3[j-1]:
                                                        driver.find_element_by_name(full_name.full_name3[j-1]).send_keys(adid_4.m_textCtrl16.GetValue()
                                                                                                                            + adid_4.m_textCtrl17.GetValue())
                                                        input_history.append(
                                                            "氏名")

                                                    elif "2" in full_name.full_name3[j-1]:
                                                        driver.find_element_by_name(full_name.full_name3[j-1]).send_keys(adid_4.m_textCtrl16.GetValue()
                                                                                                                            + adid_4.m_textCtrl17.GetValue())
                                                        input_history.append(
                                                            "氏名")

                                                    elif "3" in full_name.full_name3[j-1]:
                                                        driver.find_element_by_name(full_name.full_name3[j-1]).send_keys(adid_4.m_textCtrl16.GetValue()
                                                                                                                            + adid_4.m_textCtrl17.GetValue())
                                                        input_history.append(
                                                            "氏名")

                                        elif len(full_name.full_name3) == 2:
                                            print("要素が２つ存在する")
                                            elemName0.send_keys(
                                                adid_4.m_textCtrl16.GetValue())
                                            input_history.append("姓")
                                            print(full_name.full_name3[0])
                                            elemName1.send_keys(
                                                adid_4.m_textCtrl17.GetValue())
                                            input_history.append("名")
                                            print(full_name.full_name3[1])

                                        elif len(full_name.full_name3) == 4:
                                            print("要素が４つ存在する")
                                            elemName0.send_keys(
                                                adid_4.m_textCtrl16.GetValue())
                                            input_history.append("姓")
                                            print(full_name.full_name3[0])
                                            elemName1.send_keys(
                                                adid_4.m_textCtrl17.GetValue())
                                            input_history.append("名")
                                            print(full_name.full_name3[1])


                                    except Exception as e:
                                        print(e)

# 		            elif len(full_name.full_name1) == 0 \
#                         and len(full_name.full_name2) > 0:

                                  elif len(full_name.full_name3) == 0 \
                                    and len(full_name.full_name4) > 0:
                                    print(len(full_name.full_name3))
                                    print(len(full_name.full_name4))
                                    print(
                                        "フルネーム（姓＋名）：リスト「seimei_value_mat」内の要素あり")
                                    elemName2 = driver.find_element_by_name(
                                        full_name.full_name4[0])

# 要素が３つ以上存在する
                                    try:
                                        if len(full_name.full_name4) == 1:
                                            print("要素が１つしかない")
                                            elemName2.send_keys(
                                                adid_4.m_textCtrl15.GetValue())
                                            input_history.append("氏名")
                                        elif len(full_name.full_name4) == 2:
                                            if len(full_name.full_name8) == 1:
                                                elemName2.send_keys(
                                                adid_4.m_textCtrl15.GetValue())
                                                input_history.append("氏名")
                                                print(str(full_name.full_name8)
                                                 + "が存在するので「姓 + 名」ではない")
                                            else:
                                                print("要素が２つ存在するので「姓 + 名」")
                                                elemName3 = driver.find_element_by_name(
                                                    full_name.full_name4[1])
                                                elemName2.send_keys(
                                                    adid_4.m_textCtrl16.GetValue())
                                                input_history.append("姓")
                                                print(full_name.full_name4[0])
                                                elemName3.send_keys(
                                                    adid_4.m_textCtrl17.GetValue())
                                                input_history.append("名")
                                                print(full_name.full_name4[1])

# 操作できない要素の回避
                                    except Exception as e:
                                        print(e)

# フルネーム（通常パターン）
                                  elif len(full_name.full_name5) > 0 \
                                            and len(full_name.full_name6) == 0:
                                        print("フルネーム（通常パターン）のid値と一致するかを確認")
                                        driver.find_element_by_id(
                                            full_name.full_name5[0]).clear()
                                        driver.find_element_by_id(full_name.full_name5[0]).send_keys(
                                            adid_4.m_textCtrl15.GetValue())
                                        input_history.append("氏名")
                                        print(full_name.full_name5)

                                  elif len(full_name.full_name5) == 0 \
                                            and len(full_name.full_name6) > 0:
                                        driver.find_element_by_id(
                                            full_name.full_name6[0]).clear()
                                        driver.find_element_by_id(full_name.full_name6[0]).send_keys(
                                            adid_4.m_textCtrl15.GetValue())
                                        input_history.append("氏名")
                                        print(full_name.full_name6)


# 「list_2d（id値）」内の要素と一致しなかった場合、「list_2（name値）」内の要素と一致するかを確認
                                  elif len(full_name.full_name5) == 0 \
                                    and len(full_name.full_name6) == 0:
                                    print("フルネーム（通常パターン）：id値の要素が無いため、name値の要素と一致するかを確認")

                                    if not len(full_name.full_name7) == 0 \
                                        and not len(full_name.full_name8) == 0:
                                        print("フルネーム値（full_name7）：" + str(full_name.full_name7))
                                        print("フルネーム値（full_name8）：" + str(full_name.full_name8))
                                        driver.find_element_by_name(
                                            full_name.full_name7[0]).clear()
                                        driver.find_element_by_name(
                                            full_name.full_name7[0]).send_keys(
                                            adid_4.m_textCtrl15.GetValue())
                                        input_history.append("氏名")
                                        print(full_name.full_name7)

                                    elif len(full_name.full_name7) > 0 \
                                        and len(full_name.full_name8) == 0:
                                        driver.find_element_by_name(
                                            full_name.full_name7[0]).clear()
                                        driver.find_element_by_name(full_name.full_name7[0]).send_keys(
                                            adid_4.m_textCtrl15.GetValue())
                                        input_history.append("氏名")
                                        print(full_name.full_name7)

                                    elif len(full_name.full_name7) == 0 \
                                        and len(full_name.full_name8) > 0:
                                        driver.find_element_by_name(
                                            full_name.full_name8[0]).clear()
                                        driver.find_element_by_name(full_name.full_name8[0]).send_keys(
                                            adid_4.m_textCtrl15.GetValue())
                                        input_history.append("氏名")
                                        print(full_name.full_name8)

# （特殊パターン：list_2の要素ではなくlist_2dに一致する）
                                    elif len(full_name.full_name7) == 0 \
                                        and len(full_name.full_name8) == 0:
                                        print("フルネーム（通常パターン）：「full_name.full_name7」及び「full_name.full_name8」内のどちらにも要素が無かった場合 \
                           「list_2d（id値）」内の要素と一致するかを確認")

                                        if len(full_name.full_name9) > 0 \
                                            and len(full_name.full_name10) == 0:
                                            driver.find_element_by_id(
                                                full_name.full_name9[0]).clear()
                                            driver.find_element_by_id(full_name.full_name9[0]).send_keys(
                                                adid_4.m_textCtrl15.GetValue())
                                            input_history.append("氏名")
                                            print(full_name.full_name9)

                                        elif len(full_name.full_name9) == 0 \
                                            and len(full_name.full_name10) > 0:
                                            driver.find_element_by_id(
                                                full_name.full_name10[0]).clear()
                                            driver.find_element_by_id(full_name.full_name10[0]).send_keys(
                                                adid_4.m_textCtrl15.GetValue())
                                            input_history.append("氏名")
                                            print(full_name.full_name10)


# （特殊パターン：list_2dの要素ではなくlist_2cに一致する）
                                        elif len(full_name.full_name9) == 0 \
                                            and len(full_name.full_name10) == 0:
                                            print("フルネーム（通常パターン）：「full_name.full_name9」及び「full_name.full_name10」内のどちらにも要素が無かった場合 \
                             「list_2c（class値）」内の要素と一致するかを確認")

                                            if len(full_name.full_name11) > 0 \
                                                and len(full_name.full_name12) == 0:
                                                driver.find_elements_by_class_name(
                                                    full_name.full_name11[0])[0].clear()
                                                driver.find_elements_by_class_name(full_name.full_name11[0])[
                                                    0].send_keys(adid_4.m_textCtrl15.GetValue())
                                                input_history.append("氏名")
                                                print(
                                                    full_name.full_name11)

                                            elif len(full_name.full_name11) == 0 \
                                                and len(full_name.full_name12) > 0:
                                                driver.find_elements_by_class_name(
                                                    full_name.full_name12[0])[0].clear()
                                                driver.find_elements_by_class_name(full_name.full_name12[0])[
                                                    0].send_keys(adid_4.m_textCtrl15.GetValue())
                                                input_history.append("氏名")
                                                print(
                                                    full_name.full_name12)

# フルネーム（通常パターン）
# 「full_name.full_name1」且つ「full_name.full_name2」内のどちらにも要素が無かった場合
# 「list_2d（id値）」内の要素と一致するかを確認
                                elif len(full_name.full_name1) == 0 \
                                        and len(full_name.full_name2) == 0:
                                    print("フルネーム（通常パターン）「full_name.full_name1」又は「full_name.full_name2」内のどちらにも要素が無かった場合 \
                       「list_2d（id値）」内の要素と一致するかを確認")

                                    if len(full_name.full_name5) > 0 \
                                            and len(full_name.full_name6) == 0:
                                        driver.find_element_by_id(
                                            full_name.full_name5[0]).clear()
                                        driver.find_element_by_id(full_name.full_name5[0]).send_keys(
                                            adid_4.m_textCtrl15.GetValue())
                                        input_history.append("氏名")
                                        print(full_name.full_name5)

                                    elif len(full_name.full_name5) == 0 \
                                            and len(full_name.full_name6) > 0:
                                        driver.find_element_by_id(
                                            full_name.full_name6[0]).clear()
                                        driver.find_element_by_id(full_name.full_name6[0]).send_keys(
                                            adid_4.m_textCtrl15.GetValue())
                                        input_history.append("氏名")
                                        print(full_name.full_name6)


# 「list_2d（id値）」内の要素と一致しなかった場合、「list_2（name値）」内の要素と一致するかを確認
                                    elif len(full_name.full_name5) == 0 \
                                            and len(full_name.full_name6) == 0:
                                        print("フルネーム（通常パターン）：「full_name.full_name5」及び「full_name.full_name6」内のどちらにも要素が無かった場合 \
                         「list_2（name値）」内の要素と一致するかを確認")

                                        if len(full_name.full_name7) > 0 \
                                                and len(full_name.full_name8) == 0:
                                            driver.find_element_by_name(
                                                full_name.full_name7[0]).clear()
                                            driver.find_element_by_name(full_name.full_name7[0]).send_keys(
                                                adid_4.m_textCtrl15.GetValue())
                                            input_history.append("氏名")
                                            print(full_name.full_name7)

                                        elif len(full_name.full_name7) == 0 \
                                                and len(full_name.full_name8) > 0:
                                            driver.find_element_by_name(
                                                full_name.full_name8[0]).clear()
                                            driver.find_element_by_name(full_name.full_name8[0]).send_keys(
                                                adid_4.m_textCtrl15.GetValue())
                                            input_history.append("氏名")
                                            print(full_name.full_name8)


# （特殊パターン：list_2の要素ではなくlist_2dに一致する）
                                        elif len(full_name.full_name7) == 0 \
                                                and len(full_name.full_name8) == 0:
                                            print("フルネーム（通常パターン）：「full_name.full_name7」及び「full_name.full_name8」内のどちらにも要素が無かった場合 \
                           「list_2d（id値）」内の要素と一致するかを確認")

                                            if len(full_name.full_name9) > 0 \
                                                    and len(full_name.full_name10) == 0:
                                                driver.find_element_by_id(
                                                    full_name.full_name9[0]).clear()
                                                driver.find_element_by_id(full_name.full_name9[0]).send_keys(
                                                    adid_4.m_textCtrl15.GetValue())
                                                input_history.append("氏名")
                                                print(full_name.full_name9)

                                            elif len(full_name.full_name9) == 0 \
                                                    and len(full_name.full_name10) > 0:
                                                driver.find_element_by_id(
                                                    full_name.full_name10[0]).clear()
                                                driver.find_element_by_id(full_name.full_name10[0]).send_keys(
                                                    adid_4.m_textCtrl15.GetValue())
                                                input_history.append("氏名")
                                                print(full_name.full_name10)


# （特殊パターン：list_2dの要素ではなくlist_2cに一致する）
                                            elif len(full_name.full_name9) == 0 \
                                                    and len(full_name.full_name10) == 0:
                                                print("フルネーム（通常パターン）：「full_name.full_name9」及び「full_name.full_name10」内のどちらにも要素が無かった場合 \
                             「list_2c（class値）」内の要素と一致するかを確認")

                                                if len(full_name.full_name11) > 0 \
                                                        and len(full_name.full_name12) == 0:
                                                    driver.find_elements_by_class_name(
                                                        full_name.full_name11[0])[0].clear()
                                                    driver.find_elements_by_class_name(full_name.full_name11[0])[
                                                        0].send_keys(adid_4.m_textCtrl15.GetValue())
                                                    input_history.append("氏名")
                                                    print(
                                                        full_name.full_name11)

                                                elif len(full_name.full_name11) == 0 \
                                                        and len(full_name.full_name12) > 0:
                                                    driver.find_elements_by_class_name(
                                                        full_name.full_name12[0])[0].clear()
                                                    driver.find_elements_by_class_name(full_name.full_name12[0])[
                                                        0].send_keys(adid_4.m_textCtrl15.GetValue())
                                                    input_history.append("氏名")
                                                    print(
                                                        full_name.full_name12)

# （Googleフォーム）
# <input type="text" class="whsOnd zHQkBf" jsname="YPqjbf" autocomplete="off" tabindex="0" aria-labelledby="i1" aria-describedby="i2 i3" required="" dir="auto" data-initial-dir="auto" data-initial-value="">
# ※「class="quantumWizTextinputPaperinputInput exportInput"」は現在使えないので注意！！（2022.03.02）
                                # if not len([i for i in input_tag.list_2c if "zHQkBf" in i]) == 0:
                                #     import google_form
                                #     importlib.reload(google_form)
                                #     if google_form.index_name == [1]:
                                #         driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
                                #             1].clear()
                                #         driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
                                #             1].send_keys(adid_4.m_textCtrl15.GetValue())
                                #         input_history.append("氏名")
                                #     elif google_form.index_name == [0]:
                                #         driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
                                #             0].clear()
                                #         driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
                                #             0].send_keys(adid_4.m_textCtrl15.GetValue())
                                #         input_history.append("氏名")
                                #     elif google_form.index_name == []:
                                #         pass

# リストインデックスに関するエラー回避
# 		        except Exception as e:
# 		          print(e)


# 「フルネームふりがな」に関するテキスト要素があるか否かの確認
# １．テキスト要素が存在する
                                try:
                                    if not len(furigana.full_name_furi1) == 0 \
                                        or not len(furigana.full_name_furi2) == 0:
                                        print("ふりがなテキスト要素が存在する")

# ふりがな（姓＋名）
                                        if len(furigana.seimei_furi1) > 0 \
                                                or len(furigana.seimei_furi2) > 0:
                                            print("ふりがな（姓＋名）要素数：" 
                                            + str(len(furigana.seimei_furi1))
                                            + str(len(furigana.seimei_furi2))
                                            )
                                            if len(furigana.seimei_furi1) == 2:
                                                elemName0 = driver.find_element_by_name(
                                                    furigana.seimei_furi1[0])
                                                elemName1 = driver.find_element_by_name(
                                                    furigana.seimei_furi1[1])
                                                elemName0.send_keys(
                                                    adid_4.m_textCtrl19.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl19.GetValue())
                                                print(
                                                    furigana.seimei_furi1[0])
                                                elemName1.send_keys(
                                                    adid_4.m_textCtrl20.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl20.GetValue())
                                                print(
                                                    furigana.seimei_furi1[1])

                                            elif len(furigana.seimei_furi2) == 2:
                                                elemName2 = driver.find_element_by_name(
                                                    furigana.seimei_furi2[0])
                                                elemName3 = driver.find_element_by_name(
                                                    furigana.seimei_furi2[1])
                                                elemName2.send_keys(
                                                    adid_4.m_textCtrl19.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl19.GetValue())
                                                print(
                                                    furigana.seimei_furi2[0])
                                                elemName3.send_keys(
                                                    adid_4.m_textCtrl20.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl20.GetValue())
                                                print(
                                                    furigana.seimei_furi2[1])
                                                    
                                            elif len(furigana.seimei_furi1) == 4:
                                                elemName4 = driver.find_element_by_name(
                                                    furigana.seimei_furi1[2])
                                                elemName5 = driver.find_element_by_name(
                                                    furigana.seimei_furi1[3])
                                                elemName4.send_keys(
                                                    adid_4.m_textCtrl19.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl19.GetValue())
                                                print(
                                                    furigana.seimei_furi1[0])
                                                elemName5.send_keys(
                                                    adid_4.m_textCtrl20.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl20.GetValue())
                                                print(
                                                    furigana.seimei_furi1[1])

                                            elif len(furigana.seimei_furi2) == 4:
                                                elemName6 = driver.find_element_by_name(
                                                    furigana.seimei_furi2[2])
                                                elemName7 = driver.find_element_by_name(
                                                    furigana.seimei_furi2[3])
                                                elemName6.send_keys(
                                                    adid_4.m_textCtrl19.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl19.GetValue())
                                                print(
                                                    furigana.seimei_furi2[0])
                                                elemName7.send_keys(
                                                    adid_4.m_textCtrl20.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl20.GetValue())
                                                print(
                                                    furigana.seimei_furi2[1])

# フルネームふりがな（通常パターン）
# 「furigana.seimei_furi1」及び「furigana.seimei_furi2」内のどちらにも要素が無かった場合
# 「list_2（name値）」内の要素と一致するかを確認
                                        elif len(furigana.seimei_furi1) == 0 \
                                            and len(furigana.seimei_furi2) == 0:
                                            print("フルネームふりがな（通常パターン）：「furigana.seimei_furi1」及び「furigana.seimei_furi2」内のどちらにも要素が無かった場合 \
                       「list_2（name値）」内の要素と一致するかを確認")

                                            if len(furigana.full_name_furi3) > 0 \
                                                and len(furigana.full_name_furi4) == 0:
                                                driver.find_element_by_name(
                                                    furigana.full_name_furi3[0]).clear()
                                                driver.find_element_by_name(furigana.full_name_furi3[0]).send_keys(
                                                    adid_4.m_textCtrl18.GetValue())
                                                input_history.append("氏名ふりがな")
                                                print(
                                                    furigana.full_name_furi3)

                                            elif len(furigana.full_name_furi3) == 0 \
                                                and len(furigana.full_name_furi4) > 0:
                                                driver.find_element_by_name(
                                                    furigana.full_name_furi4[0]).clear()
                                                driver.find_element_by_name(furigana.full_name_furi4[0]).send_keys(
                                                    adid_4.m_textCtrl18.GetValue())
                                                input_history.append("氏名ふりがな")
                                                print(
                                                    furigana.full_name_furi4)

# パターン追加（2023.02.15）
# ２．テキスト要素存在しない
                                    elif len(furigana.full_name_furi1) == 0 \
                                        or len(furigana.full_name_furi2) == 0:
                                        print("ふりがなテキスト要素が存在しない")

# ふりがな（姓＋名）
                                        if len(furigana.seimei_furi1) > 0 \
                                                or len(furigana.seimei_furi2) > 0:
                                            print("ふりがな（姓＋名）要素数：" 
                                            + str(len(furigana.seimei_furi1))
                                            + str(len(furigana.seimei_furi2))
                                            )
                                            if len(furigana.seimei_furi1) == 2:
                                                elemName0 = driver.find_element_by_name(
                                                    furigana.seimei_furi1[0])
                                                elemName1 = driver.find_element_by_name(
                                                    furigana.seimei_furi1[1])
                                                elemName0.send_keys(
                                                    adid_4.m_textCtrl19.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl19.GetValue())
                                                print(
                                                    furigana.seimei_furi1[0])
                                                elemName1.send_keys(
                                                    adid_4.m_textCtrl20.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl20.GetValue())
                                                print(
                                                    furigana.seimei_furi1[1])

                                            elif len(furigana.seimei_furi2) == 2:
                                                elemName2 = driver.find_element_by_name(
                                                    furigana.seimei_furi2[0])
                                                elemName3 = driver.find_element_by_name(
                                                    furigana.seimei_furi2[1])
                                                elemName2.send_keys(
                                                    adid_4.m_textCtrl19.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl19.GetValue())
                                                print(
                                                    furigana.seimei_furi2[0])
                                                elemName3.send_keys(
                                                    adid_4.m_textCtrl20.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl20.GetValue())
                                                print(
                                                    furigana.seimei_furi2[1])
                                                    
                                            elif len(furigana.seimei_furi1) == 4:
                                                elemName4 = driver.find_element_by_name(
                                                    furigana.seimei_furi1[2])
                                                elemName5 = driver.find_element_by_name(
                                                    furigana.seimei_furi1[3])
                                                elemName4.send_keys(
                                                    adid_4.m_textCtrl19.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl19.GetValue())
                                                print(
                                                    furigana.seimei_furi1[0])
                                                elemName5.send_keys(
                                                    adid_4.m_textCtrl20.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl20.GetValue())
                                                print(
                                                    furigana.seimei_furi1[1])

                                            elif len(furigana.seimei_furi2) == 4:
                                                elemName6 = driver.find_element_by_name(
                                                    furigana.seimei_furi2[2])
                                                elemName7 = driver.find_element_by_name(
                                                    furigana.seimei_furi2[3])
                                                elemName6.send_keys(
                                                    adid_4.m_textCtrl19.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl19.GetValue())
                                                print(
                                                    furigana.seimei_furi2[0])
                                                elemName7.send_keys(
                                                    adid_4.m_textCtrl20.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl20.GetValue())
                                                print(
                                                    furigana.seimei_furi2[1])

# フルネームふりがな（通常パターン）
# 「furigana.seimei_furi1」及び「furigana.seimei_furi2」内のどちらにも要素が無かった場合
# 「list_2（name値）」内の要素と一致するかを確認
                                        elif len(furigana.seimei_furi1) == 0 \
                                            and len(furigana.seimei_furi2) == 0:
                                            print("フルネームふりがな（通常パターン）：「furigana.seimei_furi1」及び「furigana.seimei_furi2」内のどちらにも要素が無かった場合 \
                       「list_2（name値）」内の要素と一致するかを確認")

                                            if len(furigana.full_name_furi3) > 0 \
                                                and len(furigana.full_name_furi4) == 0:
                                                driver.find_element_by_name(
                                                    furigana.full_name_furi3[0]).clear()
                                                driver.find_element_by_name(furigana.full_name_furi3[0]).send_keys(
                                                    adid_4.m_textCtrl18.GetValue())
                                                input_history.append("氏名ふりがな")
                                                print(
                                                    furigana.full_name_furi3)

                                            elif len(furigana.full_name_furi3) == 0 \
                                                and len(furigana.full_name_furi4) > 0:
                                                driver.find_element_by_name(
                                                    furigana.full_name_furi4[0]).clear()
                                                driver.find_element_by_name(furigana.full_name_furi4[0]).send_keys(
                                                    adid_4.m_textCtrl18.GetValue())
                                                input_history.append("氏名ふりがな")
                                                print(
                                                    furigana.full_name_furi4)

# リストインデックスに関するエラー回避
                                except Exception as e:
                                    print(e)


# 「フルネームカタカナ」に関するテキスト要素があるか否かの確認
# 「furigana.full_name1」又は「furigana.full_name2」のどちらかに含まれる場合は以下のコーディングを実行
                                try:
                                    if not len(furigana.full_name_kata1) == 0 \
                                            or not len(furigana.full_name_kata2) == 0:
# カタカナ（姓＋名）
                                        if len(furigana.seimei_kata1) > 0 \
                                                and len(furigana.seimei_kata2) == 0:
                                            print(
                                                len(furigana.seimei_kata1))
                                            print(
                                                "カタカナ（姓＋名）：リスト「seimei_katakana_value_inc」内の要素あり")
                                            elemName0 = driver.find_element_by_name(
                                                furigana.seimei_kata1[0])
                                            elemName1 = driver.find_element_by_name(
                                                furigana.seimei_kata1[1])

                                            if len(furigana.seimei_kata1) == 2:
                                                elemName0.send_keys(
                                                    adid_4.m_textCtrl22.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl22.GetValue())
                                                print(
                                                    furigana.seimei_kata1[0])
                                                elemName1.send_keys(
                                                    adid_4.m_textCtrl23.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl23.GetValue())
                                                print(
                                                    furigana.seimei_kata1[1])

                                            elif len(furigana.seimei_kata1) == 1:
                                                elemName0.send_keys(
                                                    adid_4.m_textCtrl22.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl22.GetValue())
                                                print(
                                                    furigana.seimei_kata1[0])
                                                elemName0.send_keys(
                                                    "　" + adid_4.m_textCtrl23.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl23.GetValue())
                                                print(
                                                    furigana.seimei_kata1[0])

                                        elif len(furigana.seimei_kata1) == 0 \
                                                and len(furigana.seimei_kata2) > 0:
                                            print(
                                                len(furigana.seimei_kata2))

                                            if len(furigana.seimei_kata2) == 2:
                                                elemName2 = driver.find_element_by_name(
                                                    furigana.seimei_kata2[0])
                                                elemName3 = driver.find_element_by_name(
                                                    furigana.seimei_kata2[1])
                                                print(
                                                    "カタカナ（姓＋名）：リスト「seimei_katakana_value_mat」内の要素が２個")
                                                elemName2.send_keys(
                                                    adid_4.m_textCtrl22.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl22.GetValue())
                                                print(
                                                    furigana.seimei_kata2[0])
                                                elemName3.send_keys(
                                                    adid_4.m_textCtrl23.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl23.GetValue())
                                                print(
                                                    furigana.seimei_kata2[1])

                                            elif len(furigana.seimei_kata2) == 1:
                                                elemName2 = driver.find_element_by_name(
                                                    furigana.seimei_kata2[0])
                                                elemName2.clear()
                                                print(
                                                    "カタカナ（姓＋名）：リスト「seimei_katakana_value_mat」内の要素が１個")
                                                elemName2.send_keys(
                                                    adid_4.m_textCtrl22.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl22.GetValue())
                                                print(
                                                    furigana.seimei_kata2[0])
                                                elemName2.send_keys(
                                                    "　" + adid_4.m_textCtrl23.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl23.GetValue())
                                                print(
                                                    furigana.seimei_kata2[0])

                                        elif len(furigana.seimei_kata1) > 0 \
                                                and len(furigana.seimei_kata2) > 0:
                                            print(
                                                len(furigana.seimei_kata1))
                                            print(
                                                "カタカナ（姓＋名）：リスト「seimei_katakana_value_inc」内の要素あり")
                                            elemName0 = driver.find_element_by_name(
                                                furigana.seimei_kata1[0])
                                            elemName1 = driver.find_element_by_name(
                                                furigana.seimei_kata1[1])

                                            if len(furigana.seimei_kata1) == 2:
                                                elemName0.send_keys(
                                                    adid_4.m_textCtrl22.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl22.GetValue())
                                                print(
                                                    furigana.seimei_kata1[0])
                                                elemName1.send_keys(
                                                    adid_4.m_textCtrl23.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl23.GetValue())
                                                print(
                                                    furigana.seimei_kata1[1])

                                            elif len(furigana.seimei_kata1) == 1:
                                                elemName0.send_keys(
                                                    adid_4.m_textCtrl22.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl22.GetValue())
                                                print(
                                                    furigana.seimei_kata1[0])
                                                elemName0.send_keys(
                                                    "　" + adid_4.m_textCtrl23.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl23.GetValue())
                                                print(
                                                    furigana.seimei_kata1[0])

# フルネームふりがな（通常パターン）
# 「furigana.seimei_kata1」及び「furigana.seimei_kata2」内のどちらにも要素が無かった場合
# 「list_2（name値）」内の要素と一致するかを確認
                                        elif len(furigana.seimei_kata1) == 0 \
                                                and len(furigana.seimei_kata2) == 0:
                                            print("フルネームふりがな（通常パターン）：「furigana.seimei_kata1」及び「furigana.seimei_kata2」内のどちらにも要素が無かった場合 \
                       「list_2（name値）」内の要素と一致するかを確認")
# 		        try:
                                            if len(furigana.full_name_kata3) > 0 \
                                                    and len(furigana.full_name_kata4) == 0:
                                                driver.find_element_by_name(
                                                    furigana.full_name_kata3[0]).clear()
                                                driver.find_element_by_name(furigana.full_name_kata3[0]).send_keys(
                                                    adid_4.m_textCtrl21.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl21.GetValue())
                                                print(
                                                    furigana.full_name_kata3)

                                            elif len(furigana.full_name_kata3) == 0 \
                                                    and len(furigana.full_name_kata4) > 0:
                                                driver.find_element_by_name(
                                                    furigana.full_name_kata4[0]).clear()
                                                driver.find_element_by_name(furigana.full_name_kata4[0]).send_keys(
                                                    adid_4.m_textCtrl21.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl21.GetValue())
                                                print(
                                                    furigana.full_name_kata4)

# 「furigana.full_name1」又は「furigana.full_name2」のどちらかにも無い
                                    elif len(furigana.full_name_kata1) == 0 \
                                            or len(furigana.full_name_kata2) == 0:
# カタカナ（姓＋名）
                                        if len(furigana.seimei_kata1) > 0 \
                                                and len(furigana.seimei_kata2) == 0:
                                            print(
                                                len(furigana.seimei_kata1))
                                            print(
                                                "カタカナ（姓＋名）：リスト「seimei_katakana_value_inc」内の要素あり")
                                            elemName0 = driver.find_element_by_name(
                                                furigana.seimei_kata1[0])
                                            elemName1 = driver.find_element_by_name(
                                                furigana.seimei_kata1[1])

                                            if len(furigana.seimei_kata1) == 2:
                                                elemName0.send_keys(
                                                    adid_4.m_textCtrl22.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl22.GetValue())
                                                print(
                                                    furigana.seimei_kata1[0])
                                                elemName1.send_keys(
                                                    adid_4.m_textCtrl23.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl23.GetValue())
                                                print(
                                                    furigana.seimei_kata1[1])

                                            elif len(furigana.seimei_kata1) == 1:
                                                elemName0.send_keys(
                                                    adid_4.m_textCtrl22.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl22.GetValue())
                                                print(
                                                    furigana.seimei_kata1[0])
                                                elemName0.send_keys(
                                                    "　" + adid_4.m_textCtrl23.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl23.GetValue())
                                                print(
                                                    furigana.seimei_kata1[0])

                                        elif len(furigana.seimei_kata1) == 0 \
                                                and len(furigana.seimei_kata2) > 0:
                                            print(
                                                len(furigana.seimei_kata2))

                                            if len(furigana.seimei_kata2) == 2:
                                                elemName2 = driver.find_element_by_name(
                                                    furigana.seimei_kata2[0])
                                                elemName3 = driver.find_element_by_name(
                                                    furigana.seimei_kata2[1])
                                                print(
                                                    "カタカナ（姓＋名）：リスト「seimei_katakana_value_mat」内の要素が２個")
                                                elemName2.send_keys(
                                                    adid_4.m_textCtrl22.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl22.GetValue())
                                                print(
                                                    furigana.seimei_kata2[0])
                                                elemName3.send_keys(
                                                    adid_4.m_textCtrl23.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl23.GetValue())
                                                print(
                                                    furigana.seimei_kata2[1])

                                            elif len(furigana.seimei_kata2) == 1:
                                                elemName2 = driver.find_element_by_name(
                                                    furigana.seimei_kata2[0])
                                                elemName2.clear()
                                                print(
                                                    "カタカナ（姓＋名）：リスト「seimei_katakana_value_mat」内の要素が１個")
                                                elemName2.send_keys(
                                                    adid_4.m_textCtrl22.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl22.GetValue())
                                                print(
                                                    furigana.seimei_kata2[0])
                                                elemName2.send_keys(
                                                    "　" + adid_4.m_textCtrl23.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl23.GetValue())
                                                print(
                                                    furigana.seimei_kata2[0])

                                        elif len(furigana.seimei_kata1) > 0 \
                                                and len(furigana.seimei_kata2) > 0:
                                            print(
                                                len(furigana.seimei_kata1))
                                            print(
                                                "カタカナ（姓＋名）：リスト「seimei_katakana_value_inc」内の要素あり")
                                            elemName0 = driver.find_element_by_name(
                                                furigana.seimei_kata1[0])
                                            elemName1 = driver.find_element_by_name(
                                                furigana.seimei_kata1[1])

                                            if len(furigana.seimei_kata1) == 2:
                                                elemName0.send_keys(
                                                    adid_4.m_textCtrl22.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl22.GetValue())
                                                print(
                                                    furigana.seimei_kata1[0])
                                                elemName1.send_keys(
                                                    adid_4.m_textCtrl23.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl23.GetValue())
                                                print(
                                                    furigana.seimei_kata1[1])

                                            elif len(furigana.seimei_kata1) == 1:
                                                elemName0.send_keys(
                                                    adid_4.m_textCtrl22.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl22.GetValue())
                                                print(
                                                    furigana.seimei_kata1[0])
                                                elemName0.send_keys(
                                                    "　" + adid_4.m_textCtrl23.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl23.GetValue())
                                                print(
                                                    furigana.seimei_kata1[0])

# フルネームふりがな（通常パターン）
# 「furigana.seimei_kata1」及び「furigana.seimei_kata2」内のどちらにも要素が無かった場合
# 「list_2（name値）」内の要素と一致するかを確認
                                        elif len(furigana.seimei_kata1) == 0 \
                                                and len(furigana.seimei_kata2) == 0:
                                            print("フルネームふりがな（通常パターン）：「furigana.seimei_kata1」及び「furigana.seimei_kata2」内のどちらにも要素が無かった場合 \
                       「list_2（name値）」内の要素と一致するかを確認")
# 		        try:
                                            if len(furigana.full_name_kata3) > 0 \
                                                    and len(furigana.full_name_kata4) == 0:
                                                driver.find_element_by_name(
                                                    furigana.full_name_kata3[0]).clear()
                                                driver.find_element_by_name(furigana.full_name_kata3[0]).send_keys(
                                                    adid_4.m_textCtrl21.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl21.GetValue())
                                                print(
                                                    furigana.full_name_kata3)

                                            elif len(furigana.full_name_kata3) == 0 \
                                                    and len(furigana.full_name_kata4) > 0:
                                                driver.find_element_by_name(
                                                    furigana.full_name_kata4[0]).clear()
                                                driver.find_element_by_name(furigana.full_name_kata4[0]).send_keys(
                                                    adid_4.m_textCtrl21.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl21.GetValue())
                                                print(
                                                    furigana.full_name_kata4)

# リストインデックスに関するエラー回避
                                except Exception as e:
                                    print(e)


# 郵便番号・住所の入力
                                import location
                                importlib.reload(location)

# 重複した要素を削除し、新たなリストを生成
                                try:
                                    if len(location.address_name) > 1:
                                        location.address_name = list(
                                            dict.fromkeys(location.address_name))
                                        print(location.address_name)

                                    element8 = soup.find_all(
                                        "input", type="email")
                                    print(element8)

# 「list_2」にキーワード"mail"が含まれる場合、指定キーワードを除く
                                    if "mail" in element8:
                                        location.address_name = [
                                            i for i in location.address_name if "mail" not in i]
                                        print("指定キーワードを除いて再リスト化：" +
                                              str(location.address_name))

# 		         if len([i for i in list_2 if "mail" in i]) == 0:
# 		           location.address_name = [i for i in location.address_name if "address" not in i]
# 		           print("location.address_name（name値）:" + str(location.address_name))

                                    # if len(location.address_name) == 1:
                                    #     print(
                                    #         "「location.address_name」が１個存在します")
                                    # elif len(location.address_name) > 2:
                                    #     print(
                                    #         "「location.address_name」が複数個存在します")
                                    # elif len(location.address_name) == 0:
                                    #     print(
                                    #         "「location.address_name」は存在しません")

# 上記の値抽出リストを元に入力パターンを分ける
                                    print("location.SELECT_1に「東京都」が含まれない、"
                                    "又はlocation.SELECT_2に「都道府県」が含まれるか否かの確認")
                                    if not len([i for i in location.SELECT_1 if adid_4.m_comboBox6.GetValue() in i]) == 0 \
                                            or len([i for i in location.SELECT_2 if "都道府県" in i]) > 0 \
                                            or len([i for i in location.SELECT_2 if adid_4.m_comboBox6.GetValue() in i]) > 0:

                                        if len([i for i in Get_tag_text.items_1 if "都道府県" in i]) > 0 \
                                                or not len(location.select_name) == 0:
                                            print("「都道府県」に関するテキスト要素が含まれている")

                                            if len(location.select_name) > 1:
                                                dropdown = driver.find_element_by_name(
                                                    location.select_name[len(location.select_name)-1])
                                                select = Select(dropdown)
                                                print("複数の都道府県選択要素から最後の１つ抽出：" + str(location.select_name[len(location.select_name)-1]))

                                            elif len(location.select_name) == 1:
                                                dropdown = driver.find_element_by_name(
                                                    location.select_name[0])
                                                select = Select(dropdown)
                                                print("都道府県選択要素１つのみ：" + str(location.select_name[0]))

# 都道府県番号での選択
                                            try:
                                              if len([i for i in location.SELECT_1 if adid_4.m_comboBox62.GetValue() in i]) > 0:
                                                pref_num = [
                                                    i for i in location.SELECT_1 if adid_4.m_comboBox62.GetValue() == i]
                                                print("設定された都道府県番号：" + str(pref_num))
                                                select.select_by_value(
                                                    pref_num[0])
                                                input_history.append(
                                                    pref_num[0])
                                                print("都道府県番号で選択済み：" +
                                                      str(len(pref_num[0])))
                                              elif len([i for i in location.SELECT_1 if adid_4.m_comboBox6.GetValue() in i]) > 0:
                                                pref_num = [
                                                    i for i in location.SELECT_1 if adid_4.m_comboBox6.GetValue() == i]
                                                print("設定された都道府県番号：" + str(pref_num))
                                                select.select_by_value(
                                                    pref_num[0])
                                                input_history.append(
                                                    pref_num[0])
                                                print("都道府県で選択済み：" +
                                                      str(len(pref_num[0])))

                                            except Exception as e:
                                                print(e)

# 仮コーディング
# 都道府県以降の「住所」に関するテキスト要素、且つ「list_2」に郵便番号（value値）が含まれているか否かの確認
                                            if len([i for i in Get_tag_text.list_1 if "住所" in i]) > 0 \
                                                    and len(location.post_value) > 0 \
                                                    or len([i for i in Get_tag_text.list_1 if "住所" in i]) == 0 \
                                                    and len(location.post_value) > 0:
                                                if len(location.post_value) == 1:
                                                    print(
                                                        "「list_2」に郵便番号に関する要素が１個含まれていることを確認")
                                                    driver.find_element_by_name(location.post_value[0]).send_keys(
                                                        adid_4.m_textCtrl28.GetValue() + adid_4.m_textCtrl29.GetValue())
                                                    input_history.append(
                                                        "郵便番号")

# 		                 print("「都道府県」に関するテキスト要素以外、且つ「list_2」に住所に関する要素が含まれているか否かの確認")
                                                    if len(location.build1) == 0 \
                                                            or len(location.build2) == 0:
                                                        print("建物名に関する値なし")
                                                        try:
                                                            if len(location.address_value1) == 2 \
                                                                    and len(location.address_value2) == 0:
                                                                print(
                                                                    "「市区町村名番地」と「建物名」を別々に入力する形式です")
                                                                print(
                                                                    "取得値：" + str(len(location.address_value1)))
# 		                         print(location.address_value2)

                                                                driver.find_element_by_name(
                                                                    location.address_value1[0]).clear()
                                                                driver.find_element_by_name(location.address_value1[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                      + adid_4.m_textCtrl31.GetValue())
                                                                input_history.append(
                                                                    "市区町村名番地")
                                                                driver.find_element_by_name(location.address_value1[1]).send_keys(
                                                                    adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "建物名")

                                                            elif len(location.address_value1) == 0 \
                                                                    and len(location.address_value2) == 2:
                                                                print(
                                                                    "「市区町村名番地」と「建物名」を別々に入力する形式です")
                                                                print(
                                                                    "取得値：" + str(len(location.address_value2)))
# 		                           print(location.address_value1)

                                                                driver.find_element_by_name(
                                                                    location.address_value2[0]).clear()
                                                                driver.find_element_by_name(location.address_value2[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                      + adid_4.m_textCtrl31.GetValue())
                                                                input_history.append(
                                                                    "市区町村名番地")
                                                                driver.find_element_by_name(location.address_value2[1]).send_keys(
                                                                    adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "建物名")

                                                            elif len(location.address_value1) > 0 \
                                                                    and len(location.address_value2) > 0 \
                                                                    and len(location.address_name) == 2:
                                                                print(
                                                                    "「市区町村名番地」と「建物名」を別々に入力する形式です")
                                                                print(
                                                                    "取得値：" + str(location.address_name))
                                                                driver.find_element_by_name(
                                                                    location.address_name[0]).clear()
                                                                driver.find_element_by_name(location.address_name[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                     + adid_4.m_textCtrl31.GetValue())
                                                                input_history.append(
                                                                    "市区町村名番地")
                                                                driver.find_element_by_name(location.address_name[1]).send_keys(
                                                                    adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "建物名")

                                                            elif len(location.address_value1) == 1 \
                                                                    and len(location.address_value2) == 0:
                                                                print(
                                                                    "入力形式が「市区町村名番地」になっている")
                                                                print(
                                                                    location.address_value1)
                                                                print(
                                                                    location.address_value2)
                                                                driver.find_element_by_name(
                                                                    location.address_value1[0]).clear()
                                                                driver.find_element_by_name(location.address_value1[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                      + adid_4.m_textCtrl31.GetValue()
                                                                                                                                      + adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "市区町村名番地")

                                                            elif len(location.address_value1) == 0 \
                                                                    and len(location.address_value2) == 1:
                                                                print(
                                                                    "入力形式が「市区町村名番地」になっている")
                                                                print(
                                                                    location.address_value1)
                                                                print(
                                                                    location.address_value2)
                                                                driver.find_element_by_name(
                                                                    location.address_value2[0]).clear()
                                                                driver.find_element_by_name(location.address_value2[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                      + adid_4.m_textCtrl31.GetValue()
                                                                                                                                      + adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "市区町村名番地")

                                                            elif len(location.address_value1) == 3 \
                                                                    and len(location.address_value2) == 0:
                                                                print(
                                                                    "「市区町村名」「番地」「建物名」を別々に入力する形式")
                                                                print(
                                                                    location.address_value1)
                                                                print(
                                                                    location.address_value2)
                                                                driver.find_element_by_name(
                                                                    location.address_value1[0]).clear()
                                                                driver.find_element_by_name(location.address_value1[0]).send_keys(
                                                                    adid_4.m_textCtrl30.GetValue())
                                                                input_history.append(
                                                                    "市区町村名")

                                                                driver.find_element_by_name(location.address_value1[1]).send_keys(
                                                                    adid_4.m_textCtrl31.GetValue())
                                                                input_history.append(
                                                                    "番地")

                                                                driver.find_element_by_name(location.address_value1[2]).send_keys(
                                                                    adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "建物名")

                                                            elif len(location.address_value1) == 0 \
                                                                    and len(location.address_value2) == 3:
                                                                print(
                                                                    "「市区町村名」「番地」「建物名」を別々に入力する形式")
                                                                print(
                                                                    location.address_value1)
                                                                print(
                                                                    location.address_value2)
                                                                driver.find_element_by_name(
                                                                    location.address_value2[0]).clear()
                                                                driver.find_element_by_name(location.address_value2[0]).send_keys(
                                                                    adid_4.m_textCtrl30.GetValue())
                                                                input_history.append(
                                                                    "市区町村名")

                                                                driver.find_element_by_name(location.address_value2[1]).send_keys(
                                                                    adid_4.m_textCtrl31.GetValue())
                                                                input_history.append(
                                                                    "番地")

                                                                driver.find_element_by_name(location.address_value2[2]).send_keys(
                                                                    adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "建物名")

                                                        except Exception as e:
                                                            print(e)

                                                    elif not len(location.build1) == 0 \
                                                            or not len(location.build2) == 0:
                                                        print("建物名に関する値あり")
                                                        try:
                                                            if len(location.address_value1) == 2 \
                                                                    and len(location.address_value2) == 0:
                                                                print(
                                                                    "「市区町村名番地」と「建物名」を別々に入力する形式です")
                                                                print(
                                                                    "取得値：" + str(len(location.address_value1)))
# 		                         print(location.address_value2)

                                                                driver.find_element_by_name(
                                                                    location.address_value1[0]).clear()
                                                                driver.find_element_by_name(location.address_value1[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                      + adid_4.m_textCtrl31.GetValue())
                                                                input_history.append(
                                                                    "市区町村名番地")
                                                                driver.find_element_by_name(location.address_value1[1]).send_keys(
                                                                    adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "建物名")

                                                            elif len(location.address_value1) == 0 \
                                                                    and len(location.address_value2) == 2:
                                                                print(
                                                                    "「市区町村名番地」と「建物名」を別々に入力する形式です")
                                                                print(
                                                                    "取得値：" + str(len(location.address_value2)))
# 		                           print(location.address_value1)

                                                                driver.find_element_by_name(
                                                                    location.address_value2[0]).clear()
                                                                driver.find_element_by_name(location.address_value2[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                      + adid_4.m_textCtrl31.GetValue())
                                                                input_history.append(
                                                                    "市区町村名番地")
                                                                driver.find_element_by_name(location.address_value2[1]).send_keys(
                                                                    adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "建物名")

                                                            elif len(location.address_value1) > 0 \
                                                                    and len(location.address_value2) > 0 \
                                                                    and len(location.address_name) == 2:
                                                                print(
                                                                    "「市区町村名番地」と「建物名」を別々に入力する形式です")
                                                                print(
                                                                    "取得値：" + str(location.address_name))
                                                                driver.find_element_by_name(
                                                                    location.address_name[0]).clear()
                                                                driver.find_element_by_name(location.address_name[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                     + adid_4.m_textCtrl31.GetValue())
                                                                input_history.append(
                                                                    "市区町村名番地")
                                                                driver.find_element_by_name(location.address_name[1]).send_keys(
                                                                    adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "建物名")

                                                            elif len(location.address_value1) == 1 \
                                                                    and len(location.address_value2) == 0:
                                                                print(
                                                                    "入力形式が「市区町村名番地」になっている")
                                                                print(
                                                                    location.address_value1)
                                                                print(
                                                                    location.address_value2)
                                                                driver.find_element_by_name(
                                                                    location.address_value1[0]).clear()
                                                                driver.find_element_by_name(location.address_value1[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                      + adid_4.m_textCtrl31.GetValue()
                                                                                                                                      + adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "市区町村名番地")

                                                            elif len(location.address_value1) == 0 \
                                                                    and len(location.address_value2) == 1:
                                                                print(
                                                                    "入力形式が「市区町村名番地」になっている")
                                                                print(
                                                                    location.address_value1)
                                                                print(
                                                                    location.address_value2)
                                                                driver.find_element_by_name(
                                                                    location.address_value2[0]).clear()
                                                                driver.find_element_by_name(location.address_value2[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                      + adid_4.m_textCtrl31.GetValue()
                                                                                                                                      + adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "市区町村名番地")

                                                            elif len(location.address_value1) == 3 \
                                                                    and len(location.address_value2) == 0:
                                                                print(
                                                                    "「市区町村名」「番地」「建物名」を別々に入力する形式")
                                                                print(
                                                                    location.address_value1)
                                                                print(
                                                                    location.address_value2)
                                                                driver.find_element_by_name(
                                                                    location.address_value1[0]).clear()
                                                                driver.find_element_by_name(location.address_value1[0]).send_keys(
                                                                    adid_4.m_textCtrl30.GetValue())
                                                                input_history.append(
                                                                    "市区町村名")

                                                                driver.find_element_by_name(location.address_value1[1]).send_keys(
                                                                    adid_4.m_textCtrl31.GetValue())
                                                                input_history.append(
                                                                    "番地")

                                                                driver.find_element_by_name(location.address_value1[2]).send_keys(
                                                                    adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "建物名")

                                                            elif len(location.address_value1) == 0 \
                                                                    and len(location.address_value2) == 3:
                                                                print(
                                                                    "「市区町村名」「番地」「建物名」を別々に入力する形式")
                                                                print(
                                                                    location.address_value1)
                                                                print(
                                                                    location.address_value2)
                                                                driver.find_element_by_name(
                                                                    location.address_value2[0]).clear()
                                                                driver.find_element_by_name(location.address_value2[0]).send_keys(
                                                                    adid_4.m_textCtrl30.GetValue())
                                                                input_history.append(
                                                                    "市区町村名")

                                                                driver.find_element_by_name(location.address_value2[1]).send_keys(
                                                                    adid_4.m_textCtrl31.GetValue())
                                                                input_history.append(
                                                                    "番地")

                                                                driver.find_element_by_name(location.address_value2[2]).send_keys(
                                                                    adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "建物名")

                                                        except Exception as e:
                                                            print(e)

                                                elif len(location.post_value) == 2:
                                                    print(
                                                        "「list_2」に郵便番号に関する要素が２個含まれていることを確認")
                                                    driver.find_element_by_name(location.post_value[0]).send_keys(
                                                        adid_4.m_textCtrl28.GetValue())
                                                    input_history.append(
                                                        "郵便番号１")
                                                    driver.find_element_by_name(location.post_value[1]).send_keys(
                                                        adid_4.m_textCtrl29.GetValue())
                                                    input_history.append(
                                                        "郵便番号２")

# 		                 print("「都道府県」に関するテキスト要素以外、且つ「list_2」に住所に関する要素が含まれているか否かの確認")
                                                    if len(location.build1) == 0 \
                                                            or len(location.build2) == 0:
                                                        print("建物名に関する値なし")
                                                        try:
                                                            if len(location.address_value1) == 2 \
                                                                    and len(location.address_value2) == 0:
                                                                print(
                                                                    "「市区町村名番地」と「建物名」を別々に入力する形式です")
                                                                print(
                                                                    "取得値：" + str(len(location.address_value1)))
# 		                         print(location.address_value2)

                                                                driver.find_element_by_name(
                                                                    location.address_value1[0]).clear()
                                                                driver.find_element_by_name(location.address_value1[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                      + adid_4.m_textCtrl31.GetValue())
                                                                input_history.append(
                                                                    "市区町村名番地")
                                                                driver.find_element_by_name(location.address_value1[1]).send_keys(
                                                                    adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "建物名")

                                                            elif len(location.address_value1) == 2 \
                                                                    and len(location.address_value2) == 2:
                                                                print(
                                                                    "「市区町村名番地」と「建物名」を別々に入力する形式です")
                                                                print(
                                                                    "取得値：" + str(len(location.address_value1)))
                                                                driver.find_element_by_name(
                                                                    location.address_value1[0]).clear()
                                                                driver.find_element_by_name(
                                                                    location.address_value1[0]).send_keys(
                                                                        adid_4.m_textCtrl30.GetValue()
                                                                        + adid_4.m_textCtrl31.GetValue())
                                                                input_history.append(
                                                                    adid_4.m_textCtrl30.GetValue()
                                                                    + adid_4.m_textCtrl31.GetValue()
                                                                    )
                                                                driver.find_element_by_name(
                                                                    location.address_value1[1]).send_keys(
                                                                    adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    adid_4.m_textCtrl32.GetValue())

                                                            elif len(location.address_value1) == 0 \
                                                                    and len(location.address_value2) == 2:
                                                                print(
                                                                    "「市区町村名番地」と「建物名」を別々に入力する形式です")
                                                                print(
                                                                    "取得値：" + str(len(location.address_value2)))
# 		                           print(location.address_value1)

                                                                driver.find_element_by_name(
                                                                    location.address_value2[0]).clear()
                                                                driver.find_element_by_name(location.address_value2[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                      + adid_4.m_textCtrl31.GetValue())
                                                                input_history.append(
                                                                    "市区町村名番地")
                                                                driver.find_element_by_name(location.address_value2[1]).send_keys(
                                                                    adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "建物名")

                                                            elif len(location.address_value1) > 0 \
                                                                and len(location.address_value2) > 0:
                                                                if len(location.address_name) == 1:
                                                                    print(
                                                                    "「市区町村名番地」～「建物名」まで入力する形式です")
                                                                    print(
                                                                    "取得値：" + str(location.address_name))
                                                                    driver.find_element_by_name(
                                                                    location.address_name[0]).clear()
                                                                    driver.find_element_by_name(
                                                                        location.address_name[0]).send_keys(
                                                                        adid_4.m_textCtrl30.GetValue()
                                                                        + adid_4.m_textCtrl31.GetValue()
                                                                        + adid_4.m_textCtrl32.GetValue())
                                                                    input_history.append(
                                                                        adid_4.m_textCtrl30.GetValue()
                                                                        + adid_4.m_textCtrl31.GetValue()
                                                                        + adid_4.m_textCtrl32.GetValue())
                                                                elif len(location.address_name) == 2:
                                                                    print(
                                                                    "「市区町村名番地」と「建物名」を別々に入力する形式です")
                                                                    print(
                                                                    "取得値：" + str(location.address_name))
                                                                    driver.find_element_by_name(
                                                                    location.address_name[0]).clear()
                                                                    driver.find_element_by_name(
                                                                        location.address_name[0]).send_keys(
                                                                        adid_4.m_textCtrl30.GetValue()
                                                                        + adid_4.m_textCtrl31.GetValue())
                                                                    input_history.append(
                                                                        adid_4.m_textCtrl30.GetValue()
                                                                        + adid_4.m_textCtrl31.GetValue())
                                                                    driver.find_element_by_name(location.address_name[1]).send_keys(
                                                                    adid_4.m_textCtrl32.GetValue())
                                                                    input_history.append(
                                                                        adid_4.m_textCtrl32.GetValue())

                                                            elif len(location.address_value1) == 1 \
                                                                    and len(location.address_value2) == 0:
                                                                print(
                                                                    "入力形式が「市区町村名番地」になっている")
                                                                print(
                                                                    location.address_value1)
                                                                print(
                                                                    location.address_value2)
                                                                driver.find_element_by_name(
                                                                    location.address_value1[0]).clear()
                                                                driver.find_element_by_name(location.address_value1[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                      + adid_4.m_textCtrl31.GetValue()
                                                                                                                                      + adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "市区町村名番地")

                                                            elif len(location.address_value1) == 0 \
                                                                    and len(location.address_value2) == 1:
                                                                print(
                                                                    "入力形式が「市区町村名番地」になっている")
                                                                print(
                                                                    location.address_value1)
                                                                print(
                                                                    location.address_value2)
                                                                driver.find_element_by_name(
                                                                    location.address_value2[0]).clear()
                                                                driver.find_element_by_name(location.address_value2[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                      + adid_4.m_textCtrl31.GetValue()
                                                                                                                                      + adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "市区町村名番地")

                                                            elif len(location.address_value1) == 3 \
                                                                    and len(location.address_value2) == 0:
                                                                print(
                                                                    "「市区町村名」「番地」「建物名」を別々に入力する形式")
                                                                print(
                                                                    location.address_value1)
                                                                print(
                                                                    location.address_value2)
                                                                driver.find_element_by_name(
                                                                    location.address_value1[0]).clear()
                                                                driver.find_element_by_name(location.address_value1[0]).send_keys(
                                                                    adid_4.m_textCtrl30.GetValue())
                                                                input_history.append(
                                                                    "市区町村名")

                                                                driver.find_element_by_name(location.address_value1[1]).send_keys(
                                                                    adid_4.m_textCtrl31.GetValue())
                                                                input_history.append(
                                                                    "番地")

                                                                driver.find_element_by_name(location.address_value1[2]).send_keys(
                                                                    adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "建物名")

                                                            elif len(location.address_value1) == 0 \
                                                                    and len(location.address_value2) == 3:
                                                                print(
                                                                    "「市区町村名」「番地」「建物名」を別々に入力する形式")
                                                                print(
                                                                    location.address_value1)
                                                                print(
                                                                    location.address_value2)
                                                                driver.find_element_by_name(
                                                                    location.address_value2[0]).clear()
                                                                driver.find_element_by_name(location.address_value2[0]).send_keys(
                                                                    adid_4.m_textCtrl30.GetValue())
                                                                input_history.append(
                                                                    "市区町村名")

                                                                driver.find_element_by_name(location.address_value2[1]).send_keys(
                                                                    adid_4.m_textCtrl31.GetValue())
                                                                input_history.append(
                                                                    "番地")

                                                                driver.find_element_by_name(location.address_value2[2]).send_keys(
                                                                    adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    "建物名")

                                                            elif len(location.address_value1) == 4 \
                                                                    and len(location.address_value2) == 0:
                                                                print(
                                                                    "「市区町村名」「番地」「建物名」を別々に入力する形式")
                                                                print(
                                                                    location.address_value1)
                                                                print(
                                                                    location.address_value2)
                                                                driver.find_element_by_name(
                                                                    location.address_value1[0]).clear()
                                                                driver.find_element_by_name(location.address_value1[0]).send_keys(
                                                                    adid_4.m_textCtrl30.GetValue())
                                                                input_history.append(
                                                                    adid_4.m_textCtrl30.GetValue())

                                                                driver.find_element_by_name(location.address_value1[1]).send_keys(
                                                                    adid_4.m_textCtrl31.GetValue())
                                                                input_history.append(
                                                                    adid_4.m_textCtrl31.GetValue())

                                                                driver.find_element_by_name(location.address_value1[2]).send_keys(
                                                                    adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    adid_4.m_textCtrl32.GetValue())

                                                            elif len(location.address_value1) == 0 \
                                                                    and len(location.address_value2) == 4:
                                                                print(
                                                                    "「市区町村名」「番地」「建物名」を別々に入力する形式")
                                                                print(
                                                                    location.address_value1)
                                                                print(
                                                                    location.address_value2)
                                                                driver.find_element_by_name(
                                                                    location.address_value2[0]).clear()
                                                                driver.find_element_by_name(location.address_value2[0]).send_keys(
                                                                    adid_4.m_textCtrl30.GetValue())
                                                                input_history.append(
                                                                    adid_4.m_textCtrl30.GetValue())

                                                                driver.find_element_by_name(location.address_value2[1]).send_keys(
                                                                    adid_4.m_textCtrl31.GetValue())
                                                                input_history.append(
                                                                    adid_4.m_textCtrl31.GetValue())

                                                                driver.find_element_by_name(location.address_value2[2]).send_keys(
                                                                    adid_4.m_textCtrl32.GetValue())
                                                                input_history.append(
                                                                    adid_4.m_textCtrl32.GetValue())

                                                        except Exception as e:
                                                            print(e)

                                            elif len([i for i in Get_tag_text.list_1 if "住所" in i]) == 0 \
                                                    and len(location.post_value) == 0:
                                                print(
                                                    "「都道府県」を除く「住所」に関するテキスト要素、且つ郵便番号に関する要素が含まれていないことを確認")

                                                if len(location.address1) == 0 \
                                                        or len(location.address2) == 0:
                                                    print(
                                                        "「建物名」又は「市区町村名」「番地」等に関するテキスト要素が含まれていない")
                                                    try:
                                                        if len(location.address_value1) == 1 \
                                                                and len(location.address_value2) == 0:
                                                            print(
                                                                "入力形式が「市区町村名番地」になっている")
                                                            print(
                                                                location.address_value1)
                                                            print(
                                                                location.address_value2)
                                                            driver.find_element_by_name(
                                                                location.address_value1[0]).clear()
                                                            driver.find_element_by_name(location.address_value1[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                  + adid_4.m_textCtrl31.GetValue()
                                                                                                                                  + adid_4.m_textCtrl32.GetValue())
                                                            input_history.append(
                                                                "市区町村名番地")

                                                        elif len(location.address_value1) == 0 \
                                                                and len(location.address_value2) == 1:
                                                            print(
                                                                "入力形式が「市区町村名番地」になっている")
                                                            print(
                                                                location.address_value1)
                                                            print(
                                                                location.address_value2)
                                                            driver.find_element_by_name(
                                                                location.address_value2[0]).clear()
                                                            driver.find_element_by_name(location.address_value2[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                  + adid_4.m_textCtrl31.GetValue()
                                                                                                                                  + adid_4.m_textCtrl32.GetValue())
                                                            input_history.append(
                                                                "市区町村名番地")

                                                        elif len(location.address_value1) == 2 \
                                                                and len(location.address_value2) == 0:
                                                            print(
                                                                "「市区町村名」と「番地」を別々に入力する形式")
                                                            print(
                                                                location.address_value1)
                                                            print(
                                                                location.address_value2)

                                                            driver.find_element_by_name(
                                                                location.address_value1[0]).clear()
                                                            driver.find_element_by_name(location.address_value1[0]).send_keys(
                                                                adid_4.m_textCtrl30.GetValue())
                                                            input_history.append(
                                                                "市区町村")
                                                            driver.find_element_by_name(location.address_value1[1]).send_keys(
                                                                adid_4.m_textCtrl31.GetValue())
                                                            input_history.append(
                                                                "番地")

                                                        elif len(location.address_value1) == 0 \
                                                                and len(location.address_value2) == 2:
                                                            print(
                                                                "「市区町村名」と「番地」を別々に入力する形式")
                                                            print(
                                                                location.address_value1)
                                                            print(
                                                                location.address_value2)

                                                            driver.find_element_by_name(
                                                                location.address_value2[0]).clear()
                                                            driver.find_element_by_name(location.address_value2[0]).send_keys(
                                                                adid_4.m_textCtrl30.GetValue())
                                                            input_history.append(
                                                                "市区町村")
                                                            driver.find_element_by_name(location.address_value2[1]).send_keys(
                                                                adid_4.m_textCtrl31.GetValue())
                                                            input_history.append(
                                                                "番地")

# 追加予定？
# 		                     else:
# 		                       print("「市区町村名番地」＋「建物名」の組み合わせで入力する形式")
# 		                       print(location.address_value1)
# 		                       print(location.address_value2)

# 		                       driver.find_element_by_name(location.address_value1[0]).clear()
# 		                       driver.find_element_by_name(location.address_value1[0]).send_keys(adid_4.m_textCtrl30.GetValue()) \
#                                    + adid_4.m_textCtrl31.GetValue()
# 		                       input_history.append("市区町村名番地")
# 		                       driver.find_element_by_name(location.address_value1[1]).send_keys(adid_4.m_textCtrl32.GetValue())
# 		                       input_history.append("建物名")

# 操作できない要素の回避
                                                    except ElementNotInteractableException:
                                                        pass

                                                elif not len(location.address1) == 0 \
                                                        or not len(location.address2) == 0:
                                                    print(
                                                        "「建物名」又は「市区町村名」「番地」等に関するテキスト要素が含まれている")

                                                    try:
                                                        if len(location.address_value1) == 1 \
                                                                and len(location.address_value2) == 0:
                                                            print(
                                                                "入力形式が「市区町村名番地」になっている")
                                                            print(
                                                                location.address_value1)
                                                            print(
                                                                location.address_value2)
                                                            driver.find_element_by_name(
                                                                location.address_value1[0]).clear()
                                                            driver.find_element_by_name(location.address_value1[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                  + adid_4.m_textCtrl31.GetValue()
                                                                                                                                  + adid_4.m_textCtrl32.GetValue())
                                                            input_history.append(
                                                                "市区町村名番地")

                                                        elif len(location.address_value1) == 0 \
                                                                and len(location.address_value2) == 1:
                                                            print(
                                                                "入力形式が「市区町村名番地」になっている")
                                                            print(
                                                                location.address_value1)
                                                            print(
                                                                location.address_value2)
                                                            driver.find_element_by_name(
                                                                location.address_value2[0]).clear()
                                                            driver.find_element_by_name(location.address_value2[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                  + adid_4.m_textCtrl31.GetValue()
                                                                                                                                  + adid_4.m_textCtrl32.GetValue())
                                                            input_history.append(
                                                                "市区町村名番地")

                                                        elif len(location.address_value1) == 2 \
                                                                and len(location.address_value2) == 0:
                                                            print(
                                                                "「市区町村名」と「番地」を別々に入力する形式")
                                                            print(
                                                                location.address_value1)
                                                            print(
                                                                location.address_value2)

                                                            driver.find_element_by_name(
                                                                location.address_value1[0]).clear()
                                                            driver.find_element_by_name(location.address_value1[0]).send_keys(
                                                                adid_4.m_textCtrl30.GetValue())
                                                            input_history.append(
                                                                "市区町村")
                                                            driver.find_element_by_name(location.address_value1[1]).send_keys(
                                                                adid_4.m_textCtrl31.GetValue())
                                                            input_history.append(
                                                                "番地")

                                                        elif len(location.address_value1) == 0 \
                                                                and len(location.address_value2) == 2:
                                                            print(
                                                                "「市区町村名」と「番地」を別々に入力する形式")
                                                            print(
                                                                location.address_value1)
                                                            print(
                                                                location.address_value2)

                                                            driver.find_element_by_name(
                                                                location.address_value2[0]).clear()
                                                            driver.find_element_by_name(location.address_value2[0]).send_keys(
                                                                adid_4.m_textCtrl30.GetValue())
                                                            input_history.append(
                                                                "市区町村")
                                                            driver.find_element_by_name(location.address_value2[1]).send_keys(
                                                                adid_4.m_textCtrl31.GetValue())
                                                            input_history.append(
                                                                "番地")

# 操作できない要素の回避
                                                    except ElementNotInteractableException:
                                                        pass

                                            elif len([i for i in Get_tag_text.list_1 if "住所" in i]) > 0 \
                                                    and len(location.post_value) == 0:
                                                print(
                                                    "「都道府県」を除く「住所」に関するテキスト要素が含まれ、且つ郵便番号に関する要素が含まれていない")

                                                if len(location.address1) == 0 \
                                                        or len(location.address2) == 0:
                                                    print(
                                                        "「建物名」又は「市区町村名」「番地」等に関するテキスト要素が含まれていない")
                                                    try:
                                                        if len(location.address_value1) == 1 \
                                                                and len(location.address_value2) == 0:
                                                            print(
                                                                "入力形式が「市区町村名番地」になっている")
                                                            print(
                                                                location.address_value1)
                                                            print(
                                                                location.address_value2)
                                                            driver.find_element_by_name(
                                                                location.address_value1[0]).clear()
                                                            driver.find_element_by_name(location.address_value1[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                  + adid_4.m_textCtrl31.GetValue()
                                                                                                                                  + adid_4.m_textCtrl32.GetValue())
                                                            input_history.append(
                                                                "市区町村名番地")

                                                        elif len(location.address_value1) == 0 \
                                                                and len(location.address_value2) == 1:
                                                            print(
                                                                "入力形式が「市区町村名番地」になっている")
                                                            print(
                                                                location.address_value1)
                                                            print(
                                                                location.address_value2)
                                                            driver.find_element_by_name(
                                                                location.address_value2[0]).clear()
                                                            driver.find_element_by_name(location.address_value2[0]).send_keys(adid_4.m_textCtrl30.GetValue()
                                                                                                                                  + adid_4.m_textCtrl31.GetValue()
                                                                                                                                  + adid_4.m_textCtrl32.GetValue())
                                                            input_history.append(
                                                                "市区町村名番地")

                                                        elif len(location.address_value1) == 2 \
                                                                and len(location.address_value2) == 0:
                                                            print(
                                                                "「市区町村名」と「番地」を別々に入力する形式")
                                                            print(
                                                                location.address_value1)
                                                            print(
                                                                location.address_value2)

                                                            driver.find_element_by_name(
                                                                location.address_value1[0]).clear()
                                                            driver.find_element_by_name(location.address_value1[0]).send_keys(
                                                                adid_4.m_textCtrl30.GetValue())
                                                            input_history.append(
                                                                "市区町村")
                                                            driver.find_element_by_name(location.address_value1[1]).send_keys(
                                                                adid_4.m_textCtrl31.GetValue())
                                                            input_history.append(
                                                                "番地")

                                                        elif len(location.address_value1) == 0 \
                                                                and len(location.address_value2) == 2:
                                                            print(
                                                                "「市区町村名」と「番地」を別々に入力する形式")
                                                            print(
                                                                location.address_value1)
                                                            print(
                                                                location.address_value2)

                                                            driver.find_element_by_name(
                                                                location.address_value2[0]).clear()
                                                            driver.find_element_by_name(location.address_value2[0]).send_keys(
                                                                adid_4.m_textCtrl30.GetValue())
                                                            input_history.append(
                                                                "市区町村")
                                                            driver.find_element_by_name(location.address_value2[1]).send_keys(
                                                                adid_4.m_textCtrl31.GetValue())
                                                            input_history.append(
                                                                "番地")

# 操作できない要素の回避
                                                    except ElementNotInteractableException:
                                                        pass

                                        else:
                                            print("SELECT_1、又はSELECT_2に「都道府県」が含まれるか否かの確認ができません")


# （郵便番号入力から開始）
                                    elif not len([i for i in Get_tag_text.list_1 if "郵便番号" in i]) == 0 \
                                            or not len([i for i in Get_tag_text.items_1 if "郵便番号" in i]) == 0:

                                        if len(location.post3) > 0 \
                                                or len(location.post4) > 0 \
                                                or len(location.post_value) > 0:
                                            print("郵便番号から入力を開始する形式")

                                            if len(location.post_value) == 1:
                                                driver.find_element_by_name(location.post_value[0]).send_keys(
                                                    adid_4.m_textCtrl28.GetValue() + adid_4.m_textCtrl29.GetValue())
                                                input_history.append("郵便番号")
                                                print("郵便番号７桁")
                                            elif len(location.post_value) > 1:
                                                driver.find_element_by_name(location.post_value[0]).send_keys(
                                                    adid_4.m_textCtrl28.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl28.GetValue())
                                                print("郵便番号３桁")
                                                driver.find_element_by_name(location.post_value[1]).send_keys(
                                                    adid_4.m_textCtrl29.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl29.GetValue())
                                                print("郵便番号４桁")

# 郵便番号以降の住所入力が連番
                                            if len(location.address_num_name) > 0:

                                                if len([i for i in Get_tag_text.list_1 if "都道府県" in i]) == 0 \
                                                        and not len([i for i in Get_tag_text.list_1 if "建物名" in i or "ビル" in i]) == 0 \
                                                        or len([i for i in Get_tag_text.items_1 if "都道府県" in i]) == 0 \
                                                        and not len([i for i in Get_tag_text.items_1 if "建物名" in i or "ビル" in i]) == 0 \
                                                        and len(location.address_name) == 2:
                                                    print("テキスト要素に「都道府県」を含まない且つ「建物名」が含まれる")
# 		           		           print(len(location.address_name))
                                                    driver.find_element_by_name(
                                                        location.address_name[0]).clear()
                                                    driver.find_element_by_name(
                                                        location.address_name[0]).clear()
                                                    driver.find_element_by_name(location.address_name[0]).send_keys(adid_4.m_comboBox6.GetValue()
                                                                                                                         + adid_4.m_textCtrl30.GetValue()
                                                                                                                         + adid_4.m_textCtrl31.GetValue())
                                                    input_history.append(adid_4.m_comboBox6.GetValue()
                                                                         + adid_4.m_textCtrl30.GetValue()
                                                                         + adid_4.m_textCtrl31.GetValue())
                                                    print("住所１：" + str(adid_4.m_comboBox6.GetValue()
                                                                       + adid_4.m_textCtrl30.GetValue()
                                                                       + adid_4.m_textCtrl31.GetValue()))
                                                    driver.find_element_by_name(location.address_name[1]).send_keys(
                                                        adid_4.m_textCtrl32.GetValue())
                                                    input_history.append(
                                                        adid_4.m_textCtrl32.GetValue())
                                                    print(
                                                        "住所２：" + str(adid_4.m_textCtrl32.GetValue()))

                                                elif len(location.build) > 0 \
                                                        and (len(location.address_num_name)) > 3:
                                                    print(
                                                        "「location.build」の要素が存在し、且つ住所入力値に３つ以上の連番要素が存在する")
                                                    driver.find_element_by_name(location.address_num_name[0]).send_keys(
                                                        adid_4.m_comboBox6.GetValue())
                                                    input_history.append(
                                                        adid_4.m_comboBox6.GetValue())
                                                    driver.find_element_by_name(location.address_num_name[1]).send_keys(
                                                        adid_4.m_textCtrl30.GetValue())
                                                    input_history.append(
                                                        adid_4.m_textCtrl30.GetValue())
                                                    driver.find_element_by_name(location.address_num_name[2]).send_keys(
                                                        adid_4.m_textCtrl31.GetValue())
                                                    input_history.append(
                                                        adid_4.m_textCtrl31.GetValue())
                                                    driver.find_element_by_name(location.address_num_name[len(
                                                        location.address_num_name)+1]).send_keys(adid_4.m_textCtrl32.GetValue())
                                                    input_history.append(
                                                        adid_4.m_textCtrl32.GetValue())

                                                elif len(location.build) > 0 \
                                                        and (len(location.address_num_name)) == 2:
                                                    print(
                                                        "「location.build」の要素が存在し、且つ住所入力値に２つの連番要素が存在する")
                                                    driver.find_element_by_name(location.address_num_name[0]).send_keys(adid_4.m_comboBox6.GetValue()
                                                                                                                             + adid_4.m_textCtrl30.GetValue()
                                                                                                                             + adid_4.m_textCtrl31.GetValue())
                                                    input_history.append(adid_4.m_comboBox6.GetValue()
                                                                         + adid_4.m_textCtrl30.GetValue()
                                                                         + adid_4.m_textCtrl31.GetValue())
                                                    driver.find_element_by_name(location.address_num_name[1]).send_keys(
                                                        adid_4.m_textCtrl32.GetValue())
                                                    input_history.append(
                                                        adid_4.m_textCtrl32.GetValue())

                                                else:
                                                    print(location.list_14sc)
                                                    if not len([i for i in location.list_14sc if "町名まで" in i
                                                                or "番地以下" in i]) == 0:
                                                        print(
                                                            "テキスト要素に「町名まで」「番地以下」が含まれる")
                                                        driver.find_element_by_name(location.address_num_name[0]).send_keys(adid_4.m_comboBox6.GetValue()
                                                                                                                                 + adid_4.m_textCtrl30.GetValue())
                                                        input_history.append(adid_4.m_comboBox6.GetValue()
                                                                             + adid_4.m_textCtrl30.GetValue())

                                                        driver.find_element_by_name(location.address_num_name[1]).send_keys(adid_4.m_textCtrl31.GetValue()
                                                                                                                                 + adid_4.m_textCtrl32.GetValue())
                                                        input_history.append(adid_4.m_textCtrl31.GetValue()
                                                                             + adid_4.m_textCtrl32.GetValue())
                                                    else:
                                                        print(
                                                            "テキスト要素に「町名まで」「番地以下」は含まれない")
                                                        if len(location.address_num_name) == 1:
                                                            driver.find_element_by_name(
                                                                location.address_num_name[0]).clear()
                                                            driver.find_element_by_name(
                                                                location.address_num_name[0]).send_keys(
                                                            adid_4.m_comboBox6.GetValue()
                                                            + adid_4.m_textCtrl30.GetValue()
                                                            + adid_4.m_textCtrl31.GetValue()
                                                            + adid_4.m_textCtrl32.GetValue())
                                                            input_history.append(
                                                                adid_4.m_comboBox6.GetValue()
                                                                + adid_4.m_textCtrl30.GetValue()
                                                                + adid_4.m_textCtrl31.GetValue()
                                                                + adid_4.m_textCtrl32.GetValue()
                                                                )
                                                        else:
                                                            driver.find_element_by_name(
                                                                location.address_num_name[0]).clear()
                                                            driver.find_element_by_name(
                                                                location.address_num_name[0]).send_keys(
                                                            adid_4.m_comboBox6.GetValue())
                                                            input_history.append(
                                                            adid_4.m_comboBox6.GetValue())
                                                            driver.find_element_by_name(
                                                                location.address_num_name[1]).send_keys(
                                                            adid_4.m_textCtrl30.GetValue())
                                                            input_history.append(
                                                            adid_4.m_textCtrl30.GetValue())
                                                            driver.find_element_by_name(
                                                                location.address_num_name[2]).send_keys(
                                                            adid_4.m_textCtrl31.GetValue())
                                                            input_history.append(
                                                            adid_4.m_textCtrl31.GetValue())

# 郵便番号以降の住所入力が連番でない（値：都道府県・市区町村・建物名毎）

# （「都道府県」～「建物」の全てがテキストに含まれない）
                                            elif len(location.address_num_name) == 0:

                                                if len([i for i in Get_tag_text.list_1 if "都道府県" in i]) == 0 \
                                                        and len(location.address) == 0 \
                                                        or len([i for i in Get_tag_text.items_1 if "都道府県" in i]) == 0 \
                                                        and len(location.address) == 0 \
                                                        and len([i for i in location.address_name if "0" in i or "1" in i]) == 0 \
                                                        and len(location.build_value) == 0 \
                                                        and len(location.pref_value) == 0:

                                                    print(
                                                        "「input_tag.list_2」に「location.build_value」「location.pref_value」が全く含まれない")
                                                    Municipal = driver.find_element_by_name(
                                                        location.address_name[0])
                                                    Municipal.send_keys((Keys.CONTROL + "a"))
                                                    Municipal.send_keys(Keys.DELETE)
                                                    Municipal.send_keys(adid_4.m_comboBox6.GetValue()
                                                                        + adid_4.m_textCtrl30.GetValue()
                                                                        + adid_4.m_textCtrl31.GetValue()
                                                                        + adid_4.m_textCtrl32.GetValue())
                                                    print(
                                                        "location.address_name（name値）:" + str(location.address_name[0]))
                                                    input_history.append(adid_4.m_comboBox6.GetValue()
                                                                        + adid_4.m_textCtrl30.GetValue()
                                                                        + adid_4.m_textCtrl31.GetValue()
                                                                        + adid_4.m_textCtrl32.GetValue())

                                                elif len([i for i in location.address_name if "0" in i or "1" in i]) == 0 \
                                                        and len([i for i in Get_tag_text.list_1 if "都道府県" in i]) > 0 \
                                                        or len([i for i in Get_tag_text.items_1 if "都道府県" in i]) > 0 \
                                                        and len(location.pref_value) > 0:
                                                    pref = driver.find_element_by_name(
                                                        location.pref_value[0])
                                                    print("都道府県（値）：" + str(location.pref_value[0]))
                                                    pref.clear()
                                                    pref.send_keys(
                                                        adid_4.m_comboBox6.GetValue())
                                                    input_history.append(
                                                        "都道府県")
                                                    print("「都道府県」を入力済み")

                                                    if len(location.address_name) == 1:
                                                        print("address_name（１個）" + str(location.address_name))
                                                        Municipal = driver.find_element_by_name(
                                                            location.address_name[0])
                                                        Municipal.clear()
                                                        Municipal.send_keys(adid_4.m_textCtrl30.GetValue()
                                                                            + adid_4.m_textCtrl31.GetValue()
                                                                            + adid_4.m_textCtrl32.GetValue())
                                                        input_history.append(
                                                            "住所")
                                                        print(
                                                            "「都道府県」以降の住所入力済み")

                                                    elif len(location.address_name) == 2:
                                                        print("address_name（２個）" + str(location.address_name))
                                                        Municipal = driver.find_element_by_name(
                                                            location.address_name[1])
                                                        Municipal.clear()
                                                        Municipal.send_keys(adid_4.m_textCtrl30.GetValue()
                                                                            + adid_4.m_textCtrl31.GetValue()
                                                                            + adid_4.m_textCtrl32.GetValue())
                                                        input_history.append(
                                                            "住所")
                                                        print(
                                                            "「都道府県」以降の住所入力済み")

                                                    elif len(location.address_name) == 4:
                                                        print("address_name（４個）" + str(location.address_name))
                                                        Municipal = driver.find_element_by_name(
                                                            location.address_name[1])
                                                        Municipal.clear()
                                                        Municipal.send_keys(
                                                            adid_4.m_textCtrl30.GetValue())
                                                        input_history.append(
                                                            "市区町村")
                                                        Address_name = driver.find_element_by_name(
                                                            location.address_name[2])
                                                        Address_name.clear()
                                                        Address_name.send_keys(
                                                            adid_4.m_textCtrl31.GetValue())
                                                        input_history.append(
                                                            "番地")
                                                        Building = driver.find_element_by_name(
                                                            location.address_name[3])
                                                        Building.clear()
                                                        Building.send_keys(
                                                            adid_4.m_textCtrl32.GetValue())
                                                        input_history.append(
                                                            "建物")
                                                        print(
                                                            "「都道府県」以降を（市区町村＋番地＋建物）の組み合わせで入力済み")


# 郵便番号以降の住所入力が連番でない
                                                elif len(location.build_value) > 0:
                                                    print(
                                                        "郵便番号以降の住所入力（value：「都道府県含む住所」「建物名」が別々に存在）")
                                                    driver.find_element_by_name(location.address_name[0]).send_keys(adid_4.m_comboBox6.GetValue()
                                                                                                                         + adid_4.m_textCtrl30.GetValue()
                                                                                                                         + adid_4.m_textCtrl31.GetValue())
                                                    input_history.append("住所")
                                                    driver.find_element_by_name(location.build_value[0]).send_keys(
                                                        adid_4.m_textCtrl32.GetValue())
                                                    input_history.append("建物名")
                                                    print(
                                                        "郵便番号以降を「都道府県含む住所」「建物名」の組み合わせで入力済み")

# （都道府県＋市区町村）
                                                elif len([i for i in location.address_name if "0" in i or "1" in i]) == 0 \
                                                    and len([i for i in Get_tag_text.items_1 if "都道府県" in i
                                                             and "市区町村" in i]) > 0 \
                                                    or len([i for i in Get_tag_text.list_1 if "都道府県" in i
                                                            and "市区町村" in i]) > 0:
                                                    Municipal = driver.find_element_by_name(
                                                        location.address_name[0])
                                                    Municipal.clear()
                                                    Municipal.send_keys(
                                                        adid_4.m_textCtrl30.GetValue() + adid_4.m_textCtrl31.GetValue())
                                                    input_history.append(
                                                        "市区町村")
                                                    print(
                                                        "「都道府県」＋「市区町村」の組み合わせで入力済み")

# 更に「location.build」の値が存在する
                                                    if len([i for i in location.address_name if "0" in i or "1" in i]) == 0 \
                                                            and len([i for i in Get_tag_text.items_1 if "都道府県" in i
                                                                     and "市区町村" in i]) > 0 \
                                                            or len([i for i in Get_tag_text.list_1 if "都道府県" in i
                                                                    and "市区町村" in i]) > 0 \
                                                            and len(location.build) > 0:
                                                        Building = driver.find_element_by_name(
                                                            location.build_value[0])
                                                        Building.clear()
                                                        Building.send_keys(
                                                            adid_4.m_textCtrl32.GetValue())
                                                        input_history.append(
                                                            "建物名")

# 2022.8.16
# （都道府県＋市区町村＋建物名）
                                                elif len([i for i in location.address_name if "0" in i or "1" in i]) == 0 \
                                                    and len([i for i in Get_tag_text.items_1 if "都道府県" in i
                                                             and "市区町村" in i]) == 0 \
                                                    or len([i for i in Get_tag_text.list_1 if "都道府県" in i
                                                            and "市区町村" in i]) == 0:
                                                    Municipal = driver.find_element_by_name(
                                                        location.address_name[0])
                                                    Municipal.clear()
                                                    Municipal.send_keys(adid_4.m_comboBox6.GetValue()
                                                                        + adid_4.m_textCtrl30.GetValue()
                                                                        + adid_4.m_textCtrl31.GetValue()
                                                                        + adid_4.m_textCtrl32.GetValue())
                                                    input_history.append(
                                                        adid_4.m_comboBox6.GetValue()
                                                        + adid_4.m_textCtrl30.GetValue()
                                                        + adid_4.m_textCtrl31.GetValue()
                                                        + adid_4.m_textCtrl32.GetValue())
                                                    print(adid_4.m_comboBox6.GetValue()
                                                          + adid_4.m_textCtrl30.GetValue()
                                                          + adid_4.m_textCtrl31.GetValue()
                                                          + adid_4.m_textCtrl32.GetValue())

# 一部修正（2022.12.18）
# 郵便番号～住所
                                    elif len(location.post5) > 0 \
                                            or len(location.post6) > 0:
                                        if len(location.post_value) == 1:
                                            driver.find_element_by_name(location.post_value[0]).send_keys(
                                                adid_4.m_textCtrl28.GetValue() + adid_4.m_textCtrl29.GetValue())
                                            input_history.append("郵便番号")
                                            print("郵便番号入力済み（取得値：１個）")

                                            if len(location.post7) > 0 \
                                                or len(location.post8) > 0 \
                                                and len([i for i in location.address_name if "1" in i]) > 0:
                                                driver.find_element_by_name(
                                                location.address_name[0]).clear()
                                                driver.find_element_by_name(location.address_name[0]).send_keys(
                                                adid_4.m_comboBox6.GetValue())
                                                input_history.append(
                                                adid_4.m_comboBox6.GetValue())

                                                driver.find_element_by_name(
                                                location.address_name[1]).clear()
                                                driver.find_element_by_name(location.address_name[1]).send_keys(
                                                adid_4.m_textCtrl30.GetValue())
                                                input_history.append(
                                                adid_4.m_textCtrl30.GetValue())

                                                driver.find_element_by_name(
                                                location.address_name[2]).clear()
                                                driver.find_element_by_name(location.address_name[2]).send_keys(
                                                adid_4.m_textCtrl31.GetValue())
                                                input_history.append(
                                                adid_4.m_textCtrl31.GetValue())

                                                driver.find_element_by_name(
                                                location.address_name[3]).clear()
                                                driver.find_element_by_name(location.address_name[3]).send_keys(
                                                adid_4.m_textCtrl32.GetValue())
                                                input_history.append(
                                                adid_4.m_textCtrl32.GetValue())
                                                print(
                                                "「都道府県」＋「市区町村」＋「番地」＋「建物名」の組み合わせで入力済み")

                                            elif len(location.post7) > 0 \
                                                or len(location.post8) > 0 \
                                                and len(location.address_name) > 0:
                                                driver.find_element_by_name(
                                                location.address_name[0]).clear()
                                                driver.find_element_by_name(
                                                    location.address_name[0]).send_keys(
                                                        adid_4.m_comboBox6.GetValue()
                                                        + adid_4.m_textCtrl30.GetValue()
                                                        + adid_4.m_textCtrl31.GetValue()
                                                        + adid_4.m_textCtrl32.GetValue())
                                                input_history.append(adid_4.m_comboBox6.GetValue()
                                                        + adid_4.m_textCtrl30.GetValue()
                                                        + adid_4.m_textCtrl31.GetValue()
                                                        + adid_4.m_textCtrl32.GetValue())
                                                print("「都道府県」＋住所（建物名まで）の組み合わせで入力済み")


                                        else:
                                            print("post_value（要素数）：なし")
                                            driver.find_element_by_name(
                                            location.address_name[0]).clear()
                                            driver.find_element_by_name(
                                                location.address_name[0]).send_keys(adid_4.m_comboBox6.GetValue()
                                                        + adid_4.m_textCtrl30.GetValue()
                                                        + adid_4.m_textCtrl31.GetValue()
                                                        + adid_4.m_textCtrl32.GetValue())
                                            input_history.append(adid_4.m_comboBox6.GetValue()
                                                        + adid_4.m_textCtrl30.GetValue()
                                                        + adid_4.m_textCtrl31.GetValue()
                                                        + adid_4.m_textCtrl32.GetValue())
                                            print("「都道府県」＋住所（建物名まで）の組み合わせで入力済み")


                                    elif len(location.post7) > 0 \
                                            or len(location.post8) > 0 \
                                            or len(location.post_value) > 1:
                                        driver.find_element_by_name(location.post_value[0]).send_keys(
                                            adid_4.m_textCtrl28.GetValue())
                                        input_history.append(
                                            adid_4.m_textCtrl28.GetValue())
                                        driver.find_element_by_name(location.post_value[1]).send_keys(
                                            adid_4.m_textCtrl29.GetValue())
                                        input_history.append(
                                            adid_4.m_textCtrl29.GetValue())
                                        print("郵便番号入力済み（取得値：２個）")

                                        if len([i for i in location.address_name if "1" in i]) > 0:
                                            driver.find_element_by_name(
                                                location.address_name[0]).clear()
                                            driver.find_element_by_name(location.address_name[0]).send_keys(
                                                adid_4.m_comboBox6.GetValue())
                                            input_history.append(
                                                adid_4.m_comboBox6.GetValue())
                                            driver.find_element_by_name(
                                                location.address_name[1]).clear()
                                            driver.find_element_by_name(location.address_name[1]).send_keys(
                                                adid_4.m_textCtrl30.GetValue())
                                            input_history.append(
                                                adid_4.m_textCtrl30.GetValue())
                                            driver.find_element_by_name(
                                                location.address_name[2]).clear()
                                            driver.find_element_by_name(location.address_name[2]).send_keys(
                                                adid_4.m_textCtrl31.GetValue())
                                            input_history.append(
                                                adid_4.m_textCtrl31.GetValue())
                                            driver.find_element_by_name(
                                                location.address_name[3]).clear()
                                            driver.find_element_by_name(location.address_name[3]).send_keys(
                                                adid_4.m_textCtrl32.GetValue())
                                            input_history.append(
                                                adid_4.m_textCtrl32.GetValue())
                                            print(
                                                "「都道府県」＋「市区町村」＋「番地」＋「建物名」の組み合わせで入力済み")

                                        elif len(location.post7) > 0 \
                                                or len(location.post8) > 0:
                                            driver.find_element_by_name(
                                                location.address_name[0]).clear()
                                            driver.find_element_by_name(location.address_name[0]).send_keys(adid_4.m_comboBox6.GetValue()
                                                                                                                 + adid_4.m_textCtrl30.GetValue()
                                                                                                                 + adid_4.m_textCtrl31.GetValue()
                                                                                                                 + adid_4.m_textCtrl32.GetValue())
                                            input_history.append("住所")
                                            print("「都道府県」＋住所（建物名まで）の組み合わせで入力済み")
                                        else:
                                            Municipal = driver.find_element_by_name(
                                                location.address_name[0])
                                            Municipal.clear()
                                            Municipal.send_keys(adid_4.m_textCtrl30.GetValue(
                                            ) + adid_4.m_textCtrl31.GetValue() + "　")
                                            input_history.append("市区町村")
                                            print("「都道府県」を除く「市区町村」までを入力済み")

                                            if len(location.build1) > 0 \
                                                    or len(location.build2) > 0:
                                                build = driver.find_element_by_name(
                                                    location.build_value[0])
                                                build.send_keys(
                                                    adid_4.m_textCtrl32.GetValue())
                                                input_history.append("建物名")
                                                print("入力欄：「市区町村」＋「建物名」")

# （都道府県入力から開始）
                                    elif len(location.post3) == 0 \
                                            or len(location.post4) == 0:
                                        print("郵便番号入力欄なし、都道府県から住所入力必要")
                                        if len(location.address_name) > 0:
                                            if len([i for i in location.address_name if "0" in i or "1" in i]) > 0:
                                                if len(location.address_num_name) == 2:
                                                    driver.find_element_by_name(location.address_num_name[0]).send_keys(adid_4.m_comboBox6.GetValue()
                                                                                                                             + adid_4.m_textCtrl30.GetValue())
                                                    driver.find_element_by_name(location.address_num_name[1]).send_keys(adid_4.m_textCtrl31.GetValue()
                                                                                                                             + adid_4.m_textCtrl32.GetValue())
                                                    input_history.append("住所")
                                                    print(
                                                        "都道府県から住所入力済み（取得値：２個）")
                                                elif len(location.address_num_name) > 2:
                                                    driver.find_element_by_name(location.address_num_name[0]).send_keys(
                                                        adid_4.m_comboBox6.GetValue())
                                                    input_history.append(
                                                        adid_4.m_comboBox6.GetValue())
                                                    driver.find_element_by_name(location.address_num_name[1]).send_keys(
                                                        adid_4.m_textCtrl30.GetValue())
                                                    input_history.append(
                                                        adid_4.m_textCtrl30.GetValue())
                                                    driver.find_element_by_name(location.address_num_name[2]).send_keys(
                                                        adid_4.m_textCtrl31.GetValue())
                                                    input_history.append(
                                                        adid_4.m_textCtrl31.GetValue())
                                                    driver.find_element_by_name(location.address_num_name[3]).send_keys(
                                                        adid_4.m_textCtrl32.GetValue())
                                                    input_history.append(
                                                        adid_4.m_textCtrl32.GetValue())
                                                    print(
                                                        "都道府県から住所入力済み（取得値：２個以上）")
                                            elif len(location.build_value) > 0:
                                                driver.find_element_by_name(location.address_name[0]).send_keys(adid_4.m_comboBox6.GetValue()
                                                                                                                     + adid_4.m_textCtrl30.GetValue()
                                                                                                                     + adid_4.m_textCtrl31.GetValue())
                                                input_history.append("住所")
                                                driver.find_element_by_name(location.build_value[0]).send_keys(
                                                    adid_4.m_textCtrl32.GetValue())
                                                input_history.append("建物名")
                                                print(
                                                    "都道府県から「住所」＋「建物名」の組み合わせで入力済み")
                                            else:
                                                driver.find_element_by_name(location.address_name[0]).send_keys(adid_4.m_comboBox6.GetValue()
                                                                                                                     + adid_4.m_textCtrl30.GetValue()
                                                                                                                     + adid_4.m_textCtrl31.GetValue()
                                                                                                                     + adid_4.m_textCtrl32.GetValue())
                                                input_history.append("住所")
                                                print("都道府県から建物名含む住所入力済み")

# パターン追加（2021.12.22）
# id値でスクレイピング
                                        elif len(location.address_id) > 0:
                                            if len([i for i in location.address_id if "0" in i or "1" in i]) > 0:
                                                if len(location.address_num_id) == 2:
                                                    driver.find_element_by_id(location.address_num_id[0]).send_keys(adid_4.m_comboBox6.GetValue()
                                                                                                                        + adid_4.m_textCtrl30.GetValue())
                                                    driver.find_element_by_id(location.address_num_id[1]).send_keys(adid_4.m_textCtrl31.GetValue()
                                                                                                                        + adid_4.m_textCtrl32.GetValue())
                                                    input_history.append("住所")
                                                    print(
                                                        "都道府県から住所入力済み（取得値：２個）")
                                                elif len(location.address_num_id) > 2:
                                                    driver.find_element_by_id(location.address_num_id[0]).send_keys(
                                                        adid_4.m_comboBox6.GetValue())
                                                    input_history.append(
                                                        adid_4.m_comboBox6.GetValue())
                                                    driver.find_element_by_id(location.address_num_id[1]).send_keys(
                                                        adid_4.m_textCtrl30.GetValue())
                                                    input_history.append(
                                                        adid_4.m_textCtrl30.GetValue())
                                                    driver.find_element_by_id(location.address_num_id[2]).send_keys(
                                                        adid_4.m_textCtrl31.GetValue())
                                                    input_history.append(
                                                        adid_4.m_textCtrl31.GetValue())
                                                    driver.find_element_by_id(location.address_num_id[3]).send_keys(
                                                        adid_4.m_textCtrl32.GetValue())
                                                    input_history.append(
                                                        adid_4.m_textCtrl32.GetValue())
                                                    print(
                                                        "都道府県から住所入力済み（取得値：２個以上）")

                                            elif len(location.build_value) > 0:
                                                driver.find_element_by_id(location.address_id[0]).send_keys(adid_4.m_comboBox6.GetValue()
                                                                                                                + adid_4.m_textCtrl30.GetValue()
                                                                                                                + adid_4.m_textCtrl31.GetValue())
                                                input_history.append("住所")
                                                driver.find_element_by_id(location.build_value[0]).send_keys(
                                                    adid_4.m_textCtrl32.GetValue())
                                                input_history.append("建物名")
                                                print(
                                                    "都道府県から「住所」＋「建物名」の組み合わせで入力済み")
                                            else:
                                                driver.find_element_by_id(location.address_id[0]).send_keys(adid_4.m_comboBox6.GetValue()
                                                                                                                + adid_4.m_textCtrl30.GetValue()
                                                                                                                + adid_4.m_textCtrl31.GetValue()
                                                                                                                + adid_4.m_textCtrl32.GetValue())
                                                input_history.append("住所")
                                                print("都道府県から建物名含む住所入力済み")

# （郵便番号入力欄なし）
                                    elif len(location.post7) == 0 \
                                            or len(location.post8) == 0 \
                                            and len(location.post_value) == 0:
                                        print("郵便番号入力欄なし")
                                        driver.find_element_by_name(location.address_name[0]).send_keys(adid_4.m_comboBox6.GetValue()
                                                                                                             + adid_4.m_textCtrl30.GetValue()
                                                                                                             + adid_4.m_textCtrl31.GetValue()
                                                                                                             + adid_4.m_textCtrl32.GetValue())
                                        input_history.append("住所")
                                        print("「都道府県」＋住所（建物名まで）の組み合わせで入力済み")
# （郵便番号入力欄のみ）
                                    elif len(location.post7) == 0 \
                                            or len(location.post8) == 0 \
                                            and len(location.post_value) == 1:
                                        driver.find_element_by_name(location.post_value[0]).send_keys(
                                            adid_4.m_textCtrl28.GetValue() + adid_4.m_textCtrl29.GetValue())
                                        input_history.append("郵便番号")
                                        print("郵便番号入力済み：" +
                                              str(location.post_value[0]))

# （テキストに市町村、建物名等が含まれない場合は都道府県のみ）
                                    elif len(location.post5) > 0 \
                                            or len(location.post6) > 0 \
                                            and len(location.pref_value) > 0:
                                        pref = driver.find_element_by_name(
                                            location.pref_value[0])
                                        pref.clear()
                                        pref.send_keys(
                                            adid_4.m_comboBox6.GetValue())
                                        input_history.append("都道府県")
                                        print("都道府県入力済み")

                                        if len(location.post9) > 0 \
                                                or len(location.post10) > 0:
                                            Municipal = driver.find_element_by_name(
                                                location.address_name[0])
                                            Municipal.clear()
                                            Municipal.send_keys(
                                                adid_4.m_textCtrl30.GetValue() + adid_4.m_textCtrl31.GetValue())
                                            input_history.append("市区町村")
                                            print("「都道府県」＋「市区町村」入力済み")

                                            if len(location.build1) > 0 \
                                                    or len(location.build2) > 0:
                                                build = driver.find_element_by_name(
                                                    location.build_value[0])
                                                build.send_keys(
                                                    adid_4.m_textCtrl32.GetValue())
                                                input_history.append("建物名")
                                                print(
                                                    "「都道府県」＋「市区町村」＋「建物名」入力済み")


# 操作できない要素の回避
                                except ElementNotInteractableException:
                                    pass

# リストインデックスに関するエラー回避
                                except Exception as e:
                                    print("住所入力できませんでした：" + str(e))


# 電話番号
                                import telephone
                                importlib.reload(telephone)

# （Googleフォーム）
# <input type="text" class="whsOnd zHQkBf" jsname="YPqjbf" autocomplete="off" tabindex="0" aria-labelledby="i9" aria-describedby="i10 i11" required="" dir="auto" data-initial-dir="auto" data-initial-value="">
# <div id="i9" class="HoXoMd D1wxyf G4EHhc" role="heading" aria-level="3" aria-describedby="i12">電話番号<span class="vnumgf" id="i12" aria-label="必須の質問"> *</span></div>

# ※「class="quantumWizTextinputPaperinputInput exportInput"」
# 及び「class="freebirdFormviewerComponentsQuestionBaseTitle exportItemTitle freebirdCustomFont"」は現在使えないので注意！！（2022.03.02）

                                try:
                                    # if not len([i for i in input_tag.list_2c if "zHQkBf" in i]) == 0:
                                    #     import google_form
                                    #     importlib.reload(google_form)
                                        
                                    #     if google_form.index_tel == [4]:
                                    #         driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
                                    #             4].clear()
                                    #         driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
                                    #             4].send_keys(adid_4.m_textCtrl34.GetValue())
                                    #         driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
                                    #             4].send_keys(adid_4.m_textCtrl35.GetValue())
                                    #         driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
                                    #             4].send_keys(adid_4.m_textCtrl36.GetValue())
                                    #         input_history.append("電話番号")
                                    #     elif google_form.index_tel == [3]:
                                    #         driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
                                    #             3].clear()
                                    #         driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
                                    #             3].send_keys(adid_4.m_textCtrl34.GetValue())
                                    #         driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
                                    #             3].send_keys(adid_4.m_textCtrl35.GetValue())
                                    #         driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
                                    #             3].send_keys(adid_4.m_textCtrl36.GetValue())
                                    #         input_history.append("電話番号")
                                    #     elif google_form.index_tel == [2]:
                                    #         driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
                                    #             2].clear()
                                    #         driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
                                    #             2].send_keys(adid_4.m_textCtrl34.GetValue())
                                    #         driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
                                    #             2].send_keys(adid_4.m_textCtrl35.GetValue())
                                    #         driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
                                    #             2].send_keys(adid_4.m_textCtrl36.GetValue())
                                    #         input_history.append("電話番号")
                                    #     elif google_form.index_tel == []:
                                    #         pass
                                    
# （ハイフン有り）
                                    if not len(telephone.tel1) == 0 \
                                            or not len(telephone.tel2) == 0:
                                        if len(telephone.tel_name) > 1:
                                            try:
                                                elemName0 = driver.find_element_by_name(
                                                    telephone.tel_name[0])
                                                elemName1 = driver.find_element_by_name(
                                                    telephone.tel_name[1])
                                                elemName2 = driver.find_element_by_name(
                                                    telephone.tel_name[2])
                                                if elemName0.is_displayed() is False \
                                                        or elemName1.is_displayed() is False \
                                                        or elemName2.is_displayed() is False:
                                                    if "1" in telephone.tel_name[0]:
                                                        print(
                                                            telephone.tel_name[0])
                                                        elemName0.send_keys(
                                                            adid_4.m_textCtrl33.GetValue())
                                                        input_history.append(
                                                            "電話（ハイフンあり）")
                                                        print(
                                                            "変数「elemName0」にて「電話番号」を入力済み")
                                                    elif "2" in telephone.tel_name[1]:
                                                        print(
                                                            telephone.tel_name[1])
                                                        elemName1.send_keys(
                                                            adid_4.m_textCtrl33.GetValue())
                                                        input_history.append(
                                                            "電話（ハイフンあり）")
                                                        print(
                                                            "変数「elemName1」にて「電話番号」を入力済み")
                                                    elif "3" in telephone.tel_name[2]:
                                                        print(
                                                            telephone.tel_name[2])
                                                        elemName2.send_keys(
                                                            adid_4.m_textCtrl33.GetValue())
                                                        input_history.append(
                                                            "電話（ハイフンあり）")
                                                        print(
                                                            "変数「elemName2」にて「電話番号」を入力済み")

                                                else:
                                                    if "1" in telephone.tel_name[0] \
                                                            or "0" in telephone.tel_name[0]:
                                                        print(
                                                            telephone.tel_name[0])
                                                        elemName0.send_keys(
                                                            adid_4.m_textCtrl34.GetValue())
                                                        input_history.append(
                                                            "市外局番")
                                                    if "2" in telephone.tel_name[1] \
                                                            or "1" in telephone.tel_name[1]:
                                                        print(
                                                            telephone.tel_name[1])
                                                        elemName1.send_keys(
                                                            adid_4.m_textCtrl35.GetValue())
                                                        input_history.append(
                                                            "市内局番")
                                                    if "3" in telephone.tel_name[2] \
                                                            or "2" in telephone.tel_name[2]:
                                                        print(
                                                            telephone.tel_name[2])
                                                        elemName2.send_keys(
                                                            adid_4.m_textCtrl36.GetValue())
                                                        input_history.append(
                                                            "加入者電号")
                                                        print(
                                                            "「市外局番」＋「市外局番」＋「加入者番号」の組み合わせでハイフンなし入力済み")

                                            except:
                                                try:
                                                    driver.find_element_by_name(telephone.tel_name[0]).send_keys(
                                                        adid_4.m_textCtrl33.GetValue())
                                                    input_history.append(
                                                        "電話（ハイフンあり）")
                                                    print(
                                                        "「電話番号」を入力済み（ハイフンあり）")
                                                except:
                                                    pass

                                        elif len(telephone.tel_name) == 1:
                                            if not len([i for i in Get_tag_text.items_1 if 
                                                "ハイフンなし" in i]) == 0:
                                                driver.find_element_by_name(
                                                    telephone.tel_name[0]).send_keys(
                                                    adid_4.m_textCtrl34.GetValue()
                                                    + adid_4.m_textCtrl35.GetValue()
                                                    + adid_4.m_textCtrl36.GetValue())
                                                input_history.append(
                                                    adid_4.m_textCtrl34.GetValue()
                                                    + adid_4.m_textCtrl35.GetValue()
                                                    + adid_4.m_textCtrl36.GetValue())
                                                print("「電話番号」を入力済み（ハイフンなし）（取得値：１個）")
                                            else:
                                                driver.find_element_by_name(
                                                    telephone.tel_name[0]).send_keys(
                                                        adid_4.m_textCtrl33.GetValue())
                                                input_history.append(adid_4.m_textCtrl33.GetValue())
                                            # print("placeholder:" + str(Get_tag_text.items_1))
                                                print("「電話番号」を入力済み（ハイフンあり）（取得値：１個）")

                                    elif len(telephone.tel1) == 0 \
                                            or len(telephone.tel2) == 0 \
                                            and len(telephone.tel_name) == 1 \
                                            or len(telephone.tel_id) == 1 \
                                            or len(telephone.tel_class) > 1:
                                        print(telephone.tel_name)
                                        try:
                                            driver.find_element_by_name(telephone.tel_name[0]).send_keys(
                                                adid_4.m_textCtrl33.GetValue())
                                            input_history.append("電話（ハイフンあり）")
                                            print("「電話番号」を入力済み（ハイフンあり）（取得値：１個）")
                                        except:
                                            try:
                                                driver.find_element_by_id(telephone.tel_id[0]).send_keys(
                                                    adid_4.m_textCtrl33.GetValue())
                                                input_history.append(
                                                    "電話（ハイフンあり）")
                                                print(
                                                    "「電話番号」を入力済み（ハイフンあり）（取得値：id）")
                                            except:
                                                try:
                                                    driver.find_elements_by_class_name(telephone.tel_class[0])[
                                                        1].send_keys(adid_4.m_textCtrl33.GetValue())
                                                    input_history.append(
                                                        "電話（ハイフンあり）")
                                                    print(
                                                        "「電話番号」を入力済み（ハイフンあり）（取得値：class）")

                                                except WebDriverException:
                                                    pass

#ハイフンなし市外局番別１
                                    elif len(telephone.tel1) == 0 \
                                            and len(telephone.tel2) == 0 \
                                            and len(telephone.tel_name) == 3:
                                        driver.find_element_by_name(telephone.tel_name[0]) \
                                            .send_keys(adid_4.m_textCtrl34.GetValue())
                                        input_history.append(
                                            adid_4.m_textCtrl34.GetValue())
                                        driver.find_element_by_name(telephone.tel_name[1]) \
                                            .send_keys(adid_4.m_textCtrl35.GetValue())
                                        input_history.append(
                                            adid_4.m_textCtrl35.GetValue())
                                        driver.find_element_by_name(telephone.tel_name[2]) \
                                            .send_keys(adid_4.m_textCtrl36.GetValue())
                                        input_history.append(
                                            adid_4.m_textCtrl36.GetValue())
                                        print("「電話番号」を入力済み（取得値複数）：" +
                                              str(telephone.tel_name))

#ハイフンなし市外局番別２
                                    elif len(telephone.tel1) > 0 \
                                        or len(telephone.tel2) > 0 \
                                            and len(telephone.tel_name) == 3:
                                        driver.find_element_by_name(telephone.tel_name[0]) \
                                            .send_keys(adid_4.m_textCtrl34.GetValue())
                                        input_history.append(
                                            adid_4.m_textCtrl34.GetValue())
                                        driver.find_element_by_name(telephone.tel_name[1]) \
                                            .send_keys(adid_4.m_textCtrl35.GetValue())
                                        input_history.append(
                                            adid_4.m_textCtrl35.GetValue())
                                        driver.find_element_by_name(telephone.tel_name[2]) \
                                            .send_keys(adid_4.m_textCtrl36.GetValue())
                                        input_history.append(
                                            adid_4.m_textCtrl36.GetValue())
                                        print("「電話番号」を入力済み（取得値複数）：" +
                                              str(telephone.tel_name))

# （ハイフンなし）
                                    elif not len(telephone.tel1) == 0 \
                                        or not len(telephone.tel2) == 0 \
                                        and len([i for i in telephone.tel1 if "ハイフン不要" in i
                                                 or "ハイフンなし" in i]) == 0 \
                                        or not len([i for i in telephone.tel2 if "ハイフン不要" in i
                                                    or "ハイフンなし" in i]) == 0:
                                        driver.find_element_by_name(telephone.tel_name[0]).send_keys(adid_4.m_textCtrl34.GetValue()
                                                                                                         + adid_4.m_textCtrl35.GetValue()
                                                                                                         + adid_4.m_textCtrl36.GetValue())
                                        input_history.append("電話（ハイフンなし）")
                                        print("「電話番号」を入力済み（ハイフンなし）")

# リストインデックスに関するエラー回避
                                except Exception as e:
                                    print(e)


# メールアドレス
                                # print("「メールアドレス」関連がテキスト要素に含まれるか否かの確認")

#※「import email」はメール本文受信ライブラリになってしまうので、別の変数を割り当てる
                                import e_mail
                                importlib.reload(e_mail)

# （Googleフォーム）
# <input type="text" class="whsOnd zHQkBf" jsname="YPqjbf" autocomplete="off" tabindex="0" aria-labelledby="i5" aria-describedby="i6 i7" required="" dir="auto" data-initial-dir="auto" data-initial-value="">
# ※「class="quantumWizTextinputPaperinputInput exportInput"」は現在使えないので注意！！（2022.03.02）
                                try:
#                                     if not len([i for i in input_tag.list_2c if "zHQkBf" in i]) == 0:
#                                         try:
#                                             # if "biz" in adid_4.m_textCtrl37.GetValue():
#                                                 import google_form
#                                                 importlib.reload(google_form)
#                                                 if google_form.index_email == [4]:
#                                                     driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
#                                                         4].clear()
#                                                     driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
#                                                         4].send_keys(adid_4.m_textCtrl37.GetValue())
#                                                     input_history.append("メールアドレス")
#                                                 elif google_form.index_email == [3]:
#                                                     driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
#                                                         3].clear()
#                                                     driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
#                                                         3].send_keys(adid_4.m_textCtrl37.GetValue())
#                                                     input_history.append("メールアドレス")
#                                                 elif google_form.index_email == [2]:
#                                                     driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
#                                                         2].clear()
#                                                     driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[
#                                                         2].send_keys(adid_4.m_textCtrl37.GetValue())
#                                                     input_history.append("メールアドレス")
#                                                 elif google_form.index_email == []:
#                                                     pass
                                        
# # 操作できない要素の回避
#                                         except ElementNotInteractableException:
#                                             pass

# （タグテキストに含まれる）
                                    if not len(e_mail.email1) == 0 \
                                            or not len(e_mail.email2) == 0 \
                                            and not len(e_mail.email_name) == 0:
                                        print("「メールアドレス」関連がタグテキストに含まれる")
                                        try:
                                            # if "biz" in adid_4.m_textCtrl37.GetValue():
                                                driver.find_element_by_name(e_mail.email_name[0]).send_keys(
                                                    adid_4.m_textCtrl37.GetValue())
                                                input_history.append("メールアドレス")
                                                print("「メールアドレス」を入力済み")
                                                driver.find_element_by_name(e_mail.email_name[1]).send_keys(
                                                    adid_4.m_textCtrl37.GetValue())
                                                input_history.append("メールアドレス")
                                                print("「メールアドレス（確認用）」を入力済み")

# 操作できない要素の回避
                                        except Exception as e:
                                            print(e)

                                    elif not len(e_mail.email1) == 0 \
                                            or not len(e_mail.email2) == 0 \
                                            and len(e_mail.email_id) > 0:
                                        print("「メールアドレス」関連がタグテキストに含まれる")
                                        try:
                                            if len(e_mail.email_id) == 1:
                                                # if "biz" in adid_4.m_textCtrl37.GetValue():
                                                    driver.find_element_by_id(e_mail.email_id[0]).send_keys(
                                                        adid_4.m_textCtrl37.GetValue())
                                                    input_history.append("メールアドレス")
                                                    print(
                                                        "「メールアドレス」を入力済み（id値：１個）")

                                            elif len(e_mail.email_id) == 2:
                                                # if "biz" in adid_4.m_textCtrl37.GetValue():
                                                    driver.find_element_by_id(e_mail.email_id[0]).send_keys(
                                                        adid_4.m_textCtrl37.GetValue())
                                                    input_history.append("メールアドレス")
                                                    driver.find_element_by_id(e_mail.email_id[1]).send_keys(
                                                        adid_4.m_textCtrl37.GetValue())
                                                    input_history.append("メールアドレス")
                                                    print(
                                                        "「メールアドレス」を入力済み（id値：２個）")

# 操作できない要素の回避
                                        except Exception as e:
                                            print(e)

                                    elif not len(e_mail.email1) == 0 \
                                            or not len(e_mail.email2) == 0 \
                                            and len(e_mail.email_class) > 0:
                                        print("「メールアドレス」関連がタグテキストに含まれる")
                                        try:
                                            # if "biz" in adid_4.m_textCtrl37.GetValue():
                                                driver.find_elements_by_class_name(e_mail.email_class[0])[
                                                    2].send_keys(adid_4.m_textCtrl37.GetValue())
                                                input_history.append("メールアドレス")
                                                print("「メールアドレス」を入力済み（class値）")

# 操作できない要素の回避
                                        except Exception as e:
                                            print(e)


# （タグテキストに含まれない）
                                    elif len(e_mail.email1) == 0 \
                                            or len(e_mail.email2) == 0 \
                                            and len(e_mail.email_name) > 0:
                                        print("「メールアドレス」関連がタグテキストに含まれない")
                                        try:
                                            # if "biz" in adid_4.m_textCtrl37.GetValue():
                                                driver.find_element_by_name(e_mail.email_name[0]).send_keys(
                                                    adid_4.m_textCtrl37.GetValue())
                                                input_history.append("メールアドレス")
                                                driver.find_element_by_name(e_mail.email_name[1]).send_keys(
                                                    adid_4.m_textCtrl37.GetValue())
                                                input_history.append("メールアドレス")
                                                print("「メールアドレス」を入力済み（取得値：２個）")

# 操作できない要素の回避
                                        except Exception as e:
                                            print(e)

                                    elif len(e_mail.email1) == 0 \
                                            or len(e_mail.email2) == 0 \
                                            and len(e_mail.email_class) > 0:
                                        print("「メールアドレス」関連がタグテキストに含まれない")
                                        try:
                                            # if "biz" in adid_4.m_textCtrl37.GetValue():
                                                driver.find_elements_by_class_name(e_mail.email_class[0])[
                                                    2].send_keys(adid_4.m_textCtrl37.GetValue())
                                                input_history.append("メールアドレス")
                                                print("「メールアドレス」を入力済み（class値）")

# 操作できない要素の回避
                                        except Exception as e:
                                            print(e)

                                    elif len(e_mail.email1) == 0 \
                                            or len(e_mail.email2) == 0 \
                                            and len(e_mail.email_id) > 0:
                                        print("「メールアドレス」関連がタグテキストに含まれない")
                                        try:
                                            if len(e_mail.email_id) == 1:
                                                # if "biz" in adid_4.m_textCtrl37.GetValue():
                                                    driver.find_element_by_id(e_mail.email_id[0]).send_keys(
                                                        adid_4.m_textCtrl37.GetValue())
                                                    input_history.append("メールアドレス")
                                                    print(
                                                        "「メールアドレス」を入力済み（id値：１個）")

                                            elif len(e_mail.email_id) == 2:
                                                # if "biz" in adid_4.m_textCtrl37.GetValue():
                                                    driver.find_element_by_id(e_mail.email_id[0]).send_keys(
                                                        adid_4.m_textCtrl37.GetValue())
                                                    input_history.append("メールアドレス")
                                                    driver.find_element_by_id(e_mail.email_id[1]).send_keys(
                                                        adid_4.m_textCtrl37.GetValue())
                                                    input_history.append("メールアドレス")
                                                    print(
                                                        "「メールアドレス」を入力済み（id値：２個）")

# 操作できない要素の回避
                                        except Exception as e:
                                            print(e)

# リストインデックスに関するエラー回避
                                except Exception as e:
                                    print(e)


# 業種
                                print("「業種」関連がテキスト要素に含まれるか否かの確認")
                                import industry
                                importlib.reload(industry)
                                try:
                                    if not len(industry.industry1) == 0 \
                                        or not len(industry.industry2) == 0 \
                                            and not len(industry.industry_name) == 0:
                                        driver.find_element_by_name(industry.industry_name[0]).send_keys(
                                            adid_4.m_comboBox61.GetValue())
                                        input_history.append("業種")
                                        print("「業種」を入力済み")

                                    else:
                                        driver.find_element_by_name(industry.industry_name[0]).send_keys(
                                            adid_4.m_comboBox61.GetValue())
                                        input_history.append("業種")
                                        print("「業種」を入力済み")
# リストインデックスに関するエラー回避
                                except Exception as e:
                                    print(e)


# 部署名
                                import department
                                importlib.reload(department)
# （タグテキストに含まれる）
                                try:
                                    if not len(department.department1) == 0 \
                                        or not len(department.department2) == 0 \
                                        and not len(department.department_name) == 0:
                                        driver.find_element_by_name(
                                            department.department_name[
                                            len(department.department_name)-1]).send_keys(
                                            adid_4.m_textCtrl24.GetValue())
                                        input_history.append("部署")
                                        print("「部署」を入力済み")

                                    elif not len(department.department1) == 0 \
                                        or not len(department.department2) == 0 \
                                        and len(department.department_id) > 0:
                                        driver.find_element_by_id(
                                            department.department_id[
                                            len(department.department_id)-1]).send_keys(
                                            adid_4.m_textCtrl24.GetValue())
                                        input_history.append("部署")
                                        print("「部署」を入力済み（id値）")

                                    elif not len(department.department1) == 0 \
                                        or not len(department.department2) == 0 \
                                        and len(department.department_class) > 0:
                                        driver.find_elements_by_class_name(
                                            department.department_class[
                                            len(department.department_class)-1])[
                                            2].send_keys(adid_4.m_textCtrl24.GetValue())
                                        input_history.append("部署")
                                        print("「部署」を入力済み（class値）")

# （タグテキストに含まれない）
                                    elif len(department.department1) == 0 \
                                        or len(department.department2) == 0 \
                                        and len(department.department_name) > 0:
                                        print("「部署」関連がタグテキストに含まれない")
                                        driver.find_element_by_name(
                                            department.department_name[
                                            len(department.department_name)-1]).send_keys(
                                            adid_4.m_textCtrl24.GetValue())
                                        input_history.append("部署")
                                        print("「部署」を入力済み")

                                    elif len(department.department1) == 0 \
                                        or len(department.department2) == 0 \
                                        and len(department.department_class) > 0:
                                        print("「部署」関連がタグテキストに含まれない")
                                        driver.find_elements_by_class_name(
                                            department.department_class[
                                            len(department.department_class)-1])[
                                            2].send_keys(adid_4.m_textCtrl24.GetValue())
                                        input_history.append("部署")
                                        print("「部署」を入力済み（class値）")

                                    elif len(department.department1) == 0 \
                                        or len(department.department2) == 0 \
                                        and len(department.department_id) > 0:
                                        print("「部署」関連がタグテキストに含まれない")
                                        driver.find_element_by_id(
                                            department.department_id[
                                            len(department.department_id)-1]).send_keys(
                                            adid_4.m_textCtrl24.GetValue())
                                        input_history.append("部署")
                                        print("「部署」を入力済み（id値）")

                                except Exception as e:
                                    print(e)

# 役職
                                import position
                                importlib.reload(position)
                                
# （タグテキストに含まれる）
                                print("「役職」関連がタグテキストに含まれる")
                                try:
                                    if not len(position.position1) == 0 \
                                        or not len(position.position2) == 0 \
                                        and not len(position.position_name) == 0:
                                        driver.find_element_by_name(position.position_name[0]).send_keys(
                                            adid_4.m_textCtrl25.GetValue())
                                        input_history.append("役職")
                                        print("「役職」を入力済み")

                                    elif not len(position.position1) == 0 \
                                        or not len(position.position2) == 0 \
                                        and len(position.position_id) > 0:
                                        driver.find_element_by_id(
                                            position.position_id[0]).clear()
                                        driver.find_element_by_id(position.position_id[0]).send_keys(
                                            adid_4.m_textCtrl25.GetValue())
                                        input_history.append("役職")
                                        print("「役職」を入力済み（id値）")

                                    elif not len(position.position1) == 0 \
                                        or not len(position.position2) == 0 \
                                        and len(position.position_class) > 0:
                                        driver.find_elements_by_class_name(position.position_class[0])[
                                            2].send_keys(adid_4.m_textCtrl25.GetValue())
                                        input_history.append("役職")
                                        print("「役職」を入力済み（class値）")

# （タグテキストに含まれない）
                                    elif len(position.position1) == 0 \
                                        or len(position.position2) == 0 \
                                        and len(position.position_name) > 0:
                                        print("「役職」関連がタグテキストに含まれない")
                                        driver.find_element_by_name(position.position_name[0]).send_keys(
                                            adid_4.m_textCtrl25.GetValue())
                                        input_history.append("役職")
                                        print("「役職」を入力済み")

                                    elif len(position.position1) == 0 \
                                        or len(position.position2) == 0 \
                                        and len(position.position_class) > 0:
                                        print("「役職」関連がタグテキストに含まれない")
                                        driver.find_elements_by_class_name(position.position_class[0])[
                                            2].send_keys(adid_4.m_textCtrl25.GetValue())
                                        input_history.append("役職")
                                        print("「役職」を入力済み（class値）")

                                    elif len(position.position1) == 0 \
                                        or len(position.position2) == 0 \
                                        and len(position.position_id) > 0:
                                        print("「役職」関連がタグテキストに含まれない")
                                        driver.find_element_by_id(position.position_id[0]).send_keys(
                                            adid_4.m_textCtrl25.GetValue())
                                        input_history.append("役職")
                                        print("「役職」を入力済み（id値）")

                                except Exception as e:
                                    print(e)

# ホームページアドレス
                                import url
                                importlib.reload(url)
                                adid = MyProject1MyDialog6(self)

# （タグテキストに含まれる）
                                try:
                                    if not len(url.url1) == 0 \
                                            or not len(url.url2) == 0 \
                                            and len(url.url_name) == 1:
                                        elemName0 = driver.find_element_by_name(
                                            url.url_name[0])
                                        try:
                                            if elemName0.is_displayed() is False:
                                                pass
                                            else:
                                                driver.find_element_by_name(url.url_name[0]).send_keys(
                                                    adid.m_textCtrl7.GetValue())
                                                input_history.append(url.url_name[0])
                                                print("会社urlを入力済み")

# 操作できない要素の回避
                                        except ElementNotInteractableException:
                                            pass


                                    elif not len(url.url1) == 0 \
                                            or not len(url.url2) == 0 \
                                            and len(url.url_id) == 1:
                                        elemName0 = driver.find_element_by_id(
                                            url.url_id[0])
                                        try:
                                            if elemName0.is_displayed() is False:
                                                pass
                                            else:
                                                driver.find_element_by_id(url.url_id[0]).send_keys(
                                                    adid.m_textCtrl7.GetValue())
                                                input_history.append(url.url_id[0])
                                                print("会社urlを入力済み")

# 操作できない要素の回避
                                        except ElementNotInteractableException:
                                            pass


                                    elif not len(url.url1) == 0 \
                                            or not len(url.url2) == 0 \
                                            and len(url.url_class) == 1:
                                        elemName0 = driver.find_element_by_class_name(
                                            url.url_class[0])
                                        try:
                                            if elemName0.is_displayed() is False:
                                                pass
                                            else:
                                                driver.find_elements_by_class_name(url.url_class[0])[
                                                    2].send_keys(adid.m_textCtrl7.GetValue())
                                                input_history.append(url.url_class[0])
                                                print("会社urlを入力済み")

# 操作できない要素の回避
                                        except ElementNotInteractableException:
                                            pass


# （タグテキストに含まれない）
                                    elif len(url.url1) == 0 \
                                            or len(url.url2) == 0 \
                                            and len(url.url_name) == 1:
                                        print("「ホームページアドレス」関連がタグテキストに含まれない")
                                        elemName0 = driver.find_element_by_name(
                                            url.url_name[0])
                                        try:
                                            if elemName0.is_displayed() is False:
                                                pass
                                            else:
                                                driver.find_element_by_name(url.url_name[0]).send_keys(
                                                    adid.m_textCtrl7.GetValue())
                                                input_history.append(url.url_name[0])
                                                print("会社urlを入力済み")

# 操作できない要素の回避
                                        except ElementNotInteractableException:
                                            pass


                                    elif len(url.url1) == 0 \
                                            or len(url.url2) == 0 \
                                            and len(url.url_class) == 1:
                                        print("「ホームページアドレス」関連がタグテキストに含まれない")
                                        elemName0 = driver.find_element_by_class_name(
                                            url.url_class[0])
                                        try:
                                            if elemName0.is_displayed() is False:
                                                pass
                                            else:
                                                driver.find_elements_by_class_name(url.url_class[0])[
                                                    2].send_keys(adid.m_textCtrl7.GetValue())
                                                input_history.append(url.url_class[0])
                                                print("会社urlを入力済み")

# 操作できない要素の回避
                                        except ElementNotInteractableException:
                                            pass


                                    elif len(url.url1) == 0 \
                                            or len(url.url2) == 0 \
                                            and len(url.url_id) == 1:
                                        print("「ホームページアドレス」関連がタグテキストに含まれない")
                                        elemName0 = driver.find_element_by_id(
                                            url.url_id[0])
                                        try:
                                            if elemName0.is_displayed() is False:
                                                pass
                                            else:
                                                driver.find_element_by_id(url.url_id[0]).send_keys(
                                                    adid.m_textCtrl7.GetValue())
                                                input_history.append(url.url_id[0])
                                                print("会社urlを入力済み")

# 操作できない要素の回避
                                        except ElementNotInteractableException:
                                            pass

# リストインデックスに関するエラー回避
                                except Exception as e:
                                    print("会社urlを入力できませんでした：" + str(e))


# 件名
                                import title
                                importlib.reload(title)

# （タグテキストに含まれる）
                                print("「お問い合わせ内容タイトル」関連がタグテキストに含まれる")
                                try:
                                    if not len(title.title1) == 0 \
                                            or not len(title.title2) == 0 \
                                            and len(title.title_name) == 1:
                                        elemName0 = driver.find_element_by_name(
                                            title.title_name[0])
                                        try:
                                            if elemName0.is_displayed() is False:
                                                pass
                                            else:
                                                driver.find_element_by_name(title.title_name[0]).send_keys(
                                                    adid_5.m_textCtrl6.GetValue())
                                                input_history.append("タイトル")
                                                print("「お問い合わせ内容タイトル」を入力済み")

# 操作できない要素の回避
                                        except Exception as e:
                                            print(e)

                                    elif not len(title.title1) == 0 \
                                            or not len(title.title2) == 0 \
                                            and len(title.title_id) == 1:
                                        elemName0 = driver.find_element_by_id(
                                            title.title_id[0])
                                        try:
                                            if elemName0.is_displayed() is False:
                                                pass
                                            else:
                                                driver.find_element_by_id(title.title_id[0]).send_keys(
                                                    adid_5.m_textCtrl6.GetValue())
                                                input_history.append("タイトル")
                                                print(
                                                    "「お問い合わせ内容タイトル」を入力済み（id値）")

# 操作できない要素の回避
                                        except Exception as e:
                                            print(e)

                                    elif not len(title.title1) == 0 \
                                            or not len(title.title2) == 0 \
                                            and len(title.title_class) == 1:
                                        elemName0 = driver.find_element_by_class_name(
                                            title.title_class[0])
                                        try:
                                            if elemName0.is_displayed() is False:
                                                pass
                                            else:
                                                driver.find_elements_by_class_name(title.title_class[0])[
                                                    2].send_keys(adid_5.m_textCtrl6.GetValue())
                                                input_history.append("タイトル")
                                                print(
                                                    "「お問い合わせ内容タイトル」を入力済み（class値）")
# 操作できない要素の回避
                                        except Exception as e:
                                            print(e)


# （タグテキストに含まれない）
                                    elif len(title.title1) == 0 \
                                            or len(title.title2) == 0 \
                                            and len(title.title_name) == 1:
                                        print("「お問い合わせ内容タイトル」関連がタグテキストに含まれない")
                                        elemName0 = driver.find_element_by_name(
                                            title.title_name[0])
                                        try:
                                            if elemName0.is_displayed() is False:
                                                pass
                                            else:
                                                driver.find_element_by_name(title.title_name[0]).send_keys(
                                                    adid_5.m_textCtrl6.GetValue())
                                                input_history.append("タイトル")
                                                print("「お問い合わせ内容タイトル」を入力済み")

# 操作できない要素の回避
                                        except Exception as e:
                                            print(e)

                                    elif len(title.title1) == 0 \
                                            or len(title.title2) == 0 \
                                            and len(title.title_class) == 1:
                                        print("「お問い合わせ内容タイトル」関連がタグテキストに含まれない")
                                        elemName0 = driver.find_element_by_class_name(
                                            title.title_class[0])
                                        try:
                                            if elemName0.is_displayed() is False:
                                                pass
                                            else:
                                                driver.find_elements_by_class_name(title.title_class[0])[
                                                    2].send_keys(adid_5.m_textCtrl6.GetValue())
                                                input_history.append("タイトル")
                                                print(
                                                    "「お問い合わせ内容タイトル」を入力済み（class値）")
# 操作できない要素の回避
                                        except Exception as e:
                                            print(e)

                                    elif len(title.title1) == 0 \
                                            or len(title.title2) == 0 \
                                            and len(title.title_id) == 1:
                                        print("「お問い合わせ内容タイトル」関連がタグテキストに含まれない")
                                        elemName0 = driver.find_element_by_id(
                                            title.title_id[0])
                                        try:
                                            if elemName0.is_displayed() is False:
                                                pass
                                            else:
                                                driver.find_element_by_id(title.title_id[0]).send_keys(
                                                    adid_5.m_textCtrl6.GetValue())
                                                input_history.append("タイトル")
                                                print(
                                                    "「お問い合わせ内容タイトル」を入力済み（id値）")

# 操作できない要素の回避
                                        except Exception as e:
                                            print(e)

# リストインデックスに関するエラー回避
                                except Exception as e:
                                    print(e)


#お問い合わせ本文
# 文頭に個別の企業名を差し込めるよう仕様変更（2022.12.13）
                                import TEXTAREA
                                importlib.reload(TEXTAREA)

                                if "住所" in str(TEXTAREA.list_4tn) \
                                    or "address" in str(TEXTAREA.list_4tn) \
                                    or "jyuusho" in str(TEXTAREA.list_4tn):
                                    print("textareaタグのname値に「住所」「address」が含まれることを確認")

                                    if len([
                                        i for i in Get_tag_text.list_1 if "都道府県以降" in i
                                            or "都道府県以下" in i
                                            or "都道府県名" in i]) == 0:
                                        driver.find_element_by_name(
                                            TEXTAREA.list_4tn[0]).clear()
                                        driver.find_element_by_name(
                                            TEXTAREA.list_4tn[0]).send_keys(
                                                adid_4.m_comboBox6.GetValue()
                                                + adid_4.m_textCtrl30.GetValue()
                                                + adid_4.m_textCtrl31.GetValue()
                                                + adid_4.m_textCtrl32.GetValue()
                                                )
                                        input_history.append(
                                            adid_4.m_comboBox6.GetValue()
                                            + adid_4.m_textCtrl30.GetValue()
                                            + adid_4.m_textCtrl31.GetValue()
                                            + adid_4.m_textCtrl32.GetValue()
                                            )
                                        print("textareaタグにおいて「都道府県含む住所」を入力済み")

                                    else:
                                        driver.find_element_by_name(
                                            TEXTAREA.list_4tn[0]).clear()
                                        driver.find_element_by_name(
                                            TEXTAREA.list_4tn[0]).send_keys(
                                                adid_4.m_textCtrl30.GetValue()
                                                + adid_4.m_textCtrl31.GetValue()
                                                + adid_4.m_textCtrl32.GetValue())
                                        input_history.append(
                                            adid_4.m_textCtrl30.GetValue()
                                            + adid_4.m_textCtrl31.GetValue()
                                            + adid_4.m_textCtrl32.GetValue()
                                            )
                                        print("textareaタグにおいて「都道府県を含まない住所」を入力済み")

# 送信本文字数制限チェック
                                    if not TEXTAREA.MAXLEN == []:
                                        if int(TEXTAREA.MAXLEN[0]) < 2000 and not int(TEXTAREA.MAXLEN[0]) == 100:
                                            input_history.append(
                                                TEXTAREA.MAXLEN[0] + "文字以内に設定されています。")
                                            print(TEXTAREA.MAXLEN[0] + "文字以内に設定されています。")
                                        elif int(TEXTAREA.MAXLEN[0]) == 100:
                                            input_history.append("本文字数制限なし")
                                            print("本文字数制限なし")
                                    elif TEXTAREA.MAXLEN == []:
                                        input_history.append("本文字数制限なし")
                                        print("本文字数制限なし")

# name値のみ存在
                                    if len(TEXTAREA.list_5tn) > 0:
                                        print("textareaタグのname値のみ存在することを確認")

                                        if TEXTAREA.MAXLEN == []:
                                            if not len(TEXTAREA.URL_NG) == 0:
                                                driver.find_element_by_name(TEXTAREA.list_5tn[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl12.GetValue())
                                                input_history.append("urlなし本文投稿済み")
                                                print("urlなし本文投稿済み")
                                            else:
                                                driver.find_element_by_name(TEXTAREA.list_5tn[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl8.GetValue())
                                                input_history.append("通常本文投稿済み")
                                                print("通常本文投稿済み")

# パターン追加（2023.09.11）
# <textarea id="fldfield21_W46UR" name="fldfield21_W46UR" cols="50" rows="1" 　maxlength="5000" class="text-field area w-input formbox-field_W46UR"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 5000:
                                            driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl8.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            
# パターン追加（2022.12.18）
# <textarea name="remarks" id="remarks" rows="4" cols="50" maxlength="3000" style="overflow: hidden; word-wrap: break-word; resize: horizontal; height: 170px;" class="inp_error"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 3000:
                                            driver.find_element_by_name(TEXTAREA.list_5tn[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

#パターン追加（2022.09.13）
#<textarea id="pMCF01" name="pMCF01" rows="10" aria-labelledby="LblpMCF01 InstructpMCF01" class="mktoField mktoHasWidth mktoRequired mktoInvalid" maxlength="2000" aria-required="true" style="width: 500px;" aria-invalid="true"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 2000:
                                            driver.find_element_by_name(TEXTAREA.list_5tn[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif 1000 < int(TEXTAREA.MAXLEN[0]) < 2000:
                                            driver.find_element_by_name(TEXTAREA.list_5tn[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            
                                        elif 500 < int(TEXTAREA.MAXLEN[0]) < 1000 \
                                            or int(TEXTAREA.MAXLEN[0]) == 1000:
                                            driver.find_element_by_name(TEXTAREA.list_5tn[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl10.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            
                                        elif int(TEXTAREA.MAXLEN[0]) <= 500 \
                                                and not int(TEXTAREA.MAXLEN[0]) == 100:
                                            driver.find_element_by_name(TEXTAREA.list_5tn[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl11.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            
                                        elif int(TEXTAREA.MAXLEN[0]) == 100:
                                            driver.find_element_by_name(TEXTAREA.list_5tn[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl8.GetValue())
                                            input_history.append("通常本文投稿済み")
                                            print("通常本文投稿済み")

# 通常のtextareaタグに対する処理
                                elif not "住所" in str(TEXTAREA.element3) \
                                    or "address" in str(TEXTAREA.element3) \
                                    or "jyuusho" in str(TEXTAREA.element3):
                                    print("textareaタグのname値に「住所」「address」が含まれていないことを確認")

# 送信本文字数制限チェック
                                    if not TEXTAREA.MAXLEN == []:
                                        if int(TEXTAREA.MAXLEN[0]) < 2000 and not int(TEXTAREA.MAXLEN[0]) == 100:
                                            input_history.append(
                                                TEXTAREA.MAXLEN[0] + "文字以内に設定されています。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内に設定されています。")
                                        elif int(TEXTAREA.MAXLEN[0]) == 100:
                                            input_history.append("本文字数制限なし")
                                            print("本文字数制限なし")
                                    elif TEXTAREA.MAXLEN == []:
                                        input_history.append("本文字数制限なし")
                                        print("本文字数制限なし")

# （Googleフォーム）
# <textarea class="KHxj8b tL9Q4c" jsname="YPqjbf" data-rows="1" tabindex="0" aria-label="回答を入力" jscontroller="gZjhIf" jsaction="input:Lg5SV;ti6hGc:XMgOHc;rcuQ6b:WYd;" required="" dir="auto" data-initial-dir="auto" data-initial-value="" aria-labelledby="i13" aria-describedby="i14 i15" style="height: 24px;"></textarea>
# ※「class="quantumWizTextinputPapertextareaInput.exportTextarea"」は現在使えないので注意！！（2022.03.02）
                                    # if not len([i for i in TEXTAREA.TEXTAREA_3 if "tL9Q4c" in i]) == 0:
                                    #     driver.find_elements_by_css_selector(".KHxj8b.tL9Q4c")[
                                    #         0].send_keys(adid_5.m_textCtrl8.GetValue())
                                    #     input_history.append("通常本文投稿済み")

# id値が存在する場合
                                    if len(TEXTAREA.TEXTAREA_1) > 0 \
                                        and len(TEXTAREA.TEXTAREA_2) == 0 \
                                        and len(TEXTAREA.TEXTAREA_3) == 0:
                                        print("textareaタグのid値が存在する")

                                        if TEXTAREA.MAXLEN == []:
                                            if not len(TEXTAREA.URL_NG) == 0:
                                                driver.find_element_by_id(
                                                TEXTAREA.TEXTAREA_1[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl12.GetValue())
                                                input_history.append("urlなし本文投稿済み")
                                                print("urlなし本文投稿済み（id）")
                                            else:
                                                driver.find_element_by_id(
                                                TEXTAREA.TEXTAREA_1[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl8.GetValue())
                                                input_history.append("通常本文投稿済み")
                                                print("通常本文投稿済み（id）")

# パターン追加（2023.09.11）
# <textarea id="fldfield21_W46UR" name="fldfield21_W46UR" cols="50" rows="1" 　maxlength="5000" class="text-field area w-input formbox-field_W46UR"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 5000:
                                            driver.find_element_by_id(
                                                TEXTAREA.TEXTAREA_1[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl8.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

# パターン追加（2022.12.18）
# <textarea name="remarks" id="remarks" rows="4" cols="50" maxlength="3000" style="overflow: hidden; word-wrap: break-word; resize: horizontal; height: 170px;" class="inp_error"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 3000:
                                            driver.find_element_by_id(TEXTAREA.TEXTAREA_1[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

#パターン追加（2022.09.13）
#<textarea id="pMCF01" name="pMCF01" rows="10" aria-labelledby="LblpMCF01 InstructpMCF01" class="mktoField mktoHasWidth mktoRequired mktoInvalid" maxlength="2000" aria-required="true" style="width: 500px;" aria-invalid="true"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 2000:
                                            driver.find_element_by_id(TEXTAREA.TEXTAREA_1[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif 1000 < int(TEXTAREA.MAXLEN[0]) < 2000:
                                            driver.find_element_by_id(TEXTAREA.TEXTAREA_1[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            
                                        elif 500 < int(TEXTAREA.MAXLEN[0]) < 1000 \
                                            or int(TEXTAREA.MAXLEN[0]) == 1000:
                                            driver.find_element_by_id(TEXTAREA.TEXTAREA_1[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl10.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            
                                        elif int(TEXTAREA.MAXLEN[0]) <= 500 \
                                                and not int(TEXTAREA.MAXLEN[0]) == 100:
                                            driver.find_element_by_id(TEXTAREA.TEXTAREA_1[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl11.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            
                                        elif int(TEXTAREA.MAXLEN[0]) == 100:
                                            if not len(TEXTAREA.URL_NG) == 0:
                                                driver.find_element_by_id(
                                                    TEXTAREA.TEXTAREA_1[0]).send_keys(
                                                        # ws3.cell(k, 2).value +
                                                        adid_5.m_textCtrl12.GetValue())
                                                input_history.append("urlなし本文投稿済み")
                                                print("urlなし本文投稿済み")
                                            else:
                                                driver.find_element_by_id(
                                                    TEXTAREA.TEXTAREA_1[0]).send_keys(
                                                        # ws3.cell(k, 2).value +
                                                        adid_5.m_textCtrl8.GetValue())
                                                input_history.append("通常本文投稿済み")
                                                print("通常本文投稿済み")

# name値のみ存在
                                    elif len(TEXTAREA.TEXTAREA_1) == 0 \
                                        and len(TEXTAREA.TEXTAREA_2) > 0 \
                                        and len(TEXTAREA.TEXTAREA_3) == 0:
                                        print("textareaタグのname値が存在する")

                                        if TEXTAREA.MAXLEN == []:
                                            if not len(TEXTAREA.URL_NG) == 0:
                                                driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl12.GetValue())
                                                input_history.append("urlなし本文投稿済み")
                                                print("urlなし本文投稿済み（name）")
                                            else:
                                                driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl8.GetValue())
                                                input_history.append("通常本文投稿済み")
                                                print("通常本文投稿済み（name）")

# パターン追加（2023.09.11）
# <textarea id="fldfield21_W46UR" name="fldfield21_W46UR" cols="50" rows="1" 　maxlength="5000" class="text-field area w-input formbox-field_W46UR"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 5000:
                                            driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl8.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            
# パターン追加（2022.12.18）
# <textarea name="remarks" id="remarks" rows="4" cols="50" maxlength="3000" style="overflow: hidden; word-wrap: break-word; resize: horizontal; height: 170px;" class="inp_error"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 3000:
                                            driver.find_element_by_name(TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

#パターン追加（2022.09.13）
#<textarea id="pMCF01" name="pMCF01" rows="10" aria-labelledby="LblpMCF01 InstructpMCF01" class="mktoField mktoHasWidth mktoRequired mktoInvalid" maxlength="2000" aria-required="true" style="width: 500px;" aria-invalid="true"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 2000:
                                            driver.find_element_by_name(TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl10.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif 1000 < int(TEXTAREA.MAXLEN[0]) < 2000:
                                            driver.find_element_by_name(TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif 500 < int(TEXTAREA.MAXLEN[0]) < 1000:
                                            driver.find_element_by_name(TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl10.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif int(TEXTAREA.MAXLEN[0]) <= 500 \
                                                and not int(TEXTAREA.MAXLEN[0]) == 100:
                                            driver.find_element_by_name(TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl11.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif int(TEXTAREA.MAXLEN[0]) == 100:
                                            if not len(TEXTAREA.URL_NG) == 0:
                                                driver.find_element_by_name(
                                                    TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                        # ws3.cell(k, 2).value +
                                                        adid_5.m_textCtrl12.GetValue())
                                                input_history.append("urlなし本文投稿済み")
                                                print("urlなし本文投稿済み")
                                            else:
                                                driver.find_element_by_name(
                                                    TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                        # ws3.cell(k, 2).value +
                                                        adid_5.m_textCtrl8.GetValue())
                                                input_history.append("通常本文投稿済み")
                                                print("通常本文投稿済み")

# name値及びclass値が存在する場合
                                    elif len(TEXTAREA.TEXTAREA_1) == 0 \
                                        and len(TEXTAREA.TEXTAREA_2) == 1 \
                                        and len(TEXTAREA.TEXTAREA_3) > 0:
                                        print("textareaタグのname値及びclass値が存在する場合")

                                        if TEXTAREA.MAXLEN == []:
                                            if not len(TEXTAREA.URL_NG) == 0:
                                                driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl12.GetValue())
                                                input_history.append("urlなし本文投稿済み")
                                                print("urlなし本文投稿済み（name）")
                                            else:
                                                driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl8.GetValue())
                                                input_history.append("通常本文投稿済み")
                                                print("通常本文投稿済み（name）")

# パターン追加（2023.02.17）
# ※５０００文字以内も文字数制限なしとして扱う（今後対応予定）
# <textarea class="longInput" maxlength="5000" rows="10" name="contactText"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 5000:
                                            driver.find_element_by_name(TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl8.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

# パターン追加（2022.12.18）
# <textarea name="remarks" id="remarks" rows="4" cols="50" maxlength="3000" style="overflow: hidden; word-wrap: break-word; resize: horizontal; height: 170px;" class="inp_error"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 3000:
                                            driver.find_element_by_name(TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

#パターン追加（2022.09.13）
#<textarea id="pMCF01" name="pMCF01" rows="10" aria-labelledby="LblpMCF01 InstructpMCF01" class="mktoField mktoHasWidth mktoRequired mktoInvalid" maxlength="2000" aria-required="true" style="width: 500px;" aria-invalid="true"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 2000:
                                            driver.find_element_by_name(TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl10.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif 1000 < int(TEXTAREA.MAXLEN[0]) < 2000:
                                            driver.find_element_by_name(TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            
                                        elif 500 < int(TEXTAREA.MAXLEN[0]) < 1000 \
                                            or int(TEXTAREA.MAXLEN[0]) == 1000:
                                            driver.find_element_by_name(TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl10.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif int(TEXTAREA.MAXLEN[0]) <= 500 \
                                                and not int(TEXTAREA.MAXLEN[0]) == 100:
                                            driver.find_element_by_name(TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl11.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif int(TEXTAREA.MAXLEN[0]) == 100:
                                            if not len(TEXTAREA.URL_NG) == 0:
                                                driver.find_element_by_name(
                                                    TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                        # ws3.cell(k, 2).value +
                                                        adid_5.m_textCtrl12.GetValue())
                                                input_history.append("urlなし本文投稿済み")
                                                print("urlなし本文投稿済み")
                                            else:
                                                driver.find_element_by_name(
                                                    TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                        # ws3.cell(k, 2).value +
                                                        adid_5.m_textCtrl8.GetValue())
                                                input_history.append("通常本文投稿済み")
                                                print("通常本文投稿済み")

# textareaタグが複数存在する
                                    elif len(TEXTAREA.TEXTAREA_1) == 0 \
                                        and len(TEXTAREA.TEXTAREA_2) > 1 \
                                        and len(TEXTAREA.TEXTAREA_3) > 1:
                                        print(
                                            "textareaタグが複数、且つname値及びclass値が存在する")
                                        
                                        if TEXTAREA.MAXLEN == []:
                                            if not len(TEXTAREA.URL_NG) == 0:
                                                driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[
                                                    len(TEXTAREA.TEXTAREA_2)-1]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl12.GetValue())
                                                input_history.append("urlなし本文投稿済み")
                                                print("urlなし本文投稿済み（name/class）")
                                            else:
                                                driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[
                                                    len(TEXTAREA.TEXTAREA_2)-1]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl8.GetValue())
                                                input_history.append("通常本文投稿済み")
                                                print("通常本文投稿済み（name/class）")

# パターン追加（2023.09.11）
# <textarea id="fldfield21_W46UR" name="fldfield21_W46UR" cols="50" rows="1" 　maxlength="5000" class="text-field area w-input formbox-field_W46UR"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 5000:
                                            driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[len(TEXTAREA.TEXTAREA_2)]-1).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl8.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                                                                            
# パターン追加（2022.12.18）
# <textarea name="remarks" id="remarks" rows="4" cols="50" maxlength="3000" style="overflow: hidden; word-wrap: break-word; resize: horizontal; height: 170px;" class="inp_error"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 3000:
                                            driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[len(TEXTAREA.TEXTAREA_2)]-1).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

#パターン追加（2022.09.13）
#<textarea id="pMCF01" name="pMCF01" rows="10" aria-labelledby="LblpMCF01 InstructpMCF01" class="mktoField mktoHasWidth mktoRequired mktoInvalid" maxlength="2000" aria-required="true" style="width: 500px;" aria-invalid="true"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 2000:
                                            driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[len(TEXTAREA.TEXTAREA_2)-1]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl10.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif 1000 < int(TEXTAREA.MAXLEN[0]) < 2000:
                                            driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[len(TEXTAREA.TEXTAREA_2)-1]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif 500 < int(TEXTAREA.MAXLEN[0]) < 1000 \
                                            or int(TEXTAREA.MAXLEN[0]) == 1000:
                                            try:
                                                driver.find_element_by_name(
                                                    TEXTAREA.TEXTAREA_2[
                                                    len(TEXTAREA.TEXTAREA_2)-1]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl10.GetValue())
                                            except:
                                                driver.find_element_by_name(
                                                    TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl10.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif int(TEXTAREA.MAXLEN[0]) <= 500 \
                                            and not int(TEXTAREA.MAXLEN[0]) == 100:
                                            driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[len(TEXTAREA.TEXTAREA_2)-1]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl11.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif int(TEXTAREA.MAXLEN[0]) == 100:
                                            if not len(TEXTAREA.URL_NG) == 0:
                                                driver.find_element_by_name(
                                                    TEXTAREA.TEXTAREA_2[len(TEXTAREA.TEXTAREA_2)-1]).send_keys(
                                                        # ws3.cell(k, 2).value +
                                                        adid_5.m_textCtrl12.GetValue())
                                                input_history.append("urlなし本文投稿済み")
                                                print("urlなし本文投稿済み")
                                            else:
                                                driver.find_element_by_name(
                                                    TEXTAREA.TEXTAREA_2[
                                                        len(TEXTAREA.TEXTAREA_2)-1]).send_keys(
                                                        # ws3.cell(k, 2).value +
                                                        adid_5.m_textCtrl8.GetValue())
                                                input_history.append("通常本文投稿済み")
                                                print("通常本文投稿済み")

# id値及びclass値の両方が存在
                                    elif len(TEXTAREA.TEXTAREA_1) > 0 \
                                        and len(TEXTAREA.TEXTAREA_2) == 0 \
                                        and len(TEXTAREA.TEXTAREA_3) > 0:
                                        print("textareaタグのid値及びclass値が存在する")

                                        if TEXTAREA.MAXLEN == []:
                                            if not len(TEXTAREA.URL_NG) == 0:
                                                driver.find_element_by_id(
                                                TEXTAREA.TEXTAREA_1[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl12.GetValue())
                                                input_history.append("urlなし本文投稿済み")
                                                print("urlなし本文投稿済み（id/class）")
                                            else:
                                                driver.find_element_by_id(
                                                TEXTAREA.TEXTAREA_1[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl8.GetValue())
                                                input_history.append("通常本文投稿済み")
                                                print("通常本文投稿済み（id/class）")

# パターン追加（2023.09.11）
# <textarea id="fldfield21_W46UR" name="fldfield21_W46UR" cols="50" rows="1" 　maxlength="5000" class="text-field area w-input formbox-field_W46UR"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 5000:
                                            driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl8.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

# パターン追加（2022.12.18）
# <textarea name="remarks" id="remarks" rows="4" cols="50" maxlength="3000" style="overflow: hidden; word-wrap: break-word; resize: horizontal; height: 170px;" class="inp_error"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 3000:
                                            driver.find_element_by_id(TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

#パターン追加（2022.09.13）
#<textarea id="pMCF01" name="pMCF01" rows="10" aria-labelledby="LblpMCF01 InstructpMCF01" class="mktoField mktoHasWidth mktoRequired mktoInvalid" maxlength="2000" aria-required="true" style="width: 500px;" aria-invalid="true"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 2000:
                                            driver.find_element_by_id(TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif 1000 < int(TEXTAREA.MAXLEN[0]) < 2000:
                                            driver.find_element_by_id(TEXTAREA.TEXTAREA_1[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif 500 < int(TEXTAREA.MAXLEN[0]) < 1000 \
                                            or int(TEXTAREA.MAXLEN[0]) == 1000:
                                            driver.find_element_by_id(TEXTAREA.TEXTAREA_1[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl10.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif int(TEXTAREA.MAXLEN[0]) <= 500 \
                                                and not int(TEXTAREA.MAXLEN[0]) == 100:
                                            driver.find_element_by_id(TEXTAREA.TEXTAREA_1[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl11.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif int(TEXTAREA.MAXLEN[0]) == 100:
                                            if not len(TEXTAREA.URL_NG) == 0:
                                                driver.find_element_by_id(
                                                    TEXTAREA.TEXTAREA_1[0]).send_keys(
                                                        # ws3.cell(k, 2).value +
                                                        adid_5.m_textCtrl12.GetValue())
                                                input_history.append("urlなし本文投稿済み")
                                                print("urlなし本文投稿済み")
                                            else:
                                                driver.find_element_by_id(
                                                    TEXTAREA.TEXTAREA_1[0]).send_keys(
                                                        # ws3.cell(k, 2).value +
                                                        adid_5.m_textCtrl8.GetValue())
                                                input_history.append("通常本文投稿済み")
                                                print("通常本文投稿済み")

# id値及びname値が存在しない場合
                                    elif len(TEXTAREA.TEXTAREA_1) == 0 \
                                        and len(TEXTAREA.TEXTAREA_2) == 0 \
                                        and len(TEXTAREA.TEXTAREA_3) > 0:
                                        print("textareaタグのclass値が存在する")

                                        if TEXTAREA.MAXLEN == []:
                                            if not len(TEXTAREA.URL_NG) == 0:
                                                driver.find_element_by_class_name(
                                                TEXTAREA.TEXTAREA_3[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adclass_name_5.m_textCtrl12.GetValue())
                                                input_history.append("urlなし本文投稿済み")
                                                print("urlなし本文投稿済み（class）")
                                            else:
                                                driver.find_element_by_class_name(
                                                TEXTAREA.TEXTAREA_3[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adclass_name_5.m_textCtrl8.GetValue())
                                                input_history.append("通常本文投稿済み")
                                                print("通常本文投稿済み（class）")

# パターン追加（2023.09.11）
# <textarea id="fldfield21_W46UR" name="fldfield21_W46UR" cols="50" rows="1" 　maxlength="5000" class="text-field area w-input formbox-field_W46UR"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 5000:
                                            driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl8.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

# パターン追加（2022.12.18）
# <textarea name="remarks" id="remarks" rows="4" cols="50" maxlength="3000" style="overflow: hidden; word-wrap: break-word; resize: horizontal; height: 170px;" class="inp_error"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 3000:
                                            driver.find_element_by_class_name(TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

#パターン追加（2022.09.13）
#<textarea id="pMCF01" name="pMCF01" rows="10" aria-labelledby="LblpMCF01 InstructpMCF01" class="mktoField mktoHasWidth mktoRequired mktoInvalid" maxlength="2000" aria-required="true" style="width: 500px;" aria-invalid="true"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 2000:
                                            driver.find_element_by_class_name(TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif 1000 < int(TEXTAREA.MAXLEN[0]) < 2000:
                                            driver.find_element_by_class_name(
                                                TEXTAREA.TEXTAREA_3[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif 500 < int(TEXTAREA.MAXLEN[0]) < 1000 \
                                            or int(TEXTAREA.MAXLEN[0]) == 1000:
                                            driver.find_element_by_class_name(
                                                TEXTAREA.TEXTAREA_3[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl10.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif int(TEXTAREA.MAXLEN[0]) <= 500 \
                                                and not int(TEXTAREA.MAXLEN[0]) == 100:
                                            driver.find_element_by_class_name(
                                                TEXTAREA.TEXTAREA_3[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl11.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif int(TEXTAREA.MAXLEN[0]) == 100:
                                            if not len(TEXTAREA.URL_NG) == 0:
                                                driver.find_element_by_class_name(
                                                    TEXTAREA.TEXTAREA_3[0]).send_keys(
                                                        # ws3.cell(k, 2).value +
                                                        adclass_name_5.m_textCtrl12.GetValue())
                                                input_history.append("urlなし本文投稿済み")
                                                print("urlなし本文投稿済み")
                                            else:
                                                driver.find_element_by_class_name(
                                                    TEXTAREA.TEXTAREA_3[0]).send_keys(
                                                        # ws3.cell(k, 2).value +
                                                        adclass_name_5.m_textCtrl8.GetValue())
                                                input_history.append("通常本文投稿済み")
                                                print("通常本文投稿済み")

# id値及びname値の両方が存在
                                    elif len(TEXTAREA.TEXTAREA_1) > 0 \
                                        and len(TEXTAREA.TEXTAREA_2) > 0 \
                                        and len(TEXTAREA.TEXTAREA_3) == 0:
                                        print("textareaタグのid値及びname値が存在する")
                                        if len(TEXTAREA.TEXTAREA_2) == 3:
                                            elemName0 = driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[0])
                                            elemName1 = driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[1])
                                            elemName2 = driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[2])
                                            print(
                                                "「TEXTAREA.TEXTAREA_2」タグが３個以上存在することを確認")
                                            try:
                                                if elemName0.is_displayed() is False \
                                                    or elemName1.is_displayed() is False \
                                                    or elemName2.is_displayed() is False:

                                                    if "1" in TEXTAREA.TEXTAREA_2[0]:
                                                        driver.find_element_by_name(
                                                            TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                            # ws3.cell(k, 2).value +
                                                            adid_5.m_textCtrl8.GetValue())
                                                        input_history.append(
                                                            "通常本文投稿済み")
                                                        print(
                                                            "通常本文投稿済み：" + TEXTAREA.TEXTAREA_2[0])
                                                    elif "2" in TEXTAREA.TEXTAREA_2[1]:
                                                        driver.find_element_by_name(
                                                            TEXTAREA.TEXTAREA_2[1]).send_keys(
                                                            # ws3.cell(k, 2).value +
                                                            adid_5.m_textCtrl8.GetValue())
                                                        input_history.append(
                                                            "通常本文投稿済み")
                                                        print(
                                                            "通常本文投稿済み：" + TEXTAREA.TEXTAREA_2[1])
                                                    elif "3" in TEXTAREA.TEXTAREA_2[2]:
                                                        driver.find_element_by_name(
                                                            TEXTAREA.TEXTAREA_2[2]).send_keys(
                                                            # ws3.cell(k, 2).value +
                                                            adid_5.m_textCtrl8.GetValue())
                                                        input_history.append(
                                                            "通常本文投稿済み")
                                                        print(
                                                            "通常本文投稿済み：" + TEXTAREA.TEXTAREA_2[2])

# 操作できない要素の回避
                                            except Exception as e:
                                                print(e)

                                        elif len(TEXTAREA.TEXTAREA_2) == 1:
                                            print("textareaタグのname値："
                                                  + str(TEXTAREA.TEXTAREA_2))
                                            if TEXTAREA.MAXLEN == []:
                                                driver.find_element_by_name(
                                                    TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl8.GetValue())
                                                input_history.append("通常本文投稿済み")
                                                print("通常本文投稿済み")

                                            elif int(TEXTAREA.MAXLEN[0]) == 100:
                                                driver.find_element_by_name(
                                                    TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl8.GetValue())
                                                input_history.append("通常本文投稿済み")
                                                print("通常本文投稿済み")

# パターン追加（2023.09.11）
# <textarea id="fldfield21_W46UR" name="fldfield21_W46UR" cols="50" rows="1" 　maxlength="5000" class="text-field area w-input formbox-field_W46UR"></textarea>
                                            elif int(TEXTAREA.MAXLEN[0]) == 5000:
                                                driver.find_element_by_name(
                                                    TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl8.GetValue())
                                                input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                                print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

# パターン追加（2022.12.18）
# <textarea name="remarks" id="remarks" rows="4" cols="50" maxlength="3000" style="overflow: hidden; word-wrap: break-word; resize: horizontal; height: 170px;" class="inp_error"></textarea>
                                            elif int(TEXTAREA.MAXLEN[0]) == 3000:
                                                driver.find_element_by_name(
                                                    TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl9.GetValue())
                                                input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                                print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

#パターン追加（2022.09.13）
#<textarea id="pMCF01" name="pMCF01" rows="10" aria-labelledby="LblpMCF01 InstructpMCF01" class="mktoField mktoHasWidth mktoRequired mktoInvalid" maxlength="2000" aria-required="true" style="width: 500px;" aria-invalid="true"></textarea>
                                            elif int(TEXTAREA.MAXLEN[0]) == 2000:
                                                driver.find_element_by_name(
                                                    TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl10.GetValue())
                                                input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                                print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                            elif 1000 < int(TEXTAREA.MAXLEN[0]) < 2000:
                                                driver.find_element_by_name(
                                                    TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl9.GetValue())
                                                input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                                print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            
                                            elif 500 < int(TEXTAREA.MAXLEN[0]) < 1000 \
                                                or int(TEXTAREA.MAXLEN[0]) == 1000:
                                                driver.find_element_by_name(
                                                    TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl10.GetValue())
                                                input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                                print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                            elif int(TEXTAREA.MAXLEN[0]) <= 500 \
                                                and not int(TEXTAREA.MAXLEN[0]) == 100:
                                                driver.find_element_by_name(
                                                    TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl11.GetValue())
                                                input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                                print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

# 全て存在
                                    elif len(TEXTAREA.TEXTAREA_1) > 0 \
                                        and len(TEXTAREA.TEXTAREA_2) > 0 \
                                        and len(TEXTAREA.TEXTAREA_3) > 0:
                                        print(
                                            "textareaタグのid値・name値・class値の全てが存在する")

                                        if TEXTAREA.MAXLEN == []:
                                            if not len(TEXTAREA.URL_NG) == 0:
                                                driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl12.GetValue())
                                                input_history.append("urlなし本文投稿済み")
                                                print("urlなし本文投稿済み（id/name/class）")
                                            else:
                                                driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                    # ws3.cell(k, 2).value +
                                                    adid_5.m_textCtrl8.GetValue())
                                                input_history.append("通常本文投稿済み")
                                                print("通常本文投稿済み（id/name/class）")

# パターン追加（2023.09.11）
# <textarea id="fldfield21_W46UR" name="fldfield21_W46UR" cols="50" rows="1" 　maxlength="5000" class="text-field area w-input formbox-field_W46UR"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 5000:
                                            driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl8.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                                                                            
# パターン追加（2022.12.18）
# <textarea name="remarks" id="remarks" rows="4" cols="50" maxlength="3000" style="overflow: hidden; word-wrap: break-word; resize: horizontal; height: 170px;" class="inp_error"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 3000:
                                            driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

#パターン追加（2022.09.13）
#<textarea id="pMCF01" name="pMCF01" rows="10" aria-labelledby="LblpMCF01 InstructpMCF01" class="mktoField mktoHasWidth mktoRequired mktoInvalid" maxlength="2000" aria-required="true" style="width: 500px;" aria-invalid="true"></textarea>
                                        elif int(TEXTAREA.MAXLEN[0]) == 2000:
                                            driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif 1000 < int(TEXTAREA.MAXLEN[0]) < 2000:
                                            driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl9.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

# パターン追加（2021.12.26）
# <textarea name="data[Contact][message]" TEXTAREA.MAXLENgth="1000" cols="30" rows="6" id="ContactMessage" required="required"></textarea>
                                        elif 500 < int(TEXTAREA.MAXLEN[0]) < 1000 \
                                            or int(TEXTAREA.MAXLEN[0]) == 1000:
                                            driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl10.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif int(TEXTAREA.MAXLEN[0]) <= 500 \
                                            and not int(TEXTAREA.MAXLEN[0]) == 100:
                                            driver.find_element_by_name(
                                                TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                # ws3.cell(k, 2).value +
                                                adid_5.m_textCtrl11.GetValue())
                                            input_history.append(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")
                                            print(
                                                "本文" + TEXTAREA.MAXLEN[0] + "文字以内で投稿しました。")

                                        elif int(TEXTAREA.MAXLEN[0]) == 100:
                                            if not len(TEXTAREA.URL_NG) == 0:
                                                driver.find_element_by_name(
                                                    TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                        # ws3.cell(k, 2).value +
                                                        adid_5.m_textCtrl12.GetValue())
                                                input_history.append("urlなし本文投稿済み")
                                                print("urlなし本文投稿済み")
                                            else:
                                                driver.find_element_by_name(
                                                    TEXTAREA.TEXTAREA_2[0]).send_keys(
                                                        # ws3.cell(k, 2).value +
                                                        adid_5.m_textCtrl8.GetValue())
                                                input_history.append("通常本文投稿済み")
                                                print("通常本文投稿済み")

#アンケート
#パターン追加（2022.09.29）
                                try:
                                  if "知りましたか" in str(soup.find_all("form")) \
                                    or "お知りに" in str(soup.find_all("form")) \
                                    or "知ったきっかけ" in str(soup.find_all("form")):
                                    print("「アンケート」に関するテキスト要素が含まれていることを確認")
                                    form_text = [
                                        i for i in Select_contents.select_option if "ネット" in i]

                                    if len(Select_contents.select_name_value) == 1:
                                        for j in range(1, len(form_text)+1):
                                            dropdown = driver.find_element_by_name(
                                                Select_contents.select_name_value[0])
                                            print(Select_contents.select_name_value[0])
                                            select = Select(dropdown)
                                            select.select_by_visible_text(
                                                form_text[j-1])
                                            print(
                                                "selectタグのname値が１個：" + Select_contents.select_name_value[0])
                                            print("ドロップダウンボックスの選択肢：" +
                                                  form_text[j-1])
                                            input_history.append(form_text[j-1])

                                    elif len(Select_contents.select_name_value) > 1:
                                        for j in range(1, len(form_text)+1):
                                            try:
                                                dropdown = driver.find_element_by_name(
                                                    Select_contents.select_name_value[0])
                                                print(Select_contents.select_name_value)
                                                select = Select(dropdown)
                                                select.select_by_visible_text(form_text[j-1])
                                                print(
                                                    "selectタグのname値が２個以上：" + Select_contents.select_name_value[0])
                                                print("ドロップダウンボックスの選択肢：" +
                                                  form_text[j-1])
                                                input_history.append(form_text[j-1])
                                            except:
                                                try:
                                                    dropdown = driver.find_element_by_name(
                                                        Select_contents.select_name_value[1])
                                                    print(Select_contents.select_name_value)
                                                    select = Select(dropdown)
                                                    select.select_by_visible_text(form_text[j-1])
                                                    print(
                                                        "selectタグのname値が２個以上：" + Select_contents.select_name_value[1])
                                                    print("ドロップダウンボックスの選択肢：" +
                                                      form_text[j-1])
                                                    input_history.append(form_text[j-1])
                                                except:
                                                    pass

                                except Exception as e:
                                    print("error:", e)

# ラジオボタン
                                element5 = soup.find_all("input",type="radio")
                                element6 = soup.find_all("input",class_="questionTypeRadio")
                                element7 = soup.find_all("input",attrs={"name":"questioner_type","type":"radio"})

                                if not element5 == [] \
                                    or not element6 == [] \
                                        or not element7 == []:
                                   import radio
                                   importlib.reload(radio)

# value値のみの場合、又はvalue値及びid値有りの場合
                                   if len(radio.SELECT_1) > 0 \
                                        and len(radio.SELECT_2) == 0 \
                                        and len(radio.SELECT_3) == 0 \
                                        and len(radio.SELECT_4) == 0 \
                                        and len(radio.SELECT_5) == 0 \
                                        or len(radio.SELECT_1) > 0 \
                                        and len(radio.SELECT_2) > 0 \
                                        and len(radio.SELECT_3) == 0 \
                                        and len(radio.SELECT_4) == 0 \
                                        and len(radio.SELECT_5) == 0:
                                    print("value値のみの場合、又はvalue値及びid値有りの場合")
                                    print(len(radio.SELECT_1))
                                    print(len(radio.SELECT_2))
                                    print(len(radio.SELECT_3))
                                    print(len(radio.SELECT_4))
                                    print(len(radio.SELECT_5))

# （お問い合わせは法人・個人のどちらからなのか？）
                                    try:
                                        if len(radio.distinction_1) == 1 \
                                                and len(radio.contact_1) == 0:
                                            radio_ = driver.find_element_by_css_selector(
                                                "[value='" + radio.distinction_1[0] + "']")
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append(
                                                    radio.distinction_1[0])
                                                print(
                                                    "value値にてお問い合わせを行った人の区別を選択済")

                                        elif len(radio.distinction_1) == 0 \
                                                and len(radio.contact_1) == 1:
                                            radio_ = driver.find_element_by_css_selector(
                                                "[value='" + radio.contact_1[0] + "']")
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append(
                                                    radio.contact_1[0])
                                                print("value値にて連絡方法を選択済み")

                                        elif len(radio.distinction_1) == 1 \
                                                and len(radio.contact_1) == 1:
                                            radio_ = driver.find_element_by_css_selector(
                                                "[value='" + radio.distinction_1[0] + "']")
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append(
                                                    radio.distinction_1[0])
                                                print(
                                                    "value値にてお問い合わせを行った人の区別を選択済")

                                            radio_ = driver.find_element_by_css_selector(
                                                "[value='" + radio.contact_1[0] + "']")
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append(
                                                    radio.contact_1[0])
                                                print("value値にて連絡方法を選択済み")

                                    except:
                                        pass

# （個人情報保護方針の同意）
                                    try:
                                        if len(radio.person_info_1) == 1 \
                                                and len(radio.person_info_2) == 1:
                                            radio_ = driver.find_element_by_id(
                                                radio.person_info_2[len(radio.person_info_2)-1])
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append("同意")
                                                print("id値にて個人情報保護方針の同意チェック済")

                                        elif len(radio.person_info_1) == 1 \
                                                and len(radio.person_info_2) == 0:
                                            radio_ = driver.find_element_by_css_selector(
                                                "[value='" + radio.person_info_1[0] + "']")
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append("同意")
                                                print(
                                                    "value値にて個人情報保護方針の同意チェック済")

                                        elif len(radio.person_info_1) == 0 \
                                                and len(radio.person_info_2) == 1:
                                            radio_ = driver.find_elements_by_id(radio.person_info_2[len(
                                                radio.person_info_2)-1])[len(radio.person_info_2)-1]
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append("同意")
                                                print("id値にて個人情報保護方針の同意チェック済")

                                    except:
                                        pass

# （お問い合わせ種別）
                                    try:
                                        if len(radio.kinds_2) > 0:
                                            radio_ = driver.find_elements_by_id(radio.SELECT_2[len(
                                                radio.SELECT_2)-1])[len(radio.SELECT_2)-1]
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append(
                                                    radio.SELECT_2[len(radio.SELECT_2)-1])
                                                print("id値にてお問い合わせ種別を選択済")

# 操作できない要素の回避
                                    except:
                                        try:
                                            if len(radio.kinds_2) > 0:
                                                radio_ = driver.find_element_by_css_selector(
                                                    "[value='" + radio.kinds_2[0] + "']")
                                                driver.execute_script(
                                                    "arguments[0].click();", radio_)
                                                print(radio_.is_selected())
                                                if radio_.is_selected() is True:
                                                    input_history.append(
                                                        radio.kinds_2[len(radio.kinds_2)-1])
                                                    print(
                                                        "value値にてお問い合わせ種別を選択済")

# 操作できない要素の回避
                                        except:
                                            try:
                                                print(
                                                    "value値にてお問い合わせの種別に関する要素見つからなかったため、別の方法を試します。")
                                                radio_ = driver.find_elements_by_id(radio.kinds_2[0])[
                                                    len(radio.kinds_2)-1]
                                                driver.execute_script(
                                                    "arguments[0].click();", radio_)
                                                print(radio_.is_selected())
                                                if radio_.is_selected() is True:
                                                    input_history.append(
                                                        radio.kinds_2[0])
                                                    print(radio_.is_selected())
                                                    print("id値にてお問い合わせ種別を選択済み")

# 操作できない要素の回避
                                            except:
                                                try:
                                                    print(
                                                        "id値にてお問い合わせの種別に関する要素見つからなかったため、別の方法を試します。")
                                                    radio_ = driver.find_element_by_id(
                                                        radio.kinds_2[len(radio.kinds_2)-1])
                                                    driver.execute_script(
                                                        "arguments[0].click();", radio_)
                                                    print(radio_.is_selected())
                                                    input_history.append(
                                                        radio.kinds_2[len(radio.kinds_2)-1])
                                                    print("id値にてお問い合わせ種別を選択済み")

                                                except:
                                                    pass


# value値及びname値有りの場合
                                   elif len(radio.SELECT_1) > 0 \
                                        and len(radio.SELECT_2) == 0 \
                                        and len(radio.SELECT_3) == 0 \
                                        and len(radio.SELECT_4) == 0 \
                                        and len(radio.SELECT_5) > 0:
                                    print("value値及びname値有りの場合")
                                    print("distinction_2（value）：" + str(len(radio.distinction_2)))
                                    print("contact_2（value）：" + str(len(radio.contact_2)))
                                    print("contact_info_2（value）：" + str(len(radio.contact_info_2)))
                                    print("question_2：" + str(len(radio.question_2)))
                                    print("question_3：" + str(len(radio.question_3)))
                                    print("person_info_3（value）：" + str(len(radio.person_info_3)))
                                    print("person_info_4（name）：" + str(len(radio.person_info_4)))
                                    print("kinds_2：" + str(len(radio.kinds_2)))
                                    print("kinds_value_2：" + str(len(radio.kinds_value_2)))
                                    print("kinds_3：" + str(len(radio.kinds_3)))

# （お問い合わせは法人・個人のどちらからなのか？）
                                    try:
                                        if len(radio.distinction_2) == 1 \
                                                and len(radio.contact_2) == 0:
                                            radio_ = driver.find_element_by_css_selector(
                                                "[value='" + radio.distinction_2[0] + "']")
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append(
                                                    radio.distinction_2[0])
                                                print(
                                                    "value値にてお問い合わせを行った人の区別を選択済")

                                        elif len(radio.distinction_2) == 0 \
                                                and len(radio.contact_2) == 1:
                                            radio_ = driver.find_element_by_css_selector(
                                                "[value='" + radio.contact_2[0] + "']")
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append(
                                                    radio.contact_2[0])
                                                print("value値にて連絡方法を選択済み")

                                        elif len(radio.distinction_2) == 1 \
                                                and len(radio.contact_2) == 1:
                                            radio_ = driver.find_element_by_css_selector(
                                                "[value='" + radio.distinction_2[0] + "']")
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append(
                                                    radio.distinction_2[0])
                                                print(
                                                    "value値にてお問い合わせを行った人の区別を選択済")

                                            radio_ = driver.find_element_by_css_selector(
                                                "[value='" + radio.contact_2[0] + "']")
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append(
                                                    radio.contact_2[0])
                                                print("value値にて連絡方法を選択済み")

                                    except Exception as e:
                                        print(e)

# （お問い合わせ先）
                                    try:
                                        if len(radio.contact_info_2) > 0:
                                            radio_ = driver.find_element_by_name(
                                                radio.contact_info_2[0])
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append(
                                                    radio.contact_info_2[0])
                                                print("name値にてお問い合わせ先を選択済み")

                                    except Exception as e:
                                        print(e)

# （アンケート）
                                    try:
                                        if len(radio.question_2) > 0:
                                            radio_ = driver.find_element_by_name(
                                            radio.SELECT_5[0])
                                            if len(radio.kinds_4) == 2:
                                                try:
                                                    radio_ = driver.find_elements_by_css_selector(
                                                    "[value='" + radio.kinds_4[0] + "']")[0]
                                                    driver.execute_script(
                                                    "arguments[0].click();", radio_)
                                                    print(radio_.is_selected())
                                                    input_history.append(
                                                    radio.kinds_4[0])
                                                    print("value値にてお問い合わせ種別を選択済（１）")
                                                    radio_ = driver.find_elements_by_css_selector(
                                                    "[value='" + radio.kinds_4[1] + "']")[1]
                                                    driver.execute_script(
                                                    "arguments[0].click();", radio_)
                                                    print(radio_.is_selected())
                                                    input_history.append(
                                                    radio.kinds_4[1])
                                                    print("value値にてお問い合わせ種別を選択済（２）")
                                                except:
                                                    pass
                                            elif len(radio.kinds_4) == 0:
                                                if radio_.is_selected() is not True:
                                                    driver.execute_script(
                                                    "arguments[0].click();", radio_)
                                                    print(radio_.is_selected())
                                                    input_history.append(
                                                    radio.SELECT_5[0])
                                                print("name値にてアンケートを回答済み")

                                    except Exception as e:
                                        print(e)

# （個人情報保護方針の同意）
                                    try:
                                        if len(radio.person_info_3) == 1 \
                                                and len(radio.person_info_4) == 1:
                                            radio_ = driver.find_element_by_name(
                                                radio.person_info_4[len(radio.person_info_4)-1])
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append("同意")
                                                print(
                                                    "name値にて個人情報保護方針の同意チェック済")

                                        elif len(radio.person_info_3) == 1 \
                                                and len(radio.person_info_4) == 0:
                                            radio_ = driver.find_element_by_css_selector(
                                                "[value='" + radio.person_info_3[0] + "']")
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append("同意")
                                                print(
                                                    "value値にて個人情報保護方針の同意チェック済")

                                        elif len(radio.person_info_3) == 0 \
                                                and len(radio.person_info_4) == 1:
                                            radio_ = driver.find_elements_by_name(radio.person_info_4[len(
                                                radio.person_info_4)-1])[len(radio.person_info_4)-1]
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append("同意")
                                                print(
                                                    "name値にて個人情報保護方針の同意チェック済")

                                        elif len(radio.person_info_3) == 0 \
                                                and len(radio.person_info_4) == 2:
                                            radio_ = driver.find_element_by_name(radio.person_info_4[0])
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append(radio.person_info_4[0])
                                                print(
                                                    "個人情報保護方針（同意する）")

                                    except Exception as e:
                                        print(e)

# （お問い合わせ種別）
                                    try:
                                        if len(radio.kinds_2) > 0:
                                            radio_ = driver.find_elements_by_name(radio.SELECT_5[len(
                                                radio.SELECT_5)-1])[len(radio.SELECT_5)-1]
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append(
                                                    radio.SELECT_5[len(radio.SELECT_5)-1])
                                                print("name値にてお問い合わせ種別を選択済")

                                        elif len(radio.kinds_3) > 0:
                                            if len([i for i in radio.SELECT_1 if "その他" in i
                                            or "営業" in i]) == 1:
                                                val = [i for i in radio.SELECT_1 if "その他" in i
                                                or "営業" in i]
                                                radio_ = driver.find_element_by_css_selector(
                                                    "[value='" + val[0] + "']")
                                                driver.execute_script(
                                                    "arguments[0].click();", radio_)
                                                print(radio_.is_selected())
                                                if radio_.is_selected() is True:
                                                        input_history.append(val[0])
                                                        print(
                                                        "value値にてお問い合わせ種別" + val[0] + "を選択済")
                                            else:
                                                radio_ = driver.find_element_by_css_selector(
                                                    "[value='" + radio.kinds_3[0] + "']")
                                                driver.execute_script(
                                                    "arguments[0].click();", radio_)
                                                print(radio_.is_selected())
                                                if radio_.is_selected() is True:
                                                        input_history.append(
                                                        radio.kinds_2[len(radio.kinds_3)-1])
                                                        print(
                                                        "value値にてお問い合わせ種別を選択済")

# 操作できない要素の回避
# 「value="その他"」を判別できるよう修正（2022.12.8 ）
                                    except:
                                        try:
                                            if len(radio.kinds_2) > 0:
                                                if len([i for i in radio.SELECT_1 if "その他" in i
                                                or "営業" in i]) == 1:
                                                    val = [i for i in radio.SELECT_1 if "その他" in i
                                                    or "営業" in i]
                                                    radio_ = driver.find_element_by_css_selector(
                                                    "[value='" + val[0] + "']")
                                                    driver.execute_script(
                                                    "arguments[0].click();", radio_)
                                                    print(radio_.is_selected())
                                                    if radio_.is_selected() is True:
                                                        input_history.append(val[0])
                                                        print(
                                                        "value値にてお問い合わせ種別" + val[0] + "を選択済")
                                                else:
                                                    radio_ = driver.find_element_by_css_selector(
                                                    "[value='" + radio.kinds_2[0] + "']")
                                                    driver.execute_script(
                                                    "arguments[0].click();", radio_)
                                                    print(radio_.is_selected())
                                                    if radio_.is_selected() is True:
                                                        input_history.append(
                                                        radio.kinds_2[len(radio.kinds_2)-1])
                                                        print(
                                                        "value値にてお問い合わせ種別を選択済")

# 操作できない要素の回避
                                        except:
                                            try:
                                                print(
                                                    "value値にてお問い合わせの種別に関する要素見つからなかったため、別の方法を試します。")
                                                radio_ = driver.find_elements_by_name(radio.kinds_2[0])[
                                                    len(radio.kinds_2)-1]
                                                driver.execute_script(
                                                    "arguments[0].click();", radio_)
                                                print(radio_.is_selected())
                                                if radio_.is_selected() is True:
                                                    input_history.append(
                                                        radio.kinds_2[0])
                                                    print(radio_.is_selected())
                                                    print(
                                                        "name値にてお問い合わせ種別を選択済み")

# 操作できない要素の回避
                                            except:
                                                try:
                                                    print(
                                                        "name値にてお問い合わせの種別に関する要素見つからなかったため、別の方法を試します。")
                                                    radio_ = driver.find_element_by_name(
                                                        radio.kinds_2[len(radio.kinds_2)-1])
                                                    driver.execute_script(
                                                        "arguments[0].click();", radio_)
                                                    print(radio_.is_selected())
                                                    input_history.append(
                                                        radio.kinds_2[len(radio.kinds_1)-1])
                                                    print(
                                                        "name値にてお問い合わせ種別を選択済み")

                                                except:
                                                    try:
                                                        print(
                                                            "再度name値にてお問い合わせの種別に関する要素を見つけたい為、別の方法を試します。")
                                                        radio_ = driver.find_elements_by_name(radio.kinds_value_2[len(
                                                            radio.kinds_value_2)-1])[len(radio.kinds_value_2)-1]
                                                        driver.execute_script(
                                                            "arguments[0].click();", radio_)
                                                        print(
                                                            radio_.is_selected())
                                                        input_history.append(
                                                            radio.kinds_2[len(radio.kinds_1)-1])
                                                        print(
                                                            "name値にてお問い合わせ種別を選択済み")

                                                    except Exception as e:
                                                        print(e)


# value値及びid値、且つname値有りの場合
                                   elif len(radio.SELECT_1) > 0 \
                                        and len(radio.SELECT_2) > 0 \
                                        and len(radio.SELECT_3) == 0 \
                                        and len(radio.SELECT_4) == 0 \
                                        and len(radio.SELECT_5) > 0:
                                    print("value値及びid値、且つname値有りの場合")
                                    print("distinction_2（value）：" + str(len(radio.distinction_2)))
                                    print("contact_2（value）：" + str(len(radio.contact_2)))
                                    print("contact_info_2（value）：" + str(len(radio.contact_info_2)))
                                    print("question_2：" + str(len(radio.question_2)))
                                    print("person_info_3（value）：" + str(len(radio.person_info_3)))
                                    print("person_info_4（name）：" + str(len(radio.person_info_4)))
                                    print("kinds_2：" + str(len(radio.kinds_2)))
                                    print("kinds_value_2：" + str(len(radio.kinds_value_2)))
                                    print("kinds_3：" + str(len(radio.kinds_3)))

# （区別）
# （お問い合わせは法人・個人のどちらからなのか？）
                                    try:
                                        if len(radio.distinction_3) == 1 \
                                                and len(radio.contact_3) == 0:
                                            radio_ = driver.find_element_by_css_selector(
                                                "[value='" + radio.distinction_3[0] + "']")
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append(
                                                    radio.distinction_3[0])
                                                print(
                                                    "value値にてお問い合わせを行った人の区別を選択済")

                                        elif len(radio.distinction_3) == 0 \
                                                and len(radio.contact_3) == 1:
                                            radio_ = driver.find_element_by_css_selector(
                                                "[value='" + radio.contact_3[0] + "']")
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append(
                                                    radio.contact_3[0])
                                                print("value値にて連絡方法を選択済み")

                                        elif len(radio.distinction_3) == 1 \
                                                and len(radio.contact_3) == 1:
                                            radio_ = driver.find_element_by_css_selector(
                                                "[value='" + radio.distinction_3[0] + "']")
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append(
                                                    radio.distinction_3[0])
                                                print(
                                                    "value値にてお問い合わせを行った人の区別を選択済")

                                            radio_ = driver.find_element_by_css_selector(
                                                "[value='" + radio.contact_3[0] + "']")
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append(
                                                    radio.contact_3[0])
                                                print("value値にて連絡方法を選択済み")

                                    except:
                                        pass


# （お問い合わせ先）
                                    try:
                                        if len(radio.contact_info_3) > 0:
                                            radio_ = driver.find_element_by_name(
                                                radio.contact_info_3[0])
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append(
                                                    radio.contact_info_3[0])
                                                print("name値にてお問い合わせ先を選択済み")

                                    except:
                                        pass


# （アンケート）
                                    try:
                                        if len(radio.question_3) > 0:
                                            radio_ = driver.find_element_by_name(
                                            radio.SELECT_5[0])
                                            if radio_.is_selected() is not True:
                                                driver.execute_script(
                                                "arguments[0].click();", radio_)
                                                print(radio_.is_selected())
                                                input_history.append(
                                                    radio.SELECT_5[0])
                                                print("name値にてアンケートを回答済み")
                                    except:
                                        pass


# （個人情報保護方針の同意）
                                    try:
                                        if len(radio.person_info_5) == 1 \
                                                and len(radio.person_info_6) == 1:
                                            radio_ = driver.find_element_by_name(
                                                radio.person_info_6[len(radio.person_info_6)-1])
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append("同意")
                                                print(
                                                    "name値にて個人情報保護方針の同意チェック済")

                                        elif len(radio.person_info_5) == 1 \
                                                and len(radio.person_info_6) == 0:
                                            radio_ = driver.find_element_by_css_selector(
                                                "[value='" + radio.person_info_5[0] + "']")
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append("同意")
                                                print(
                                                    "value値にて個人情報保護方針の同意チェック済")

                                        elif len(radio.person_info_5) == 0 \
                                                and len(radio.person_info_6) == 1:
                                            radio_ = driver.find_elements_by_name(radio.person_info_6[len(
                                                radio.person_info_6)-1])[len(radio.person_info_6)-1]
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append("同意")
                                                print(
                                                    "name値にて個人情報保護方針の同意チェック済")

                                        elif len(radio.person_info_5) > 1 \
                                                and len(radio.person_info_6) == 0:
                                            print("「同意する」「同意しない」の選択肢が存在する模様・・・")
                                            radio_ = driver.find_element_by_css_selector(
                                                "[value='" + radio.person_info_5[0] + "']")
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append("同意")
                                                print(
                                                    "value値にて個人情報保護方針の同意チェック済")

                                    except:
                                        pass

# nameとvalueでの処理順序入れ替え
# 及び「その他」について２個選択の対応（2023.05.28）
# （お問い合わせ種別）
                                    if len(radio.kinds_3) > 0 \
                                        and len(radio.kinds_value_3) == 0:
                                        if len(radio.kinds_4) == 2:
                                            try:
                                                radio_ = driver.find_elements_by_css_selector(
                                                "[value='" + radio.kinds_4[0] + "']")[0]
                                                driver.execute_script(
                                                "arguments[0].click();", radio_)
                                                print(radio_.is_selected())
                                                input_history.append(
                                                radio.kinds_4[0])
                                                print("value値にてお問い合わせ種別を選択済（１）")
                                                radio_ = driver.find_elements_by_css_selector(
                                                "[value='" + radio.kinds_4[1] + "']")[1]
                                                driver.execute_script(
                                                "arguments[0].click();", radio_)
                                                print(radio_.is_selected())
                                                input_history.append(
                                                radio.kinds_4[1])
                                                print("value値にてお問い合わせ種別を選択済（２）")
                                            except:
                                                pass
                                        elif len(radio.kinds_4) == 0:
                                            try:
                                                radio_ = driver.find_element_by_css_selector(
                                                "[value='" + radio.kinds_3[len(radio.kinds_3)-1] + "']")
                                                if radio_.is_selected() is not True:
                                                    driver.execute_script(
                                                    "arguments[0].click();", radio_)
                                                    print(radio_.is_selected())
                                                    input_history.append(
                                                    radio.kinds_3[len(radio.kinds_3)-1])
                                                    print("value値にてお問い合わせ種別を選択済")
                                            except:
                                                try:
                                                    radio_ = driver.find_elements_by_name(radio.SELECT_5[len(
                                                    radio.SELECT_5)-1])[len(radio.SELECT_5)-1]
                                                    if radio_.is_selected() is not True:
                                                        driver.execute_script(
                                                        "arguments[0].click();", radio_)
                                                        print(radio_.is_selected())
                                                        input_history.append(
                                                        radio.SELECT_5[len(radio.SELECT_5)-1])
                                                        print("name値にてお問い合わせ種別を選択済")

# 操作できない要素の回避
                                                except:
                                                    try:
                                                        print(
                                                        "value値にてお問い合わせの種別に関する要素見つからなかったため、別の方法を試します。")
                                                        radio_ = driver.find_elements_by_name(radio.kinds_3[0])[
                                                        len(radio.kinds_3)-1]
                                                        driver.execute_script(
                                                        "arguments[0].click();", radio_)
                                                        print(radio_.is_selected())
                                                        if radio_.is_selected() is True:
                                                            input_history.append(
                                                            radio.kinds_3[0])
                                                            print(
                                                            radio_.is_selected())
                                                            print(
                                                            "name値にてお問い合わせ種別を選択済み")

# 操作できない要素の回避
                                                    except:
                                                        try:
                                                            print(
                                                            "name値にてお問い合わせの種別に関する要素見つからなかったため、別の方法を試します。")
                                                            radio_ = driver.find_element_by_name(
                                                            radio.kinds[len(radio.kinds_3)-1])
                                                            driver.execute_script(
                                                            "arguments[0].click();", radio_)
                                                            print(
                                                            radio_.is_selected())
                                                            input_history.append(
                                                            radio.kinds_3[len(radio.kinds_3)-1])
                                                            print(
                                                            "name値にてお問い合わせ種別を選択済み")

                                                        except:
                                                            pass

# パターン編集（2022.12.18）
# <label><input id="contact[6]" name="contact" value="6" type="radio"><span>その他</span></label>
                                    elif len(radio.kinds_3) > 0 \
                                            and len(radio.kinds_value_3) > 0:
                                        try:
                                            print("id値にてお問い合わせの種別に関する要素を抽出開始")
                                            radio_ = driver.find_element_by_id(
                                                radio.kinds_value_3[len(radio.kinds_value_3)-1])
                                            driver.execute_script(
                                                "arguments[0].click();", radio_)
                                            print(radio_.is_selected())
                                            if radio_.is_selected() is True:
                                                input_history.append(
                                                    radio.kinds_3[len(radio.kinds_value_3)-1])
                                                print(radio_.is_selected())
                                                print("id値にてお問い合わせ種別を選択済み")
                                                
                                        except Exception as e:
                                            print(e)
                                            try:
                                                if len([i for i in radio.SELECT_1 if "その他" in i
                                                or "営業" in i]) == 1:
                                                   val = [i for i in radio.SELECT_1 if "その他" in i
                                                   or "営業" in i]
                                                   radio_ = driver.find_element_by_css_selector(
                                                    "[value='" + val[0] + "']")
                                                   driver.execute_script(
                                                    "arguments[0].click();", radio_)
                                                   print(radio_.is_selected())
                                                   if radio_.is_selected() is True:
                                                        input_history.append(val[0])
                                                        print(
                                                        "value値にてお問い合わせ種別" + val[0] + "を選択済")
                                                else:
                                                    radio_ = driver.find_element_by_css_selector(
                                                    "[value='" + radio.kinds_3[0] + "']")
                                                    driver.execute_script(
                                                    "arguments[0].click();", radio_)
                                                    print(radio_.is_selected())
                                                    if radio_.is_selected() is True:
                                                        input_history.append(
                                                        radio.kinds_2[len(radio.kinds_3)-1])
                                                        print(
                                                        "value値にてお問い合わせ種別を選択済")

                                            except Exception as e:
                                                print(e)

# id値有りの場合（パターン注意）
                                   elif len(radio.SELECT_1) == 0 \
                                        and len(radio.SELECT_2) == 0 \
                                        and len(radio.SELECT_3) > 0 \
                                        and len(radio.SELECT_4) > 0 \
                                        and len(radio.SELECT_5) == 0:
                                    print(len(radio.SELECT_3))
                                    print(len(radio.SELECT_4))

# （種別）
                                    if len([i for i in Get_tag_text.items_1 if "種別" in i]) == 1:
                                        radiobutton = driver.find_element_by_id(
                                            radio.SELECT_3[len(radio.SELECT_3)-1])
                                        driver.execute_script(
                                            "arguments[0].click();", radiobutton)
                                        print(radiobutton.is_selected())
                                        if radiobutton.is_selected() is True:
                                            input_history.append(
                                                radio.SELECT_3[len(radio.SELECT_3)-1])
                                            print(radiobutton.is_selected())

# （法人／個人）
                                   if len([i for i in Get_tag_text.items_1 if "法人" in i]) == 1 \
                                        and len(radio.SELECT_4) > 0:
                                    radiobutton = driver.find_element_by_id(
                                        radio.SELECT_4[0])
                                    driver.execute_script(
                                        "arguments[0].click();", radiobutton)
                                    print(radiobutton.is_selected())
                                    if radiobutton.is_selected() is True:
                                        input_history.append(
                                            radio.SELECT_4[0])
                                        print(radiobutton.is_selected())

# パターン追加(2021.12.26)
# お問い合わせ内容の控えを送る
                                    try:
                                        if not len([i for i in Get_tag_text.list_1 if "メール受信" in i]) == 0 \
                                            and not len([i for i in radio.SELECT_5 if "送信" in i]) == 0:
                                        # 		          Checkboxlist = [i for i in list_2 if "copy" in i \
                                        #                             or "mail" in i \
                                        #                                         and i is not None]
                                           print(radio.SELECT_5[0])
                                           checkbox = driver.find_element_by_css_selector(
                                            "[value=" + radio.SELECT_5[0] + "]")
                                           if checkbox.is_selected() is False:
                                                driver.execute_script(
                                                "arguments[0].click();", checkbox)
                                                print(checkbox.is_selected())
# 		            if checkbox.is_selected() is True:
# 		              lastcol = len(list(ws3.row_values(k)))
# 		              time.sleep(1)
# 		              ws3.update_cell(k, lastcol+1, radio.SELECT_5[0])
                                                input_history.append(radio.SELECT_5[0])

                                    except:
                                      pass

# チェックボックス
                                element8 = soup.find_all("input", type="checkbox")
                                if not element8 == []:
                                  import Checkbox
                                  importlib.reload(Checkbox)

# お問い合わせの内容、項目選択
                                  try:

# 2022.8.16
# id要素が存在する
                                    if len(Checkbox.inquiry_sec2) == 0 \
                                        and len(Checkbox.inquiry_sec3) == 1 \
                                        and len(Checkbox.inquiry_sec4) == 0:
                                        checkbox_id = driver.find_element_by_id(
                                            Checkbox.inquiry_sec3[0])
                                        driver.execute_script(
                                            "arguments[0].click();", checkbox_id)
                                        print(checkbox_id.is_selected())
                                        if checkbox_id.is_selected() is True:
                                            input_history.append(
                                                Checkbox.inquiry_sec3[0])
                                            print(
                                                "id値：" + Checkbox.inquiry_sec3[0])


# id，value，name要素が存在する
                                    elif len(Checkbox.inquiry_sec2) == 1 \
                                        and len(Checkbox.inquiry_sec3) == 1 \
                                        and len(Checkbox.inquiry_sec4) == 1:
                                        print("name、value、idが存在することを確認")

                                        checkbox_name = driver.find_element_by_name(
                                            Checkbox.inquiry_sec2[0])
                                        if checkbox_name.is_selected() is not True:
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox_name)
                                            input_history.append(
                                                Checkbox.inquiry_sec2[0])
                                            print(
                                                "name値：" + Checkbox.inquiry_sec2[0])
                                            if checkbox_name.is_selected() is not True:
                                                checkbox_value = driver.find_element_by_css_selector(
                                                    "[value='" + Checkbox.inquiry_sec4[0] + "']")
                                                driver.execute_script(
                                                    "arguments[0].click();", checkbox_value)
                                                print(
                                                    "value値：" + Checkbox.inquiry_sec4[0])
                                                if checkbox_value.is_selected() is not True:
                                                    checkbox_id = driver.find_element_by_id(
                                                        Checkbox.inquiry_sec4[0])
                                                    input_history.append(
                                                        Checkbox.inquiry_sec4[0])
                                                    print(checkbox_id.is_selected(
                                                    ) + "id値：" + Checkbox.inquiry_sec4[0])

# パターン追加（2023.09.12）
# valueのみしか存在しない
                                    elif len(Checkbox.inquiry_sec2) == 0 \
                                        and len(Checkbox.inquiry_sec3) == 0 \
                                        and len(Checkbox.inquiry_sec4) > 0:
                                        if len(Checkbox.inquiry_sec4) == 1:
                                            print("valueが１個存在することを確認")
                                            checkbox_value = driver.find_element_by_css_selector(
                                            "[value='" + Checkbox.inquiry_sec4[len(Checkbox.inquiry_sec4)-1] + "']")
                                            driver.execute_script(
                                            "arguments[0].click();", checkbox_value)
                                            print(checkbox_value.is_selected())
                                            if checkbox_value.is_selected() is True:
                                                input_history.append(
                                                Checkbox.inquiry_sec4[len(Checkbox.inquiry_sec4)-1])
                                                print("value値：" +
                                                  Checkbox.inquiry_sec4[len(Checkbox.inquiry_sec4)-1])
                                        elif len(Checkbox.inquiry_sec4) == 2:
                                            print("valueが２個存在することを確認")
                                            checkbox_value_1 = driver.find_elements_by_css_selector(
                                            "[value='" + Checkbox.inquiry_sec4[len(Checkbox.inquiry_sec4)-1] + "']")[0]
                                            driver.execute_script(
                                            "arguments[0].click();", checkbox_value_1)
                                            print(checkbox_value_1.is_selected())
                                            checkbox_value_2 = driver.find_elements_by_css_selector(
                                            "[value='" + Checkbox.inquiry_sec4[len(Checkbox.inquiry_sec4)-1] + "']")[1]
                                            driver.execute_script(
                                            "arguments[0].click();", checkbox_value_2)
                                            print(checkbox_value_2.is_selected())
                                            if checkbox_value_1.is_selected() is True:
                                                input_history.append(
                                                Checkbox.inquiry_sec4[len(Checkbox.inquiry_sec4)-1])
                                                print("value値1：" +
                                                  Checkbox.inquiry_sec4[len(Checkbox.inquiry_sec4)-1])
                                            if checkbox_value_2.is_selected() is True:
                                                input_history.append(
                                                Checkbox.inquiry_sec4[len(Checkbox.inquiry_sec4)-1])
                                                print("value値2：" +
                                                  Checkbox.inquiry_sec4[len(Checkbox.inquiry_sec4)-1])


# id且つvalueの両方存在
                                    elif len(Checkbox.inquiry_sec2) == 0 \
                                        and len(Checkbox.inquiry_sec3) == 1 \
                                        and len(Checkbox.inquiry_sec4) == 1:
                                        print("value及びidが存在することを確認")
                                        checkbox_id = driver.find_element_by_id(
                                            Checkbox.inquiry_sec3[0])
                                        driver.execute_script(
                                            "arguments[0].click();", checkbox_id)
                                        print(checkbox_id.is_selected())
                                        if checkbox_id.is_selected() is True:
                                            input_history.append(
                                                Checkbox.inquiry_sec3[0])
                                            print(
                                                "id値：" + Checkbox.inquiry_sec3[0])


# value且つnameの両方存在
                                    elif len(Checkbox.inquiry_sec2) > 0 \
                                        and len(Checkbox.inquiry_sec3) == 0 \
                                        and len(Checkbox.inquiry_sec4) > 0:
                                        print("name及びvalueが存在することを確認")

                                        checkbox_name = driver.find_element_by_name(
                                            Checkbox.inquiry_sec2[0])
                                        checkbox_value = driver.find_element_by_css_selector(
                                            "[value='" + Checkbox.inquiry_sec4[0] + "']")

# 		              if len([i for i in Checkbox.inquiry_sec4 if "採用" in i]) == 1 \
#                           and len(Checkbox.inquiry_sec4) > 0:

# 		           		                try:
# 		           		                  checkbox_value = driver.find_elements_by_css_selector("[" + "value=" + Checkbox.inquiry_sec4[len(Checkbox.inquiry_sec4)-1] +"]")[len(Checkbox.inquiry_sec4)-1]
                                        if checkbox_value.is_selected() is not True:
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox_value)
                                            print(checkbox_value.is_selected())
                                            print(
                                                "チェックボックス選択：" + Checkbox.inquiry_sec4[len(Checkbox.inquiry_sec4)-1])
                                            input_history.append(
                                                Checkbox.inquiry_sec4[len(Checkbox.inquiry_sec4)-1])

# 		           		                except:
# 		           		                  pass

                                        elif checkbox_name.is_selected() is not True:
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox_name)
                                            input_history.append(
                                                Checkbox.inquiry_sec2[0])
                                            print(
                                                "name値：" + Checkbox.inquiry_sec2[0])
                                            if checkbox_name.is_selected() is not True:
                                                checkbox_value = driver.find_element_by_css_selector(
                                                    "[value='" + Checkbox.inquiry_sec4[0] + "']")
                                                driver.execute_script(
                                                    "arguments[0].click();", checkbox_value)
# 		                   print(checkbox_value.is_selected() + "value値：" + Checkbox.inquiry_sec4[0])
                                                if checkbox_value.is_selected() is True:
                                                    input_history.append(
                                                        Checkbox.inquiry_sec4[0])
                                                    print(
                                                        "value値：" + Checkbox.inquiry_sec4[0])


# 一旦チェックボックスを外す
                                                    if "その他" in Checkbox.inquiry_sec4[0]:
                                                        try:
                                                            checkbox1 = driver.find_element_by_css_selector(
                                                                "[" + "value=" + Checkbox.inquiry_sec4[0] + "]")
                                                            print(
                                                                checkbox1.is_selected())

# 選択状態にある場合
                                                            if checkbox1.is_selected() is True \
                                                                    and len([i for i in input_history if "その他" in i]) > 0:
                                                                pass

# 選択状態にない場合
                                                            elif checkbox1.is_selected() is False \
                                                                    and not len([i for i in input_history if "その他" in i]) > 0:
                                                                checkbox = driver.find_element_by_css_selector(
                                                                    "[" + "value=" + Checkbox.inquiry_sec4[0] + "]")
                                                                driver.execute_script(
                                                                    "arguments[0].click();", checkbox)
                                                                print(
                                                                    checkbox.is_selected())
                                                                if checkbox.is_selected() is True:
                                                                    input_history.append(
                                                                        "その他（再選択）")
                                                        except:
                                                            pass

                                                    elif "お問い合わせ" in Checkbox.inquiry_sec4[0]:
                                                        try:
                                                            checkbox = driver.find_elements_by_css_selector(
                                                                "[" + "value=" + Checkbox.inquiry_sec4[0] + "]")[0]
                                                            if checkbox.is_selected() is not True:
                                                                driver.execute_script(
                                                                    "arguments[0].click();", checkbox)
                                                                print(
                                                                    checkbox.is_selected())
                                                                if checkbox.is_selected() is True:
                                                                    input_history.append(
                                                                        Checkbox.inquiry_sec4[0])

                                                        except:
                                                            pass

# 2023.05.28（パターン追加）
# どれにも当てはまらない
                                    elif len(Checkbox.inquiry_sec2) == 0 \
                                        and len(Checkbox.inquiry_sec3) == 0 \
                                        and len(Checkbox.inquiry_sec4) == 0:
                                        print("どれにも当てはまらない")

                                        checkbox_value = driver.find_element_by_css_selector(
                                            "[value='" + Checkbox.checkbox_value[0] + "']")
                                        if checkbox_value.is_selected() is not True:
                                            driver.execute_script(
                                            "arguments[0].click();", checkbox_value)
                                            input_history.append(Checkbox.checkbox_value[0])
                                            print("value値（選択値）：" + Checkbox.checkbox_value[0])
                                  except:
                                    pass

# （個人情報取り扱いに関する同意）
                                  try:

# name、idの両方が存在する場合
                                    if len(Checkbox.person_info1) > 0 \
                                        and len(Checkbox.person_info2) == 1 \
                                        and len(Checkbox.person_info3) == 1 \
                                        and len(Checkbox.person_info4) == 0:
                                        print("同意チェックはname値、id値の両方で可能")
                                        checkbox_name = driver.find_element_by_name(
                                            Checkbox.person_info2[len(Checkbox.person_info2)-1])
                                        if checkbox_name.is_selected() is not True:
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox_name)
                                            input_history.append("同意")
                                            print("name値にて個人情報保護方針の同意チェック済")
                                            if checkbox_name.is_selected() is not True:
                                                checkbox_id = driver.find_element_by_id(
                                                    Checkbox.person_info3[0])
                                                driver.execute_script(
                                                    "arguments[0].click();", checkbox_id)
                                                input_history.append(
                                                    Checkbox.person_info3[0])
                                                print("id値にて個人情報保護方針の同意チェック済")

# 2022.8.16
# valueのみ存在する場合
                                    elif len(Checkbox.person_info1) > 0 \
                                        and len(Checkbox.person_info2) == 0 \
                                        and len(Checkbox.person_info3) == 0 \
                                        and len(Checkbox.person_info4) == 1:
                                        print("同意チェックはvalue値のみで可能")
                                        checkbox_value = driver.find_element_by_css_selector(
                                            "[value='" + Checkbox.person_info4[0] + "']")
                                        if checkbox_value.is_selected() is not True:
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox_value)
                                            print(checkbox_value.is_selected())
                                            if checkbox_value.is_selected() is True:
                                                input_history.append(Checkbox.person_info4[0])
                                                print("個人情報保護方針に同意：value")

# パターン追加（2022.12.18）
# valueのみ存在する場合
# ※formタグに含まれる文字列要素なし
                                    elif len(Checkbox.person_info1) == [] \
                                        and len(Checkbox.person_info2) == 0 \
                                        and len(Checkbox.person_info3) == 0 \
                                        and len(Checkbox.person_info4) == 1:
                                        print(
                                            "同意チェックはvalue値のみで可能（formタグに含まれる文字列要素なし）")
                                        checkbox_value = driver.find_element_by_css_selector(
                                            "[value='" + Checkbox.person_info4[0] + "']")
                                        if checkbox_value.is_selected() is not True:
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox_value)
                                            print(checkbox_value.is_selected())
                                            if checkbox_value.is_selected() is True:
                                                input_history.append(Checkbox.person_info4[0])
                                                print(
                                                    "個人情報保護方針に同意：value")

# 2022.8.16
# nameのみ存在する場合
                                    elif len(Checkbox.person_info1) > 0 \
                                        and len(Checkbox.person_info2) == 1 \
                                        and len(Checkbox.person_info3) == 0 \
                                        and len(Checkbox.person_info4) == 0:
                                        print("同意チェックはname値のみで可能")
                                        checkbox_name = driver.find_elements_by_name(Checkbox.person_info2[len(
                                            Checkbox.person_info2)-1])[len(Checkbox.person_info2)]
                                        if checkbox_name.is_selected() is not True:
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox_name)
                                            print(checkbox_name.is_selected())
                                            if checkbox_name.is_selected() is True:
                                                input_history.append("同意")
                                                print(
                                                    "name値にて個人情報保護方針の同意チェック済")

# 2023.09.12
# idのみ存在する場合
                                    elif len(Checkbox.person_info1) > 0 \
                                        and len(Checkbox.person_info2) == 0 \
                                        and len(Checkbox.person_info3) == 1 \
                                        and len(Checkbox.person_info4) == 0:
                                        print("同意チェックはid値のみで可能")
                                        checkbox_id = driver.find_element_by_id(
                                            Checkbox.person_info3[0])
                                        if checkbox_id.is_selected() is not True:
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox_id)
                                            print(checkbox_id.is_selected())
                                            if checkbox_id.is_selected() is True:
                                                input_history.append("同意")
                                                print("id値にて個人情報保護方針の同意チェック済")

# 2022.8.16
# name及びvalueの両方存在
                                    elif len(Checkbox.person_info1) > 0 \
                                        and len(Checkbox.person_info2) > 0 \
                                        and len(Checkbox.person_info3) == 0 \
                                        and len(Checkbox.person_info4) > 0:
                                        print("同意チェックはname値、value値（未選択）の両方で可能")
                                        checkbox_name = driver.find_element_by_name(
                                            Checkbox.person_info2[0])
                                        checkbox_value = driver.find_element_by_css_selector(
                                                    "[value='" + Checkbox.person_info4[0] + "']")
                                        if checkbox_name.is_selected() is not True:
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox_name)
                                            input_history.append(Checkbox.person_info2[0])
                                            print(Checkbox.person_info2[0])
                                            if checkbox_name.is_selected() is not True:
                                                # checkbox_value = driver.find_element_by_css_selector(
                                                #     "[value='" + Checkbox.person_info4[0] + "']")
                                                driver.execute_script(
                                                    "arguments[0].click();", checkbox_value)
                                                print(
                                                    checkbox_value.is_selected())
                                                if checkbox_value.is_selected() is True:
                                                    input_history.append("同意")
                                                    print(
                                                        "value値にて個人情報保護方針の同意チェック済")

                                        if checkbox_value.is_selected() is not True:
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox_value)
                                            input_history.append(Checkbox.person_info4[0])
                                            print(Checkbox.person_info4[0])

# 2023.09.12
# id及びvalueの両方存在
                                    elif len(Checkbox.person_info1) > 0 \
                                        and len(Checkbox.person_info2) == 0 \
                                        and len(Checkbox.person_info3) == 1 \
                                        and len(Checkbox.person_info4) == 1:
                                        print("同意チェックはid値、value値の両方で可能")
                                        checkbox_id = driver.find_element_by_id(
                                            Checkbox.person_info3[0])
                                        checkbox_value = driver.find_element_by_css_selector(
                                                    "[value='" + Checkbox.person_info4[0] + "']")
                                        if checkbox_id.is_selected() is not True:
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox_id)
                                            input_history.append(Checkbox.person_info3[0])
                                            print(Checkbox.person_info3[0])
                                            if checkbox_value.is_selected() is not True:
                                                driver.execute_script(
                                                    "arguments[0].click();", checkbox_value)
                                                print(
                                                    checkbox_value.is_selected())
                                                if checkbox_value.is_selected() is True:
                                                    input_history.append("同意")
                                                    print(
                                                        "value値にて個人情報保護方針の同意チェック済")

                                        if checkbox_value.is_selected() is not True:
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox_value)
                                            input_history.append(Checkbox.person_info4[0])
                                            print(Checkbox.person_info4[0])


                                    elif len(Checkbox.person_info1) > 0 \
                                        and len(Checkbox.person_info2) == 3 \
                                        and len(Checkbox.person_info3) == 0 \
                                        and len(Checkbox.person_info4) == 1:
                                        print(
                                            "同意チェックはname値（3個）、value値（1個：未選択）の両方で可能")
                                        for i in range(len(Checkbox.person_info2)+1):
                                            checkbox = driver.find_element_by_name(
                                                Checkbox.person_info2[i-1])
                                            if checkbox.is_selected() is not True:
                                                driver.execute_script(
                                                    "arguments[0].click();", checkbox)
                                                print(checkbox.is_selected())
                                                input_history.append(
                                                    Checkbox.person_info2[i-1])


# 2022.8.16
# name及びvalue且つidの全て存在
                                    elif len(Checkbox.person_info1) > 0 \
                                        and len(Checkbox.person_info2) == 1 \
                                        and len(Checkbox.person_info3) == 1 \
                                        and len(Checkbox.person_info4) == 1:
                                        print(
                                            "同意チェックはname値、value値（未選択）、id値の全てで可能")

                                        checkbox_name = driver.find_element_by_name(
                                            Checkbox.person_info2[0])
                                        if checkbox_name.is_selected() is not True:
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox_name)
                                            input_history.append("同意")
                                            print("name値にて個人情報保護方針の同意チェック済")
                                            if checkbox_name.is_selected() is not True:
                                                checkbox_value = driver.find_element_by_css_selector(
                                                    "[value='" + Checkbox.person_info4[0] + "']")
                                                driver.execute_script(
                                                    "arguments[0].click();", checkbox_value)
                                                print(
                                                    checkbox_value.is_selected())
                                                if checkbox_value.is_selected() is True:
                                                    input_history.append("同意")
                                                    print(
                                                        "value値にて個人情報保護方針の同意チェック済")
                                                elif checkbox_value.is_selected() is not True:
                                                    checkbox_id = driver.find_element_by_id(
                                                        Checkbox.person_info4[0])
                                                    input_history.append(
                                                        Checkbox.person_info4[0])
                                                    print(
                                                        "id値にて個人情報保護方針の同意チェック済")

# 2023.5.25
# name及びvalue且つidの全て存在（同意チェック２箇所）
                                    elif len(Checkbox.person_info1) > 0 \
                                        and len(Checkbox.person_info2) > 1 \
                                        and len(Checkbox.person_info3) == 2 \
                                        and len(Checkbox.person_info4) > 1:
                                        print(
                                            "同意チェックはname値、value値（未選択）、id値（２個）の全てで可能")
                                        checkbox_id_1 = driver.find_element_by_id(
                                                        Checkbox.person_info3[0])
                                        checkbox_id_2 = driver.find_element_by_id(
                                                        Checkbox.person_info3[1])
                                        checkbox_name = driver.find_element_by_name(
                                            Checkbox.person_info2[0])
                                        
                                        if checkbox_id_1.is_selected() is not True \
                                             and checkbox_id_2.is_selected() is not True:
                                            checkbox_id_1.click()
                                            checkbox_id_2.click()
                                            print("id値にて２箇所の同意チェック済")
                                            input_history.append(
                                                Checkbox.person_info3[0])
                                            input_history.append(
                                                Checkbox.person_info3[1])

# リスト「Checkbox.person_info2」に値"accept"が存在しない時の処理
                                    elif not len([i for i in Checkbox.person_info2 if "accept" in i
                                                  and i is not None]) == 0:
                                        print(
                                            "「Checkbox.person_info2」に値（accept）が存在しない")
                                        checkbox_name = driver.find_element_by_name(
                                            Checkbox.person_info2[len(Checkbox.person_info2)-1])
                                        if checkbox_name.is_selected() is not True:
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox_name)
                                            input_history.append(
                                                Checkbox.person_info2[len(Checkbox.person_info2)-1])
                                            print("name値にて個人情報保護方針の同意チェック済")

                                    else:
                                        if not soup.find_all("span", class_=re.compile("contact_check")) == []:
                                            checkbox_elem = driver.find_element_by_class_name("contact_check")
                                            if checkbox_elem.is_selected() is not True:
                                                driver.execute_script(
                                                    "arguments[0].click();", checkbox_elem)
                                                print("値「contact_check」にて個人情報保護方針の同意チェック済")
                                                input_history.append("同意")
                                        else:
                                            checkbox_name = driver.find_element_by_name(
                                                Checkbox.person_info2[len(Checkbox.person_info2)-1])
                                            print("name値にて個人情報保護方針の同意チェック済")
                                            if checkbox_name.is_selected() is not True:
                                                driver.execute_script(
                                                    "arguments[0].click();", checkbox_name)
                                                print("name値にて個人情報保護方針の同意チェック済")
                                                input_history.append(
                                                    Checkbox.person_info2[len(Checkbox.person_info2)-1])

                                            elif checkbox_value.is_selected() is True \
                                                and not len(Checkbox.person_info4) == 0:
                                                print(
                                                    "チェックボックス関係のvalue値:" + str(len(Checkbox.person_info4)))
                                                checkbox_value = driver.find_element_by_css_selector(
                                                    "[value='" + Checkbox.person_info4[0] + "']")
                                                driver.execute_script(
                                                    "arguments[0].click();", checkbox_value)
                                                print("name値にて個人情報保護方針の同意チェック済")
                                                input_history.append(
                                                    Checkbox.person_info4[0])
# 		              break
                                  except Exception as e:
                                    print(e)

# どちらの回答方法を希望するか？
                                  try:
                                    import contact_method
                                    importlib.reload(contact_method)

# id要素が存在する
                                    if len(contact_method.contact_med1) > 0 \
                                            and len(contact_method.contact_med2) == 0 \
                                            and len(contact_method.contact_med3) == 1:
                                        checkbox_id = driver.find_element_by_id(
                                            contact_method.contact_med3[len(contact_method.contact_med3)-1])
                                        if checkbox_id.is_selected() is not True:
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox_id)
                                            print(
                                                "id値：" + contact_method.contact_med3[len(contact_method.contact_med3)-1])
                                            input_history.append(
                                                contact_method.contact_med3[len(contact_method.contact_med3)-1])

# valueのみしか存在しない
                                    elif len(Checkbox.inquiry_sec1) > 0 \
                                            and len(Checkbox.inquiry_sec2) == 0 \
                                            and len(Checkbox.inquiry_sec3) == 0 \
                                            and len(Checkbox.inquiry_sec4) == 1:
                                        print("valueが存在することを確認")
                                        if len([i for i in Checkbox.inquiry_sec4 if "メール" in i]) > 0:
                                            Checkbox.inquiry_sec4 = [
                                                i for i in Checkbox.inquiry_sec4 if "メール" in i]
                                            checkbox_value = driver.find_element_by_css_selector(
                                                "[value='" + Checkbox.inquiry_sec4[0] + "']")
                                            if checkbox_value.is_selected() is not True:
                                                driver.execute_script(
                                                    "arguments[0].click();", checkbox_value)
                                                print(
                                                    "value値：" + Checkbox.inquiry_sec4[0])
                                                input_history.append(
                                                    Checkbox.inquiry_sec4[0])

                                        elif len([i for i in Checkbox.inquiry_sec4 if "mail" in i]) > 0:
                                            Checkbox.inquiry_sec4 = [
                                                i for i in Checkbox.inquiry_sec4 if "mail" in i]
                                            checkbox_value = driver.find_element_by_css_selector(
                                                "[value='" + Checkbox.inquiry_sec4[0] + "']")
                                            if checkbox_value.is_selected() is not True:
                                                driver.execute_script(
                                                    "arguments[0].click();", checkbox_value)
                                                print(
                                                    "value値：" + Checkbox.inquiry_sec4[0])
                                                input_history.append(
                                                    Checkbox.inquiry_sec4[0])

                                    elif len([i for i in contact_method.list_9sc if "メール" in i]) > 0 \
                                            and len(contact_method.list_9sc) == 2:

                                        # 複数要素から任意の番数を指定する際、
                                        # 「find_element_by」では「TypeError: 'WebElement' object is not subscriptable」となるので要注意！！
                                        checkbox = driver.find_elements_by_name(
                                            SELECT_list3[len(SELECT_list3)-1])[len(SELECT_list3)-1]
                                        if checkbox.is_selected() is not True:
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox)
                                            if checkbox.is_selected() is True:
                                                input_history.append(
                                                    SELECT_list3[len(SELECT_list3)-1])
                                                print(checkbox.is_selected())
# 		           		              except:
                                  except:
                                    pass


# （メール配信）
                                  if "希望しない" in str(soup.find_all("form")):
                                    print("メール配信の有無選択項目あり")

# name、idの両方が存在する場合
                                    try:
                                        if len(Checkbox.delivery_name) == 1 \
                                                and len(Checkbox.delivery_id) == 1:
                                            checkbox = driver.find_element_by_id(
                                                Checkbox.delivery_id[0])
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox)
                                            if checkbox.is_selected() is True:
                                                input_history.append(
                                                    Checkbox.delivery_id[0])

                                            else:
                                                checkbox = driver.find_element_by_name(
                                                    Checkbox.delivery_name[0])
                                                driver.execute_script(
                                                    "arguments[0].click();", checkbox)
                                                print(checkbox.is_selected())
                                                input_history.append(
                                                    Checkbox.delivery_name[0])

                                        elif len(Checkbox.delivery_name) > 1 \
                                                and len(Checkbox.delivery_id) > 1:
                                            checkbox = driver.find_element_by_id(
                                                Checkbox.delivery_id[len(Checkbox.delivery_id)-1])
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox)
                                            input_history.append("希望しない")

# 		              break
# nameのみ存在
                                        elif len(Checkbox.delivery_name) == 1 \
                                                and len(Checkbox.delivery_id) == 0:
                                            checkbox = driver.find_element_by_name(
                                                Checkbox.delivery_name[0])
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox)
                                            input_history.append("希望しない")
                                        elif len(Checkbox.delivery_name) > 1 \
                                                and len(Checkbox.delivery_id) == 0:
                                            checkbox = driver.find_element_by_name(
                                                Checkbox.delivery_name[len(Checkbox.delivery_name)-1])
                                            driver.execute_script(
                                                "arguments[0].click();", checkbox)
                                            input_history.append("希望しない")
# 		              break

                                    except:
                                      pass


# （スパムメール防止のためのチェックボックス）
                                  print("スパムメール防止のためのチェックボックス")
                                  try:
                                    if not len([i for i in input_tag.list_2c if "spam" in i
                                                or "accept" in i]) == 0:
                                        checkbox = driver.find_element_by_css_selector(
                                            "[value='1']")
                                        driver.execute_script(
                                            "arguments[0].click();", checkbox)
                                        input_history.append("スパムメール防止チェック済")

                                    elif "recaptcha" in html:
                                        driver.switch_to_frame(driver.find_element_by_tag_name("iframe"))
                                        driver.find_element_by_class_name("recaptcha-checkbox-border").click()
                                        driver.switch_to_default_content()
                                        ws3.update_cell(k, 8, "reCAPTCHA")
                                        print("reCAPTCHA")
#                                        input_history.append("reCAPTCHA")

                                  except:
                                    driver.switch_to_default_content()


# （チェックボックス：上記の内容で送信する）

# nameのみ存在する場合
                                  try:
                                    if len(Checkbox.confirm_sec1) > 0 \
                                        and len(Checkbox.confirm_sec2) > 0 \
                                        and len(Checkbox.confirm_sec3) == 0 \
                                        and len(Checkbox.confirm_sec4) == 0 \
                                        and len(Checkbox.confirm_sec5) == 0:
                                        checkbox_name = driver.find_element_by_name(
                                            Checkbox.confirm_sec2[0])
                                        if checkbox.is_selected() is not True:
                                            checkbox_name.click()
                                            print(
                                                "name値：" + Checkbox.confirm_sec2[0])
                                            input_history.append(
                                                Checkbox.confirm_sec2[0])

#classのみ存在する場合
                                    elif len(Checkbox.confirm_sec1) > 0 \
                                        and len(Checkbox.confirm_sec2) == 0 \
                                        and len(Checkbox.confirm_sec3) == 0 \
                                        and len(Checkbox.confirm_sec4) == 0 \
                                        and len(Checkbox.confirm_sec5) > 0:
                                        checkbox_name = driver.find_element_by_class_name(
                                            Checkbox.confirm_sec5[0])
                                        if checkbox.is_selected() is not True:
                                            checkbox_name.click()
                                            print(
                                                "class値：" + Checkbox.confirm_sec5[0])
                                            input_history.append(
                                                Checkbox.confirm_sec5[0])

                                  except:
                                    pass


# 送信実行に必要な要素取得
                                import send_element
                                importlib.reload(send_element)

# パターン追加（2021.12.03）
# （buttonタグのclass値に指定キーワードが含まれる）
                                if "フォーム要素あり" in ws3.cell(k, 7).value \
                                    and not len([i for i in send_element.list_4bc if "_1fbEI" in i
                                                 or "m-btn" in i]) == 0:
#                                    print([i for i in send_element.list_4bc if "_1fbEI" in i
#                                           or "m-btn" in i])

#                                    try:
                                        # 送信ボタン押下
                                        # <button aria-disabled="false" data-testid="buttonElement" class="_1fbEI"><span class="_1Qjd7">Sign Up!</span></button>
                                    if "フォーム要素あり" in ws3.cell(k, 7).value:
                                            driver.find_element_by_class_name(
                                                "_1fbEI").click()
                                            print("ボタン要素：_1fbEI")
# 		           		            time.sleep(3)
                                            html = driver.page_source
                                            soup = BeautifulSoup(html, 'html.parser')

# 送信されたかどうかのテキスト取得
# <div id="comp-juhyx0qr" class="_1Q9if" data-testid="richTextElement"><p class="font_9" style="font-size:15px">Thanks for submitting!</p></div>
# 		           		            lastcol = len(list(ws3.row_values(k)))
# 		           		            cell_list2 = ws3.range(k, 7, k, lastcol)
# 		           		            print(cell_list2)

                                            import send_complete
                                            importlib.reload(send_complete)

                                            try:
                                                send_complete_keywords = []
                                                for i in send_complete.keywords:
                                                    if not i in soup.select("._1Q9if"):
                                                        pass
                                                    elif i in soup.select("._1Q9if"):
                                                        send_complete_keywords.append(i)
                                                for i in send_complete.input_history_key:
                                                    if not i in str(input_history):
                                                        pass
                                                    elif i in str(input_history):
                                                        send_complete_keywords.append(str(i))
                                            except Exception as e:
                                                print(e)

# 重複した要素を削除し、新たなリストを生成
                                    try:
                                            send_complete_keywords = list(dict.fromkeys(send_complete_keywords))
                                            print("send_complete_keywords：" + str(send_complete_keywords))

# 「メールアドレス」「氏名」「本文」のどれかが入力履歴に無い場合、
# アプリ側でエラー検知
                                            if len([i for i in send_complete_keywords if "メールアドレス" in i]) == 0 \
                                                and not "完了" in ws3.cell(k, 7).value:
                                                    ws3.update_cell(
                                                        k, 8, "メールアドレスが入力されませんでした！！")
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(
                                                        k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(
                                                        ws3, f'A{k}:Z{k}', data_fmt4)

                                            elif len([i for i in send_complete_keywords if "投稿" in i]) == 0 \
                                                and not "完了" in ws3.cell(k, 7).value:
                                                    ws3.update_cell(
                                                        k, 8, "本文が入力されませんでした！！")
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(
                                                        k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(
                                                        ws3, f'A{k}:Z{k}', data_fmt4)

                                            elif len(send_complete_keywords) < 3 \
                                                        and not "完了" in ws3.cell(k, 7).value:
                                                    ws3.update_cell(
                                                        k, 8, "送信失敗！！")
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(
                                                        k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(
                                                        ws3, f'A{k}:Z{k}', data_fmt4)

                                            elif len(send_complete_keywords) > 3 \
                                                        and not "完了" in ws3.cell(k, 7).value:
                                                for Content in soup.find_all("span",style=re.compile("font")):
                                                    Content = re.sub(
                                                        "[\n]", "", Content.getText(), 4)
                                                    print("span",style=re.compile("font"))
                                                ws3.update_cell(
                                                        k, 7, Content)
                                                dt_now = datetime.datetime.now()
                                                ws3.update_cell(
                                                        k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                format_cell_range(
                                                        ws3, f'A{k}:Z{k}', data_fmt5)

                                            else:
#                                            elif len(send_complete_keywords) == 3 \
#                                                        and not "完了" in ws3.cell(k, 7).value:
                                                for Content in soup.find_all("span",style=re.compile("color")):
                                                    Content = re.sub(
                                                        "[\n]", "", Content.getText(), 4)
                                                    print("span",style=re.compile("color"))
                                                ws3.update_cell(
                                                        k, 7, Content)
                                                dt_now = datetime.datetime.now()
                                                ws3.update_cell(
                                                        k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                format_cell_range(
                                                        ws3, f'A{k}:Z{k}', data_fmt5)

                                    except:
                                        try:

                                            # パターン追加（2021.12.10）
                                            # class値に半角スペースが複数含まれている場合
                                            if "フォーム要素あり" in ws3.cell(k, 7).value:
                                                import send_element
                                                importlib.reload(send_element)
                                                try:
                                                    if len(send_element.list_4bc) == 4:
                                                        send_element.list_4bc = "." + send_element.list_4bc[0] \
                                                            + "." + send_element.list_4bc[1]  \
                                                            + "." + send_element.list_4bc[2] \
                                                            + "." + send_element.list_4bc[3]
                                                    print(send_element.list_4bc)
                                                    elem = driver.find_element_by_css_selector(
                                                        send_element.list_4bc)
                                                    driver.execute_script(
                                                        "arguments[0].click();", elem)

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                                    alert = driver.switch_to.alert
                                                    Content = re.sub(
                                                        "[\n]", "", alert.text, 6)
                                                    Content = re.sub(
                                                        "[\s]", "", Content, 50)
                                                    ws3.update_cell(
                                                        k, 7, Content)
                                                    print(Content)
                                                    format_cell_range(
                                                        ws3, f'A{k}:Z{k}', data_fmt4)
                                                except NoAlertPresentException:
#                                                    time.sleep(3)

# エラーメッセージ
#                                                    import err_msg
#                                                    importlib.reload(err_msg)
#                                                    ws3.update_cell(k, 7, err_msg.Content)
#                                                    format_cell_range(
#                                                        ws3, f'A{k}:Z{k}', data_fmt4)

# 画像認証有無の確認
                                                    if "captcha" in str(soup.find_all("form")):
                                                        ws3.update_cell(
                                                            k, 7, "CAPTCHA")
                                                        dt_now = datetime.datetime.now()
                                                        ws3.update_cell(
                                                            k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                        format_cell_range(
                                                            ws3, f'A{k}:Z{k}', data_fmt2)
                                                    else:
#                                                        list_4bc = []
                                                        element11 = soup.find_all(
                                                            "button")
                                                        if "submit" in str(element11):
                                                            print(element11)
                                                            elem = driver.find_element_by_css_selector(
                                                                "button[type='submit']")
                                                            driver.execute_script(
                                                                "arguments[0].click();", elem)
                                                            time.sleep(3)
                                                            ws3.update_cell(
                                                                k, 7, driver.title)
                                                            dt_now = datetime.datetime.now()
                                                            ws3.update_cell(
                                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                            print(driver.title)
                                                            if "エラー" in ws3.cell(k, 7).value:
                                                                format_cell_range(
                                                                    ws3, f'A{k}:Z{k}', data_fmt4)
                                                            else:
                                                                format_cell_range(
                                                                    ws3, f'A{k}:Z{k}', data_fmt5)

                                        except Exception as e:
                                            print(e)
                                            ws3.update_cell(k, 8, "送信ボタン押下不可")
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

# （name値に指定キーワードが含まれない、且つtype値に指定キーワードが含まれる）

# パターン追加（2021.12.10）
# （spanタグのclass値に指定キーワードが含まれる）
                                elif len([i for i in input_tag.list_2 if "submit" in i]) == 0 \
                                        or len([i for i in input_tag.list_2t if "submit" in i
                                                or "button" in i
                                                or "image" in i]) > 0 \
                                        or not len([i for i in send_element.list_12sc if "appsMaterialWizButtonPaperbuttonLabel" in i]) == 0:
                                    #                           or len([i for i in list_3t if "button" in i]) > 0:
#                                    print(input_tag.list_2t)
#                                    print(len(input_tag.list_2t))
#                                    print([i for i in send_element.list_12sc if "appsMaterialWizButtonPaperbuttonLabel" in i])

# 対象物が画面の外にあると、
# 「ElementClickInterceptedException: element click intercepted: Element is not clickable at point」
# になってしまうので以下の方法で回避
# 		           		          driver.execute_script("window.scrollTo(0, 200);")

#送信に必要なモジュールのインポート
                                    import send_element
                                    importlib.reload(send_element)

# 		             try:
                                    
# 確認画面遷移後に送信（その０）
                                    if len(send_element.list_18c) > 0:

# 		             except NoSuchElementException:
                                       if "wpcf7-confirm" in str(soup.find_all("form")):
                                              elem = driver.find_element_by_css_selector(
                                                    '.wpcf7-form-control.wpcf7-confirm')
                                              driver.execute_script(
                                                    "arguments[0].click();", elem)
                                              time.sleep(1)
                                              html = driver.page_source
                                              soup = BeautifulSoup(html, 'html.parser')

#HTMLファイルをローカルにダウンロード
                                              file = adid3.m_textCtrl111.GetValue()
                                              with open(file, mode='wt', encoding='utf-8') as f:
                                                   f.write(html)
                                                   print("WordPressで作成されました（with wpcf7-confirm）")

                                              import Contact_form7
                                              importlib.reload(Contact_form7)
                                              if not Contact_form7.ems == []:
                                                ws3.update_cell(k, 7, Contact_form7.ems[len(Contact_form7.ems)-1])
                                                dt_now = datetime.datetime.now()
                                                ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                print(soup.select(".wpcf7-not-valid-tip"))
                                              if not Contact_form7.output == ['']:
                                                ws3.update_cell(k, 8, Contact_form7.output[len(Contact_form7.output)-1])
                                                print(Contact_form7.output)
                                                dt_now = datetime.datetime.now()
                                                ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                if "入力内容に" in ws3.cell(k, 8).value \
                                                    or "error" in ws3.cell(k, 8).value \
                                                    or "失敗" in ws3.cell(k, 8).value:
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                              else:
                                                #送信ボタン押下前に処理の一時停止必要
                                                time.sleep(3)
                                                # driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                                                elem = driver.find_element_by_css_selector(
                                                    '.wpcf7-form-control.wpcf7-submit')
                                                driver.execute_script("arguments[0].click();", elem)
                                                print("wpcf7-submit")
                                                time.sleep(3)
                                                html = driver.page_source
                                                soup = BeautifulSoup(html, 'html.parser')

#HTMLファイルをローカルにダウンロード
                                                with open(file, mode='wt', encoding='utf-8') as f:
                                                    f.write(html)

#確認画面遷移前にエラーメッセージを表示するので、エラーメッセージ関係のコーディングは不要
                                                import Contact_form7
                                                importlib.reload(Contact_form7)
                                                try:
                                                    if not Contact_form7.output == ['']:
                                                        ws3.update_cell(k, 8, Contact_form7.output[len(Contact_form7.output)-1])
                                                except Exception as e:
                                                    print(e)
                                                print("現在のページタイトル：" + str(driver.title))
                                                title_keywords = []
                                                h2_keywords = []
                                                html_keywords = []
                                                import send_complete
                                                importlib.reload(send_complete)
                                                try:
                                                    for i in send_complete.keywords:
                                                        if i in driver.title:
                                                            title_keywords.append(i)
                                                        elif i in str(soup.find_all("form")):
                                                            h2_keywords.append(i)
                                                        elif i in html:
                                                            html_keywords.append(i)
                                                except Exception as e:
                                                    print(e)

                                                # 重複した要素を削除し、新たなリストを生成
                                                title_keywords = list(dict.fromkeys(title_keywords))
                                                print("title_keywords：" + str(title_keywords))
                                                h2_keywords = list(dict.fromkeys(h2_keywords))
                                                print("h2_keywords：" + str(h2_keywords))
                                                html_keywords = list(dict.fromkeys(html_keywords))
                                                print("html_keywords：" + str(html_keywords))
                                                if "エラー" in driver.title \
                                                    or "SPAM BLOCK" in driver.title \
                                                    or "404 Not Found" in driver.title:
                                                    ws3.update_cell(k, 8, driver.title)
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                elif not title_keywords == []:
                                                    ws3.update_cell(k, 7, driver.title)
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                    print(title_keywords)
                                                elif not h2_keywords == []:
                                                    ws3.update_cell(k, 7, h2_keywords[len(h2_keywords)-1])
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                    print(h2_keywords)
                                                elif not html_keywords == []:
                                                    ws3.update_cell(k, 7, html_keywords[len(html_keywords)-1])
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                    print(html_keywords)
                                                else:
                                                    pass

                                       elif "confirm-plus" in html:
                                              elem = driver.find_element_by_css_selector(
                                                    '.wpcf7-form-control.wpcf7-submit')
                                              driver.execute_script(
                                                    "arguments[0].click();", elem)
                                              time.sleep(1)
                                              html = driver.page_source
                                              soup = BeautifulSoup(html, 'html.parser')

#HTMLファイルをローカルにダウンロード
                                              file = adid3.m_textCtrl111.GetValue()
                                              with open(file, mode='wt', encoding='utf-8') as f:
                                                   f.write(html)
                                                   print("WordPressで作成されました（with confirm-plus）")

                                              import Contact_form7
                                              importlib.reload(Contact_form7)
                                              if not Contact_form7.ems == []:
                                                ws3.update_cell(k, 7, Contact_form7.ems[len(Contact_form7.ems)-1])
                                                dt_now = datetime.datetime.now()
                                                ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                print(soup.select(".wpcf7-not-valid-tip"))
                                              if not Contact_form7.output == ['']:
                                                ws3.update_cell(k, 8, Contact_form7.output[len(Contact_form7.output)-1])
                                                print(Contact_form7.output)
                                                dt_now = datetime.datetime.now()
                                                ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                if "入力内容に" in ws3.cell(k, 8).value \
                                                    or "error" in ws3.cell(k, 8).value \
                                                    or "失敗" in ws3.cell(k, 8).value:
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                              else:
                                                #送信ボタン押下前に処理の一時停止必要
                                                time.sleep(3)
                                                # driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                                                elem = driver.find_element_by_css_selector(
                                                    '.wpcf7-form-control.wpcf7-submit')
                                                driver.execute_script("arguments[0].click();", elem)
                                                print("wpcf7-submit")
                                                time.sleep(3)
                                                html = driver.page_source
                                                soup = BeautifulSoup(html, 'html.parser')

#HTMLファイルをローカルにダウンロード
                                                with open(file, mode='wt', encoding='utf-8') as f:
                                                    f.write(html)

#確認画面遷移前にエラーメッセージを表示するので、エラーメッセージ関係のコーディングは不要
                                                import Contact_form7
                                                importlib.reload(Contact_form7)
                                                try:
                                                    if not Contact_form7.output == ['']:
                                                        ws3.update_cell(k, 8, Contact_form7.output[len(Contact_form7.output)-1])
                                                except Exception as e:
                                                    print(e)
                                                print("現在のページタイトル：" + str(driver.title))
                                                title_keywords = []
                                                h2_keywords = []
                                                html_keywords = []
                                                import send_complete
                                                importlib.reload(send_complete)
                                                try:
                                                    for i in send_complete.keywords:
                                                        if i in driver.title:
                                                            title_keywords.append(i)
                                                        elif i in str(soup.find_all("form")):
                                                            h2_keywords.append(i)
                                                        elif i in html:
                                                            html_keywords.append(i)
                                                except Exception as e:
                                                    print(e)

                                                # 重複した要素を削除し、新たなリストを生成
                                                title_keywords = list(dict.fromkeys(title_keywords))
                                                print("title_keywords：" + str(title_keywords))
                                                h2_keywords = list(dict.fromkeys(h2_keywords))
                                                print("h2_keywords：" + str(h2_keywords))
                                                html_keywords = list(dict.fromkeys(html_keywords))
                                                print("html_keywords：" + str(html_keywords))
                                                if "エラー" in driver.title \
                                                    or "SPAM BLOCK" in driver.title \
                                                    or "404 Not Found" in driver.title:
                                                    ws3.update_cell(k, 8, driver.title)
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                elif not title_keywords == []:
                                                    ws3.update_cell(k, 7, driver.title)
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                    print(title_keywords)
                                                elif not h2_keywords == []:
                                                    ws3.update_cell(k, 7, h2_keywords[0])
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                    print(h2_keywords)
                                                elif not html_keywords == []:
                                                    ws3.update_cell(k, 7, html_keywords[0])
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                    print(html_keywords)
                                                else:
                                                    pass

#パターン追加（2022.09.21）
#<input type="submit" value="問い合わせをする" class="wpcf7-form-control has-spinner wpcf7-submit">
# WordPressの「Contact Form7」プラグインを使用（その４）
                                       elif not "multistep_tag" in html:
                                        try:
                                              elem = driver.find_element_by_css_selector(
                                                    '.wpcf7-form-control.has-spinner.wpcf7-submit')
                                              driver.execute_script(
                                                    "arguments[0].click();", elem)
                                              time.sleep(4)
                                              html = driver.page_source
                                              soup = BeautifulSoup(html, 'html.parser')

#HTMLファイルをローカルにダウンロード
                                              file = adid3.m_textCtrl111.GetValue()
                                              with open(file, mode='wt', encoding='utf-8') as f:
                                                   f.write(html)
                                                   print(
                                                    "WordPressで作成されています（Contact Form 7 version 5.4 or higher）")

                                              import Contact_form7
                                              importlib.reload(Contact_form7)
                                              try:
                                                if not Contact_form7.ems == []:
                                                    ws3.update_cell(k, 7, Contact_form7.ems[len(Contact_form7.ems)-1])
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                    print(soup.select(".wpcf7-not-valid-tip"))
                                                if not Contact_form7.output == ['']:
                                                    ws3.update_cell(k, 8, Contact_form7.output[len(Contact_form7.output)-1])
                                                    print(Contact_form7.output)
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                if "入力内容に" in ws3.cell(k, 8).value \
                                                    or "error" in ws3.cell(k, 8).value \
                                                    or "失敗" in ws3.cell(k, 8).value \
                                                    or "メッセージの送信に失敗" in ws3.cell(k, 8).value \
                                                    or "メッセージの送信に失敗" in Contact_form7.output \
                                                    or Contact_form7.output == "":
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                else:
                                                    print("現在のページタイトル：" + str(driver.title))
                                                    title_keywords = []
                                                    h2_keywords = []
                                                    html_keywords = []
                                                    import send_complete
                                                    importlib.reload(send_complete)
                                                    try:
                                                      for i in send_complete.keywords:
                                                        if i in driver.title:
                                                            title_keywords.append(i)
                                                        elif i in str(soup.find_all("form")):
                                                            h2_keywords.append(i)
                                                        elif i in html:
                                                            html_keywords.append(i)
                                                    except Exception as e:
                                                        print(e)

                                                    # 重複した要素を削除し、新たなリストを生成
                                                    title_keywords = list(dict.fromkeys(title_keywords))
                                                    print("title_keywords：" + str(title_keywords))
                                                    h2_keywords = list(dict.fromkeys(h2_keywords))
                                                    print("h2_keywords：" + str(h2_keywords))
                                                    html_keywords = list(dict.fromkeys(html_keywords))
                                                    print("html_keywords：" + str(html_keywords))
                                                    if "エラー" in driver.title \
                                                        or "SPAM BLOCK" in driver.title \
                                                        or "404 Not Found" in driver.title:
                                                        ws3.update_cell(k, 8, driver.title)
                                                        dt_now = datetime.datetime.now()
                                                        ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                    elif not title_keywords == []:
                                                        ws3.update_cell(k, 7, driver.title)
                                                        dt_now = datetime.datetime.now()
                                                        ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                        print(title_keywords)
                                                    elif not h2_keywords == []:
                                                        ws3.update_cell(k, 7, h2_keywords[len(h2_keywords)-1])
                                                        dt_now = datetime.datetime.now()
                                                        ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                        print(h2_keywords)
                                                    elif not html_keywords == []:
                                                        ws3.update_cell(k, 7, html_keywords[len(html_keywords)-1])
                                                        dt_now = datetime.datetime.now()
                                                        ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                        print(html_keywords)
                                                    else:
                                                        pass

                                              except Exception as e:
                                                 print(e)
#                                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                 print("現在のページタイトル：" + str(driver.title))
                                                 title_keywords = []
                                                 h2_keywords = []
                                                 html_keywords = []
                                                 import send_complete
                                                 importlib.reload(send_complete)
                                                 try:
                                                      for i in send_complete.keywords:
                                                        if i in driver.title:
                                                            title_keywords.append(i)
                                                        elif i in str(soup.find_all("form")):
                                                            h2_keywords.append(i)
                                                        elif i in html:
                                                            html_keywords.append(i)
                                                 except Exception as e:
                                                    print(e)

                                                 # 重複した要素を削除し、新たなリストを生成
                                                 title_keywords = list(dict.fromkeys(title_keywords))
                                                 print("title_keywords：" + str(title_keywords))
                                                 h2_keywords = list(dict.fromkeys(h2_keywords))
                                                 print("h2_keywords：" + str(h2_keywords))
                                                 html_keywords = list(dict.fromkeys(html_keywords))
                                                 print("html_keywords：" + str(html_keywords))
                                                 if "エラー" in driver.title \
                                                    or "SPAM BLOCK" in driver.title \
                                                    or "404 Not Found" in driver.title:
                                                    ws3.update_cell(k, 8, driver.title)
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                 elif not title_keywords == []:
                                                    ws3.update_cell(k, 7, driver.title)
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                    print(title_keywords)
                                                 elif not h2_keywords == []:
                                                    ws3.update_cell(k, 7, h2_keywords[len(h2_keywords)-1])
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                    print(h2_keywords)
                                                 elif not html_keywords == []:
                                                    ws3.update_cell(k, 7, html_keywords[len(html_keywords)-1])
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                    print(html_keywords)
                                                 else:
                                                    pass

                                        except Exception as e:
                                            print(e)
                                            try:
                                            # WordPressの「Contact Form7」プラグインを使用（without wpcf7-confirm）
                                               elem = driver.find_element_by_css_selector(
                                                '.wpcf7-form-control.wpcf7-submit')
                                               driver.execute_script("arguments[0].click();", elem)

                                            #「Contact_form7.err」及び「Contact_form7.output」が上手く得られない場合は()内を調整する。
                                               time.sleep(4)
                                               html = driver.page_source
                                               soup = BeautifulSoup(html, 'html.parser')

                                            #HTMLファイルをローカルにダウンロード
                                               file = adid3.m_textCtrl111.GetValue()
                                               with open(file, mode='wt', encoding='utf-8') as f:
                                                  f.write(html)
                                               print(
                                                "WordPressで作成されました（Contact Form 7 version may be 5.3.2）")

                                               import Contact_form7
                                               importlib.reload(Contact_form7)

                                            #エラーメッセージ
                                               if not Contact_form7.ems == []:
                                                ws3.update_cell(k, 7, Contact_form7.ems[len(Contact_form7.ems)-1])
                                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

                                            # 結果出力
                                               if not Contact_form7.output == ['']:
                                                ws3.update_cell(k, 8, Contact_form7.output[len(Contact_form7.output)-1])
                                                dt_now = datetime.datetime.now()
                                                ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                               if "メッセージの送信に失敗" in ws3.cell(k, 8).value:
                                                ws3.update_cell(k, 8, "送信に失敗しました。")
                                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                               elif "入力内容に" in ws3.cell(k, 8).value \
                                                or "error" in ws3.cell(k, 8).value \
                                                or "失敗" in ws3.cell(k, 8).value:
                                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                               else:
#                                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                print("現在のページタイトル：" + str(driver.title))
                                                title_keywords = []
                                                h2_keywords = []
                                                html_keywords = []
                                                import send_complete
                                                importlib.reload(send_complete)
                                                try:
                                                    for i in send_complete.keywords:
                                                        if i in driver.title:
                                                            title_keywords.append(i)
                                                        elif i in str(soup.find_all("form")):
                                                            h2_keywords.append(i)
                                                        elif i in html:
                                                            html_keywords.append(i)
                                                except Exception as e:
                                                    print(e)

                                                # 重複した要素を削除し、新たなリストを生成
                                                title_keywords = list(dict.fromkeys(title_keywords))
                                                print("title_keywords：" + str(title_keywords))
                                                h2_keywords = list(dict.fromkeys(h2_keywords))
                                                print("h2_keywords：" + str(h2_keywords))
                                                html_keywords = list(dict.fromkeys(html_keywords))
                                                print("html_keywords：" + str(html_keywords))
                                                if "エラー" in driver.title \
                                                    or "SPAM BLOCK" in driver.title \
                                                    or "404 Not Found" in driver.title:
                                                    ws3.update_cell(k, 8, driver.title)
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                elif not title_keywords == []:
                                                    ws3.update_cell(k, 7, driver.title)
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                    print(title_keywords)
                                                elif not h2_keywords == []:
                                                    ws3.update_cell(k, 7, h2_keywords[len(h2_keywords)-1])
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                    print(h2_keywords)
                                                elif not html_keywords == []:
                                                    ws3.update_cell(k, 7, html_keywords[len(html_keywords)-1])
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                    print(html_keywords)
                                                else:
                                                    pass

                                            except Exception as e:
                                                print(e)
                                                try:
                                            # WordPressの「Contact Form7」プラグインを使用（その３）
                                                    if "フォーム要素あり" in ws3.cell(k, 7).value:
                                                        elem = driver.find_element_by_css_selector(
                                                            "input[type='image']")
                                                        driver.execute_script(
                                                            "arguments[0].click();", elem)
                                                        time.sleep(3)
                                                        html = driver.page_source
                                                        soup = BeautifulSoup(html, 'html.parser')

#HTMLファイルをローカルにダウンロード
                                                        file = adid3.m_textCtrl111.GetValue()
                                                        with open(file, mode='wt', encoding='utf-8') as f:
                                                           f.write(html)
                                                           print("WordPressで作成されました（without wpcf7-submit）")

                                                        import Contact_form7
                                                        importlib.reload(Contact_form7)
# エラーメッセージ
                                                        ws3.update_cell(k, 7, Contact_form7.ems[len(Contact_form7.ems)-1])
                                                        format_cell_range(
                                                            ws3, f'A{k}:Z{k}', data_fmt4)

# 結果出力
                                                        ws3.update_cell(k, 8, Contact_form7.output[len(Contact_form7.output)-1])
                                                        dt_now = datetime.datetime.now()
                                                        ws3.update_cell(
                                                            k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                        if "メッセージの送信に失敗" in Contact_form7.output \
                                                            or Contact_form7.output == "":
                                                            ws3.update_cell(
                                                                k, 8, "送信に失敗しました。")
                                                            format_cell_range(
                                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                                        elif "入力内容に" in ws3.cell(k, 8).value \
                                                            or "error" in ws3.cell(k, 8).value \
                                                            or "失敗" in ws3.cell(k, 8).value:
                                                            format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                        else:
                                                            print("現在のページタイトル：" + str(driver.title))
                                                            title_keywords = []
                                                            h2_keywords = []
                                                            html_keywords = []
                                                            import send_complete
                                                            importlib.reload(send_complete)
                                                            try:
                                                                for i in send_complete.keywords:
                                                                    if i in driver.title:
                                                                        title_keywords.append(i)
                                                                    elif i in str(soup.find_all("form")):
                                                                        h2_keywords.append(i)
                                                                    elif i in html:
                                                                        html_keywords.append(i)
                                                            except Exception as e:
                                                                print(e)

                                                # 重複した要素を削除し、新たなリストを生成
                                                            title_keywords = list(dict.fromkeys(title_keywords))
                                                            print("title_keywords：" + str(title_keywords))
                                                            h2_keywords = list(dict.fromkeys(h2_keywords))
                                                            print("h2_keywords：" + str(h2_keywords))
                                                            html_keywords = list(dict.fromkeys(html_keywords))
                                                            print("html_keywords：" + str(html_keywords))
                                                            if "エラー" in driver.title \
                                                                or "SPAM BLOCK" in driver.title \
                                                                or "404 Not Found" in driver.title:
                                                                ws3.update_cell(k, 8, driver.title)
                                                                dt_now = datetime.datetime.now()
                                                                ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                            elif not title_keywords == []:
                                                                ws3.update_cell(k, 7, driver.title)
                                                                dt_now = datetime.datetime.now()
                                                                ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                                print(title_keywords)
                                                            elif not h2_keywords == []:
                                                                ws3.update_cell(k, 7, h2_keywords[len(h2_keywords)-1])
                                                                dt_now = datetime.datetime.now()
                                                                ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                                print(h2_keywords)
                                                            elif not html_keywords == []:
                                                                ws3.update_cell(k, 7, html_keywords[len(html_keywords)-1])
                                                                dt_now = datetime.datetime.now()
                                                                ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                                print(html_keywords)
                                                            else:
                                                                pass

                                                except Exception as e:
                                                    print(e)
# パターン追加（2023.02.10）
# WordPressの「Contact Form7」プラグインを使用（その４）
                                                    try:
                                                        if "フォーム要素あり" in ws3.cell(k, 7).value:
                                                            elem = driver.find_element_by_css_selector(
                                                                "input[type='submit']")
                                                            driver.execute_script(
                                                                "arguments[0].click();", elem)
                                                            time.sleep(3)
                                                            html = driver.page_source
                                                            soup = BeautifulSoup(html, 'html.parser')

#HTMLファイルをローカルにダウンロード
                                                            file = adid3.m_textCtrl111.GetValue()
                                                            with open(file, mode='wt', encoding='utf-8') as f:
                                                               f.write(html)
                                                               print("WordPressで作成されました（その他１）")

                                                            import Contact_form7
                                                            importlib.reload(Contact_form7)
# エラーメッセージ
                                                            ws3.update_cell(k, 7, Contact_form7.ems[len(Contact_form7.ems)-1])
                                                            format_cell_range(
                                                                ws3, f'A{k}:Z{k}', data_fmt4)

# 結果出力
                                                            ws3.update_cell(k, 8, Contact_form7.output[len(Contact_form7.output)-1])
                                                            dt_now = datetime.datetime.now()
                                                            ws3.update_cell(
                                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                            if "メッセージの送信に失敗" in Contact_form7.output \
                                                                or Contact_form7.output == "":
                                                                ws3.update_cell(
                                                                    k, 8, "送信に失敗しました。")
                                                                format_cell_range(
                                                                    ws3, f'A{k}:Z{k}', data_fmt4)
                                                            elif "入力内容に" in ws3.cell(k, 8).value \
                                                                or "error" in ws3.cell(k, 8).value \
                                                                or "失敗" in ws3.cell(k, 8).value:
                                                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                            else:
                                                                print("現在のページタイトル：" + str(driver.title))
                                                                title_keywords = []
                                                                h2_keywords = []
                                                                html_keywords = []
                                                                import send_complete
                                                                importlib.reload(send_complete)
                                                                try:
                                                                    for i in send_complete.keywords:
                                                                        if i in driver.title:
                                                                            title_keywords.append(i)
                                                                        elif i in str(soup.find_all("form")):
                                                                            h2_keywords.append(i)
                                                                        elif i in html:
                                                                            html_keywords.append(i)
                                                                except Exception as e:
                                                                    print(e)

                                                # 重複した要素を削除し、新たなリストを生成
                                                                title_keywords = list(dict.fromkeys(title_keywords))
                                                                print("title_keywords：" + str(title_keywords))
                                                                h2_keywords = list(dict.fromkeys(h2_keywords))
                                                                print("h2_keywords：" + str(h2_keywords))
                                                                html_keywords = list(dict.fromkeys(html_keywords))
                                                                print("html_keywords：" + str(html_keywords))
                                                                if "エラー" in driver.title \
                                                                    or "SPAM BLOCK" in driver.title \
                                                                    or "404 Not Found" in driver.title:
                                                                    ws3.update_cell(k, 8, driver.title)
                                                                    dt_now = datetime.datetime.now()
                                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                elif not title_keywords == []:
                                                                    ws3.update_cell(k, 7, driver.title)
                                                                    dt_now = datetime.datetime.now()
                                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                                    print(title_keywords)
                                                                elif not h2_keywords == []:
                                                                    ws3.update_cell(k, 7, h2_keywords[len(h2_keywords)-1])
                                                                    dt_now = datetime.datetime.now()
                                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                                    print(h2_keywords)
                                                                elif not html_keywords == []:
                                                                    ws3.update_cell(k, 7, html_keywords[len(html_keywords)-1])
                                                                    dt_now = datetime.datetime.now()
                                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                                    print(html_keywords)
                                                                else:
                                                                    pass

                                                    except Exception as e:
                                                        print(e)
# パターン追加（2023.02.10）
# WordPressの「Contact Form7」プラグインを使用（その５）
                                                        try:
                                                            if "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                elem = driver.find_element_by_css_selector(
                                                                    "input[type='button']")
                                                                driver.execute_script(
                                                                      "arguments[0].click();", elem)
                                                                time.sleep(1)
                                                                html = driver.page_source
                                                                soup = BeautifulSoup(html, 'html.parser')

#HTMLファイルをローカルにダウンロード
                                                                file = adid3.m_textCtrl111.GetValue()
                                                                with open(file, mode='wt', encoding='utf-8') as f:
                                                                     f.write(html)
                                                                     print("WordPressで作成されました（その他２）")

                                                                import Contact_form7
                                                                importlib.reload(Contact_form7)
# エラーメッセージ
                                                                ws3.update_cell(k, 7, Contact_form7.ems[len(Contact_form7.ems)-1])
                                                                format_cell_range(
                                                                    ws3, f'A{k}:Z{k}', data_fmt4)

# 結果出力
                                                                ws3.update_cell(k, 8, Contact_form7.output[len(Contact_form7.output)-1])
                                                                dt_now = datetime.datetime.now()
                                                                ws3.update_cell(
                                                                    k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                                if "メッセージの送信に失敗" in Contact_form7.output \
                                                                    or Contact_form7.output == "":
                                                                    ws3.update_cell(
                                                                        k, 8, "送信に失敗しました。")
                                                                    format_cell_range(
                                                                        ws3, f'A{k}:Z{k}', data_fmt4)
                                                                elif "入力内容に" in ws3.cell(k, 8).value \
                                                                    or "error" in ws3.cell(k, 8).value \
                                                                    or "失敗" in ws3.cell(k, 8).value:
                                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
#一旦try~exceptで様子見
# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                                                    try:
                                                                        driver.get(ws3.cell(k+1, 6).value)
                                                                        alert = driver.switch_to.alert
                                                                        alert.accept()
                                                                    except Exception as e:
                                                                        print(e)
                                                                else:
                                                                    print("現在のページタイトル：" + str(driver.title))
                                                                    title_keywords = []
                                                                    h2_keywords = []
                                                                    html_keywords = []
                                                                    import send_complete
                                                                    importlib.reload(send_complete)
                                                                    try:
                                                                        for i in send_complete.keywords:
                                                                            if i in driver.title:
                                                                                title_keywords.append(i)
                                                                            elif i in str(soup.find_all("form")):
                                                                                h2_keywords.append(i)
                                                                            elif i in html:
                                                                                html_keywords.append(i)
                                                                    except Exception as e:
                                                                        print(e)

                                                # 重複した要素を削除し、新たなリストを生成
                                                                    title_keywords = list(dict.fromkeys(title_keywords))
                                                                    print("title_keywords：" + str(title_keywords))
                                                                    h2_keywords = list(dict.fromkeys(h2_keywords))
                                                                    print("h2_keywords：" + str(h2_keywords))
                                                                    html_keywords = list(dict.fromkeys(html_keywords))
                                                                    print("html_keywords：" + str(html_keywords))
                                                                    if "エラー" in driver.title \
                                                                        or "SPAM BLOCK" in driver.title \
                                                                        or "404 Not Found" in driver.title:
                                                                        ws3.update_cell(k, 8, driver.title)
                                                                        dt_now = datetime.datetime.now()
                                                                        ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                        try:
                                                                            driver.get(ws3.cell(k+1, 6).value)
                                                                            alert = driver.switch_to.alert
                                                                            alert.accept()
                                                                        except Exception as e:
                                                                            print(e)
                                                                    elif not title_keywords == []:
                                                                        ws3.update_cell(k, 7, driver.title)
                                                                        dt_now = datetime.datetime.now()
                                                                        ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                                        print(title_keywords)
                                                                        try:
                                                                            driver.get(ws3.cell(k+1, 6).value)
                                                                            alert = driver.switch_to.alert
                                                                            alert.accept()
                                                                        except Exception as e:
                                                                            print(e)
                                                                    elif not h2_keywords == []:
                                                                        ws3.update_cell(k, 7, h2_keywords[len(h2_keywords)-1])
                                                                        dt_now = datetime.datetime.now()
                                                                        ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                                        print(h2_keywords)
                                                                        try:
                                                                            driver.get(ws3.cell(k+1, 6).value)
                                                                            alert = driver.switch_to.alert
                                                                            alert.accept()
                                                                        except Exception as e:
                                                                            print(e)
                                                                    elif not html_keywords == []:
                                                                        ws3.update_cell(k, 7, html_keywords[len(html_keywords)-1])
                                                                        dt_now = datetime.datetime.now()
                                                                        ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                                        print(html_keywords)
                                                                        try:
                                                                            driver.get(ws3.cell(k+1, 6).value)
                                                                            alert = driver.switch_to.alert
                                                                            alert.accept()
                                                                        except Exception as e:
                                                                            print(e)
                                                                    else:
                                                                        try:
                                                                            driver.get(ws3.cell(k+1, 6).value)
                                                                            alert = driver.switch_to.alert
                                                                            alert.accept()
                                                                        except Exception as e:
                                                                            print(e)
                                                                            
                                                        except Exception as e:
                                                            print(e)

                                            # ws3.update_cell(k, 8, "送信ボタン押下不可")
                                            # dt_now = datetime.datetime.now()
                                            # ws3.update_cell(
                                            #     k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            # format_cell_range(
                                            #     ws3, f'A{k}:Z{k}', data_fmt4)

#パターン追加（2022.10.11）
#The Contact Form 7 Multi-Step Forms plugin on WordPress.
                                       elif "multistep_tag" in html:
                                              elem = driver.find_element_by_css_selector(
                                                    '.wpcf7-form-control.wpcf7-submit')
                                              driver.execute_script(
                                                    "arguments[0].click();", elem)
                                              time.sleep(1)
                                              html = driver.page_source
                                              soup = BeautifulSoup(html, 'html.parser')

#HTMLファイルをローカルにダウンロード
                                              file = adid3.m_textCtrl111.GetValue()
                                              with open(file, mode='wt', encoding='utf-8') as f:
                                                   f.write(html)
                                                   print("WordPressで作成されました（with Multi-Step Forms plugin）")

                                              import Contact_form7
                                              importlib.reload(Contact_form7)
                                              if not Contact_form7.ems == []:
                                                ws3.update_cell(k, 7, Contact_form7.ems[len(Contact_form7.ems)-1])
                                                dt_now = datetime.datetime.now()
                                                ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                print(soup.select(".wpcf7-not-valid-tip"))
                                              if not Contact_form7.output == ['']:
                                                ws3.update_cell(k, 8, Contact_form7.output[len(Contact_form7.output)-1])
                                                print(Contact_form7.output)
                                                dt_now = datetime.datetime.now()
                                                ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                if "入力内容に" in ws3.cell(k, 8).value \
                                                    or "error" in ws3.cell(k, 8).value \
                                                    or "失敗" in ws3.cell(k, 8).value:
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                              else:
                                                #送信ボタン押下前に処理の一時停止必要
                                                time.sleep(3)
                                                # driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                                                elem = driver.find_element_by_css_selector(
                                                    '.wpcf7-form-control.wpcf7-submit')
                                                driver.execute_script("arguments[0].click();", elem)
                                                print("wpcf7-submit")
                                                time.sleep(3)
                                                html = driver.page_source
                                                soup = BeautifulSoup(html, 'html.parser')

#HTMLファイルをローカルにダウンロード
                                                with open(file, mode='wt', encoding='utf-8') as f:
                                                    f.write(html)

#確認画面遷移前にエラーメッセージを表示するので、エラーメッセージ関係のコーディングは不要
                                                import Contact_form7
                                                importlib.reload(Contact_form7)
                                                try:
                                                    if not Contact_form7.output == ['']:
                                                        ws3.update_cell(k, 8, Contact_form7.output[len(Contact_form7.output)-1])
                                                except Exception as e:
                                                    print(e)
                                                print("現在のページタイトル：" + str(driver.title))
                                                title_keywords = []
                                                h2_keywords = []
                                                html_keywords = []
                                                import send_complete
                                                importlib.reload(send_complete)
                                                try:
                                                    for i in send_complete.keywords:
                                                        if i in driver.title:
                                                            title_keywords.append(i)
                                                        elif i in str(soup.find_all("form")):
                                                            h2_keywords.append(i)
                                                        elif i in html:
                                                            html_keywords.append(i)
                                                except Exception as e:
                                                    print(e)

                                                # 重複した要素を削除し、新たなリストを生成
                                                title_keywords = list(dict.fromkeys(title_keywords))
                                                print("title_keywords：" + str(title_keywords))
                                                h2_keywords = list(dict.fromkeys(h2_keywords))
                                                print("h2_keywords：" + str(h2_keywords))
                                                html_keywords = list(dict.fromkeys(html_keywords))
                                                print("html_keywords：" + str(html_keywords))
                                                if "エラー" in driver.title \
                                                    or "SPAM BLOCK" in driver.title \
                                                    or "404 Not Found" in driver.title:
                                                    ws3.update_cell(k, 8, driver.title)
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                elif not title_keywords == []:
                                                    ws3.update_cell(k, 7, driver.title)
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                    print(title_keywords)
                                                elif not h2_keywords == []:
                                                    ws3.update_cell(k, 7, h2_keywords[len(h2_keywords)-1])
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                    print(h2_keywords)
                                                elif not html_keywords == []:
                                                    ws3.update_cell(k, 7, html_keywords[len(html_keywords)-1])
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                                    print(html_keywords)
                                                else:
                                                    pass

# 確認画面遷移後に送信（その１）
                                    elif len(send_element.list_12io) > 0:
                                        try:
                                            send_element.list_12io = "input[onclick^='" + \
                                                send_element.list_12io[0] + "']"
                                            print("send_element.list_12io：" + str(send_element.list_12io))
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_12io)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()
                                        except NoAlertPresentException as e:
                                            print(e)

# 確認画面遷移後に送信（その２）
                                    elif len(send_element.list_13ia) > 0:
                                        try:
                                            send_element.list_13ia = "input[alt='" + \
                                                send_element.list_13ia[0] + "']"
                                            print("send_element.list_13ia:" +
                                                  str(send_element.list_13ia))
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_13ia)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()
                                        except NoAlertPresentException as e:
                                            print(e)

# 確認画面遷移後に送信（その３）
                                    elif len(send_element.list_14ia) > 0:
                                        try:
                                            send_element.list_14ia = "input[alt='" + \
                                                send_element.list_14ia[0] + "']"
                                            print("send_element.list_14ia:" +
                                                  str(send_element.list_14ia))
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_14ia)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()
                                        except NoAlertPresentException as e:
                                            print(e)

# パターン追加（2022.12.17）
# 確認画面遷移後に送信（その１８）
                                    elif len(send_element.list_27ao) > 0:
                                        try:
                                            send_element.list_27ao = "a[onclick^='" + \
                                                send_element.list_27ao[0] + "']"
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_27ao)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)
                                            print("確認ボタン押下（list_27ao）：" + str(send_element.list_27ao))

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()
                                        except NoAlertPresentException as e:
                                            print(e)

# パターン追加（2022.12.18）
# 確認画面遷移後に送信（その１９）
                                    elif len(send_element.list_28do) > 0:
                                        try:
                                            send_element.list_28do = "div[onclick^='" + \
                                                send_element.list_28do[0] + "']"
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_28do)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)
                                            print("確認ボタン押下（list_28do）：" + str(send_element.list_28do))

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()
                                        except NoAlertPresentException as e:
                                            print(e)

# パターン追加（2023.09.11）
# 確認画面遷移後に送信（その２０）
                                    elif len(send_element.list_32do) == 1:
                                        try:
                                            send_element.list_32do = "div[onclick^='" + \
                                                send_element.list_32do[0] + "']"
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_32do)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)
                                            print("確認ボタン押下（list_32do）：" + str(send_element.list_32do))

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()
                                        except NoAlertPresentException as e:
                                            print(e)

# 2022.8.17
# 確認画面遷移後に送信（その４）
# ※エラー「UnexpectedAlertPresentException: unexpected alert open: {Alert text : }」を回避する為のコーディングが含まれているので、
# 他のパターンにコピーペーストする際は注意！！
                                    elif len(send_element.list_15iv) > 0 \
                                            and len(send_element.list_16iv) > 0 \
                                            and len(send_element.list_21it) > 0:
                                        try:
                                            send_element.list_15iv = "input[value='" + \
                                                send_element.list_15iv[0] + "']"
                                            print("send_element.list_15iv:" +
                                                  str(send_element.list_15iv))
                                            print("send_element.list_16iv:" +
                                                  str(send_element.list_16iv))
                                            print("send_element.list_21it:" +
                                                  str(send_element.list_21it))
                                            if len(send_element.list_16iv) > 1:
                                                send_element.list_16iv = "input[value='" + \
                                                send_element.list_16iv[0] + "']"
                                                elem = driver.find_element_by_css_selector(
                                                send_element.list_16iv)
                                                driver.execute_script(
                                                    "arguments[0].click();", elem)
                                            else:
                                                elem = driver.find_element_by_css_selector(
                                                send_element.list_15iv)
                                                driver.execute_script(
                                                    "arguments[0].click();", elem)

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()

                                        except NoAlertPresentException as e:
                                            print(e)

# 2023.02.15
# 確認画面遷移後に送信（その１８）
# ※エラー「UnexpectedAlertPresentException: unexpected alert open: {Alert text : }」を回避する為のコーディング無しバージョン
# 他のパターンにコピーペーストする際は注意！！
                                    elif len(send_element.list_29c) == 1 \
                                        and len(send_element.list_16iv) > 0 \
                                        and len(send_element.list_21it) > 0:
                                        try:
                                            # send_element.list_29c = "input[value='" + \
                                            #     send_element.list_29c[0] + "']"
                                            print("send_element.list_29c:" +
                                                  str(send_element.list_29c))
                                            print("send_element.list_16iv:" +
                                                  str(send_element.list_16iv))
                                            print("send_element.list_21it:" +
                                                  str(send_element.list_21it))
                                            driver.find_element_by_class_name(
                                                send_element.list_29c[0]).click()

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()

                                        except NoAlertPresentException as e:
                                            print(e)

# 2023.02.17
# 確認画面遷移後に送信（その２０）
# ※エラー「UnexpectedAlertPresentException: unexpected alert open: {Alert text : }」を回避する為のコーディング無しバージョン
# 他のパターンにコピーペーストする際は注意！！
                                    elif len(send_element.list_31c) == 1:
                                        try:
                                            # send_element.list_31c = "input[value='" + \
                                            #     send_element.list_31c[0] + "']"
                                            print("send_element.list_31c:" +
                                                  str(send_element.list_31c))
                                            # print("send_element.list_16iv:" +
                                            #       str(send_element.list_16iv))
                                            # print("send_element.list_21it:" +
                                            #       str(send_element.list_21it))
                                            driver.find_element_by_class_name(
                                                send_element.list_31c[0]).click()

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()

                                        except NoAlertPresentException as e:
                                            print(e)

# 2022.8.16
# 確認画面遷移後に送信（その５）
# ※エラー「UnexpectedAlertPresentException: unexpected alert open: {Alert text : }」を回避する為のコーディング無しバージョン
# 他のパターンにコピーペーストする際は注意！！
                                    elif len(send_element.list_15iv) > 0 \
                                            and len([i for i in send_element.list_21it if "submit" in i]) == 0:
                                        try:
                                            send_element.list_15iv = "input[value='" + \
                                                send_element.list_15iv[0] + "']"
                                            print("send_element.list_15iv:" + str(send_element.list_15iv))
                                            print("send_element.list_21it:" + str(send_element.list_21it))
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_15iv)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)
                                            print("ボタンを押下しました")

                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print("アラートモーダル発生：" + Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()

                                        except NoAlertPresentException as e:
                                            print("アラート発生なし：" + str(e))

# 確認画面遷移後に送信（その６）
# ※エラー「UnexpectedAlertPresentException: unexpected alert open: {Alert text : }」を回避する為のコーディングが含まれているので、
# 他のパターンにコピーペーストする際は注意！！
                                    elif len(send_element.list_15iv) > 0:
                                        try:
                                            send_element.list_15iv = "input[value='" + \
                                                send_element.list_15iv[0] + "']"
                                            print("send_element.list_15iv:" +
                                                  str(send_element.list_15iv))
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_15iv)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)
                                            print("ボタンを押下しました")

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
#                                        except TimeoutException:
#                                            wait = WebDriverWait(driver, 1)
#                                            wait.until(EC.alert_is_present())
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print("アラートモーダル発生：" + Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()

                                        except NoAlertPresentException as e:
                                            print("アラート発生なし：" + str(e))

#                                        except UnexpectedAlertPresentException as e:
#                                            print("error:", e)

# 確認画面遷移後に送信（その７）
                                    elif len(send_element.list_25iv) > 0:
                                        try:
                                            send_element.list_25iv = "input[value='" + \
                                                send_element.list_25iv[0] + "']"
                                            print(send_element.list_25iv)
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_25iv)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()
                                        except NoAlertPresentException as e:
                                            print(e)

# エラー回避追加（2023.02.13）
# 確認画面遷移後に送信（その８）
                                    elif len(send_element.list_16iv) > 0 \
                                        and len(send_element.list_24it) == 0:
                                        try:
                                            send_element.list_16iv = "input[value='" + \
                                                send_element.list_16iv[0] + "']"
                                            print(send_element.list_16iv)
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_16iv)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print("ポップアップメッセージ：" + str(Content))
# 表示されたダイアログの文字列を取得する
                                            alertText = Alert(driver).text
                                            dt_now = datetime.datetime.now()
                                            if "送信しても" in alertText:
                                                print("確認メッセージ：" + str(alertText))
# "OK or Cancel"の確認でOKを選択
                                                Alert(driver).accept()
                                                # time.sleep(3)
                                                try:
                                                    # driver.get(
                                                    #     ws3.cell(k+1, 6).value)
                                                    alert = driver.switch_to.alert
                                                    alert.accept()
                                                except Exception as e:
                                                    print(e)
                                            else:
                                                ws3.update_cell(
                                                    k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                format_cell_range(
                                                    ws3, f'A{k}:Z{k}', data_fmt4)
                                                alert.accept()
                                        except NoAlertPresentException as e:
                                            print(e)

# 確認画面遷移後に送信（その９）
                                    elif len(send_element.list_17ao) > 0:
                                        try:
                                            send_element.list_17ao = "a[onclick^='" + \
                                                send_element.list_17ao[0] + "']"
                                            print(send_element.list_17ao)
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_17ao)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()
                                        except NoAlertPresentException as e:
                                            print(e)

# 2022.8.16
# 確認画面遷移後に送信（その１０）
                                    elif len([i for i in send_element.list_19in if "confirm" in i
                                              or "image" in i
                                              or "submit" in i
                                              or "inspect" in i]) > 0:
# 		                try:
                                        send_element.list_19in = send_element.list_19in[0]
                                        driver.find_element_by_name(send_element.list_19in).click()
                                        print("確認ボタン押下：" + str(send_element.list_19in))

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
# 		                  alert = driver.switch_to.alert
# 		                  Content = re.sub("[\n]", "", alert.text, 6)
# 		                  Content = re.sub("[\s]", "", Content, 50)
# 		                  ws3.update_cell(k, 7, Content)
# 		                  print(Content)
# 		                  dt_now = datetime.datetime.now()
# 		                  ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  alert.accept()
# 		                except NoAlertPresentException:

# 確認画面遷移後に送信（その１１）
                                    elif len(send_element.list_20ah) > 0:
                                        try:
                                            send_element.list_20ah = "a[href^='" + \
                                                send_element.list_20ah[0] + "']"
                                            print(send_element.list_20ah)
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_20ah)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()
                                        except NoAlertPresentException as e:
                                            print(e)

# パターン追加（2023.02.16）
# 確認画面遷移後に送信（その１９）
                                    elif len(send_element.list_30ah) > 0:
                                        try:
                                            send_element.list_30ah = "a[href^='" + \
                                                send_element.list_30ah[0] + "']"
                                            print(send_element.list_30ah)
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_30ah)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()
                                        except NoAlertPresentException as e:
                                            print(e)

# パターン追加（2023.02.10）
# 確認画面遷移後に送信（その１８）
                                    elif len(send_element.list_22bt) > 0:
                                        try:
                                            send_element.list_22bt = "button[type='" + \
                                                send_element.list_22bt[0] + "']"
                                            print(send_element.list_22bt)
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_22bt)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print("ポップアップメッセージ：" + str(Content))
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()
                                        except NoAlertPresentException as e:
                                            print(e)

# パターン修正（2022.12.16）
# 確認画面遷移後に送信（その１３）
                                    elif len(send_element.list_22bv) > 0:
                                        try:
                                            send_element.list_22bv = "button[value='" + \
                                                send_element.list_22bv[0] + "']"
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_22bv)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)
                                            print("確認ボタン押下（list_22bv）：" + str(send_element.list_22bv))

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()
                                        except NoAlertPresentException as e:
                                            print(e)

# 確認画面遷移後に送信（その１４）
                                    elif len(send_element.list_23bt) > 0:
                                        try:
                                            send_element.list_23bt = "button[type='" + \
                                                send_element.list_23bt[0] + "']"
                                            print(send_element.list_23bt)
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_23bt)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()
                                        except NoAlertPresentException as e:
                                            print(e)

# パターン追加（2023.05.31）
# 確認画面遷移後に送信（その１８）
                                    elif len(send_element.list_21it) == 2:
                                        try:
                                            send_element.list_21it = "input[type='" + \
                                                send_element.list_21it[0] + "']"
                                            print("list_21it（要素２個）：" + str(send_element.list_21it))
                                            elem = driver.find_elements_by_css_selector(
                                                send_element.list_21it)[1]
                                            driver.execute_script(
                                                "arguments[0].click();", elem)

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()
                                        except NoAlertPresentException as e:
                                            print(e)

# 確認画面遷移後に送信（その１２）
                                    elif len(send_element.list_21it) > 0 \
                                            and not len(send_element.list_22bv) > 0:
                                        try:
                                            send_element.list_21it = "input[type='" + \
                                                send_element.list_21it[0] + "']"
                                            print(send_element.list_21it)
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_21it)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()
                                        except NoAlertPresentException as e:
                                            print(e)

# 確認画面遷移後に送信（その１５）
                                    elif len(send_element.list_24it) > 0:
                                        try:
                                            send_element.list_24it = "input[type='" + \
                                                send_element.list_24it[0] + "']"
                                            print(send_element.list_24it)
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_24it)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()
                                        except NoAlertPresentException as e:
                                            print(e)

# パターン追加（2022.8.17）
# 確認画面遷移後に送信（その１６）
                                    elif len(send_element.list_26bc) > 0:
                                        try:
                                            send_element.list_26bc = "." + send_element.list_26bc[0]
                                            print("send_element.list_26bc:" + send_element.list_26bc)
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_26bc)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()
                                        except NoAlertPresentException as e:
                                            print(e)

# パターン追加（2022.12.16）
# 確認画面遷移後に送信（その１７）
                                    elif len(send_element.list_19io) > 0:
                                        try:
                                            send_element.list_19io = "input[onclick^='" + \
                                                send_element.list_19io[0] + "']"
                                            print("send_element.list_19io：" + str(send_element.list_19io))
                                            elem = driver.find_element_by_css_selector(
                                                send_element.list_19io)
                                            driver.execute_script(
                                                "arguments[0].click();", elem)

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                            alert = driver.switch_to.alert
                                            Content = re.sub(
                                                "[\n]", "", alert.text, 6)
                                            Content = re.sub(
                                                "[\s]", "", Content, 50)
                                            ws3.update_cell(k, 7, Content)
                                            print(Content)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(
                                                k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(
                                                ws3, f'A{k}:Z{k}', data_fmt4)
                                            alert.accept()
                                        except NoAlertPresentException as e:
                                            print(e)

# Googleフォームから送信（その１９）
                                    elif len(send_element.list_12sc) > 0:
                                        try:
                                            if "編集権限をリクエスト" in html:
                                               send_element.list_12sc = "." + send_element.list_12sc[0] \
                                                + "." + send_element.list_12sc[1] \
                                                    + "." + send_element.list_12sc[2]
                                               print(send_element.list_12sc)
                                               elem = driver.find_elements_by_css_selector(send_element.list_12sc)[1]
                                               driver.execute_script("arguments[0].click();", elem)
                                            else:
                                               send_element.list_12sc = "." + send_element.list_12sc[0] \
                                                    + "." + send_element.list_12sc[1] \
                                                        + "." + send_element.list_12sc[2]
                                               print(send_element.list_12sc)
                                               elem = driver.find_element_by_css_selector(send_element.list_12sc)
                                               driver.execute_script("arguments[0].click();", elem)
# <span class="RHiWt">この質問は必須です</span>
# ※「<span class="freebirdFormviewerComponentsQuestionBaseErrorText">この質問は必須です</span>」は現在使用できないので注意！！（2022.03.02）

# 入力履歴（セル）全てをリスト化
# 		                    lastcol = len(list(ws3.row_values(k)))
# 		                    cell_list2 = ws3.range(k, 9, k, lastcol)
# 		                    print(cell_list2)

# 「メールアドレス」又は「氏名」が入力履歴に無い場合、
# アプリ側でエラー検知

# リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
# 必ずstr型に変換すること！！

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                               alert = driver.switch_to.alert
                                               alert.accept()

                                        except InvalidArgumentException as e:
                                            print(e)

                                        except NoAlertPresentException as e:
                                            print(e)

# エラーが無い場合「UnboundLocalError:local variable 'Err' referenced before assignment」と表示されてしまうので回避
                                        except UnboundLocalError:
                                            lastcol = len(
                                                list(ws3.row_values(k)))
                                            cell_list2 = ws3.range(
                                                k, 9, k, lastcol)
                                            print(cell_list2)

# 		                    if "メールアドレス" in cell_list2 \
#                                 and "氏名" in cell_list2 \
#                                     or "姓" in cell_list2 \
#                                         and "投稿" in cell_list2 \
#                                             and not "完了" in ws3.cell(k, 7).value:

# エラーメッセージ（コーディング一部仮変更中２）
                                    if not "wpcf7" in html \
                                        or "var wpcf7" in html:
                                        time.sleep(1)
                                        html = driver.page_source
                                        soup = BeautifulSoup(html, 'html.parser')

#HTMLファイルをローカルにダウンロード
                                        file = adid3.m_textCtrl111.GetValue()
                                        with open(file, 'w', encoding='utf-8') as f:
                                            f.write(html)
                                        import err_msg
                                        importlib.reload(err_msg)

                                        if not err_msg.em_1 == []:
                                            ws3.update_cell(k, 7, err_msg.err_1)

                                        elif not err_msg.em_2 == []:
                                            ws3.update_cell(k, 7, err_msg.err_2)

                                        elif not err_msg.em_3 == []:
                                            ws3.update_cell(k, 7, err_msg.err_3)

                                        elif not err_msg.em_4 == []:
                                            ws3.update_cell(k, 7, err_msg.err_4)

                                        elif not err_msg.em_5 == []:
                                            ws3.update_cell(k, 7, err_msg.err_5)

                                        elif not err_msg.em_6 == []:
                                            ws3.update_cell(k, 7, err_msg.err_6)

                                        elif not err_msg.em_7 == []:
                                            ws3.update_cell(k, 7, err_msg.err_7)

                                        elif not err_msg.em_8 == []:
                                            ws3.update_cell(k, 7, err_msg.err_8)

                                        elif not err_msg.em_9 == []:
                                            ws3.update_cell(k, 7, err_msg.err_9)

                                        elif not err_msg.em_10 == []:
                                            ws3.update_cell(k, 7, err_msg.err_10)

                                        elif not err_msg.em_11 == []:
                                            ws3.update_cell(k, 7, err_msg.err_11)

                                        elif not err_msg.em_12 == []:
                                            ws3.update_cell(k, 7, err_msg.err_12)

                                        elif not err_msg.em_13 == []:
                                            ws3.update_cell(k, 7, err_msg.err_13)

                                        elif not err_msg.em_14 == []:
                                            ws3.update_cell(k, 7, err_msg.err_14)

                                        elif not err_msg.em_15 == []:
                                            ws3.update_cell(k, 7, err_msg.err_15)

                                        elif not err_msg.em_16 == []:
                                            ws3.update_cell(k, 7, err_msg.err_16)

                                        elif not err_msg.em_17 == []:
                                            ws3.update_cell(k, 7, err_msg.err_17)

                                        elif not err_msg.em_18 == []:
                                            ws3.update_cell(k, 7, err_msg.err_18)

                                        elif not err_msg.em_19 == []:
                                            ws3.update_cell(k, 7, err_msg.err_19)

                                        elif not err_msg.em_20 == []:
                                            ws3.update_cell(k, 7, err_msg.err_20)

                                        elif not err_msg.em_21 == []:
                                            ws3.update_cell(k, 7, err_msg.err_21)

                                        elif not err_msg.em_22 == []:
                                            ws3.update_cell(k, 7, err_msg.err_22)

                                        elif not err_msg.em_23 == []:
                                            ws3.update_cell(k, 7, err_msg.err_23)

                                        elif not err_msg.em_24 == []:
                                            ws3.update_cell(k, 7, err_msg.err_24)

                                        elif not err_msg.em_25 == []:
                                            ws3.update_cell(k, 7, err_msg.err_25)

                                        elif not err_msg.em_26 == []:
                                            ws3.update_cell(k, 7, err_msg.err_26)

                                        elif not err_msg.em_27 == []:
                                            ws3.update_cell(k, 7, err_msg.err_27)

                                        elif not err_msg.em_28 == []:
                                            ws3.update_cell(k, 7, err_msg.err_28)

                                        elif not err_msg.em_29 == []:
                                            ws3.update_cell(k, 7, err_msg.err_29)

                                        elif not err_msg.em_30 == []:
                                            ws3.update_cell(k, 7, err_msg.err_30)

                                        elif not err_msg.em_31 == []:
                                            ws3.update_cell(k, 7, err_msg.err_31)

                                        elif not err_msg.em_32 == []:
                                            ws3.update_cell(k, 7, err_msg.err_32)

                                        elif not err_msg.em_33 == []:
                                            ws3.update_cell(k, 7, err_msg.err_33)

                                        elif not err_msg.em_34 == []:
                                            ws3.update_cell(k, 7, err_msg.err_34)

                                        elif not err_msg.em_35 == []:
                                            ws3.update_cell(k, 7, err_msg.err_35)

                                        elif not err_msg.em_36 == []:
                                            ws3.update_cell(k, 7, err_msg.err_36)

                                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                        
#パターン追加（2022.9.10）
#<span style="color: #d96161;">
#お名前は必須項目となります。<br>メールアドレスは必須項目となります。<br>件名は必須項目となります。<br>お問い合わせ内容は必須項目となります。<br></span>
#                                        for Content in soup.find_all("span",style=re.compile("#d96161")):
#                                          Content = re.sub("[\n]", "", Content.getText(), 1000)
#                                        if not soup.find_all("span",style=re.compile("#d96161")) == []:
#                                         	ws3.update_cell(k, 7, Content)
#                                        print(soup.find_all("span",style=re.compile("#d96161")))


# 確認画面遷移後に送信ボタン押下
                                        import send_complete
                                        importlib.reload(send_complete)

#「input_hitory」にint型の要素が含まれいると
# エラーメッセージ【TypeError: argument of type 'int' is not iterable】が表示されるので、
#str(input_history)にする
                                        send_complete_keywords = []
                                        # for i in input_history:
                                        #        for j in send_complete.input_history_key:
                                        #           if not j in str(i):
                                        #              pass
                                        #           elif j in str(i):
                                        #              send_complete_keywords.append(str(i))
                                        for i in send_complete.input_history_key:
                                            if not i in str(input_history):
                                                pass
                                            elif i in str(input_history):
                                                send_complete_keywords.append(i)

# 重複した要素を削除し、新たなリストを生成
                                        send_complete_keywords = list(dict.fromkeys(send_complete_keywords))
                                        print("send_complete_keywords：" + str(send_complete_keywords))

                                        try:
                                            if len([i for i in send_complete_keywords if "メールアドレス" in i]) == 0 \
                                                and not "完了" in ws3.cell(k, 7).value:
                                                    ws3.update_cell(
                                                        k, 8, "メールアドレスが入力されませんでした！！")
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(
                                                        k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(
                                                        ws3, f'A{k}:Z{k}', data_fmt4)

#一旦try~exceptで様子見
# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                                    try:
                                                      driver.get(
                                                        ws3.cell(k+1, 6).value)
                                                      alert = driver.switch_to.alert
                                                      alert.accept()
                                                    except InvalidArgumentException:
                                                        pass
                                                    except NoAlertPresentException:
                                                        pass

                                            elif len([i for i in send_complete_keywords if "投稿" in i]) == 0 \
                                                and not "完了" in ws3.cell(k, 7).value:
                                                    ws3.update_cell(
                                                        k, 8, "本文が入力されませんでした！！")
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(
                                                        k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(
                                                        ws3, f'A{k}:Z{k}', data_fmt4)

#一旦try~exceptで様子見
# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                                    try:
                                                      driver.get(ws3.cell(k+1, 6).value)
                                                      alert = driver.switch_to.alert
                                                      alert.accept()
                                                    except InvalidArgumentException:
                                                        pass
                                                    except NoAlertPresentException:
                                                        pass

                                            elif len(send_complete_keywords) < 3 \
                                                and not "完了" in ws3.cell(k, 7).value:
                                                    ws3.update_cell(
                                                        k, 8, "送信失敗！！")
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(
                                                        k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(
                                                        ws3, f'A{k}:Z{k}', data_fmt4)

#一旦try~exceptで様子見
# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                                    try:
                                                      driver.get(ws3.cell(k+1, 6).value)
                                                      alert = driver.switch_to.alert
                                                      alert.accept()
                                                    except InvalidArgumentException:
                                                        pass
                                                    except NoAlertPresentException:
                                                        pass

                                            elif len(send_complete_keywords) > 3:
                                                print("お問い合わせフォームの入力漏れなし")

# 以下に確認画面からの送信パターンを追加していく
                                                import Confirm_sent_content
                                                importlib.reload(Confirm_sent_content)
                                                print("確認画面ページの送信要素検索開始")
                                                # import success_msg
                                                # importlib.reload(success_msg)
                                                # if not success_msg.sm_1 == [] \
                                                #     or not success_msg.sm_2 == []:
                                                #     print("送信成功メッセージ要素取得中")
                                                #     ws3.update_cell(
                                                #         k, 7, success_msg.Content)
                                                #     dt_now = datetime.datetime.now()
                                                #     ws3.update_cell(
                                                #     k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                #     format_cell_range(
                                                #     ws3, f'A{k}:Z{k}', data_fmt5)
                                                #     print(success_msg.sm_1)

                                                try:
                                                    print("送信パターンの条件と照合中")
                                                    if len(Confirm_sent_content.list_12io) > 0:
                                                        Confirm_sent_content.list_12io = "input[onclick^='" + \
                                                            Confirm_sent_content.list_12io[
                                                                len(Confirm_sent_content.list_12io)-1] + "']"
                                                        print("list_12io:" + str(Confirm_sent_content.list_12io))
                                                        elem = driver.find_element_by_css_selector(
                                                                Confirm_sent_content.list_12io)
                                                        driver.execute_script(
                                                                    "arguments[0].click();", elem)
                                                        time.sleep(3)
                                                        print(driver.title)

# 変数設定を修正（2022.12.17）
                                                    elif len(Confirm_sent_content.list_11ao) > 0:
                                                        val_11 = "a[onclick^='" + \
                                                            Confirm_sent_content.list_11ao[
                                                                len(Confirm_sent_content.list_11ao)-1] + "']"
                                                        print("list_11ao（数）:" + str(len(Confirm_sent_content.list_11ao)))
                                                        print("list_11ao（要素）:" + str(Confirm_sent_content.list_11ao[
                                                                len(Confirm_sent_content.list_11ao)-1]))
                                                        if len(Confirm_sent_content.list_11ao) == 2:
                                                            elem = driver.find_element_by_css_selector(
                                                                val_11)
                                                            driver.execute_script(
                                                                "arguments[0].click();", elem)
                                                            print("list_11ao:２つ存在")
                                                        elif len(Confirm_sent_content.list_11ao) == 1:
                                                            elem = driver.find_element_by_css_selector(
                                                                val_11)
                                                            driver.execute_script(
                                                                "arguments[0].click();", elem)
                                                            print("list_11ao:１つのみ")
                                                        time.sleep(3)


                                                    elif len(Confirm_sent_content.list_11bo) > 0:
                                                        Confirm_sent_content.list_11bo = "button[onclick^='" + \
                                                            Confirm_sent_content.list_11bo[
                                                                len(Confirm_sent_content.list_11bo)-1] + "']"
                                                        print("list_12bo:" + str(Confirm_sent_content.list_11bo))
                                                        elem = driver.find_element_by_css_selector(
                                                                    Confirm_sent_content.list_11bo)
                                                        driver.execute_script(
                                                                    "arguments[0].click();", elem)
                                                        time.sleep(3)

                                                    elif len(Confirm_sent_content.list_14iv) > 0:
                                                        Confirm_sent_content.list_14iv = "button[value='" + \
                                                            Confirm_sent_content.list_14iv[
                                                                len(Confirm_sent_content.list_14iv)-1] + "']"
                                                        print("list_14iv:" + 
                                                        str(Confirm_sent_content.list_14iv))
                                                        elem = driver.find_element_by_css_selector(
                                                            Confirm_sent_content.list_14iv)
                                                        driver.execute_script(
                                                            "arguments[0].click();", elem)
                                                        time.sleep(3)

                                                    elif len(Confirm_sent_content.list_11ac) > 0:
                                                        print("list_11ac:" + str(Confirm_sent_content.list_11ac))
                                                        driver.find_element_by_class_name(
                                                            Confirm_sent_content.list_11ac[
                                                                len(Confirm_sent_content.list_11ac)-1]).click()
                                                        time.sleep(3)

                                                    elif len(Confirm_sent_content.list_11bi) > 0:
                                                        print("list_11bi:" + str(Confirm_sent_content.list_11bi))
                                                        driver.find_element_by_id(
                                                            Confirm_sent_content.list_11bi[
                                                                len(Confirm_sent_content.list_11bi)-1]).click()
                                                        time.sleep(3)

                                                    elif len(Confirm_sent_content.list_12ia) > 0:
                                                        Confirm_sent_content.list_12ia = "input[alt='" + \
                                                            Confirm_sent_content.list_12ia[
                                                                len(Confirm_sent_content.list_12ia)-1] + "']"
                                                        print("list_12ia:" + 
                                                            str(Confirm_sent_content.list_12ia))
                                                        elem = driver.find_element_by_css_selector(
                                                            Confirm_sent_content.list_12ia)
                                                        driver.execute_script(
                                                            "arguments[0].click();", elem)
                                                        time.sleep(3)

#変数設定を修正（2022.12.08）
                                                    elif len(Confirm_sent_content.list_12iv) > 0:
                                                        val_12 = "input[value='" + \
                                                            Confirm_sent_content.list_12iv[
                                                                len(Confirm_sent_content.list_12iv)-1] + "']"
                                                        print("list_12iv（数）:" + str(len(Confirm_sent_content.list_12iv)))
                                                        print("list_12iv（要素）:" + str(Confirm_sent_content.list_12iv[
                                                                len(Confirm_sent_content.list_12iv)-1]))
                                                        if len(Confirm_sent_content.list_12iv) == 2:
                                                            elem = driver.find_element_by_css_selector(
                                                                val_12)
                                                            driver.execute_script(
                                                                "arguments[0].click();", elem)
                                                            print("list_12iv:２つ存在")
                                                        elif len(Confirm_sent_content.list_12iv) == 1:
                                                            elem = driver.find_element_by_css_selector(
                                                                val_12)
                                                            driver.execute_script(
                                                                "arguments[0].click();", elem)
                                                            print("list_12iv:１つのみ")

                                                        # elif len(Confirm_sent_content.list_12iv) > 2:
                                                        #     elem = driver.find_elements_by_css_selector(
                                                        #         val_12)[0]
                                                        #     driver.execute_script(
                                                        #         "arguments[0].click();", elem)
                                                        #     print("list_12iv:２つ以上")
                                                        time.sleep(3)

                                                    elif len(Confirm_sent_content.list_13iv) > 0:
                                                        Confirm_sent_content.list_13iv = "input[value='" + \
                                                            Confirm_sent_content.list_13iv[
                                                                len(Confirm_sent_content.list_13iv)-1] + "']"
                                                        print("list_13iv:" + 
                                                        str(Confirm_sent_content.list_13iv))
                                                        elem = driver.find_element_by_css_selector(
                                                            Confirm_sent_content.list_13iv)
                                                        driver.execute_script(
                                                            "arguments[0].click();", elem)
                                                        time.sleep(3)


# ⑦buttonタグ内のtype値を取得

# パターン追加（2021.12.30）
# <p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
                                                except Exception as e:
                                                    print(e)
                                                    try:
                                                        elem = driver.find_element_by_css_selector(
                                                            "button[type='submit']")
                                                        driver.execute_script(
                                                            "arguments[0].click();", elem)
                                                        time.sleep(3)

# パターン追加（2022.01.07）
# ⑧inputタグ内のtype値（submit）を取得
                                                    except Exception as e:
                                                        print(e)
                                                        try:
                                                            elem = driver.find_element_by_css_selector(
                                                                "input[type='submit']")
                                                            driver.execute_script(
                                                                "arguments[0].click();", elem)
                                                            time.sleep(3)

# パターン追加（2022.01.07）
# ⑨単純にtype値（submit）を取得
                                                        except Exception as e:
                                                            print(e)
                                                            try:
                                                                elem = driver.find_element_by_css_selector(
                                                                    "[type='submit']")
                                                                driver.execute_script(
                                                                    "arguments[0].click();", elem)
                                                                time.sleep(3)
                                                                print(driver.title)

# どのパターンにも該当しない
                                                            except Exception as e:
                                                                print(e)
                                                                ws3.update_cell(
                                                                        k, 8, "送信ボタン押下不可")
                                                                dt_now = datetime.datetime.now()
                                                                ws3.update_cell(
                                                                        k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                                format_cell_range(
                                                                        ws3, f'A{k}:Z{k}', data_fmt4)

                                        except TypeError as e:
                                            print(e)
                                            if len([i for i in send_complete_keywords if "メールアドレス" in i]) == 0 \
                                                    and ws3.cell(k, 7).value is None:
                                                    ws3.update_cell(
                                                        k, 7, "メールアドレスが入力されませんでした！！")
                                                    ws3.update_cell(
                                                        k, 8, "送信失敗！！")
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(
                                                        k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(
                                                        ws3, f'A{k}:Z{k}', data_fmt4)

#一旦try~exceptで様子見
# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                                    try:
                                                      driver.get(ws3.cell(k+1, 6).value)
                                                      alert = driver.switch_to.alert
                                                      alert.accept()
                                                    except InvalidArgumentException:
                                                        pass
                                                    except NoAlertPresentException:
                                                        pass
                                                    
                                            elif len([i for i in send_complete_keywords if "投稿" in i]) == 0 \
                                                    and ws3.cell(k, 7).value is None:
                                                    ws3.update_cell(
                                                        k, 7, "本文が入力されませんでした！！")
                                                    ws3.update_cell(
                                                        k, 8, "送信失敗！！")
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(
                                                        k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(
                                                        ws3, f'A{k}:Z{k}', data_fmt4)

#一旦try~exceptで様子見
# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                                    try:
                                                      driver.get(
                                                        ws3.cell(k+1, 6).value)
                                                      alert = driver.switch_to.alert
                                                      alert.accept()
                                                    except InvalidArgumentException:
                                                        pass
                                                    except NoAlertPresentException:
                                                        pass

                                            elif len(send_complete_keywords) < 3 \
                                                    and ws3.cell(k, 7).value is None:
                                                    ws3.update_cell(
                                                        k, 7, "メールアドレス・本文以外の必須項目が入力されませんでした！！")
                                                    ws3.update_cell(
                                                        k, 8, "送信失敗！！")
                                                    dt_now = datetime.datetime.now()
                                                    ws3.update_cell(
                                                        k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                                    format_cell_range(
                                                        ws3, f'A{k}:Z{k}', data_fmt4)

#一旦try~exceptで様子見
# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
                                                    try:
                                                      driver.get(ws3.cell(k+1, 6).value)
                                                      alert = driver.switch_to.alert
                                                      alert.accept()
                                                    except InvalidArgumentException:
                                                        pass
                                                    except NoAlertPresentException:
                                                        pass

#送信ボタン押下後が確認画面でない場合
#                                        if "recaptcha" in html:
#                                            time.sleep(10)
                                        html = driver.page_source
                                        soup = BeautifulSoup(html, 'html.parser')
                                        with open(file, 'w', encoding='utf-8') as f:
                                            f.write(html)
                                        print("現在のページタイトル：" + str(driver.title))
                                        title_keywords = []
                                        h2_keywords = []
                                        html_keywords = []
                                        failed_keywords = []
                                        try:
                                            for i in send_complete.keywords:
                                                if i in driver.title:
                                                    title_keywords.append(i)
                                                elif i in str(soup.find_all("form")):
                                                    h2_keywords.append(i)
                                                elif i in html:
                                                    html_keywords.append(i)
                                            for j in send_complete.failed_keys:
                                                if j in driver.title:
                                                    failed_keywords.append(j)
                                                elif j in str(soup.find_all("form")):
                                                    failed_keywords.append(j)
                                                # elif j in html:
                                                #     failed_keywords.append(j)
                                            for h in send_complete.input_history_key_2:
                                                if not h in send_complete_keywords:
                                                    failed_keywords.append(h)
                                        except Exception as e:
                                            print(e)

# 重複した要素を削除し、新たなリストを生成
                                        title_keywords = list(dict.fromkeys(title_keywords))
                                        print("title_keywords：" + str(title_keywords))
                                        h2_keywords = [i for i in h2_keywords if not i == "完了"]
                                        h2_keywords = list(dict.fromkeys(h2_keywords))
                                        print("h2_keywords：" + str(h2_keywords))
                                        html_keywords = [i for i in html_keywords if not i == "完了"]
                                        html_keywords = list(dict.fromkeys(html_keywords))
                                        print("html_keywords：" + str(html_keywords))
                                        failed_keywords = list(dict.fromkeys(failed_keywords))
                                        print("failed_keywords：" + str(failed_keywords))

                                        if "エラー" in driver.title \
                                            or "SPAM BLOCK" in driver.title \
                                            or "404 Not Found" in driver.title:
                                            ws3.update_cell(k, 8, driver.title)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                        elif not failed_keywords == []:
                                            ws3.update_cell(k, 7, failed_keywords[len(failed_keywords)-1] + "（エラー）")
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                            print(failed_keywords)
                                        elif not title_keywords == []:
                                            ws3.update_cell(k, 7, driver.title)
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                        elif not h2_keywords == []:
                                            ws3.update_cell(k, 7, h2_keywords[len(h2_keywords)-1])
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                        elif not html_keywords == []:
                                            ws3.update_cell(k, 7, html_keywords[len(html_keywords)-1])
                                            dt_now = datetime.datetime.now()
                                            ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                                            format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                            print(html_keywords)
                                        else:
                                            pass

# 表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
#一旦try~exceptで様子見
                                        try:
                                            alert = driver.switch_to.alert
                                            alert.accept()
                                        except InvalidArgumentException:
                                            pass
                                        except NoAlertPresentException:
                                            pass

                                            
                            else:
                                ws3.update_cell(k, 7, "フォーム要素取得不可")
                                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)
                                dt_now = datetime.datetime.now()
                                ws3.update_cell(
                                    k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))

#エラー処理（５）
                    # except Exception as e:
                    #     print("error:", e)
                    #     wx.MessageBox(f'{e}', u'error', wx.ICON_ERROR)
                    #     break

                    #     dlg.Destroy()

# chromeドライバーの終了（この処理をお忘れなく！！）
                        # driver.quit()

# エラー処理（４）
                    except TimeoutException as e:
                        print("error:", e)
# 		      wx.MessageBox(f'{e}', u'Sever error', wx.ICON_ERROR)
# 		      break
                        ws3.update_cell(k, 7, "Time out!!")
                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)
                        ws3.update_cell(
                            k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
# 		      dlg.Destroy()

# chromeドライバーの終了（この処理をお忘れなく！！）
# 		      driver.quit()

# エラー処理（３）
                    except UnexpectedAlertPresentException as e:
                        print("error:", e)
                        if "完了しました" in str(e):
                            ws3.update_cell(k, 7, str(e))
                            ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                            format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                        # else:
                        #     ws3.update_cell(k, 7, str(e))
                        #     ws3.update_cell(k, 9, dt_now.strftime('%Y-%m-%d %H:%M:%S'))
                        #     format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                        wx.MessageBox(
                            f'{e}', u'error', wx.ICON_ERROR)
                        break
                        dlg.Destroy()
                        driver.switch_to.alert.accept()

# chromeドライバーの終了（この処理をお忘れなく！！）
                        # driver.quit()

# エラー処理（２）
                    except gspread.exceptions.APIError as e:
                        print("error:", e)
                        wx.MessageBox(
                            f'{e}', u'Spreadsheet API error', wx.ICON_ERROR)
                        break

                        dlg.Destroy()

# chromeドライバーの終了（この処理をお忘れなく！！）
                        driver.quit()

# ※以下、コーディング検証時はコメントアウト

# エラー処理（１）
                    except Exception as e:
                        print(e)
                        ws3.update_cell(k, 7, str(e))
                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)
                        ws3.update_cell(
                            k, 9, dt_now.strftime(
                            '%Y-%m-%d %H:%M:%S'))

# except:
#  ws3.update_cell(k, 9, "無限ページロードによりスキップしました。")
#   elif ws3.cell(k, 8).value == r"-":
#    ws3.cell(k, 9).value == "フォーム要素なし"

                    try:
                      if ws3.cell(k, 7).value is None:

                        # 法人名称～投稿日時まで表示
                        adid6.grid.SetCellValue(t, 0, ws3.cell(k, 2).value)
# 		     adid6.grid.SetCellValue(t, 1, ws3.cell(k, 7).value)
                        # adid6.grid.SetCellValue(t, 2, ws3.cell(k, 8).value)
                        adid6.grid.SetCellValue(t, 3, ws3.cell(k, 9).value)
                        print(input_history)

                        i = 0
                        for i in range(len(input_history)):
                            adid6.grid.SetCellValue(
                                t, i+4, str(input_history[i]))

                        adid6.grid.AutoSize()

# 投稿件数カウントアップ
                        cnt = int(adid8.m_textCtrl53.GetValue())
                        cnt += 1

# 今日の日付を取得
                        d_today = datetime.date.today()
                        adid8.m_textCtrl52.SetValue(
                            d_today.strftime('%Y年%m月%d日'))
                        adid8.m_textCtrl53.SetValue(str(cnt))
                        print(d_today.strftime('%Y年%m月%d日'))
                        print(cnt)

                        t += 1

                        update = True
                        rate += 1/((row4+1)-row3)*100
                        (update, skip) = dlg.Update(
                            value=rate, newmsg="%d/100" % rate + "%")
                        if not update:
                            wx.MessageBox(u'Posting to the inquiry form and automatic transmission have been cancelled.',
                                          u'This process cannot be continued! !!', wx.ICON_ERROR)
                            break

# １日当たりの件数が制限オーバーしていないか確認
                        elif adid8.m_textCtrl52.GetValue() == d_today.strftime('%Y年%m月%d日') \
                                and int(adid8.m_textCtrl53.GetValue()) > 10000:
                            wx.MessageBox(u'The number of posts that can be posted per day has been exceeded!!',
                                          u'Over limit', wx.ICON_ERROR)
                            break

                      elif ws3.cell(k, 8).value is None:

                        # 法人名称～投稿日時まで表示
                        adid6.grid.SetCellValue(t, 0, ws3.cell(k, 2).value)
                        adid6.grid.SetCellValue(t, 1, ws3.cell(k, 7).value)
# 		     adid6.grid.SetCellValue(t, 2, ws3.cell(k, 8).value)
                        adid6.grid.SetCellValue(t, 3, ws3.cell(k, 9).value)
                        print(input_history)

                        i = 0
                        for i in range(len(input_history)):
                            adid6.grid.SetCellValue(
                                t, i+4, str(input_history[i]))

                        adid6.grid.AutoSize()

# 投稿件数カウントアップ
                        cnt = int(adid8.m_textCtrl53.GetValue())
                        cnt += 1

# 今日の日付を取得
                        d_today = datetime.date.today()
                        adid8.m_textCtrl52.SetValue(
                            d_today.strftime('%Y-%m-%d %H:%M:%S'))
                        adid8.m_textCtrl53.SetValue(str(cnt))
                        print(d_today.strftime('%Y-%m-%d %H:%M:%S'))
                        print(cnt)

                        t += 1

                        try:
                            update = True
                            rate += 1/((row4+1)-row3)*100
                            (update, skip) = dlg.Update(
                                value=rate, newmsg="%d/100" % rate + "%")
                            if not update:
                                wx.MessageBox(u'Posting to the inquiry form and automatic transmission have been cancelled.',
                                              u'This process cannot be continued! !!', wx.ICON_ERROR)
                                break

# １日当たりの件数が制限オーバーしていないか確認
                            elif adid8.m_textCtrl52.GetValue() == d_today.strftime('%Y年%m月%d日') \
                                    and int(adid8.m_textCtrl53.GetValue()) > 10000:
                                wx.MessageBox(u'The number of posts that can be posted per day has been exceeded!!',
                                              u'Over limit', wx.ICON_ERROR)
                                break

                        except:
                            break

                      elif ws3.cell(k, 7).value is None \
                            and ws3.cell(k, 8).value is None:

                        # 法人名称～投稿日時まで表示
                        adid6.grid.SetCellValue(t, 0, ws3.cell(k, 2).value)
# 		     adid6.grid.SetCellValue(t, 1, ws3.cell(k, 7).value)
# 		     adid6.grid.SetCellValue(t, 2, ws3.cell(k, 8).value)
                        adid6.grid.SetCellValue(t, 3, ws3.cell(k, 9).value)
                        print(input_history)

                        i = 0
                        for i in range(len(input_history)):
                            adid6.grid.SetCellValue(
                                t, i+4, str(input_history[i]))

                        adid6.grid.AutoSize()

# 投稿件数カウントアップ
                        cnt = int(adid8.m_textCtrl53.GetValue())
                        cnt += 1

# 今日の日付を取得
                        d_today = datetime.date.today()
                        adid8.m_textCtrl52.SetValue(
                            d_today.strftime('%Y年%m月%d日'))
                        adid8.m_textCtrl53.SetValue(str(cnt))
                        print(d_today.strftime('%Y年%m月%d日'))
                        print(cnt)

                        t += 1

                        update = True
                        rate += 1/((row4+1)-row3)*100
                        (update, skip) = dlg.Update(
                            value=rate, newmsg="%d/100" % rate + "%")
                        if not update:
                            wx.MessageBox(u'Posting to the inquiry form and automatic transmission have been cancelled.',
                                          u'This process cannot be continued! !!', wx.ICON_ERROR)
                            break

# １日当たりの件数が制限オーバーしていないか確認
                        elif adid8.m_textCtrl52.GetValue() == d_today.strftime('%Y年%m月%d日') \
                                and int(adid8.m_textCtrl53.GetValue()) > 10000:
                            wx.MessageBox(u'The number of posts that can be posted per day has been exceeded!!',
                                          u'Over limit', wx.ICON_ERROR)
                            break

                      elif not ws3.cell(k, 7).value is None \
                            and not ws3.cell(k, 8).value is None:

                        # 法人名称～投稿日時まで表示
                        adid6.grid.SetCellValue(t, 0, ws3.cell(k, 2).value)
                        adid6.grid.SetCellValue(t, 1, ws3.cell(k, 7).value)
                        adid6.grid.SetCellValue(t, 2, ws3.cell(k, 8).value)
                        adid6.grid.SetCellValue(t, 3, ws3.cell(k, 9).value)
                        print(input_history)

                        i = 0
                        for i in range(len(input_history)):
                            adid6.grid.SetCellValue(
                                t, i+4, str(input_history[i]))

                        adid6.grid.AutoSize()

# 投稿件数カウントアップ
                        cnt = int(adid8.m_textCtrl53.GetValue())
                        cnt += 1

# 今日の日付を取得
                        d_today = datetime.date.today()
                        adid8.m_textCtrl52.SetValue(
                            d_today.strftime('%Y年%m月%d日'))
                        adid8.m_textCtrl53.SetValue(str(cnt))
                        print(d_today.strftime('%Y年%m月%d日'))
                        print(cnt)

                        t += 1

                        update = True
                        rate += 1/((row4+1)-row3)*100
                        (update, skip) = dlg.Update(
                            value=rate, newmsg="%d/100" % rate + "%")
                        if not update:
                            wx.MessageBox(u'Posting to the inquiry form and automatic transmission have been cancelled.',
                                          u'This process cannot be continued! !!', wx.ICON_ERROR)
                            break

# １日当たりの件数が制限オーバーしていないか確認
                        elif adid8.m_textCtrl52.GetValue() == d_today.strftime('%Y年%m月%d日') \
                                and int(adid8.m_textCtrl53.GetValue()) > 10000:
                            wx.MessageBox(u'The number of posts that can be posted per day has been exceeded!!',
                                          u'Over limit', wx.ICON_ERROR)
                            break


# 投稿件数に含まないので、制限に関するコーディング不要
                      elif "専用フォーム" in ws3.cell(k, 7).value \
                            or "取得不可" in ws3.cell(k, 7).value \
                        or "unknown" in ws3.cell(k, 7).value \
                            or "CAPTCHA" in ws3.cell(k, 7).value \
                            or "お断り" in ws3.cell(k, 7).value \
                            or "-" in ws3.cell(k, 7).value:

                        # 法人名称～投稿日時まで表示
                        adid6.grid.SetCellValue(t, 0, ws3.cell(k, 2).value)
                        adid6.grid.SetCellValue(t, 1, ws3.cell(k, 7).value)
# 		     adid6.grid.SetCellValue(t, 2, ws3.cell(k, 8).value)
                        adid6.grid.SetCellValue(t, 3, ws3.cell(k, 9).value)
                        adid6.grid.AutoSize()

                        t += 1

                        update = True
                        rate += 1/((row4+1)-row3)*100
                        (update, skip) = dlg.Update(
                            value=rate, newmsg="%d/100" % rate + "%")
                        if not update:
                            wx.MessageBox(u'Posting to the inquiry form and automatic transmission have been cancelled.',
                                          u'This process cannot be continued! !!', wx.ICON_ERROR)
                            break

                      else:

                        # 法人名称～投稿日時まで表示
                        adid6.grid.SetCellValue(t, 0, ws3.cell(k, 2).value)
                        adid6.grid.SetCellValue(t, 1, ws3.cell(k, 7).value)
                        adid6.grid.SetCellValue(t, 2, ws3.cell(k, 8).value)
                        adid6.grid.SetCellValue(t, 3, ws3.cell(k, 9).value)
                        print(input_history)

                        i = 0
                        for i in range(len(input_history)):

                            # 以下のエラーが返されないよう、リスト型変数「input_history」を必ず文字列型に変換すること！！
                            # TypeError: Grid.SetCellValue(): arguments did not match any overloaded call:
                            #  overload 1: argument 3 has unexpected type 'int'
                            #  overload 2: argument 1 has unexpected type 'int'
                            adid6.grid.SetCellValue(
                                t, i+4, str(input_history[i]))

                        adid6.grid.AutoSize()

# 投稿件数カウントアップ
                        cnt = int(adid8.m_textCtrl53.GetValue())
                        cnt += 1

# 今日の日付を取得
                        d_today = datetime.date.today()
                        adid8.m_textCtrl52.SetValue(
                            d_today.strftime('%Y年%m月%d日'))
                        adid8.m_textCtrl53.SetValue(str(cnt))
                        print(d_today.strftime('%Y年%m月%d日'))
                        print(cnt)

                        t += 1

                        update = True
                        rate += 1/((row4+1)-row3)*100
                        (update, skip) = dlg.Update(
                            value=rate, newmsg="%d/100" % rate + "%")
                        if not update:
                            wx.MessageBox(u'Posting to the inquiry form and automatic transmission have been cancelled.',
                                          u'This process cannot be continued! !!', wx.ICON_ERROR)
                            break

# １日当たりの件数が制限オーバーしていないか確認
                        elif adid8.m_textCtrl52.GetValue() == d_today.strftime('%Y年%m月%d日') \
                                and int(adid8.m_textCtrl53.GetValue()) > 10000:
                            wx.MessageBox(u'The number of posts that can be posted per day has been exceeded!!',
                                          u'Over limit', wx.ICON_ERROR)
                            break

                    except TypeError as e:
                        print(e)


# 進捗ダイアログ「自動投稿プログラム実行中」を廃棄
            dlg.Destroy()

# chromeドライバーの終了（この処理をお忘れなく！！）
            driver.quit()

# calculate elapsed time
            elapsed_time = int(time.time() - start)

# convert second to hour, minute and seconds
            elapsed_hour = elapsed_time // 3600
            elapsed_minute = (elapsed_time % 3600) // 60
            elapsed_second = (elapsed_time % 3600 % 60)

# print as 00:00:00
            print("所要時間：" + str(elapsed_hour).zfill(2) + "h"
                      + str(elapsed_minute).zfill(2) + "m" + str(elapsed_second).zfill(2) + "s")
            
            wx.MessageBox(u'Form automatic transmission of the set number has been completed.', u'Information', wx.ICON_INFORMATION)