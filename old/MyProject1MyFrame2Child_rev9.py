"""Subclass of MyFrame2, which is generated by wxFormBuilder."""

from gspread_formatting.batch_update_requests import format_cell_range
import wx
import app
import json
import codecs
import wx.grid
import gspread
#from datetime import datetime
from MyProject1MyDialog3 import MyProject1MyDialog3
from MyProject1MyDialog4 import MyProject1MyDialog4
from MyProject1MyDialog5 import MyProject1MyDialog5
from MyProject1MyDialog8 import MyProject1MyDialog8
#from MyProject1MyFrame5 import MyProject1MyFrame5
from MyProject1MyFrame6 import MyProject1MyFrame6
import company,\
    furigana,\
        full_name,\
            keywords,\
                tag,\
                    radio,\
                        prefectures,\
                            location,\
                                telephone,\
                                    e_mail,\
                                        industry,\
                                            department,\
                                                position,\
                                                    url,\
                                                        title,\
                                                            Select_contents,\
                                                                Checkbox,\
                                                                    inquiry_selection,\
                                                                        contact_method

#セルに色や枠線を付けたりする標準機能
from gspread_formatting import *

#import requests

#ServiceAccountCredentials：Googleの各サービスへアクセスできるservice変数を生成します。
from oauth2client.service_account import ServiceAccountCredentials

import time
import re
from bs4 import BeautifulSoup
from tqdm import tqdm

#2つのAPIを記述しないとリフレッシュトークンを3600秒毎に発行し続けなければならない
scope = ['https://spreadsheets.google.com/feeds','https://www.googleapis.com/auth/drive']


#色付けの初期化
data_fmt0 = CellFormat(backgroundColor=Color(1, 1, 1))

#色付けの準備（red）
data_fmt1 = CellFormat(backgroundColor=Color(1, 0, 0))

#色付けの準備（gray）
data_fmt2 = CellFormat(backgroundColor=Color(0.5, 0.5, 0.5))

#色付けの準備（black）
data_fmt3 = CellFormat(backgroundColor=Color(0, 0, 0))

#色付けの準備（yellow）→backgroundColor=Color(1, 1, 0)
data_fmt4 = CellFormat(backgroundColor=Color(1, 1, 0))

#色付けの準備（blue）
data_fmt5 = CellFormat(backgroundColor=Color(0.7, 0.7, 1))


     
# Implementing MyFrame2
class MyProject1MyFrame2( app.MyFrame2 ):
	def __init__( self, parent ):
		app.MyFrame2.__init__( self, parent )

	def inquiry_post( self, event ):
		import datetime
		adid3 = MyProject1MyDialog3(self)
		adid8 = MyProject1MyDialog8(self)
		credentials = ServiceAccountCredentials.from_json_keyfile_name(adid3.m_textCtrl11.GetValue(), scope)
		gc = gspread.authorize(credentials)                   
		row3 = self.row11.GetValue()
		row4 = self.row21.GetValue()

#今日の日付を取得
		d_today = datetime.date.today()
        
#文字列に変換
#		print(d_today.strftime('%Y年%m月%d日'))

#設定漏れや誤った値が入力されていないかの確認
		if self.m_comboBox11.GetValue() == '選択して下さい':
		  self.m_comboBox11.SetBackgroundColour("#f56cbe")
		  wx.MessageBox(u'Please select the Worksheet title!!', u'Setting value error', wx.ICON_ERROR)
		elif row3 == 0 and row4 == 0:
		  self.row11.SetBackgroundColour('#f56cbe')
		  self.row21.SetBackgroundColour('#f56cbe')
		  self.m_comboBox11.SetBackgroundColour("#FFFFFF")
		  wx.MessageBox(u'Please set the range!!', u'Setting value error', wx.ICON_ERROR)
		elif row4 - row3 > 10000:
		  self.row11.SetBackgroundColour('#f56cbe')
		  self.row21.SetBackgroundColour('#f56cbe')
		  self.m_comboBox11.SetBackgroundColour("#FFFFFF")
		  wx.MessageBox(u'The value exceeds the configurable range!!', u'Setting value error', wx.ICON_ERROR)
		elif row4 - row3 < 0:
		  self.row11.SetBackgroundColour('#f56cbe')
		  self.row21.SetBackgroundColour('#f56cbe')
		  self.m_comboBox11.SetBackgroundColour("#FFFFFF")
		  wx.MessageBox(u'Illegal range!!', u'Setting value error', wx.ICON_ERROR)
		elif self.m_comboBox11.GetValue() == '選択して下さい' \
            and row3 == 0 \
                and row4 == 0:
		  self.row11.SetBackgroundColour('#f56cbe')
		  self.row21.SetBackgroundColour('#f56cbe')
		  self.m_comboBox11.SetBackgroundColour("#f56cbe")
		  wx.MessageBox(u'Please select the Worksheet title and Illegal range!!', u'Setting value error', wx.ICON_ERROR)

#１日当たりの件数が制限オーバーしていないか確認
		elif adid8.m_textCtrl52.GetValue() == d_today.strftime('%Y年%m月%d日') \
            and int(adid8.m_textCtrl53.GetValue()) == 1000:
		  wx.MessageBox(u'The number of posts that can be posted per day has been exceeded!!', u'Over limit', wx.ICON_ERROR)

         
		# Set cell values.
		else:
		 from selenium import webdriver
		 from webdriver_manager.chrome import ChromeDriverManager
		 from selenium.webdriver.chrome.options import Options
         
#Selectモジュールをインポート
		 from selenium.webdriver.support.select import Select         

#例外処理用のlibraryをimport
#		 from selenium.common.exceptions import NoSuchElementException
		 from selenium.common.exceptions import NoAlertPresentException         
		 from selenium.common.exceptions import WebDriverException
		 from selenium.common.exceptions import TimeoutException
		 from selenium.common.exceptions import ElementNotInteractableException
		 from selenium.common.exceptions import SessionNotCreatedException
		 from selenium.common.exceptions import InvalidArgumentException
		 from selenium.common.exceptions import UnexpectedAlertPresentException

#Selectモジュールをインポート
#		 from selenium.webdriver.support.select import Select

#オプションの作成
		 option = Options()

#起動オプション
# ヘッドレスモードを有効にする（次の行をコメントアウトすると画面が表示される）。
		 option.add_argument('--headless')

#「unknown error: net::ERR_CONNECTION_CLOSED」の回避用
		 option.add_argument('--disable-dev-shm-usage')

# ChromeのWebDriverオブジェクトを作成する。
		 try:
#		   driver = webdriver.Chrome(adid3.m_textCtrl111.GetValue(),options=option)
		   driver = webdriver.Chrome(ChromeDriverManager().install(), options=option)
		   driver.set_page_load_timeout(60)
           
#エラー「ElementNotInteractableException: element not interactable」が出ないようにするため追加
		   driver.set_window_size('1200', '1000')
                      
		   wb = gc.open_by_key(adid3.m_comboBox6.GetValue())            
		   ws3 = wb.worksheet(self.m_comboBox11.GetValue())
		   self.row11.SetBackgroundColour('#FFFFFF')
		   self.row21.SetBackgroundColour('#FFFFFF')
		   self.m_comboBox11.SetBackgroundColour("#FFFFFF")
#		   adid = MyProject1MyFrame5(self)
#		   adid.grid.ClearGrid()
#		 self.m_gauge2.SetValue( 0 )
#		 self.m_gauge2.SetRange(row2-row1)

#Chromeドライバーのバージョンがブラウザのバージョンと合わない場合のエラーメッセージ
		 except SessionNotCreatedException as e:
		   print("error:", e)
		   wx.MessageBox(f'{e}', u'driver error', wx.ICON_ERROR)

		 else:
		  dlg = wx.ProgressDialog(
            title="自動投稿プログラム実行中",
            message="0/100",
            maximum=100,
            style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME | wx.PD_CAN_ABORT )
         
# ダイアログ表示
		  dlg.Show()
		  rate = 0

#所要時間計測開始
		  start = time.time()

#プレビュー表示するためのダイアログ生成条件
		  t = 0
		  col = 25
		  adid6 = MyProject1MyFrame6(self)
		  adid6.grid.ClearGrid()
		  adid6.grid.CreateGrid(10000, col)
		  adid6.grid.SetColLabelValue(0, "法人名称")
		  adid6.grid.SetColLabelValue(1, "結果・エラー情報等（１）")
		  adid6.grid.SetColLabelValue(2, "結果・エラー情報等（２）")
		  adid6.grid.SetColLabelValue(3, "投稿日時")
#		  adid6.grid.AutoSize()
		  adid6.Show()

#		  global input_history

#お問い合わせフォームへの自動投稿本体プログラム
#ws1の行数を取得
#		 lastrow = len(ws3.col_values(1))
		  for k in tqdm(range(row3, row4+1)):

#フォームの各入力履歴
 		   input_history = []
              
 		   try:

#シートの初期化
 		    lastcol = len(list(ws3.row_values(k)))
 		    cell_list2 = ws3.range(k, 7, k, lastcol)
 		    print(cell_list2)
 		    for cell in cell_list2:
 		      cell.value = ""
#             time.sleep(1)
 		    ws3.update_cells(cell_list2)
           
 		    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt0)

# try:
# 		   try:
 		    matched_list_keywords1 = []
 		    matched_list_keywords2 = []

 		    for i in keywords.Not_applicable_value_inc:
 		      if i in ws3.cell(k, 6).value:
 		        matched_list_keywords1.append(i)
 		    print(matched_list_keywords1)
             
 		    for j in keywords.Not_applicable_value_mat:
 		      if j == ws3.cell(k, 6).value:
 		        matched_list_keywords2.append(j)
 		    print(matched_list_keywords2)

 		    print("お問い合わせフォームが読み込み可能か否か？")
 		    if len(matched_list_keywords1) > 0 \
				 and len(matched_list_keywords2) == 0:
 		      ws3.update_cell(k, 7, matched_list_keywords1[0])
               
#現在日時（日付と時刻）のオブジェクトを取得
 		      dt_now = datetime.datetime.now()

#取得したdatetimeオブジェクトでstrftime()メソッドを使うことで、元の文字列と異なるフォーマットで日付や時刻を表すことができる。
 		      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)

 		    elif len(matched_list_keywords1) == 0 \
				 and len(matched_list_keywords2) > 0:
 		      ws3.update_cell(k, 7, matched_list_keywords2[0])
               
#現在日時（日付と時刻）のオブジェクトを取得
 		      dt_now = datetime.datetime.now()

#取得したdatetimeオブジェクトでstrftime()メソッドを使うことで、元の文字列と異なるフォーマットで日付や時刻を表すことができる。
 		      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)
               
# 		    if ws3.cell(k, 6).value == r"-" \
# 		         or "Not Found" in ws3.cell(k, 6).value \
# 		             or "Time out!!" in ws3.cell(k, 6).value \
# 		                 or "unknown error!!" in ws3.cell(k, 6).value \
#                              or "mailto" in ws3.cell(k, 6).value:
# 		     ws3.update_cell(k, 7, "-")

#現在日時（日付と時刻）のオブジェクトを取得
# 		     dt_now = datetime.datetime.now()

#取得したdatetimeオブジェクトでstrftime()メソッドを使うことで、元の文字列と異なるフォーマットで日付や時刻を表すことができる。
# 		     ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
# 		     format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)
 		     
 		    else:
 		      driver.get(ws3.cell(k, 6).value)
 		      time.sleep(1)
 		      html = driver.page_source
 		      soup = BeautifulSoup(html, 'html.parser')

 		      matched_list_keywords3 = []
 		      matched_list_keywords4 = []
 		      matched_list_keywords5 = []
 		      matched_list_keywords6 = []

#営業禁止
 		      for i in keywords.NG_value_inc:
 		        if i in html:
 		          matched_list_keywords3.append(i)
 		      print(matched_list_keywords3)
             
#投稿不要（ページ要素全体に対して指定キーワードを検索）
 		      for i in keywords.No_posting_value1_inc:
 		        if i in html:
 		          matched_list_keywords4.append(i)
 		      print(matched_list_keywords4)
                   
#投稿不要（フォーム要素に対して指定キーワードを検索）
 		      for i in keywords.No_posting_value2_inc:
 		        if i in str(soup.find_all("form")):
 		          matched_list_keywords5.append(i)
 		      print(matched_list_keywords5)

#投稿対象（フォーム要素に対して指定キーワードを検索）
 		      for i in keywords.Target_value_inc:
 		        if i in str(soup.find_all("form")):
 		          matched_list_keywords6.append(i)
 		      print(matched_list_keywords6)

               
 		      if len(matched_list_keywords3) > 0 \
				   and len(matched_list_keywords4) == 0 \
					   and len(matched_list_keywords5) == 0 \
						   and len(matched_list_keywords6) > 0:
 		        print("営業禁止ワードあり")
 		        ws3.update_cell(k, 7, "営業お断り！！")
 		        dt_now = datetime.datetime.now()
 		        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt1)

 		      elif len(matched_list_keywords3) == 0 \
				   and len(matched_list_keywords4) > 0 \
					   and len(matched_list_keywords5) == 0 \
						   and len(matched_list_keywords6) > 0:
 		        print("その他の専用フォーム")
 		        ws3.update_cell(k, 7, "その他の専用フォーム")
 		        dt_now = datetime.datetime.now()
 		        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)

 		      elif len(matched_list_keywords3) == 0 \
				   and len(matched_list_keywords4) == 0 \
					   and len(matched_list_keywords5) > 0 \
						   and len(matched_list_keywords6) > 0:
 		        print("その他の専用フォーム")
 		        ws3.update_cell(k, 7, "その他の専用フォーム")
 		        dt_now = datetime.datetime.now()
 		        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)

 		      elif len(matched_list_keywords3) == 0 \
				   and len(matched_list_keywords4) == 0 \
					   and len(matched_list_keywords5) == 0 \
						   and len(matched_list_keywords6) > 0:
 		        print("フォーム要素あり")
 		        ws3.update_cell(k, 7, "フォーム要素あり")
 		        dt_now = datetime.datetime.now()
 		        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
                 
#最後に投稿を行った日付が今日でない場合、件数はリセットされる
 		        if not adid8.m_textCtrl52.GetValue() == d_today.strftime('%Y年%m月%d日'):
 		          cnt = 0
 		          adid8.m_textCtrl53.SetValue(str(cnt))
                                         
#使用状況ダイアログに値を反映
# 		          cnt += 1
# 		          d_today = datetime.date.today()
# 		          print(d_today.strftime('%Y年%m月%d日'))
# 		          print(cnt)
# 		          adid8.m_textCtrl52.SetValue(d_today.strftime('%Y年%m月%d日'))
# 		          adid8.m_textCtrl53.SetValue(str(cnt))
                   
# 		        else:
# 		          cnt = int(adid8.m_textCtrl53.GetValue())
# 		          cnt += 1
# 		          d_today = datetime.date.today()
# 		          print(d_today.strftime('%Y年%m月%d日'))
# 		          print(cnt)
# 		          adid8.m_textCtrl52.SetValue(d_today.strftime('%Y年%m月%d日'))
# 		          adid8.m_textCtrl53.SetValue(str(cnt))

#「setting.json」に保存
#文字コードをUTF-8に変換しないとエラー発生がするため注意！！
 		        with open('setting.json','w',encoding='utf-8') as f:
 		          w_data = {}
 		          w_data['verificationkey'] = adid3.m_textCtrl11.GetValue()
 		          w_data['spreadsheetkey'] = adid3.m_comboBox6.GetValue()
 		          w_data['webdriver'] = adid3.m_textCtrl111.GetValue()
 		          w_data['user'] = adid3.m_textCtrl4.GetValue()
 		          w_data['password'] = adid3.m_textCtrl5.GetValue()
 		          w_data['remember'] = adid3.m_checkBox1.GetValue()
 		          w_data['date'] = adid8.m_textCtrl52.GetValue()
 		          w_data['posts'] = adid8.m_textCtrl53.GetValue()
# 		          w_data['sheetname1'] = self.m_comboBox12.GetValue()
# 		          w_data['sheetname2'] = self.m_comboBox1.GetValue()
 		          w_data['sheetname3'] = self.m_comboBox11.GetValue()
# 		          w_data['row1'] = self.row1.GetValue()
# 		          w_data['row2'] = self.row2.GetValue()
 		          w_data['row11'] = self.row11.GetValue()
 		          w_data['row21'] = self.row21.GetValue()                
                
 		          json.dump(w_data, f, ensure_ascii=False, indent=1, sort_keys=True, separators=(',', ': '))
 		          print('WRITE:')
#               print(w_data)


#labelタグのテキストを取得
 		        if len(matched_list_keywords6) > 0:
 		          element1 = soup.find_all("label")
 		          list_1 = []
 		          for list_ in element1:
 		            for i in tag.keywords_inc:
 		              if i in list_.getText():
 		                list_1.append(re.sub("[\n]", "", list_.getText(), 3))
 		          print("labelタグのテキスト要素")
 		          print(list_1)
                   
#tdタグのテキストを取得
 		          element1 = soup.find_all("td")
# 		          list_1 = []
 		          for list_ in element1:
 		            for i in tag.keywords_inc:
 		              if i in list_.getText():
 		                list_1.append(re.sub("[\n]", "", list_.getText(), 3))
 		          print("tdタグのテキスト要素")
 		          print(list_1)

#dtタグのテキストを取得
 		          element1 = soup.find_all("dt")
# 		          list_1 = []
 		          for list_ in element1:
 		            for i in tag.keywords_inc:
 		              if i in list_.getText():
 		                list_1.append(re.sub("[\n]", "", list_.getText(), 3))
 		          print("dtタグのテキスト要素")
 		          print(list_1)

#pタグのテキストを取得
 		          element1 = soup.find_all("p")
# 		          list_1 = []
 		          for list_ in element1:
 		            for i in tag.keywords_inc:
 		              if i in list_.getText():
 		                list_1.append(re.sub("[\n]", "", list_.getText(), 3))
 		          print("pタグのテキスト要素")
 		          print(list_1)
                   
#thタグのテキストを取得
 		          element1 = soup.find_all("th")
# 		          list_1 = []
 		          for list_ in element1:
 		            for i in tag.keywords_inc:
 		              if i in list_.getText():
 		                list_1.append(re.sub("[\n]", "", list_.getText(), 3))
 		          print("thタグのテキスト要素")
 		          print(list_1)

#formタグのテキストを取得
 		          element1 = soup.find_all("form")
# 		          list_1 = []
 		          for list_ in element1:
 		            for i in tag.keywords_inc:
 		              if i in list_.getText():
 		                list_1.append(re.sub("[\n]", "", list_.getText(), 3))
 		          print("formタグのテキスト要素")
# 		          print(list_1)
                   
#上記以外のタグからテキストを取得する場合
# 		        else:
# 		          element1 = soup.find_all("div")
# 		          list_1 = []
# 		          for list_ in element1:
# 		            for i in tag.keywords_inc:
# 		              if i in list_.getText():
# 		                list_1.append(re.sub("[\n]", "", list_.getText(), 3))
# 		          print("divタグのテキスト要素")
# 		          print(list_1)
                   
 		        items_1 =[i.replace("必須", "") \
                     .replace("半角英数字", "") \
                         .replace("全角漢字", "") \
                             .replace("携帯電話可", "") \
                                 .replace("携帯可", "") \
                                     .replace("全角", "") \
                                         .replace(r"()","") \
                                             .replace(r"（）","") \
                                                 .replace(" ","") \
                                                     .replace(r"*","") \
                                                         .replace(r"※","") \
                                                             .split(r"・")[0] \
                                                                 for i in list_1]
#     print(items_1)

#inputタグの全要素を取得
 		        element2 = soup.find_all("input")
# 		         print(element2)
 		        list_2 = []
 		        list_2c = []
 		        list_2d = []
 		        list_2t = []
 		        list_2v = []

#inputタグの各要素を取得
# 		        element3 = soup.find_all("button")
# 		         print(element2)
# 		        list_3t = []

#各属性値 		         		           
 		        for elem in element2:
 		          items_1.append(elem.get("placeholder"))
 		          list_2.append(elem.get("name"))
 		          list_2d.append(elem.get("id"))
 		          list_2c.append(elem.get("class"))
 		          list_2t.append(elem.get("type"))
 		          list_2v.append(elem.get("value"))

# 		        for elem in element3:
# 		          items_1.append(name.get("placeholder"))
# 		          list_3t.append(elem.get("type"))
# 		        print(list_3t)


#リストにNoneが含まれていると「TypeError: argument of type 'NoneType' is not iterable」
#が発生するので、リスト内包表記で処理

#placeholder
 		        items_1 = [i for i in items_1 if i is not None]
 		        print(items_1)

#name値
# 		        if not len(list_2) == 0:
 		        list_2 = [i for i in list_2 if i is not None \
					and "params" not in i \
						and "tic" not in i \
							and "mfp" not in i \
								and "http" not in i \
									and "wpcf7" not in i \
										and "separator" not in i]
 		        print(list_2)
 		          
#id値
# 		        if not len(list_2d) == 0:
 		        list_2d = [i for i in list_2d if i is not None]
 		        print(list_2d)

#class値
# 		        if not len(list_2c) == 0:
 		        list_2c = [i for i in list_2c if i is not None]
 		        print(list_2c)

#type値
 		        list_2t = [i for i in list_2t if i is not None]
 		        print(list_2t)

#value値
 		        list_2v = [i for i in list_2v if i is not None]
 		        print(list_2v)

                 
#送信ボタン（buttonタグの全要素取得）
 		        element4 = soup.find_all("button")
 		        list_4bc = []

 		        for elem in element4:
 		          list_4bc.append(elem.get("class"))
 		        list_4bc = [i for i in list_4bc if i is not None]

#二次元配列から一次配列への変換
 		        list_4bc = [i for sublist in list_4bc for i in sublist]
 		        print(list_4bc)


#送信ボタン（divタグの指定要素のみ取得）
#※要素の絞り込みに使用する「re.compile」はsoup.selectだとエラーになるので注意！！
 		        element11 = soup.find_all("div",class_=re.compile("submit"))
 		        print(element11)
 		        list_11dc = []

 		        for elem in element11:
 		          list_11dc.append(elem.get("class"))
 		        list_11dc = [i for i in list_11dc if i is not None]
 		        print(list_11dc)

#パターン変更（2022.03.02）
#<span class="NPEfkd RveJvd snByac">送信</span>
#※「<span class="appsMaterialWizButtonPaperbuttonLabel quantumWizButtonPaperbuttonLabel exportLabel">送信</span>」は現在使用不可。
 		        element12 = soup.find_all("span",class_=re.compile("NPEfkd"))
 		        print(element12)
 		        list_12sc = []     
 		        for elem in element12:
 		          list_12sc.append(elem.get("class"))

 		        list_12sc = [i for i in list_12sc if i is not None]
 		        print(list_12sc)
                 
#二次元配列から一次配列への変換
 		        list_12sc = [i for sublist in list_12sc for i in sublist]
 		        print(list_12sc)

#spanタグの指定要素のみ取得
 		        element14 = soup.find_all("span",class_=re.compile("supplement"))
 		        print(element14)
 		        list_14sc = []     
 		        for elem in element14:
 		          list_14sc.append(elem.getText())

 		        list_14sc = [i for i in list_14sc if i is not None]
 		        print(list_14sc)
                 

#ラジオボタン
 		        element5 = soup.find_all("input",type="radio")
# 		        print(element5)
 		        element6 = soup.find_all("input",class_="questionTypeRadio")
# 		        print(element6)
 		        element7 = soup.find_all("input",attrs={"name":"questioner_type","type":"radio"})
# 		        print(element7)
 		         
 		        SELECT_list1 = []
 		        SELECT_list2 = []
 		        SELECT_list3 = []
 		        SELECT_list4 = []
 		        SELECT_list5 = []

 		        for elem in element5: 
 		           SELECT_list1.append(elem.get("value"))
 		           SELECT_list1 = [i for i in SELECT_list1 if i is not None]
 		        print(SELECT_list1)

 		        for elem in element5:
 		           SELECT_list2.append(elem.get("id"))
 		           SELECT_list2 = [i for i in SELECT_list2 if i is not None]
 		        print(SELECT_list2)

 		        for elem in element6: 
 		           SELECT_list3.append(elem.get("id"))
 		           SELECT_list3 = [i for i in SELECT_list3 if i is not None]
# 		           print(SELECT_list3)

 		        for elem in element7: 
 		           SELECT_list4.append(elem.get("id"))
 		           SELECT_list4 = [i for i in SELECT_list4 if i is not None]
 		        print(SELECT_list4)

 		        for elem in element5:
 		           SELECT_list5.append(elem.get("name"))
 		           SELECT_list5 = [i for i in SELECT_list5 if i is not None]
 		        print(SELECT_list5)


#value値のみの場合、又はvalue値及びid値有りの場合
 		        if len(SELECT_list1) > 0 \
                     and len(SELECT_list2) == 0 \
                         and len(SELECT_list3) == 0 \
                             and len(SELECT_list4) == 0 \
                                 and len(SELECT_list5) == 0 \
                         or len(SELECT_list1) > 0 \
                             and len(SELECT_list2) > 0 \
                                 and len(SELECT_list3) == 0 \
                                     and len(SELECT_list4) == 0 \
                                         and len(SELECT_list5) == 0:
 		          print("value値のみの場合、又はvalue値及びid値有りの場合")
 		          print(len(SELECT_list1))
 		          print(len(SELECT_list2))
 		          print(len(SELECT_list3))
 		          print(len(SELECT_list4))
 		          print(len(SELECT_list5))

#（お問い合わせは法人・個人のどちらからなのか？）
 		          try:
 		            matched_list_distinction = []
 		            matched_list_contact = []
 		            print("お問い合わせは法人・個人のどちらからなのか？")
 		            for i in SELECT_list1:
 		              for j in radio.distinction_value_inc:
 		                if j in i:
 		                  matched_list_distinction.append(i)

#指定キーワードを除く
 		            matched_list_distinction = [i for i in matched_list_distinction if i is not None]
 		            print(matched_list_distinction)
 		            print(len(matched_list_distinction))

 		            for i in SELECT_list1:
 		              for j in radio.contact_method_value_inc:
 		                if j in i:
 		                  matched_list_contact.append(i)

#指定キーワードを除く
 		            matched_list_contact = [i for i in matched_list_contact if i is not None]
 		            print(matched_list_contact)
 		            print(len(matched_list_contact))

 		            if len(matched_list_distinction) == 1 \
						 and len(matched_list_contact) == 0:
 		              radio_ = driver.find_element_by_css_selector("[value='"+ matched_list_distinction[0] + "']")
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append(matched_list_distinction[0])
 		                print("value値にてお問い合わせを行った人の区別を選択済")

 		            elif len(matched_list_distinction) == 0 \
						 and len(matched_list_contact) == 1:
 		              radio_ = driver.find_element_by_css_selector("[value='"+ matched_list_contact[0] + "']")
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append(matched_list_contact[0])
 		                print("value値にて連絡方法を選択済み")
                         
 		            elif len(matched_list_distinction) == 1 \
						 and len(matched_list_contact) == 1:
 		              radio_ = driver.find_element_by_css_selector("[value='"+ matched_list_distinction[0] + "']")
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append(matched_list_distinction[0])
 		                print("value値にてお問い合わせを行った人の区別を選択済")

 		              radio_ = driver.find_element_by_css_selector("[value='"+ matched_list_contact[0] + "']")
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append(matched_list_contact[0])
 		                print("value値にて連絡方法を選択済み")

 		          except:
 		            pass
                  		         		          

#（個人情報保護方針の同意）
 		          try:
 		            matched_list_person_info1 = []
 		            matched_list_person_info2 = []
 		            print("個人情報保護方針の同意を行うため要素の抽出開始")
 		            for i in SELECT_list1:
 		              for j in radio.personal_info_value_inc:
 		                if j in i:
 		                  matched_list_person_info1.append(i)

#指定キーワードを除く
 		            matched_list_person_info1 = [i for i in matched_list_person_info1 if i is not None]
 		            print(matched_list_person_info1)
 		            print(len(matched_list_person_info1))

 		            for i in SELECT_list2:
 		              for j in radio.personal_info_value_inc:
 		                if j in i:
 		                  matched_list_person_info2.append(i)

#指定キーワードを除く
 		            matched_list_person_info2 = [i for i in matched_list_person_info2 if i is not None]
 		            print(matched_list_person_info2)
 		            print(len(matched_list_person_info2))

 		            if len(matched_list_person_info1) == 1 \
                         and len(matched_list_person_info2) == 1:
 		              radio_ = driver.find_element_by_id(matched_list_person_info2[len(matched_list_person_info2)-1])
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append("同意")
 		                print("id値にて個人情報保護方針の同意チェック済")

 		            elif len(matched_list_person_info1) == 1 \
                         and len(matched_list_person_info2) == 0:
 		              radio_ = driver.find_element_by_css_selector("[value='"+ matched_list_person_info1[0] + "']")
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append("同意")
 		                print("value値にて個人情報保護方針の同意チェック済")

 		            elif len(matched_list_person_info1) == 0 \
                         and len(matched_list_person_info2) == 1:
 		              radio_ = driver.find_elements_by_id(matched_list_person_info2[len(matched_list_person_info2)-1])[len(matched_list_person_info2)-1]
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append("同意")
 		                print("id値にて個人情報保護方針の同意チェック済")

 		          except:
 		            pass

                        
#（お問い合わせ種別）
 		          try:
 		            matched_list_kinds = []
 		            print("お問い合わせの種別は？")
 		            for i in radio.kinds_inc:
 		              if i in str(soup.find_all("form")):
 		                matched_list_kinds.append(i)
 		            print(matched_list_kinds)
 		            if len(matched_list_kinds) > 0:
 		              radio_ = driver.find_elements_by_id(SELECT_list2[len(SELECT_list2)-1])[len(SELECT_list2)-1]
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append(SELECT_list2[len(SELECT_list2)-1])
 		                print("id値にてお問い合わせ種別を選択済")

#操作できない要素の回避
 		          except:
 		            try:
 		               matched_list_kinds = []
 		               print("id値にてお問い合わせの種別に関する要素見つからなかったため、別の方法を試します。")
 		               for i in SELECT_list1:
 		                 if j in radio.kinds_value_inc:
 		                   matched_list_kinds.append(i)
 		               print(matched_list_kinds)
 		               if len(matched_list_kinds) > 0:
 		                 radio_ = driver.find_element_by_css_selector("[value='" + matched_list_kinds[0] + "']")
 		                 driver.execute_script("arguments[0].click();", radio_)
 		                 print(radio_.is_selected())
 		                 if radio_.is_selected() is True:
 		                   input_history.append(matched_list_kinds[len(matched_list_kinds)-1])
 		                   print("value値にてお問い合わせ種別を選択済")

#操作できない要素の回避
 		            except:
 		              try:
 		                 print("value値にてお問い合わせの種別に関する要素見つからなかったため、別の方法を試します。")
 		                 radio_ = driver.find_elements_by_id(matched_list_kinds[0])[len(matched_list_kinds)-1]
 		                 driver.execute_script("arguments[0].click();", radio_)
 		                 print(radio_.is_selected())
 		                 if radio_.is_selected() is True:
 		                   input_history.append(matched_list_kinds[0])
 		                   print(radio_.is_selected())
 		                   print("id値にてお問い合わせ種別を選択済み")

#操作できない要素の回避
 		              except:
 		                try:
 		                   print("id値にてお問い合わせの種別に関する要素見つからなかったため、別の方法を試します。")
 		                   radio_ = driver.find_element_by_id(matched_list_kinds[len(matched_list_kinds)-1])
 		                   driver.execute_script("arguments[0].click();", radio_)
 		                   print(radio_.is_selected())
 		                   input_history.append(matched_list_kinds[len(matched_list_kinds)-1])
 		                   print("id値にてお問い合わせ種別を選択済み")

 		                except:
 		                  pass
                        

#value値及びname値有りの場合
 		        elif len(SELECT_list1) > 0 \
                     and len(SELECT_list2) == 0 \
                         and len(SELECT_list3) == 0 \
                             and len(SELECT_list4) == 0 \
                                 and len(SELECT_list5) > 0:
 		          print("value値及びname値有りの場合")
 		          print(len(SELECT_list1))
 		          print(len(SELECT_list2))
 		          print(len(SELECT_list3))
 		          print(len(SELECT_list4))
 		          print(len(SELECT_list5))

#（お問い合わせは法人・個人のどちらからなのか？）
 		          try:
 		            matched_list_distinction = []
 		            matched_list_contact = []
 		            print("お問い合わせは法人・個人のどちらからなのか？")
 		            for i in SELECT_list1:
 		              for j in radio.distinction_value_inc:
 		                if j in i:
 		                  matched_list_distinction.append(i)

#指定キーワードを除く
 		            matched_list_distinction = [i for i in matched_list_distinction if i is not None]
 		            print(matched_list_distinction)
 		            print(len(matched_list_distinction))

 		            for i in SELECT_list1:
 		              for j in radio.contact_method_value_inc:
 		                if j in i:
 		                  matched_list_contact.append(i)

#指定キーワードを除く
 		            matched_list_contact = [i for i in matched_list_contact if i is not None]
 		            print(matched_list_contact)
 		            print(len(matched_list_contact))

 		            if len(matched_list_distinction) == 1 \
						 and len(matched_list_contact) == 0:
 		              radio_ = driver.find_element_by_css_selector("[value='"+ matched_list_distinction[0] + "']")
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append(matched_list_distinction[0])
 		                print("value値にてお問い合わせを行った人の区別を選択済")

 		            elif len(matched_list_distinction) == 0 \
						 and len(matched_list_contact) == 1:
 		              radio_ = driver.find_element_by_css_selector("[value='"+ matched_list_contact[0] + "']")
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append(matched_list_contact[0])
 		                print("value値にて連絡方法を選択済み")

 		            elif len(matched_list_distinction) == 1 \
						 and len(matched_list_contact) == 1:
 		              radio_ = driver.find_element_by_css_selector("[value='"+ matched_list_distinction[0] + "']")
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append(matched_list_distinction[0])
 		                print("value値にてお問い合わせを行った人の区別を選択済")

 		              radio_ = driver.find_element_by_css_selector("[value='"+ matched_list_contact[0] + "']")
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append(matched_list_contact[0])
 		                print("value値にて連絡方法を選択済み")

 		          except:
 		            pass


#（お問い合わせ先）
 		          try:
 		            matched_list_contact = []
 		            print("お問い合わせ先はどちら？")
 		            for i in SELECT_list1:
 		              for j in radio.contact_info_value_inc:
 		                if j in i:
 		                  matched_list_contact.append(i)
 		            print(matched_list_contact)
 		            if len(matched_list_contact) > 0:
 		              radio_ = driver.find_element_by_name(matched_list_contact[0])
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append(matched_list_contact[0])
 		                print("name値にてお問い合わせ先を選択済み")
                         
 		          except:
 		            pass

#（アンケート）
 		          try:
 		            matched_list_question = []
 		            print("アンケートの回答")
 		            for i in radio.question_inc:
 		              if i in str(soup.find_all("form")):
 		                matched_list_kinds.append(i)
 		            print(matched_list_question)
 		            if len(matched_list_question) > 0:
 		              radio_ = driver.find_element_by_name(SELECT_list5[0])
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append(SELECT_list5[0])
 		                print("name値にてアンケートを回答済み")
                         
 		          except:
 		            pass

#（個人情報保護方針の同意）
 		          try:
 		            matched_list_person_info1 = []
 		            matched_list_person_info2 = []
 		            print("個人情報保護方針の同意を行うため要素の抽出開始")
 		            for i in SELECT_list1:
 		              for j in radio.personal_info_value_inc:
 		                if j in i:
 		                  matched_list_person_info1.append(i)

#指定キーワードを除く
 		            matched_list_person_info1 = [i for i in matched_list_person_info1 if i is not None]
 		            print(matched_list_person_info1)
 		            print(len(matched_list_person_info1))

 		            for i in SELECT_list5:
 		              for j in radio.personal_info_value_inc:
 		                if j in i:
 		                  matched_list_person_info2.append(i)
                           
#指定キーワードを除く
 		            matched_list_person_info2 = [i for i in matched_list_person_info2 if i is not None]
 		            print(matched_list_person_info2)
 		            print(len(matched_list_person_info2))

 		            if len(matched_list_person_info1) == 1 \
                         and len(matched_list_person_info2) == 1:
 		              radio_ = driver.find_element_by_name(matched_list_person_info2[len(matched_list_person_info2)-1])
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append("同意")
 		                print("name値にて個人情報保護方針の同意チェック済")

 		            elif len(matched_list_person_info1) == 1 \
                         and len(matched_list_person_info2) == 0:
 		              radio_ = driver.find_element_by_css_selector("[value='"+ matched_list_person_info1[0] + "']")
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append("同意")
 		                print("value値にて個人情報保護方針の同意チェック済")

 		            elif len(matched_list_person_info1) == 0 \
                         and len(matched_list_person_info2) == 1:
 		              radio_ = driver.find_elements_by_name(matched_list_person_info2[len(matched_list_person_info2)-1])[len(matched_list_person_info2)-1]
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append("同意")
 		                print("name値にて個人情報保護方針の同意チェック済")
                         
 		          except:
 		            pass                                   


#（お問い合わせ種別）
 		          try:
 		            matched_list_kinds = []
 		            print("お問い合わせの種別は？")
 		            for i in radio.kinds_inc:
 		              if i in str(soup.find_all("form")):
 		                matched_list_kinds.append(i)
 		            print(matched_list_kinds)
 		            if len(matched_list_kinds) > 0:
 		              radio_ = driver.find_elements_by_name(SELECT_list5[len(SELECT_list5)-1])[len(SELECT_list5)-1]
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append(SELECT_list5[len(SELECT_list5)-1])
 		                print("name値にてお問い合わせ種別を選択済")

#操作できない要素の回避
 		          except:
 		            try:
 		               matched_list_kinds = []
 		               print("name値にてお問い合わせの種別に関する要素見つからなかったため、別の方法を試します。")
 		               for i in SELECT_list1:
 		                 if j in radio.kinds_value_inc:
 		                   matched_list_kinds.append(i)
 		               print(matched_list_kinds)
 		               if len(matched_list_kinds) > 0:
 		                 radio_ = driver.find_element_by_css_selector("[value='" + matched_list_kinds[0] + "']")
 		                 driver.execute_script("arguments[0].click();", radio_)
 		                 print(radio_.is_selected())
 		                 if radio_.is_selected() is True:
 		                   input_history.append(matched_list_kinds[len(matched_list_kinds)-1])
 		                   print("value値にてお問い合わせ種別を選択済")

#操作できない要素の回避
 		            except:
 		              try:
 		                 print("value値にてお問い合わせの種別に関する要素見つからなかったため、別の方法を試します。")
 		                 radio_ = driver.find_elements_by_name(matched_list_kinds[0])[len(matched_list_kinds)-1]
 		                 driver.execute_script("arguments[0].click();", radio_)
 		                 print(radio_.is_selected())
 		                 if radio_.is_selected() is True:
 		                   input_history.append(matched_list_kinds[0])
 		                   print(radio_.is_selected())
 		                   print("name値にてお問い合わせ種別を選択済み")

#操作できない要素の回避
 		              except:
 		                try:
 		                   print("name値にてお問い合わせの種別に関する要素見つからなかったため、別の方法を試します。")
 		                   radio_ = driver.find_element_by_name(matched_list_kinds[len(matched_list_kinds)-1])
 		                   driver.execute_script("arguments[0].click();", radio_)
 		                   print(radio_.is_selected())
 		                   input_history.append(matched_list_kinds[len(matched_list_kinds)-1])
 		                   print("name値にてお問い合わせ種別を選択済み")


 		                except:
 		                  pass
                       

#value値及びid値、且つname値有りの場合
 		        elif len(SELECT_list1) > 0 \
                     and len(SELECT_list2) > 0 \
                         and len(SELECT_list3) == 0 \
                             and len(SELECT_list4) == 0 \
                                 and len(SELECT_list5) > 0:
 		          print("value値及びid値、且つname値有りの場合")
 		          print(len(SELECT_list1))
 		          print(len(SELECT_list2))
# 		          print(len(SELECT_list3))
# 		          print(len(SELECT_list4))
 		          print(len(SELECT_list5))

#（区別）
#（お問い合わせは法人・個人のどちらからなのか？）
 		          try:
 		            matched_list_distinction = []
 		            matched_list_contact = []
 		            print("お問い合わせは法人・個人のどちらからなのか？")
 		            for i in SELECT_list1:
 		              for j in radio.distinction_value_inc:
 		                if j in i:
 		                  matched_list_distinction.append(i)
#指定キーワードを除く
 		            matched_list_distinction = [i for i in matched_list_distinction if i is not None]
 		            print(matched_list_distinction)
 		            print(len(matched_list_distinction))

 		            for i in SELECT_list1:
 		              for j in radio.contact_method_value_inc:
 		                if j in i:
 		                  matched_list_contact.append(i)
#指定キーワードを除く
 		            matched_list_contact = [i for i in matched_list_contact if i is not None]
 		            print(matched_list_contact)
 		            print(len(matched_list_contact))

 		            if len(matched_list_distinction) == 1 \
						 and len(matched_list_contact) == 0:
 		              radio_ = driver.find_element_by_css_selector("[value='"+ matched_list_distinction[0] + "']")
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append(matched_list_distinction[0])
 		                print("value値にてお問い合わせを行った人の区別を選択済")

 		            elif len(matched_list_distinction) == 0 \
						 and len(matched_list_contact) == 1:
 		              radio_ = driver.find_element_by_css_selector("[value='"+ matched_list_contact[0] + "']")
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append(matched_list_contact[0])
 		                print("value値にて連絡方法を選択済み")

 		            elif len(matched_list_distinction) == 1 \
						 and len(matched_list_contact) == 1:
 		              radio_ = driver.find_element_by_css_selector("[value='"+ matched_list_distinction[0] + "']")
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append(matched_list_distinction[0])
 		                print("value値にてお問い合わせを行った人の区別を選択済")

 		              radio_ = driver.find_element_by_css_selector("[value='"+ matched_list_contact[0] + "']")
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append(matched_list_contact[0])
 		                print("value値にて連絡方法を選択済み")

 		          except:
 		            pass


#（お問い合わせ先）
 		          try:
 		            matched_list_contact = []
 		            print("お問い合わせ先はどちら？")
 		            for i in SELECT_list5:
 		              for j in radio.contact_info_value_inc:
 		                if j in i:
 		                  matched_list_contact.append(i)
 		            print(matched_list_contact)
 		            if len(matched_list_contact) > 0:
 		              radio_ = driver.find_element_by_name(matched_list_contact[0])
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append(matched_list_contact[0])
 		                print("name値にてお問い合わせ先を選択済み")
                         
 		          except:
 		            pass


#（アンケート）
 		          try:
 		            matched_list_question = []
 		            print("アンケートの回答")
 		            for i in radio.question_inc:
 		              if i in str(soup.find_all("form")):
 		                matched_list_kinds.append(i)
 		            print(matched_list_question)
 		            if len(matched_list_question) > 0:
 		              radio_ = driver.find_element_by_name(SELECT_list5[0])
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append(SELECT_list5[0])
 		                print("name値にてアンケートを回答済み")
                         
 		          except:
 		            pass

                 
#（個人情報保護方針の同意）
 		          try:
 		            matched_list_person_info1 = []
 		            matched_list_person_info2 = []
 		            print("個人情報保護方針の同意を行うため要素の抽出開始")
 		            for i in SELECT_list1:
 		              for j in radio.personal_info_value_inc:
 		                if j in i:
 		                  matched_list_person_info1.append(i)

#指定キーワードを除く
 		            matched_list_person_info1 = [i for i in matched_list_person_info1 if i is not None]
 		            print(matched_list_person_info1)
 		            print(len(matched_list_person_info1))

 		            for i in SELECT_list5:
 		              for j in radio.personal_info_value_inc:
 		                if j in i:
 		                  matched_list_person_info2.append(i)
                           
#指定キーワードを除く
 		            matched_list_person_info2 = [i for i in matched_list_person_info2 if i is not None]
 		            print(matched_list_person_info2)
 		            print(len(matched_list_person_info2))

 		            if len(matched_list_person_info1) == 1 \
                         and len(matched_list_person_info2) == 1:
 		              radio_ = driver.find_element_by_name(matched_list_person_info2[len(matched_list_person_info2)-1])
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append("同意")
 		                print("name値にて個人情報保護方針の同意チェック済")

 		            elif len(matched_list_person_info1) == 1 \
                         and len(matched_list_person_info2) == 0:
 		              radio_ = driver.find_element_by_css_selector("[value='"+ matched_list_person_info1[0] + "']")
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append("同意")
 		                print("value値にて個人情報保護方針の同意チェック済")

 		            elif len(matched_list_person_info1) == 0 \
                         and len(matched_list_person_info2) == 1:
 		              radio_ = driver.find_elements_by_name(matched_list_person_info2[len(matched_list_person_info2)-1])[len(matched_list_person_info2)-1]
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append("同意")
 		                print("name値にて個人情報保護方針の同意チェック済")

 		            elif len(matched_list_person_info1) > 1 \
                         and len(matched_list_person_info2) == 0:
 		              print("「同意する」「同意しない」の選択肢が存在する模様・・・")
 		              radio_ = driver.find_element_by_css_selector("[value='"+ matched_list_person_info1[0] + "']")
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append("同意")
 		                print("value値にて個人情報保護方針の同意チェック済")

                         
 		          except:
 		            pass                                   


#（お問い合わせ種別）
 		          matched_list_kinds = []
 		          matched_list_kinds_value = []
 		          print("お問い合わせの種別は？")
 		          for i in radio.kinds_inc:
 		            if i in str(soup.find_all("form")):
 		              matched_list_kinds.append(i)
 		          print(matched_list_kinds)

 		          for i in SELECT_list5:                   
 		            for j in radio.kinds_value_inc:
 		              if i == j:
 		                matched_list_kinds_value.append(i)
 		          print(matched_list_kinds_value)

 		          if len(matched_list_kinds) > 0 \
                       and len(matched_list_kinds_value) == 0:
 		            try:                         
 		              radio_ = driver.find_elements_by_name(SELECT_list5[len(SELECT_list5)-1])[len(SELECT_list5)-1]
 		              driver.execute_script("arguments[0].click();", radio_)
 		              print(radio_.is_selected())
 		              if radio_.is_selected() is True:
 		                input_history.append(SELECT_list5[len(SELECT_list5)-1])
 		                print("name値にてお問い合わせ種別を選択済")

#操作できない要素の回避
 		            except:
 		              try:
 		                matched_list_kinds = []
 		                print("name値にてお問い合わせの種別に関する要素見つからなかったため、別の方法を試します。")
 		                for i in SELECT_list1:
 		                  if j in radio.kinds_value_inc:
 		                    matched_list_kinds.append(i)
 		                print(matched_list_kinds)
 		                if len(matched_list_kinds) > 0:
 		                  radio_ = driver.find_element_by_css_selector("[value='" + matched_list_kinds[0] + "']")
 		                  driver.execute_script("arguments[0].click();", radio_)
 		                  print(radio_.is_selected())
 		                  if radio_.is_selected() is True:
 		                    input_history.append(matched_list_kinds[len(matched_list_kinds)-1])
 		                    print("value値にてお問い合わせ種別を選択済")

#操作できない要素の回避
 		              except:
 		                try:
 		                  print("value値にてお問い合わせの種別に関する要素見つからなかったため、別の方法を試します。")
 		                  radio_ = driver.find_elements_by_name(matched_list_kinds[0])[len(matched_list_kinds)-1]
 		                  driver.execute_script("arguments[0].click();", radio_)
 		                  print(radio_.is_selected())
 		                  if radio_.is_selected() is True:
 		                    input_history.append(matched_list_kinds[0])
 		                    print(radio_.is_selected())
 		                    print("name値にてお問い合わせ種別を選択済み")

#操作できない要素の回避
 		                except:
 		                  try:
 		                    print("name値にてお問い合わせの種別に関する要素見つからなかったため、別の方法を試します。")
 		                    radio_ = driver.find_element_by_name(matched_list_kinds[len(matched_list_kinds)-1])
 		                    driver.execute_script("arguments[0].click();", radio_)
 		                    print(radio_.is_selected())
 		                    input_history.append(matched_list_kinds[len(matched_list_kinds)-1])
 		                    print("name値にてお問い合わせ種別を選択済み")

 		                  except:
 		                    pass
                         
#パターン追加（2022.01.04）
#<label><input id="contact[6]" name="contact" value="6" type="radio"><span>その他</span></label>                                                                  
 		          elif len(matched_list_kinds) > 0 \
                       and len(matched_list_kinds_value) > 0:
 		            try:
 		                  print("id値にてお問い合わせの種別に関する要素を抽出開始")
 		                  radio_ = driver.find_element_by_id(matched_list_kinds_value[len(matched_list_kinds_value)-1])
 		                  driver.execute_script("arguments[0].click();", radio_)
 		                  print(radio_.is_selected())
 		                  if radio_.is_selected() is True:
 		                    input_history.append(matched_list_kinds[len(matched_list_kinds_value)-1])
 		                    print(radio_.is_selected())
 		                    print("id値にてお問い合わせ種別を選択済み")
 		            except:
 		              pass
                           

#id値有りの場合（パターン注意）
 		        elif len(SELECT_list3) > 0 \
                     and len(SELECT_list4) > 0:
 		          print(len(SELECT_list3))
 		          print(len(SELECT_list4))

#（種別）
 		          if len([i for i in items_1 if "種別" in i]) == 1:
 		            radiobutton = driver.find_element_by_id(SELECT_list3[len(SELECT_list3)-1])
 		            driver.execute_script("arguments[0].click();", radiobutton)
 		            print(radiobutton.is_selected())
 		            if radiobutton.is_selected() is True:
# 		         		         lastcol = len(list(ws3.row_values(k)))    
# 		         		         time.sleep(1) 		         		           
# 		         		         ws3.update_cell(k, lastcol+1, SELECT_list3[len(SELECT_list3)-1])
 		                         input_history.append(SELECT_list3[len(SELECT_list3)-1])
 		                         print(radiobutton.is_selected())

#（法人／個人）
 		        if len([i for i in items_1 if "法人" in i]) == 1 \
 		            and len(SELECT_list4) > 0:
 		            radiobutton = driver.find_element_by_id(SELECT_list4[0])
 		            driver.execute_script("arguments[0].click();", radiobutton)
 		            print(radiobutton.is_selected())
 		            if radiobutton.is_selected() is True:
# 		         		         lastcol = len(list(ws3.row_values(k)))    
# 		         		         time.sleep(1) 		         		           
# 		         		         ws3.update_cell(k, lastcol+1, SELECT_list4[0])
 		                         input_history.append(SELECT_list4[0])
 		                         print(radiobutton.is_selected())


#会社名
 		        adid = MyProject1MyDialog4(self)
 		        matched_list_company1 = []
 		        matched_list_company2 = []
# 		        print(list_1)
# 		        print(items_1)

 		        print("会社名に関するテキスト要素があるか否かの確認")
 		        try:
 		         for i in items_1:
 		           for j in company.company_list:
 		             if not j in i:
 		               pass
 		             elif j in i:
 		               matched_list_company1.append(i)
 		         print(len(matched_list_company1))
 		         for i in list_1:
 		           for j in company.company_list:
 		             if not j in i:
 		               pass
 		             elif j in i:
 		               matched_list_company2.append(i)
 		         print(len(matched_list_company2))

 		         if matched_list_company1 == [] \
                      and matched_list_company2 == []:
 		           input_history.append("会社名入力欄なし")
                  

#パターン追加（2021.12.22）
# 		         matched_list_company1 = []
# 		         for i in items_1:
# 		           for j in company.company_list:
# 		             if j in i:
# 		               matched_list_company1.append(i)
# 		         print(matched_list_company1)

# 		         matched_list_company2 = []                  
# 		         for i in list_1:
# 		           for j in company.company_list:
# 		             if j in i:
# 		               matched_list_company2.append(i)
# 		         print(matched_list_company2)

#「items_1」又は「list_1」のどちらかに含まれる場合は以下のコーディングを実行
# 		         elif not len(matched_list_company1) == 0 \
#                      or not len(matched_list_company2) == 0:

# 		           matched_list_company1 = []
# 		           for i in list_2:
# 		             for j in company.company_value_inc:
# 		               if j in i:
# 		                 matched_list_company1.append(i)
# 		           print(matched_list_company1)

# 		           matched_list_company2 = []
# 		           for i in list_2:
# 		             for j in company.company_value_mat:
# 		               if i == j:
# 		                 matched_list_company2.append(i)
# 		           print(matched_list_company2)


#「matched_list_company1」又は「matched_list_company2」内のどちらかで要素が１つ以上存在する場合、「list_2d（id値）」内の要素と一致するかを確認
 		         elif len(matched_list_company1) > 0 \
                      or len(matched_list_company2) > 0:                              
 		             print("「matched_list_company1」又は「matched_list_company2」内のどちらかで要素が１つ以上存在する場合、\
                      「list_2d（id値）」内の要素と一致するかを確認")
 		             matched_list_company1 = []
 		             for i in list_2d:
 		               for j in company.company_value_inc:
 		                 if j in i:
 		                   matched_list_company1.append(i)
 		             print(matched_list_company1)

 		             matched_list_company2 = []
 		             for i in list_2d:
 		               for j in company.company_value_mat:
 		                 if i == j:
 		                   matched_list_company2.append(i)
 		             print(matched_list_company2)
                                
 		             if len(matched_list_company1) > 0 \
                          and len(matched_list_company2) == 0:
# 		               print(matched_list_company1)
 		               driver.find_element_by_id(matched_list_company1[0]).send_keys(adid.m_textCtrl11.GetValue())
 		               input_history.append("会社名")

 		             elif len(matched_list_company1) == 0 \
                          and len(matched_list_company2) > 0:
# 		               print(matched_list_company2)
 		               driver.find_element_by_id(matched_list_company2[0]).send_keys(adid.m_textCtrl11.GetValue())
 		               input_history.append("会社名")

 		             elif len(matched_list_company1) > 0 \
                          and len(matched_list_company2) > 0:
 		               driver.find_element_by_id(matched_list_company1[0]).send_keys(adid.m_textCtrl11.GetValue())
 		               input_history.append("会社名")

#「matched_list_company1」又は「matched_list_company2」内のどちらかで要素が１つ以上存在する場合、「list_2（name値）」内の要素と一致するかを確認
 		             elif len(matched_list_company1) == 0 \
                          and len(matched_list_company2) == 0:                              
 		               print("「matched_list_company1」又は「matched_list_company2」内のどちらかで要素が１つ以上存在する場合、\
                        「list_2（name値）」内の要素と一致するかを確認")
 		               try:
 		                 matched_list_company1 = []
 		                 for i in list_2:
 		                   for j in company.company_value_inc:
 		                     if j in i:
 		                       matched_list_company1.append(i)
 		                 print(matched_list_company1)

 		                 matched_list_company2 = []
 		                 for i in list_2:
 		                   for j in company.company_value_mat:
 		                     if i == j:
 		                       matched_list_company2.append(i)
 		                 print(matched_list_company2)
                                
 		                 if len(matched_list_company1) > 0 \
                              and len(matched_list_company2) == 0:
 		                   print(matched_list_company1)
 		                   driver.find_element_by_name(matched_list_company1[0]).send_keys(adid.m_textCtrl11.GetValue() + "　")
 		                   input_history.append("会社名")

 		                 elif len(matched_list_company1) == 0 \
                              and len(matched_list_company2) > 0:
 		                   print(matched_list_company2)
 		                   driver.find_element_by_name(matched_list_company2[0]).send_keys(adid.m_textCtrl11.GetValue() + "　")
 		                   input_history.append("会社名")
                  

#その他（要素にclass値が与えられている）
 		                 elif len(matched_list_company1) == 0 \
                              and len(matched_list_company2) == 0:
 		                   print("要素にclass値が与えられている")
                            
 		                   matched_list_company1 = []
 		                   for i in list_2c:
 		                     for j in company.company_value_inc:
 		                       if j in i:
 		                         matched_list_company1.append(i)
 		                   print(matched_list_company1)

 		                   matched_list_company2 = []
 		                   for i in list_2c:
 		                     for j in company.company_value_mat:
 		                       if i == j:
 		                         matched_list_company2.append(i)
 		                   print(matched_list_company2)
                                
 		                   if len(matched_list_company1) > 0 \
                                and len(matched_list_company2) == 0:
 		                     print(matched_list_company1)
 		                     driver.find_element_by_class_name(matched_list_company1[0]).send_keys(adid.m_textCtrl11.GetValue() + "　")
 		                     input_history.append("会社名")

 		                   elif len(matched_list_company1) == 0 \
                                and len(matched_list_company2) > 0:
 		                     print(matched_list_company2)
 		                     driver.find_element_by_class_name(matched_list_company2[0]).send_keys(adid.m_textCtrl11.GetValue() + "　")
 		                     input_history.append("会社名")

 		               except:
 		                 pass


#（Googleフォーム）
#<input type="text" class="whsOnd zHQkBf" jsname="YPqjbf" autocomplete="off" tabindex="0" aria-labelledby="i1" aria-describedby="i2 i3" required="" dir="auto" data-initial-dir="auto" data-initial-value="">
#※「class="quantumWizTextinputPaperinputInput exportInput"」は現在使えないので注意！！（2022.03.02）
 		         if not len([i for i in list_2c if "zHQkBf" in i]) == 0:
 		             driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[1].send_keys(adid.m_textCtrl11.GetValue())
 		             input_history.append("会社名")


#リストインデックスに関するエラー回避                    
 		        except IndexError as e:
 		          print(e)
                
                    
#会社名フリガナ
 		        try:
 		          matched_list_company_furigana1 = []
 		          matched_list_company_furigana2 = []
                   
 		          print("会社名フリガナに関するテキスト要素があるか否かの確認")
 		          for i in items_1:
 		            for j in furigana.company_furigana:
 		              if not j in i:
 		                pass
 		              elif j in i:
 		                matched_list_company_furigana1.append(i)
 		          print(matched_list_company_furigana1)
 		          for i in list_1:
 		            for j in furigana.company_furigana:
 		              if not j in i:
 		                pass
 		              elif j in i:
 		                matched_list_company_furigana2.append(i)
 		          print(matched_list_company_furigana2)

#「items_1」又は「list_1」のどちらかに含まれる場合は以下のコーディングを実行
 		          print("「items_1」又は「list_1」のどちらかに含まれる場合は以下のコーディングを実行")
 		          if not len(matched_list_company_furigana1) == 0 \
                       or not len(matched_list_company_furigana2) == 0:

 		            matched_list_company_furigana1 = []
 		            for i in list_2:
 		              for j in furigana.company_furigana_value_inc:
 		                if j in i:
 		                  matched_list_company_furigana1.append(i)
 		            print(matched_list_company_furigana1)

 		            matched_list_company_furigana2 = []
 		            for i in list_2:
 		              for j in furigana.company_furigana_value_mat:
 		                if i == j:
 		                  matched_list_company_furigana2.append(i)
 		            print(matched_list_company_furigana2)

 		            if len(matched_list_company_furigana1) > 0 \
                         and len(matched_list_company_furigana2) == 0:
 		              driver.find_element_by_name(matched_list_company_furigana1[0]).clear()
 		              driver.find_element_by_name(matched_list_company_furigana1[0]).send_keys(adid.m_textCtrl13.GetValue())
 		              input_history.append("会社名カナ")
 		              print(matched_list_company_furigana1)

 		            elif len(matched_list_company_furigana1) == 0 \
                         and len(matched_list_company_furigana2) > 0:
 		              driver.find_element_by_name(matched_list_company_furigana2[0]).clear()
 		              driver.find_element_by_name(matched_list_company_furigana2[0]).send_keys(adid.m_textCtrl13.GetValue())
 		              input_history.append("会社名カナ")
 		              print(matched_list_company_furigana2)


#リストインデックスに関するエラー回避                    
 		        except IndexError as e:
 		          print(e)
                

#フルネーム（氏名）に関するテキスト要素があるか否かの確認
 		        print("フルネーム（氏名）に関するテキスト要素があるか否かの確認")
# 		        try:
 		        matched_list_full_name1 = []
 		        matched_list_full_name2 = []
 		        print(list_2)
 		        for i in items_1:
 		            for j in full_name.full_name:
 		              if not j in i:
 		                pass
 		              elif j in i:
 		                matched_list_full_name1.append(i)
# 		          print(matched_list_full_name1)
 		        print(len(matched_list_full_name1))
 		        for i in list_1:
 		            for j in full_name.full_name:
 		              if not j in i:
 		                pass
 		              elif j in i:
 		                matched_list_full_name2.append(i)
# 		          print(matched_list_full_name2)
 		        print(len(matched_list_full_name2))

#「items_1」又は「list_1」のどちらかに含まれる場合は以下のコーディングを実行
 		        if not len(matched_list_full_name1) == 0 \
                       or not len(matched_list_full_name2) == 0:

 		            matched_list_full_name1 = []
 		            for i in list_2:
 		              for j in full_name.seimei_value_inc:
 		                if j in i:
 		                  matched_list_full_name1.append(i)
 		        print(matched_list_full_name1)
 		        print(len(matched_list_full_name1))

 		        matched_list_full_name2 = []
 		        for i in list_2:
 		              for j in full_name.seimei_value_mat:
 		                if i == j:
 		                  matched_list_full_name2.append(i)
 		        print(matched_list_full_name2)
 		        print(len(matched_list_full_name2))
                     

#フルネーム（姓＋名）
 		        if len(matched_list_full_name1) > 0 \
                         and len(matched_list_full_name2) == 0:
 		              print(len(matched_list_full_name1))
 		              print(len(matched_list_full_name2))
 		              print("フルネーム（姓＋名）：リスト「seimei_value_inc」内の要素あり")
 		              elemName0 = driver.find_element_by_name(matched_list_full_name1[0])
 		              elemName1 = driver.find_element_by_name(matched_list_full_name1[1])
                             
#要素が３つ以上存在する（お問い合わせフォームが用途によって切り替えられる場合）
 		              try:
 		         		        if len(matched_list_full_name1) > 2:
 		         		          print("要素が３つ以上存在する（お問い合わせフォームが用途によって切り替えられる場合）")
 		         		          elemName2 = driver.find_element_by_name(matched_list_full_name2[0])
 		         		          elemName3 = driver.find_element_by_name(matched_list_full_name2[1])
 		         		          elemName4 = driver.find_element_by_name(matched_list_full_name1[2])
 		         		          for j in range(1,len(matched_list_full_name1)+1):
 		         		           if elemName0.is_displayed() is False \
 		         		         		        or elemName1.is_displayed() is False \
 		         		         		            or elemName2.is_displayed() is False \
                                                           or elemName3.is_displayed() is False \
                                                               or elemName4.is_displayed() is False:
 		         		         		        print(matched_list_full_name1[j-1])
 		         		         		        if "1" in matched_list_full_name1[j-1]:
 		         		         		          driver.find_element_by_name(matched_list_full_name1[j-1]).send_keys(adid.m_textCtrl16.GetValue()
                                                                                          + adid.m_textCtrl17.GetValue())
 		         		         		          input_history.append("氏名")

 		         		         		        elif "2" in matched_list_full_name1[j-1]:
 		         		         		          driver.find_element_by_name(matched_list_full_name1[j-1]).send_keys(adid.m_textCtrl16.GetValue()
                                                                                          + adid.m_textCtrl17.GetValue())
 		         		         		          input_history.append("氏名")

 		         		         		        elif "3" in matched_list_full_name1[j-1]:
 		         		         		          driver.find_element_by_name(matched_list_full_name1[j-1]).send_keys(adid.m_textCtrl16.GetValue()
                                                                                          + adid.m_textCtrl17.GetValue())
 		         		         		          input_history.append("氏名")

#要素が２つしかない
 		         		        elif len(matched_list_full_name1) == 2:
 		         		         	print("要素が２つしかない")
 		         		         	elemName0.send_keys(adid.m_textCtrl16.GetValue())
 		         		         	input_history.append("姓")
 		         		         	print(matched_list_full_name1[0])
 		         		         	elemName1.send_keys(adid.m_textCtrl17.GetValue())
 		         		         	input_history.append("名")
 		         		         	print(matched_list_full_name1[1])


#操作できない要素の回避
 		              except ElementNotInteractableException:
 		                pass                             

# 		            elif len(matched_list_full_name1) == 0 \
#                         and len(matched_list_full_name2) > 0:

 		        elif len(matched_list_full_name1) == 0 \
                         and len(matched_list_full_name2) > 0:
 		              print(len(matched_list_full_name1))
 		              print(len(matched_list_full_name2))
 		              print("フルネーム（姓＋名）：リスト「seimei_value_mat」内の要素あり")
 		              elemName2 = driver.find_element_by_name(matched_list_full_name2[0])

#要素が３つ以上存在する（お問い合わせフォームが用途によって切り替えられる場合）
 		              try:
# 		         		        if len(matched_list_full_name2) > 2:
# 		         		          print("要素が３つ以上存在する（お問い合わせフォームが用途によって切り替えられる場合）")
# 		         		          elemName3 = driver.find_element_by_name(matched_list_full_name2[1])
# 		         		          elemName4 = driver.find_element_by_name(matched_list_full_name2[2])
# 		         		          for j in range(1,len(matched_list_full_name2)+1):
# 		         		           if elemName0.is_displayed() is False \
# 		         		         		        or elemName1.is_displayed() is False \
# 		         		         		            or elemName2.is_displayed() is False \
#                                                           or elemName3.is_displayed() is False \
#                                                               or elemName4.is_displayed() is False:
# 		         		         		        print(matched_list_full_name2[j-1])
# 		         		         		        if "1" in matched_list_full_name2[j-1]:
# 		         		         		          driver.find_element_by_name(matched_list_full_name2[j-1]).send_keys(adid.m_textCtrl16.GetValue()
#                                                                                          + adid.m_textCtrl17.GetValue())
# 		         		         		          input_history.append("氏名")

# 		         		         		        elif "2" in matched_list_full_name2[j-1]:
# 		         		         		          driver.find_element_by_name(matched_list_full_name2[j-1]).send_keys(adid.m_textCtrl16.GetValue()
#                                                                                          + adid.m_textCtrl17.GetValue())
# 		         		         		          input_history.append("氏名")

# 		         		         		        elif "3" in matched_list_full_name2[j-1]:
# 		         		         		          driver.find_element_by_name(matched_list_full_name2[j-1]).send_keys(adid.m_textCtrl16.GetValue()
#                                                                                          + adid.m_textCtrl17.GetValue())
# 		         		         		          input_history.append("氏名")

#
 		         		        if len(matched_list_full_name2) == 2:
 		         		         	print("要素が２つしかない")
 		         		         	elemName3 = driver.find_element_by_name(matched_list_full_name2[1])
 		         		         	elemName2.send_keys(adid.m_textCtrl16.GetValue())
 		         		         	input_history.append("姓")
 		         		         	print(matched_list_full_name2[0])
 		         		         	elemName3.send_keys(adid.m_textCtrl17.GetValue())
 		         		         	input_history.append("名")
 		         		         	print(matched_list_full_name2[1])

 		         		        elif len(matched_list_full_name2) == 1:
 		         		         	print("要素が１つしかない")
 		         		         	elemName2.send_keys(adid.m_textCtrl15.GetValue())
 		         		         	input_history.append("氏名")

#操作できない要素の回避
 		              except ElementNotInteractableException:
 		                pass                             
                             

#フルネーム（通常パターン）
#「matched_list_full_name1」又は「matched_list_full_name2」内のどちらにも要素が無かった場合
#「list_2d（id値）」内の要素と一致するかを確認
 		        elif len(matched_list_full_name1) == 0 \
                         and len(matched_list_full_name2) == 0:
 		              print("フルネーム（通常パターン）「matched_list_full_name1」又は「matched_list_full_name2」内のどちらにも要素が無かった場合 \
                       「list_2d（id値）」内の要素と一致するかを確認")
                       
 		              matched_list_full_name3 = []
 		              for i in list_2d:
 		                for j in full_name.full_name_value_inc:
 		                  if j in i:
 		                    matched_list_full_name3.append(i)
 		              print(matched_list_full_name3)
 		              print(len(matched_list_full_name3))
                       
 		              matched_list_full_name4 = []
 		              for i in list_2d:
 		                for j in full_name.full_name_value_mat:
 		                  if i == j:
 		                    matched_list_full_name4.append(i)
 		              print(matched_list_full_name4)
 		              print(len(matched_list_full_name4))


 		              if len(matched_list_full_name3) > 0 \
                           and len(matched_list_full_name4) == 0:
 		                driver.find_element_by_id(matched_list_full_name3[0]).clear()
 		                driver.find_element_by_id(matched_list_full_name3[0]).send_keys(adid.m_textCtrl15.GetValue())
 		                input_history.append("氏名")
 		                print(matched_list_full_name3)

 		              elif len(matched_list_full_name3) == 0 \
                           and len(matched_list_full_name4) > 0:
 		                driver.find_element_by_id(matched_list_full_name4[0]).clear()
 		                driver.find_element_by_id(matched_list_full_name4[0]).send_keys(adid.m_textCtrl15.GetValue())
 		                input_history.append("氏名")
 		                print(matched_list_full_name4)


#「list_2d（id値）」内の要素と一致しなかった場合、「list_2（name値）」内の要素と一致するかを確認
 		              elif len(matched_list_full_name3) == 0 \
                           and len(matched_list_full_name4) == 0:
 		                print("フルネーム（通常パターン）：「matched_list_full_name1」及び「matched_list_full_name2」内のどちらにも要素が無かった場合 \
                         「list_2（name値）」内の要素と一致するかを確認")

 		                matched_list_full_name5 = []
 		                for i in list_2:
 		                  for j in full_name.full_name_value_inc:
 		                    if j in i:
 		                      matched_list_full_name5.append(i)
 		                print(matched_list_full_name5)
 		                print(len(matched_list_full_name5))
                       
 		                matched_list_full_name6 = []
 		                for i in list_2:
 		                  for j in full_name.full_name_value_mat:
 		                    if i == j:
 		                      matched_list_full_name6.append(i)
 		                print(matched_list_full_name6)
 		                print(len(matched_list_full_name6))

 		                if len(matched_list_full_name5) > 0 \
                             and len(matched_list_full_name6) == 0:
 		                  driver.find_element_by_name(matched_list_full_name5[0]).clear()
 		                  driver.find_element_by_name(matched_list_full_name5[0]).send_keys(adid.m_textCtrl15.GetValue())
 		                  input_history.append("氏名")
 		                  print(matched_list_full_name5)

 		                elif len(matched_list_full_name5) == 0 \
                             and len(matched_list_full_name6) > 0:
 		                  driver.find_element_by_name(matched_list_full_name6[0]).clear()
 		                  driver.find_element_by_name(matched_list_full_name6[0]).send_keys(adid.m_textCtrl15.GetValue())
 		                  input_history.append("氏名")
 		                  print(matched_list_full_name6)


#（特殊パターン：list_2の要素ではなくlist_2dに一致する）
 		                elif len(matched_list_full_name5) == 0 \
                             and len(matched_list_full_name6) == 0:
 		                  print("フルネーム（通常パターン）：「matched_list_full_name5」及び「matched_list_full_name6」内のどちらにも要素が無かった場合 \
                           「list_2d（id値）」内の要素と一致するかを確認")

 		                  matched_list_full_name7 = []
 		                  for i in list_2d:
 		                    for j in full_name.full_name_value_inc:
 		                      if j in i:
 		                        matched_list_full_name7.append(i)
 		                  print(matched_list_full_name7)

 		                  matched_list_full_name8 = []
 		                  for i in list_2d:
 		                    for j in full_name.full_name_value_mat:
 		                      if i == j:
 		                        matched_list_full_name8.append(i)
 		                  print(matched_list_full_name8)

 		                  if len(matched_list_full_name7) > 0 \
                               and len(matched_list_full_name8) == 0:
 		                    driver.find_element_by_id(matched_list_full_name7[0]).clear()
 		                    driver.find_element_by_id(matched_list_full_name7[0]).send_keys(adid.m_textCtrl15.GetValue())
 		                    input_history.append("氏名")
 		                    print(matched_list_full_name7)

 		                  elif len(matched_list_full_name7) == 0 \
                               and len(matched_list_full_name8) > 0:
 		                    driver.find_element_by_id(matched_list_full_name8[0]).clear()
 		                    driver.find_element_by_id(matched_list_full_name8[0]).send_keys(adid.m_textCtrl15.GetValue())
 		                    input_history.append("氏名")
 		                    print(matched_list_full_name8)
                           

#（特殊パターン：list_2dの要素ではなくlist_2cに一致する）
 		                  elif len(matched_list_full_name7) == 0 \
                               and len(matched_list_full_name8) == 0:
 		                    print("フルネーム（通常パターン）：「matched_list_full_name7」及び「matched_list_full_name8」内のどちらにも要素が無かった場合 \
                             「list_2c（class値）」内の要素と一致するかを確認")
                                   
 		                    matched_list_full_name9 = []
 		                    for i in list_2c:
 		                      for j in full_name.full_name_value_inc:
 		                        if j in i:
 		                          matched_list_full_name9.append(i)
 		                    print(matched_list_full_name9)

 		                    matched_list_full_name10 = []
 		                    for i in list_2c:
 		                      for j in full_name.full_name_value_mat:
 		                        if i == j:
 		                          matched_list_full_name10.append(i)
 		                    print(matched_list_full_name10)

 		                    if len(matched_list_full_name9) > 0 \
                                 and len(matched_list_full_name10) == 0:
 		                      driver.find_elements_by_class_name(matched_list_full_name9[0])[0].clear()
 		                      driver.find_elements_by_class_name(matched_list_full_name9[0])[0].send_keys(adid.m_textCtrl15.GetValue())
 		                      input_history.append("氏名")
 		                      print(matched_list_full_name9)

 		                    elif len(matched_list_full_name9) == 0 \
                                 and len(matched_list_full_name10) > 0:
 		                      driver.find_elements_by_class_name(matched_list_full_name10[0])[0].clear()
 		                      driver.find_elements_by_class_name(matched_list_full_name10[0])[0].send_keys(adid.m_textCtrl15.GetValue())
 		                      input_history.append("氏名")
 		                      print(matched_list_full_name10)


#（Googleフォーム）
#<input type="text" class="whsOnd zHQkBf" jsname="YPqjbf" autocomplete="off" tabindex="0" aria-labelledby="i1" aria-describedby="i2 i3" required="" dir="auto" data-initial-dir="auto" data-initial-value="">
#※「class="quantumWizTextinputPaperinputInput exportInput"」は現在使えないので注意！！（2022.03.02）
 		        elif not len([i for i in list_2c if "zHQkBf" in i]) == 0:
 		            driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[0].send_keys(adid.m_textCtrl15.GetValue())
 		            input_history.append("氏名")


#リストインデックスに関するエラー回避                    
# 		        except IndexError as e:
# 		          print(e)

 		                          
#「フルネームふりがな」に関するテキスト要素があるか否かの確認
 		        try:
 		          matched_list_full_name_furigana1 = []
 		          matched_list_full_name_furigana2 = []
 		          print(list_2)
 		          print("「フルネームふりがな」に関するテキスト要素があるか否かの確認")
 		          for i in items_1:
 		            for j in furigana.fullname_furigana:
 		              if not j in i:
 		                pass
 		              elif j in i:
 		                matched_list_full_name_furigana1.append(i)
 		          print(matched_list_full_name_furigana1)
 		          print(len(matched_list_full_name_furigana1))
 		          for i in list_1:
 		            for j in furigana.fullname_furigana:
 		              if not j in i:
 		                pass
 		              elif j in i:
 		                matched_list_full_name_furigana2.append(i)
 		          print(matched_list_full_name_furigana2)
 		          print(len(matched_list_full_name_furigana2))

#「items_1」又は「list_1」のどちらかに含まれる場合は以下のコーディングを実行
 		          if not len(matched_list_full_name_furigana1) == 0 \
                       or not len(matched_list_full_name_furigana2) == 0:

 		            matched_list_seimei_furigana1 = []
 		            for i in list_2:
 		              for j in furigana.seimei_furigana_value_inc:
 		                if j in i:
 		                  matched_list_seimei_furigana1.append(i)
 		            print(matched_list_seimei_furigana1)
 		            print(len(matched_list_seimei_furigana1))

 		            matched_list_seimei_furigana2 = []
 		            for i in list_2:
 		              for j in furigana.seimei_furigana_value_mat:
 		                if i == j:
 		                  matched_list_seimei_furigana2.append(i)
 		            print(matched_list_seimei_furigana2)
 		            print(len(matched_list_seimei_furigana2))


#ふりがな（姓＋名）
 		            if len(matched_list_seimei_furigana1) > 0 \
                         or len(matched_list_seimei_furigana2) > 0:
 		              print(len(matched_list_seimei_furigana1))
 		              print(len(matched_list_seimei_furigana2))
 		              print("ふりがな（姓＋名）")
 		              elemName0 = driver.find_element_by_name(matched_list_seimei_furigana1[0])
 		              elemName1 = driver.find_element_by_name(matched_list_seimei_furigana1[1])
 		              elemName2 = driver.find_element_by_name(matched_list_seimei_furigana2[0])
 		              elemName3 = driver.find_element_by_name(matched_list_seimei_furigana2[1])


 		              if len(matched_list_seimei_furigana1) == 2:
 		                elemName0.send_keys(adid.m_textCtrl19.GetValue())
 		                input_history.append(adid.m_textCtrl19.GetValue())
 		                print(matched_list_seimei_furigana1[0])
 		                elemName1.send_keys(adid.m_textCtrl20.GetValue())
 		                input_history.append(adid.m_textCtrl20.GetValue())
 		                print(matched_list_seimei_furigana1[1])

 		              elif len(matched_list_seimei_furigana2) == 2:
 		                elemName2.send_keys(adid.m_textCtrl19.GetValue())
 		                input_history.append(adid.m_textCtrl19.GetValue())
 		                print(matched_list_seimei_furigana2[0])
 		                elemName3.send_keys(adid.m_textCtrl20.GetValue())
 		                input_history.append(adid.m_textCtrl20.GetValue())
 		                print(matched_list_seimei_furigana2[1])


#フルネームふりがな（通常パターン）
#「matched_list_full_seimei_furigana1」及び「matched_list_seimei_furigana2」内のどちらにも要素が無かった場合
#「list_2（name値）」内の要素と一致するかを確認
 		            elif len(matched_list_seimei_furigana1) == 0 \
                         and len(matched_list_seimei_furigana2) == 0:
 		              print("フルネームふりがな（通常パターン）：「matched_list_seimei_furigana1」及び「matched_list_seimei_furigana2」内のどちらにも要素が無かった場合 \
                       「list_2（name値）」内の要素と一致するかを確認")
                             
 		              matched_list_full_name_furigana3 = []
 		              for i in list_2:
 		                for j in furigana.fullname_furigana_value_inc:
 		                  if j in i:
 		                    matched_list_full_name_furigana3.append(i)
 		              print(matched_list_full_name_furigana3)
 		              print(len(matched_list_full_name_furigana3))
                       
 		              matched_list_full_name_furigana4 = []
 		              for i in list_2:
 		                for j in furigana.fullname_furigana_value_mat:
 		                  if i == j:
 		                    matched_list_full_name_furigana4.append(i)
 		              print(matched_list_full_name_furigana4)
 		              print(len(matched_list_full_name_furigana4))

 		              if len(matched_list_full_name_furigana3) > 0 \
                           and len(matched_list_full_name_furigana4) == 0:
 		                driver.find_element_by_name(matched_list_full_name_furigana3[0]).clear()
 		                driver.find_element_by_name(matched_list_full_name_furigana3[0]).send_keys(adid.m_textCtrl18.GetValue())
 		                input_history.append("氏名ふりがな")
 		                print(matched_list_full_name_furigana3)

 		              elif len(matched_list_full_name_furigana3) == 0 \
                           and len(matched_list_full_name_furigana4) > 0:
 		                driver.find_element_by_name(matched_list_full_name_furigana4[0]).clear()
 		                driver.find_element_by_name(matched_list_full_name_furigana4[0]).send_keys(adid.m_textCtrl18.GetValue())
 		                input_history.append("氏名ふりがな")
 		                print(matched_list_full_name_furigana4)


#リストインデックスに関するエラー回避                    
 		        except IndexError as e:
 		          print(e)


#「フルネームカタカナ」に関するテキスト要素があるか否かの確認
 		        try:
 		          matched_list_full_name_katakana1 = []
 		          matched_list_full_name_katakana2 = []
 		          print(list_2)
 		          print("「フルネームカタカナ」に関するテキスト要素があるか否かの確認")
 		          for i in items_1:
 		            for j in furigana.fullname_katakana:
 		              if not j in i:
 		                pass
 		              elif j in i:
 		                matched_list_full_name_katakana1.append(i)
# 		          print(matched_list_full_name_katakana1)
 		          print(len(matched_list_full_name_katakana1))
 		          for i in list_1:
 		            for j in furigana.fullname_katakana:
 		              if not j in i:
 		                pass
 		              elif j in i:
 		                matched_list_full_name_katakana2.append(i)
# 		          print(matched_list_full_name_katakana2)
 		          print(len(matched_list_full_name_katakana2))


#「items_1」又は「list_1」のどちらかに含まれる場合は以下のコーディングを実行
 		          if not len(matched_list_full_name_katakana1) == 0 \
                       or not len(matched_list_full_name_katakana2) == 0:

 		            matched_list_seimei_katakana1 = []
 		            for i in list_2:
 		              for j in furigana.seimei_katakana_value_inc:
 		                if j in i:
 		                  matched_list_seimei_katakana1.append(i)
 		            print(matched_list_seimei_katakana1)
 		            print(len(matched_list_seimei_katakana1))

 		            matched_list_seimei_katakana2 = []
 		            for i in list_2:
 		              for j in furigana.seimei_katakana_value_mat:
 		                if i == j:
 		                  matched_list_seimei_katakana2.append(i)
 		            print(matched_list_seimei_katakana2)
 		            print(len(matched_list_seimei_katakana2))


#リストインデックスに関するエラー回避                    
# 		        except IndexError as e:
# 		          print(e)
                    
                    
#カタカナ（姓＋名）
 		            if len(matched_list_seimei_katakana1) > 0 \
                         and len(matched_list_seimei_katakana2) == 0:
 		              print(len(matched_list_seimei_katakana1))
 		              print("カタカナ（姓＋名）：リスト「seimei_katakana_value_inc」内の要素あり")
 		              elemName0 = driver.find_element_by_name(matched_list_seimei_katakana1[0])
 		              elemName1 = driver.find_element_by_name(matched_list_seimei_katakana1[1])

 		              if len(matched_list_seimei_katakana1) == 2:
 		                elemName0.send_keys(adid.m_textCtrl22.GetValue())
 		                input_history.append(adid.m_textCtrl22.GetValue())
 		                print(matched_list_seimei_katakana1[0])
 		                elemName1.send_keys(adid.m_textCtrl23.GetValue())
 		                input_history.append(adid.m_textCtrl23.GetValue())
 		                print(matched_list_seimei_katakana1[1])

 		              elif len(matched_list_seimei_katakana1) == 1:
 		                elemName0.send_keys(adid.m_textCtrl22.GetValue())
 		                input_history.append(adid.m_textCtrl22.GetValue())
 		                print(matched_list_seimei_katakana1[0])
 		                elemName0.send_keys("　" + adid.m_textCtrl23.GetValue())
 		                input_history.append(adid.m_textCtrl23.GetValue())
 		                print(matched_list_seimei_katakana1[0])


 		            elif len(matched_list_seimei_katakana1) == 0 \
                         and len(matched_list_seimei_katakana2) > 0:
 		              print(len(matched_list_seimei_katakana2))

 		              if len(matched_list_seimei_katakana2) == 2:
 		                elemName2 = driver.find_element_by_name(matched_list_seimei_katakana2[0])
 		                elemName3 = driver.find_element_by_name(matched_list_seimei_katakana2[1])
 		                print("カタカナ（姓＋名）：リスト「seimei_katakana_value_mat」内の要素が２個")
 		                elemName2.send_keys(adid.m_textCtrl22.GetValue())
 		                input_history.append(adid.m_textCtrl22.GetValue())
 		                print(matched_list_seimei_katakana2[0])
 		                elemName3.send_keys(adid.m_textCtrl23.GetValue())
 		                input_history.append(adid.m_textCtrl23.GetValue())
 		                print(matched_list_seimei_katakana2[1])

 		              elif len(matched_list_seimei_katakana2) == 1:
 		                elemName2 = driver.find_element_by_name(matched_list_seimei_katakana2[0])
 		                print("カタカナ（姓＋名）：リスト「seimei_katakana_value_mat」内の要素が１個")
 		                elemName2.send_keys(adid.m_textCtrl22.GetValue())
 		                input_history.append(adid.m_textCtrl22.GetValue())
 		                print(matched_list_seimei_katakana2[0])
 		                elemName2.send_keys("　" + adid.m_textCtrl23.GetValue())
 		                input_history.append(adid.m_textCtrl23.GetValue())
 		                print(matched_list_seimei_katakana2[0])


#フルネームふりがな（通常パターン）
#「matched_list_seimei_katakana1」及び「matched_list_seimei_katakana2」内のどちらにも要素が無かった場合
#「list_2（name値）」内の要素と一致するかを確認
 		            elif len(matched_list_seimei_katakana1) == 0 \
                         and len(matched_list_seimei_katakana2) == 0:
 		              print("フルネームふりがな（通常パターン）：「matched_list_seimei_katakana1」及び「matched_list_seimei_katakana2」内のどちらにも要素が無かった場合 \
                       「list_2（name値）」内の要素と一致するかを確認")
# 		        try:
 		              matched_list_full_name_katakana3 = []
 		              for i in list_2:
 		                for j in furigana.fullname_katakana_value_inc:
 		                  if j in i:
 		                    matched_list_full_name_katakana3.append(i)
                       
#指定キーワードを除く
 		              matched_list_full_name_katakana3 = [i for i in matched_list_full_name_katakana3 if "企業" not in i \
                           or "会社" not in i]
 		              print(matched_list_full_name_katakana3)
 		              print(len(matched_list_full_name_katakana3))
                       
 		              matched_list_full_name_katakana4 = []
 		              for i in list_2:
 		                for j in furigana.fullname_katakana_value_mat:
 		                  if i == j:
 		                    matched_list_full_name_katakana4.append(i)
 		              print(matched_list_full_name_katakana4)
 		              print(len(matched_list_full_name_katakana4))

 		              if len(matched_list_full_name_katakana3) > 0 \
                           and len(matched_list_full_name_katakana4) == 0:
 		                driver.find_element_by_name(matched_list_full_name_katakana3[0]).clear()
 		                driver.find_element_by_name(matched_list_full_name_katakana3[0]).send_keys(adid.m_textCtrl21.GetValue())
 		                input_history.append(adid.m_textCtrl21.GetValue())
 		                print(matched_list_full_name_katakana3)

 		              elif len(matched_list_full_name_katakana3) == 0 \
                           and len(matched_list_full_name_katakana4) > 0:
 		                driver.find_element_by_name(matched_list_full_name_katakana4[0]).clear()
 		                driver.find_element_by_name(matched_list_full_name_katakana4[0]).send_keys(adid.m_textCtrl21.GetValue())
 		                input_history.append(adid.m_textCtrl21.GetValue())
 		                print(matched_list_full_name_katakana4)


#リストインデックスに関するエラー回避                    
 		        except IndexError as e:
 		          print(e)


#郵便番号・住所を入力する為の値抽出リスト作成
 		        try:
 		         print("「都道府県（ドロップダウン選択）」～「建物」がテキストに含まれるか否かの確認")
 		         SELECT_list1 = []
 		         SELECT_list2 = []
 		         for element in soup.find_all("option"): 
 		           		          SELECT_list1.append(element.get("value"))
 		           		          SELECT_list2.append(element.getText())
 		         SELECT_list1 =[i for i in SELECT_list1 if i is not None]
 		         print(SELECT_list1)
 		         SELECT_list2 =[i for i in SELECT_list2 if i is not None]
 		         print(SELECT_list2)

 		         print("「都道府県」「住所」「所在地」がテキスト要素に含まれるか否かの確認")
 		         matched_list_post1 = []
 		         matched_list_post2 = []
 		         for i in items_1:
 		                   for j in location.post_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_post1.append(i)
 		         print(len(matched_list_post1))
 		         for i in list_1:
 		                   for j in location.post_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_post2.append(i)
 		         print(len(matched_list_post2))
                  
#指定キーワードを除く
 		         matched_list_post3 = [i for i in matched_list_post1 if "郵便番号" not in i]
# 		         print(matched_list_post3)
 		         matched_list_post4 = [i for i in matched_list_post2 if "郵便番号" not in i]
# 		         print(matched_list_post4)
 		         matched_list_post5 = [i for i in matched_list_post1 if "都道府県" not in i]
# 		         print(matched_list_post5)
 		         matched_list_post6 = [i for i in matched_list_post2 if "都道府県" not in i]
# 		         print(matched_list_post6)
 		         matched_list_post7 = [i for i in matched_list_post1 if "都道府県" not in i \
                                  and "郵便番号" not in i]
# 		         print(matched_list_post7)
 		         matched_list_post8 = [i for i in matched_list_post2 if "都道府県" not in i \
                                  and "郵便番号" not in i]
# 		         print(matched_list_post8)
 		         matched_list_post9 = [i for i in matched_list_post1 if "都道府県" not in i \
                                  and "郵便番号" not in i \
                                      and "住所" not in i]
# 		         print(matched_list_post9)
 		         matched_list_post10 = [i for i in matched_list_post2 if "都道府県" not in i \
                                  and "郵便番号" not in i \
                                      and "住所" not in i]
# 		         print(matched_list_post10)
                  
 		         print("郵便番号以降の住所を入力するためname値を取得")
 		         matched_list_address_value = []
 		         for i in list_2:
 		                     for j in location.address_value_inc:
 		                       if not j in i:
 		                         pass
 		                       elif j in i:
 		                         matched_list_address_value.append(i)
 		                     for j in location.address_value_mat:
 		                       if not j in i:
 		                         pass
 		                       elif j in i:
 		                         matched_list_address_value.append(i)
 		         print("matched_list_address_value（name値）:" + str(matched_list_address_value))

#「list_2」にキーワード"mail"が含まれない場合
 		         if len([i for i in list_2 if "mail" in i]) == 0:
 		           matched_list_address_value = [i for i in matched_list_address_value if "address" not in i]
 		           print("matched_list_address_value（name値）:" + str(matched_list_address_value))

#重複した要素を削除し、新たなリストを生成
 		         if len(matched_list_address_value) > 2:
 		           matched_list_address_value = list(dict.fromkeys(matched_list_address_value))
 		           print(matched_list_address_value)

 		         if len(matched_list_address_value) == 1:
 		           print("「matched_list_address_value」が１個存在します")
 		         if len(matched_list_address_value) > 2:
 		           print("「matched_list_address_value」が複数個存在します")
 		         elif len(matched_list_address_value) == 0:
 		           print("「matched_list_address_value」は存在しません")


 		         print("郵便番号以降の住所を入力するためのid値を取得")
 		         matched_list_address_id = []
 		         for i in list_2d:
 		                     for j in location.address_value_inc:
 		                       if not j in i:
 		                         pass
 		                       elif j in i:
 		                         matched_list_address_id.append(i)
 		                     for j in location.address_value_mat:
 		                       if not j in i:
 		                         pass
 		                       elif j in i:
 		                         matched_list_address_id.append(i)
 		         print("matched_list_address_id:" + str(len(matched_list_address_id)))
                  
 		         print("郵便番号以降の住所を入力するためのname値が連番か否かの確認")
 		         matched_list_address_num_value = []
 		         for i in matched_list_address_value:
 		                     for j in location.address_value_num_inc:
 		                       if not j in i:
 		                         pass
 		                       elif j in i:
 		                         matched_list_address_num_value.append(i)
 		         print("matched_list_address_num_value:" + str(matched_list_address_num_value))

 		         print("郵便番号以降の住所を入力するためのid値が連番か否かの確認")
 		         matched_list_address_num_id = []
 		         for i in matched_list_address_id:
 		                     for j in location.address_value_num_inc:
 		                       if not j in i:
 		                         pass
 		                       elif j in i:
 		                         matched_list_address_num_id.append(i)
 		         print(len(matched_list_address_num_id))
                  
 		         matched_list_build_value = []
 		         matched_list_pref_value = []
 		         for i in list_2:
 		                     for j in location.build_value_inc:
 		                       if not j in i:
 		                         pass
 		                       elif j in i:
 		                         matched_list_build_value.append(i)
 		                     for j in prefectures.pref_value_inc:
 		                       if not j in i:
 		                         pass
 		                       elif j in i:
 		                         matched_list_pref_value.append(i)

 		         print("「list_2」に「build_value_inc」が含まれるか否かの確認結果：" + str(len(matched_list_build_value)))
 		         print("「list_2」に「pref_value_inc」が含まれるか否かの確認結果：" + str(len(matched_list_pref_value)))
                  
 		         matched_list_post_value = []
 		         for i in list_2:
 		                 for j in location.post_value_inc:
 		                   if j in i:
 		                     matched_list_post_value.append(i)
 		         print("matched_list_post_value:" + str(len(matched_list_post_value)))

#指定キーワードを除く
 		         matched_list_post_value1 = [i for i in matched_list_post_value if "num" not in i \
                                        and "validator" not in i \
                                            and "tel" not in i]
 		         print(matched_list_post_value1)

 		         print("「建物名」等に関するテキスト要素が含まれている")
 		         matched_list_build1 = []
 		         matched_list_build2 = []
 		         for i in items_1:
 		                   for j in location.build_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_build1.append(i)
 		         print(len(matched_list_build1))
 		         for i in list_1:
 		                   for j in location.build_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_build2.append(i)
 		         print(len(matched_list_build2))


#上記の値抽出リストを元に入力パターンを分ける
 		         print("SELECT_list_1に「東京都」が含まれない、又はSELECT_list2に「都道府県」が含まれるか否かの確認")
 		         if not len([i for i in SELECT_list1 if adid.m_comboBox6.GetValue() in i]) == 0 \
                              or len([i for i in SELECT_list2 if "都道府県" in i]) > 0 \
								or len([i for i in SELECT_list2 if adid.m_comboBox6.GetValue() in i]) > 0:
 		             list_6 = []
 		             for element5 in soup.find_all("select"):
 		           		          list_6.append(element5.get("name"))
 		             list_6 =[i for i in list_6 if i is not None]
 		             print(list_6)
 		             list_7 = []
 		             for element5 in soup.find_all("select"):
 		           		          list_7.append(element5.get("id"))
 		             list_7 =[i for i in list_7 if i is not None]
 		             print(list_7)


 		             if len([i for i in items_1 if "都道府県" in i]) > 0 \
 		           		            or not len(list_6) == 0:
 		               print("「都道府県」に関するテキスト要素が含まれている")
 		               matched_list_pref1 = []
 		               matched_list_pref2 = []
 		               for i in list_6:
 		                 for j in prefectures.pref_value_inc:
 		                   if j in i:
 		                     matched_list_pref1.append(i)
 		               print(len(matched_list_pref1))
 		               for i in list_6:
 		                 for j in prefectures.pref_value_mat:
 		                   if j == i:
 		                     matched_list_pref2.append(i)
 		               print(len(matched_list_pref2))

 		               dropdown = driver.find_element_by_name(list_6[0])
 		               select = Select(dropdown)

#都道府県番号対応予定
# 		               try:
 		               if len([i for i in SELECT_list1 if "13" in i]) > 0:
 		           		            SELECT_list3 = [i for i in SELECT_list1 if "13" in i]
 		           		            select.select_by_value(SELECT_list3[0])
 		           		            input_history.append(SELECT_list3[0])
 		           		            print("都道府県番号で選択済み：" + str(len(SELECT_list3[0])))
 		               elif len([i for i in SELECT_list1 if adid.m_comboBox6.GetValue() in i]) > 0:
 		           		            SELECT_list3 = [i for i in SELECT_list1 if adid.m_comboBox6.GetValue() in i]
 		           		            select.select_by_value(SELECT_list3[0])
 		           		            input_history.append(SELECT_list3[0])
 		           		            print("都道府県で選択済み：" + str(len(SELECT_list3[0])))
                                        
# 		               except:
# 		                 pass

#仮コーディング
 		               print("「matched_list_address」「matched_list_address_value」を各２つリスト化")
 		               matched_list_address1 = []
 		               matched_list_address2 = []
 		               for i in items_1:
 		                 for j in location.address_inc:
 		                   if not j in i:
 		                     pass
 		                   elif j in i:
 		                     matched_list_address1.append(i)
 		               print("matched_list_address1（テキスト要素）：" + str(len(matched_list_address1)))
 		               for i in list_1:
 		                 for j in location.address_inc:
 		                   if not j in i:
 		                     pass
 		                   elif j in i:
 		                     matched_list_address2.append(i)
 		               print("matched_list_address2（テキスト要素）：" + str(len(matched_list_address2)))
                          
 		               print("「建物名」又は「市区町村名」「番地」に関するテキスト要素が含まれていない、且つ「list_2」に住所に関する要素が含まれているか否かの確認")
 		               matched_list_address_value1 = []
 		               matched_list_address_value2 = []
 		               for i in list_2:
 		                 for j in location.address_value_inc:
 		                   if j in i:
 		                     matched_list_address_value1.append(i)
#指定キーワードを除く
 		               matched_list_address_value1 = [i for i in matched_list_address_value1 if "必須" not in i]
 		               print("matched_list_address_value1（取得値）：" + str(len(matched_list_address_value1)))
 		               
 		               for i in list_2:
 		                 for j in location.address_value_mat:
 		                   if j in i:
 		                     matched_list_address_value2.append(i)
#指定キーワードを除く
 		               matched_list_address_value2 = [i for i in matched_list_address_value2 if "必須" not in i]
 		               print("matched_list_address_value2（取得値）：" + str(len(matched_list_address_value2)))


#都道府県以降の「住所」に関するテキスト要素、且つ「list_2」に郵便番号（value値）が含まれているか否かの確認
 		               if len([i for i in list_1 if "住所" in i]) > 0 \
 		           		            and len(matched_list_post_value1) > 0 \
										or len([i for i in list_1 if "住所" in i]) == 0 \
											and len(matched_list_post_value1) > 0:
 		                 if len(matched_list_post_value1) == 1:
 		                   print("「list_2」に郵便番号に関する要素が１個含まれていることを確認")
 		                   driver.find_element_by_name(matched_list_post_value1[0]).send_keys(adid.m_textCtrl28.GetValue() + adid.m_textCtrl29.GetValue())
 		                   input_history.append("郵便番号")

# 		                 print("「都道府県」に関するテキスト要素以外、且つ「list_2」に住所に関する要素が含まれているか否かの確認")
 		                   if len(matched_list_build1) == 0 \
                              or len(matched_list_build2) == 0:
 		                     print("建物名に関する値なし")
 		                     try:
 		                       if len(matched_list_address_value1) == 2 \
                                  and len(matched_list_address_value2) == 0:
 		                           print("「市区町村名番地」と「建物名」を別々に入力する形式です")
 		                           print("取得値：" + str(len(matched_list_address_value1)))
# 		                         print(matched_list_address_value2)
                                        
 		                           driver.find_element_by_name(matched_list_address_value1[0]).clear()
 		                           driver.find_element_by_name(matched_list_address_value1[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                          + adid.m_textCtrl31.GetValue())
 		                           input_history.append("市区町村名番地")
 		                           driver.find_element_by_name(matched_list_address_value1[1]).send_keys(adid.m_textCtrl32.GetValue())
 		                           input_history.append("建物名")

 		                       elif len(matched_list_address_value1) == 0 \
                                  and len(matched_list_address_value2) == 2:
 		                           print("「市区町村名番地」と「建物名」を別々に入力する形式です")
 		                           print("取得値：" + str(len(matched_list_address_value2)))
# 		                           print(matched_list_address_value1)

 		                           driver.find_element_by_name(matched_list_address_value2[0]).clear()
 		                           driver.find_element_by_name(matched_list_address_value2[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                          + adid.m_textCtrl31.GetValue())
 		                           input_history.append("市区町村名番地")
 		                           driver.find_element_by_name(matched_list_address_value2[1]).send_keys(adid.m_textCtrl32.GetValue())
 		                           input_history.append("建物名")

 		                       elif len(matched_list_address_value1) > 0 \
                                  and len(matched_list_address_value2) > 0 \
									and len(matched_list_address_value) == 2:
 		                           print("「市区町村名番地」と「建物名」を別々に入力する形式です")
 		                           print("取得値：" + str(matched_list_address_value))
 		                           driver.find_element_by_name(matched_list_address_value[0]).clear()
 		                           driver.find_element_by_name(matched_list_address_value[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                          + adid.m_textCtrl31.GetValue())
 		                           input_history.append("市区町村名番地")
 		                           driver.find_element_by_name(matched_list_address_value[1]).send_keys(adid.m_textCtrl32.GetValue())
 		                           input_history.append("建物名")
								   
 		                       elif len(matched_list_address_value1) == 1 \
                                  and len(matched_list_address_value2) == 0:
 		                           print("入力形式が「市区町村名番地」になっている")
 		                           print(matched_list_address_value1)
 		                           print(matched_list_address_value2)
 		                           driver.find_element_by_name(matched_list_address_value1[0]).clear()
 		                           driver.find_element_by_name(matched_list_address_value1[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                          + adid.m_textCtrl31.GetValue() \
                                                                                              + adid.m_textCtrl32.GetValue())
 		                           input_history.append("市区町村名番地")

 		                       elif len(matched_list_address_value1) == 0 \
                                  and len(matched_list_address_value2) == 1:
 		                           print("入力形式が「市区町村名番地」になっている")
 		                           print(matched_list_address_value1)
 		                           print(matched_list_address_value2)
 		                           driver.find_element_by_name(matched_list_address_value2[0]).clear()
 		                           driver.find_element_by_name(matched_list_address_value2[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                          + adid.m_textCtrl31.GetValue() \
                                                                                              + adid.m_textCtrl32.GetValue())
 		                           input_history.append("市区町村名番地")

 		                       elif len(matched_list_address_value1) == 3 \
                                  and len(matched_list_address_value2) == 0:
 		                           print("「市区町村名」「番地」「建物名」を別々に入力する形式")
 		                           print(matched_list_address_value1)
 		                           print(matched_list_address_value2)
 		                           driver.find_element_by_name(matched_list_address_value1[0]).clear()
 		                           driver.find_element_by_name(matched_list_address_value1[0]).send_keys(adid.m_textCtrl30.GetValue())
 		                           input_history.append("市区町村名")

 		                           driver.find_element_by_name(matched_list_address_value1[1]).send_keys(adid.m_textCtrl31.GetValue())
 		                           input_history.append("番地")
                                                         
 		                           driver.find_element_by_name(matched_list_address_value1[2]).send_keys(adid.m_textCtrl32.GetValue())
 		                           input_history.append("建物名")

 		                       elif len(matched_list_address_value1) == 0 \
                                  and len(matched_list_address_value2) == 3:
 		                         print("「市区町村名」「番地」「建物名」を別々に入力する形式")
 		                         print(matched_list_address_value1)
 		                         print(matched_list_address_value2)
 		                         driver.find_element_by_name(matched_list_address_value2[0]).clear()
 		                         driver.find_element_by_name(matched_list_address_value2[0]).send_keys(adid.m_textCtrl30.GetValue())
 		                         input_history.append("市区町村名")

 		                         driver.find_element_by_name(matched_list_address_value2[1]).send_keys(adid.m_textCtrl31.GetValue())
 		                         input_history.append("番地")
                                                         
 		                         driver.find_element_by_name(matched_list_address_value2[2]).send_keys(adid.m_textCtrl32.GetValue())
 		                         input_history.append("建物名")

#操作できない要素の回避
 		                     except ElementNotInteractableException:
 		                       pass

 		                 elif len(matched_list_post_value1) == 2:
 		                   print("「list_2」に郵便番号に関する要素が２個含まれていることを確認")
 		                   driver.find_element_by_name(matched_list_post_value1[0]).send_keys(adid.m_textCtrl28.GetValue())
 		                   input_history.append("郵便番号１")
 		                   driver.find_element_by_name(matched_list_post_value1[1]).send_keys(adid.m_textCtrl29.GetValue())
 		                   input_history.append("郵便番号２")

# 		                 print("「都道府県」に関するテキスト要素以外、且つ「list_2」に住所に関する要素が含まれているか否かの確認")
 		                   if len(matched_list_build1) == 0 \
                              or len(matched_list_build2) == 0:
 		                     print("建物名に関する値なし")
 		                     try:
 		                       if len(matched_list_address_value1) == 2 \
                                  and len(matched_list_address_value2) == 0:
 		                           print("「市区町村名番地」と「建物名」を別々に入力する形式です")
 		                           print("取得値：" + str(len(matched_list_address_value1)))
# 		                         print(matched_list_address_value2)
                                        
 		                           driver.find_element_by_name(matched_list_address_value1[0]).clear()
 		                           driver.find_element_by_name(matched_list_address_value1[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                          + adid.m_textCtrl31.GetValue())
 		                           input_history.append("市区町村名番地")
 		                           driver.find_element_by_name(matched_list_address_value1[1]).send_keys(adid.m_textCtrl32.GetValue())
 		                           input_history.append("建物名")

 		                       elif len(matched_list_address_value1) == 0 \
                                  and len(matched_list_address_value2) == 2:
 		                           print("「市区町村名番地」と「建物名」を別々に入力する形式です")
 		                           print("取得値：" + str(len(matched_list_address_value2)))
# 		                           print(matched_list_address_value1)

 		                           driver.find_element_by_name(matched_list_address_value2[0]).clear()
 		                           driver.find_element_by_name(matched_list_address_value2[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                          + adid.m_textCtrl31.GetValue())
 		                           input_history.append("市区町村名番地")
 		                           driver.find_element_by_name(matched_list_address_value2[1]).send_keys(adid.m_textCtrl32.GetValue())
 		                           input_history.append("建物名")

 		                       elif len(matched_list_address_value1) > 0 \
                                  and len(matched_list_address_value2) > 0 \
									and len(matched_list_address_value) == 2:
 		                           print("「市区町村名番地」と「建物名」を別々に入力する形式です")
 		                           print("取得値：" + str(matched_list_address_value))
 		                           driver.find_element_by_name(matched_list_address_value[0]).clear()
 		                           driver.find_element_by_name(matched_list_address_value[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                          + adid.m_textCtrl31.GetValue())
 		                           input_history.append("市区町村名番地")
 		                           driver.find_element_by_name(matched_list_address_value[1]).send_keys(adid.m_textCtrl32.GetValue())
 		                           input_history.append("建物名")

 		                       elif len(matched_list_address_value1) == 1 \
                                  and len(matched_list_address_value2) == 0:
 		                           print("入力形式が「市区町村名番地」になっている")
 		                           print(matched_list_address_value1)
 		                           print(matched_list_address_value2)
 		                           driver.find_element_by_name(matched_list_address_value1[0]).clear()
 		                           driver.find_element_by_name(matched_list_address_value1[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                          + adid.m_textCtrl31.GetValue() \
                                                                                              + adid.m_textCtrl32.GetValue())
 		                           input_history.append("市区町村名番地")

 		                       elif len(matched_list_address_value1) == 0 \
                                  and len(matched_list_address_value2) == 1:
 		                           print("入力形式が「市区町村名番地」になっている")
 		                           print(matched_list_address_value1)
 		                           print(matched_list_address_value2)
 		                           driver.find_element_by_name(matched_list_address_value2[0]).clear()
 		                           driver.find_element_by_name(matched_list_address_value2[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                          + adid.m_textCtrl31.GetValue() \
                                                                                              + adid.m_textCtrl32.GetValue())
 		                           input_history.append("市区町村名番地")

 		                       elif len(matched_list_address_value1) == 3 \
                                  and len(matched_list_address_value2) == 0:
 		                           print("「市区町村名」「番地」「建物名」を別々に入力する形式")
 		                           print(matched_list_address_value1)
 		                           print(matched_list_address_value2)
 		                           driver.find_element_by_name(matched_list_address_value1[0]).clear()
 		                           driver.find_element_by_name(matched_list_address_value1[0]).send_keys(adid.m_textCtrl30.GetValue())
 		                           input_history.append("市区町村名")

 		                           driver.find_element_by_name(matched_list_address_value1[1]).send_keys(adid.m_textCtrl31.GetValue())
 		                           input_history.append("番地")
                                                         
 		                           driver.find_element_by_name(matched_list_address_value1[2]).send_keys(adid.m_textCtrl32.GetValue())
 		                           input_history.append("建物名")

 		                       elif len(matched_list_address_value1) == 0 \
                                  and len(matched_list_address_value2) == 3:
 		                         print("「市区町村名」「番地」「建物名」を別々に入力する形式")
 		                         print(matched_list_address_value1)
 		                         print(matched_list_address_value2)
 		                         driver.find_element_by_name(matched_list_address_value2[0]).clear()
 		                         driver.find_element_by_name(matched_list_address_value2[0]).send_keys(adid.m_textCtrl30.GetValue())
 		                         input_history.append("市区町村名")

 		                         driver.find_element_by_name(matched_list_address_value2[1]).send_keys(adid.m_textCtrl31.GetValue())
 		                         input_history.append("番地")
                                                         
 		                         driver.find_element_by_name(matched_list_address_value2[2]).send_keys(adid.m_textCtrl32.GetValue())
 		                         input_history.append("建物名")

#操作できない要素の回避
 		                     except ElementNotInteractableException:
 		                       pass


 		               elif len([i for i in list_1 if "住所" in i]) == 0 \
 		           		            and len(matched_list_post_value1) == 0:
 		                 print("「都道府県」を除く「住所」に関するテキスト要素、且つ郵便番号に関する要素が含まれていないことを確認")

 		                 if len(matched_list_address1) == 0 \
                              or len(matched_list_address2) == 0:
 		                   print("「建物名」又は「市区町村名」「番地」等に関するテキスト要素が含まれていない")
 		                   try:                                
 		                     if len(matched_list_address_value1) == 1 \
                                  and len(matched_list_address_value2) == 0:
 		                       print("入力形式が「市区町村名番地」になっている")
 		                       print(matched_list_address_value1)
 		                       print(matched_list_address_value2)
 		                       driver.find_element_by_name(matched_list_address_value1[0]).clear()
 		                       driver.find_element_by_name(matched_list_address_value1[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                          + adid.m_textCtrl31.GetValue() \
                                                                                              + adid.m_textCtrl32.GetValue())
 		                       input_history.append("市区町村名番地")

 		                     elif len(matched_list_address_value1) == 0 \
                                  and len(matched_list_address_value2) == 1:
 		                       print("入力形式が「市区町村名番地」になっている")
 		                       print(matched_list_address_value1)
 		                       print(matched_list_address_value2)
 		                       driver.find_element_by_name(matched_list_address_value2[0]).clear()
 		                       driver.find_element_by_name(matched_list_address_value2[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                          + adid.m_textCtrl31.GetValue() \
                                                                                              + adid.m_textCtrl32.GetValue())
 		                       input_history.append("市区町村名番地")

 		                     elif len(matched_list_address_value1) == 2 \
                                  and len(matched_list_address_value2) == 0:
 		                       print("「市区町村名」と「番地」を別々に入力する形式")
 		                       print(matched_list_address_value1)
 		                       print(matched_list_address_value2)
                                        
 		                       driver.find_element_by_name(matched_list_address_value1[0]).clear()
 		                       driver.find_element_by_name(matched_list_address_value1[0]).send_keys(adid.m_textCtrl30.GetValue())
 		                       input_history.append("市区町村")
 		                       driver.find_element_by_name(matched_list_address_value1[1]).send_keys(adid.m_textCtrl31.GetValue())
 		                       input_history.append("番地")

 		                     elif len(matched_list_address_value1) == 0 \
                                  and len(matched_list_address_value2) == 2:
 		                       print("「市区町村名」と「番地」を別々に入力する形式")
 		                       print(matched_list_address_value1)
 		                       print(matched_list_address_value2)

 		                       driver.find_element_by_name(matched_list_address_value2[0]).clear()
 		                       driver.find_element_by_name(matched_list_address_value2[0]).send_keys(adid.m_textCtrl30.GetValue())
 		                       input_history.append("市区町村")
 		                       driver.find_element_by_name(matched_list_address_value2[1]).send_keys(adid.m_textCtrl31.GetValue())
 		                       input_history.append("番地")

#追加予定？
# 		                     else:
# 		                       print("「市区町村名番地」＋「建物名」の組み合わせで入力する形式")
# 		                       print(matched_list_address_value1)
# 		                       print(matched_list_address_value2)

# 		                       driver.find_element_by_name(matched_list_address_value1[0]).clear()
# 		                       driver.find_element_by_name(matched_list_address_value1[0]).send_keys(adid.m_textCtrl30.GetValue()) \
#                                    + adid.m_textCtrl31.GetValue()
# 		                       input_history.append("市区町村名番地")
# 		                       driver.find_element_by_name(matched_list_address_value1[1]).send_keys(adid.m_textCtrl32.GetValue())
# 		                       input_history.append("建物名")

#操作できない要素の回避
 		                   except ElementNotInteractableException:
 		                     pass


 		                 elif not len(matched_list_address1) == 0 \
                              or not len(matched_list_address2) == 0:
 		                   print("「建物名」又は「市区町村名」「番地」等に関するテキスト要素が含まれている")

 		                   try:                                
 		                     if len(matched_list_address_value1) == 1 \
                                  and len(matched_list_address_value2) == 0:
 		                       print("入力形式が「市区町村名番地」になっている")
 		                       print(matched_list_address_value1)
 		                       print(matched_list_address_value2)
 		                       driver.find_element_by_name(matched_list_address_value1[0]).clear()
 		                       driver.find_element_by_name(matched_list_address_value1[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                          + adid.m_textCtrl31.GetValue() \
                                                                                              + adid.m_textCtrl32.GetValue())
 		                       input_history.append("市区町村名番地")

 		                     elif len(matched_list_address_value1) == 0 \
                                  and len(matched_list_address_value2) == 1:
 		                       print("入力形式が「市区町村名番地」になっている")
 		                       print(matched_list_address_value1)
 		                       print(matched_list_address_value2)
 		                       driver.find_element_by_name(matched_list_address_value2[0]).clear()
 		                       driver.find_element_by_name(matched_list_address_value2[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                          + adid.m_textCtrl31.GetValue() \
                                                                                              + adid.m_textCtrl32.GetValue())
 		                       input_history.append("市区町村名番地")

 		                     elif len(matched_list_address_value1) == 2 \
                                  and len(matched_list_address_value2) == 0:
 		                       print("「市区町村名」と「番地」を別々に入力する形式")
 		                       print(matched_list_address_value1)
 		                       print(matched_list_address_value2)
                                        
 		                       driver.find_element_by_name(matched_list_address_value1[0]).clear()
 		                       driver.find_element_by_name(matched_list_address_value1[0]).send_keys(adid.m_textCtrl30.GetValue())
 		                       input_history.append("市区町村")
 		                       driver.find_element_by_name(matched_list_address_value1[1]).send_keys(adid.m_textCtrl31.GetValue())
 		                       input_history.append("番地")

 		                     elif len(matched_list_address_value1) == 0 \
                                  and len(matched_list_address_value2) == 2:
 		                       print("「市区町村名」と「番地」を別々に入力する形式")
 		                       print(matched_list_address_value1)
 		                       print(matched_list_address_value2)

 		                       driver.find_element_by_name(matched_list_address_value2[0]).clear()
 		                       driver.find_element_by_name(matched_list_address_value2[0]).send_keys(adid.m_textCtrl30.GetValue())
 		                       input_history.append("市区町村")
 		                       driver.find_element_by_name(matched_list_address_value2[1]).send_keys(adid.m_textCtrl31.GetValue())
 		                       input_history.append("番地")

#操作できない要素の回避
 		                   except ElementNotInteractableException:
 		                     pass


 		               elif len([i for i in list_1 if "住所" in i]) > 0 \
 		           		            and len(matched_list_post_value1) == 0:
 		                 print("「都道府県」を除く「住所」に関するテキスト要素が含まれ、且つ郵便番号に関する要素が含まれていない")

 		                 if len(matched_list_address1) == 0 \
                              or len(matched_list_address2) == 0:
 		                   print("「建物名」又は「市区町村名」「番地」等に関するテキスト要素が含まれていない")
 		                   try:                                
 		                     if len(matched_list_address_value1) == 1 \
                                  and len(matched_list_address_value2) == 0:
 		                       print("入力形式が「市区町村名番地」になっている")
 		                       print(matched_list_address_value1)
 		                       print(matched_list_address_value2)
 		                       driver.find_element_by_name(matched_list_address_value1[0]).clear()
 		                       driver.find_element_by_name(matched_list_address_value1[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                          + adid.m_textCtrl31.GetValue() \
                                                                                              + adid.m_textCtrl32.GetValue())
 		                       input_history.append("市区町村名番地")

 		                     elif len(matched_list_address_value1) == 0 \
                                  and len(matched_list_address_value2) == 1:
 		                       print("入力形式が「市区町村名番地」になっている")
 		                       print(matched_list_address_value1)
 		                       print(matched_list_address_value2)
 		                       driver.find_element_by_name(matched_list_address_value2[0]).clear()
 		                       driver.find_element_by_name(matched_list_address_value2[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                          + adid.m_textCtrl31.GetValue() \
                                                                                              + adid.m_textCtrl32.GetValue())
 		                       input_history.append("市区町村名番地")

 		                     elif len(matched_list_address_value1) == 2 \
                                  and len(matched_list_address_value2) == 0:
 		                       print("「市区町村名」と「番地」を別々に入力する形式")
 		                       print(matched_list_address_value1)
 		                       print(matched_list_address_value2)
                                        
 		                       driver.find_element_by_name(matched_list_address_value1[0]).clear()
 		                       driver.find_element_by_name(matched_list_address_value1[0]).send_keys(adid.m_textCtrl30.GetValue())
 		                       input_history.append("市区町村")
 		                       driver.find_element_by_name(matched_list_address_value1[1]).send_keys(adid.m_textCtrl31.GetValue())
 		                       input_history.append("番地")

 		                     elif len(matched_list_address_value1) == 0 \
                                  and len(matched_list_address_value2) == 2:
 		                       print("「市区町村名」と「番地」を別々に入力する形式")
 		                       print(matched_list_address_value1)
 		                       print(matched_list_address_value2)

 		                       driver.find_element_by_name(matched_list_address_value2[0]).clear()
 		                       driver.find_element_by_name(matched_list_address_value2[0]).send_keys(adid.m_textCtrl30.GetValue())
 		                       input_history.append("市区町村")
 		                       driver.find_element_by_name(matched_list_address_value2[1]).send_keys(adid.m_textCtrl31.GetValue())
 		                       input_history.append("番地")

#操作できない要素の回避
 		                   except ElementNotInteractableException:
 		                     pass

 		             else:
 		               print("SELECT_list_1、又はSELECT_list2に「都道府県」が含まれるか否かの確認ができません")
                        

#（郵便番号入力から開始）
 		         elif not len([i for i in list_1 if "郵便番号" in i]) == 0 \
                      or not len([i for i in items_1 if "郵便番号" in i]) == 0:

 		                 if len(matched_list_post3) > 0 \
							  or len(matched_list_post4) > 0 \
								  or len(matched_list_post_value1) > 0:
 		                   print("郵便番号から入力を開始する形式")

 		                   if len(matched_list_post_value1) == 1:
 		                           driver.find_element_by_name(matched_list_post_value1[0]).send_keys(adid.m_textCtrl28.GetValue() + adid.m_textCtrl29.GetValue())
 		                           input_history.append("郵便番号")
 		                           print("郵便番号７桁")
 		                   elif len(matched_list_post_value1) > 1:
 		           		           driver.find_element_by_name(matched_list_post_value1[0]).send_keys(adid.m_textCtrl28.GetValue())
 		           		           input_history.append(adid.m_textCtrl28.GetValue())
 		           		           print("郵便番号３桁")
 		           		           driver.find_element_by_name(matched_list_post_value1[1]).send_keys(adid.m_textCtrl29.GetValue())
 		           		           input_history.append(adid.m_textCtrl29.GetValue())
 		           		           print("郵便番号４桁")


#郵便番号以降の住所入力が連番
 		                   if len(matched_list_address_num_value) > 0:
 		                     print("郵便番号以降の住所入力値に連番要素あり")
 		                     matched_list_build = []
 		                     for i in list_1:
 		                       for j in location.build_inc:
 		                         if not j in i:
 		                           pass
 		                         elif j in i:
 		                           matched_list_build.append(i)
 		                     for i in items_1:
 		                       for j in location.build_inc:
 		                         if not j in i:
 		                           pass
 		                         elif j in i:
 		                           matched_list_build.append(i)
 		                     print("テキスト要素にリスト「build_inc」が含まれるか否かを確認")
# 		                     print(len(matched_list_build))

 		                     if len([i for i in list_1 if "都道府県" in i]) == 0 \
								  and not len([i for i in list_1 if "建物名" in i or "ビル" in i]) == 0 \
									  or len([i for i in items_1 if "都道府県" in i]) == 0 \
										  and not len([i for i in items_1 if "建物名" in i or "ビル" in i]) == 0 \
											  and len(matched_list_address_value) == 2:
 		           		           print("テキスト要素に「都道府県」を含まない且つ「建物名」が含まれる")
# 		           		           print(len(matched_list_address_value))
 		           		           driver.find_element_by_name(matched_list_address_value[0]).clear()
 		           		           driver.find_element_by_name(matched_list_address_value[0]).clear()
 		           		           driver.find_element_by_name(matched_list_address_value[0]).send_keys(adid.m_comboBox6.GetValue() \
                                                                                + adid.m_textCtrl30.GetValue() \
                                                                                    + adid.m_textCtrl31.GetValue())
 		           		           input_history.append(adid.m_comboBox6.GetValue() \
                                                + adid.m_textCtrl30.GetValue() \
                                                    + adid.m_textCtrl31.GetValue())
 		           		           print("住所１：" + str(adid.m_comboBox6.GetValue() \
                                                                                + adid.m_textCtrl30.GetValue() \
                                                                                    + adid.m_textCtrl31.GetValue()))   
 		           		           driver.find_element_by_name(matched_list_address_value[1]).send_keys(adid.m_textCtrl32.GetValue())
 		           		           input_history.append(adid.m_textCtrl32.GetValue())
 		           		           print("住所２：" + str(adid.m_textCtrl32.GetValue()))

 		                     elif len(matched_list_build) > 0 \
								  and (len(matched_list_address_num_value)) > 3:
 		           		           print("「matched_list_build」の要素が存在し、且つ住所入力値に３つ以上の連番要素が存在する")
 		           		           driver.find_element_by_name(matched_list_address_num_value[0]).send_keys(adid.m_comboBox6.GetValue())
 		           		           input_history.append(adid.m_comboBox6.GetValue())
 		           		           driver.find_element_by_name(matched_list_address_num_value[1]).send_keys(adid.m_textCtrl30.GetValue())
 		           		           input_history.append(adid.m_textCtrl30.GetValue())
 		           		           driver.find_element_by_name(matched_list_address_num_value[2]).send_keys(adid.m_textCtrl31.GetValue())
 		           		           input_history.append(adid.m_textCtrl31.GetValue())
 		           		           driver.find_element_by_name(matched_list_address_num_value[len(matched_list_address_num_value)+1]).send_keys(adid.m_textCtrl32.GetValue())
 		           		           input_history.append(adid.m_textCtrl32.GetValue())

 		                     elif len(matched_list_build) > 0 \
								  and (len(matched_list_address_num_value)) == 2:
 		           		           print("「matched_list_build」の要素が存在し、且つ住所入力値に２つの連番要素が存在する")
 		           		           driver.find_element_by_name(matched_list_address_num_value[0]).send_keys(adid.m_comboBox6.GetValue() \
                                                                                + adid.m_textCtrl30.GetValue() \
                                                                                    + adid.m_textCtrl31.GetValue())
 		           		           input_history.append(adid.m_comboBox6.GetValue() \
                                                + adid.m_textCtrl30.GetValue() \
                                                    + adid.m_textCtrl31.GetValue())                                           
 		           		           driver.find_element_by_name(matched_list_address_num_value[1]).send_keys(adid.m_textCtrl32.GetValue())
 		           		           input_history.append(adid.m_textCtrl32.GetValue())

 		                     else:
 		                       print(list_14sc)
 		                       if not len([i for i in list_14sc if "町名まで" in i \
									or "番地以下" in i]) == 0:
 		                         print("テキスト要素に「町名まで」「番地以下」が含まれる")
 		                         driver.find_element_by_name(matched_list_address_num_value[0]).send_keys(adid.m_comboBox6.GetValue() \
                                                                                                     + adid.m_textCtrl30.GetValue())
 		                         input_history.append(adid.m_comboBox6.GetValue() \
                                               + adid.m_textCtrl30.GetValue())

 		                         driver.find_element_by_name(matched_list_address_num_value[1]).send_keys(adid.m_textCtrl31.GetValue() \
                                                                                                     + adid.m_textCtrl32.GetValue())
 		                         input_history.append(adid.m_textCtrl31.GetValue() \
                                              + adid.m_textCtrl32.GetValue())
 		                       else:
 		                         print("テキスト要素に「町名まで」「番地以下」は含まれない")
 		                         driver.find_element_by_name(matched_list_address_num_value[0]).send_keys(adid.m_comboBox6.GetValue())
 		                         input_history.append(adid.m_comboBox6.GetValue())
 		                         driver.find_element_by_name(matched_list_address_num_value[1]).send_keys(adid.m_textCtrl30.GetValue())
 		                         input_history.append(adid.m_textCtrl30.GetValue())
 		                         driver.find_element_by_name(matched_list_address_num_value[2]).send_keys(adid.m_textCtrl31.GetValue())
 		                         input_history.append(adid.m_textCtrl31.GetValue())
                                       

#郵便番号以降の住所入力が連番でない（値：都道府県・市区町村・建物名毎）

#（「都道府県」～「建物」の全てがテキストに含まれない）
 		                   elif len(matched_list_address_num_value) == 0:
 		                     print("郵便番号以降の住所入力値に連番要素なし")
 		                     matched_list_address = []
 		                     for i in list_1:
 		                       for j in location.address_inc:
 		                         if not j in i:
 		                           pass
 		                         elif j in i:
 		                           matched_list_address.append(i)
 		                     for i in items_1:
 		                       for j in location.address_inc:
 		                         if not j in i:
 		                           pass
 		                         elif j in i:
 		                           matched_list_address.append(i)
 		                     print("テキスト要素にリスト「address_inc」が含まれるか否かを確認")
 		                     print(len(matched_list_address))


 		                     if len([i for i in list_1 if "都道府県" in i]) == 0 \
								  and len(matched_list_address) == 0 \
									   or len([i for i in items_1 if "都道府県" in i]) == 0 \
										   and len(matched_list_address) == 0 \
											   and len([i for i in matched_list_address_value if "0" in i or "1" in i]) == 0 \
												   and len(matched_list_build_value) == 0 \
													   and len(matched_list_pref_value) == 0:

 		                       print("「list_2」に「matched_list_build_value」「matched_list_pref_value」が全く含まれない")
 		                       Municipal = driver.find_element_by_name(matched_list_address_value[0])
 		                       Municipal.clear()
 		                       Municipal.send_keys(adid.m_comboBox6.GetValue() \
									+ adid.m_textCtrl30.GetValue() \
										+ adid.m_textCtrl31.GetValue() \
											+ adid.m_textCtrl32.GetValue())
 		                       print("matched_list_address_value（name値）:" + str(matched_list_address_value[0]))
 		                       input_history.append("住所")

 		                     elif len([i for i in matched_list_address_value if "0" in i or "1" in i]) == 0 \
								  and len([i for i in list_1 if "都道府県" in i]) > 0 \
									  or len([i for i in items_1 if "都道府県" in i]) > 0 \
										  and len(matched_list_pref_value) > 0:
 		                       pref = driver.find_element_by_name(matched_list_pref_value[0])
 		                       pref.clear()
 		                       pref.send_keys(adid.m_comboBox6.GetValue())
 		                       input_history.append("都道府県")
 		                       print("「都道府県」を入力済み")
                       
 		                       if len(matched_list_address_value) == 1:
 		                         Municipal = driver.find_element_by_name(matched_list_address_value[0])
 		                         Municipal.clear()
 		                         Municipal.send_keys(adid.m_textCtrl30.GetValue() \
									  + adid.m_textCtrl31.GetValue() \
										  + adid.m_textCtrl32.GetValue())
 		                         input_history.append("住所")
 		                         print("「都道府県」以降の住所入力済み")

 		                       elif len(matched_list_address_value) == 4:
 		                         Municipal = driver.find_element_by_name(matched_list_address_value[1])
 		                         Municipal.clear()
 		                         Municipal.send_keys(adid.m_textCtrl30.GetValue())
 		                         input_history.append("市区町村")
 		                         Address_name = driver.find_element_by_name(matched_list_address_value[2])
 		                         Address_name.clear()
 		                         Address_name.send_keys(adid.m_textCtrl31.GetValue())
 		                         input_history.append("番地")
 		                         Building = driver.find_element_by_name(matched_list_address_value[3])
 		                         Building.clear()
 		                         Building.send_keys(adid.m_textCtrl32.GetValue())
 		                         input_history.append("建物")
 		                         print("「都道府県」以降を（市区町村＋番地＋建物）の組み合わせで入力済み")


#郵便番号以降の住所入力が連番でない
 		                     elif len(matched_list_build_value) > 0:
 		           		            print("郵便番号以降の住所入力（value：「都道府県含む住所」「建物名」が別々に存在）")
 		           		            driver.find_element_by_name(matched_list_address_value[0]).send_keys(adid.m_comboBox6.GetValue() \
                                     + adid.m_textCtrl30.GetValue() \
                                         + adid.m_textCtrl31.GetValue())
 		           		            input_history.append("住所")
 		           		            driver.find_element_by_name(matched_list_build_value[0]).send_keys(adid.m_textCtrl32.GetValue())
 		           		            input_history.append("建物名")
 		           		            print("郵便番号以降を「都道府県含む住所」「建物名」の組み合わせで入力済み")

#（都道府県＋市区町村）
 		                     elif len([i for i in matched_list_address_value if "0" in i or "1" in i]) == 0 \
								  and len([i for i in items_1 if "都道府県" in i \
									  and "市区町村" in i]) > 0 \
										  or len([i for i in list_1 if "都道府県" in i \
											  and "市区町村" in i]) > 0:
 		           		            Municipal = driver.find_element_by_name(matched_list_address_value[0])
 		           		            Municipal.clear()
 		           		            Municipal.send_keys(adid.m_textCtrl30.GetValue() + adid.m_textCtrl31.GetValue())
 		           		            input_history.append("市区町村")
 		           		            print("「都道府県」＋「市区町村」の組み合わせで入力済み")

#更に「matched_list_build」の値が存在する
 		           		            if len([i for i in matched_list_address_value if "0" in i or "1" in i]) == 0 \
                                             and len([i for i in items_1 if "都道府県" in i \
                                                 and "市区町村" in i]) > 0 \
													 or len([i for i in list_1 if "都道府県" in i \
														 and "市区町村" in i]) > 0 \
															 and len(matched_list_build) > 0:
 		           		              Building = driver.find_element_by_name(matched_list_build_value[0])
 		           		              Building.clear()
 		           		              Building.send_keys(adid.m_textCtrl32.GetValue())
 		           		              input_history.append("建物名")

#2022.8.16
#（都道府県＋市区町村＋建物名）
 		                     elif len([i for i in matched_list_address_value if "0" in i or "1" in i]) == 0 \
								  and len([i for i in items_1 if "都道府県" in i \
									  and "市区町村" in i]) == 0 \
										  or len([i for i in list_1 if "都道府県" in i \
											  and "市区町村" in i]) == 0:
 		           		            Municipal = driver.find_element_by_name(matched_list_address_value[0])
 		           		            Municipal.clear()
 		           		            Municipal.send_keys(adid.m_comboBox6.GetValue() \
										+ adid.m_textCtrl30.GetValue() \
											+ adid.m_textCtrl31.GetValue() \
												+ adid.m_textCtrl32.GetValue())
 		           		            input_history.append("都道府県市区町村建物名")
 		           		            print("「都道府県」＋「市区町村」＋「建物名」の組み合わせで入力済み")

#（都道府県入力から開始）
 		         elif len(matched_list_post3) > 0 \
					  or len(matched_list_post4) > 0:
 		            if len(matched_list_address_value) > 0:
 		              if len([i for i in matched_list_address_value if "0" in i or "1" in i]) > 0:
 		               if len(matched_list_address_num_value) == 2:
 		           		           driver.find_element_by_name(matched_list_address_num_value[0]).send_keys(adid.m_comboBox6.GetValue()
                                                                                   + adid.m_textCtrl30.GetValue())
 		           		           driver.find_element_by_name(matched_list_address_num_value[1]).send_keys(adid.m_textCtrl31.GetValue()
                                                                                   + adid.m_textCtrl32.GetValue())
 		           		           input_history.append("住所")
 		           		           print("都道府県から住所入力済み（取得値：２個）")
 		               elif len(matched_list_address_num_value) > 2:
 		           		           driver.find_element_by_name(matched_list_address_num_value[0]).send_keys(adid.m_comboBox6.GetValue())
 		           		           input_history.append(adid.m_comboBox6.GetValue())
 		           		           driver.find_element_by_name(matched_list_address_num_value[1]).send_keys(adid.m_textCtrl30.GetValue())
 		           		           input_history.append(adid.m_textCtrl30.GetValue())
 		           		           driver.find_element_by_name(matched_list_address_num_value[2]).send_keys(adid.m_textCtrl31.GetValue())
 		           		           input_history.append(adid.m_textCtrl31.GetValue())
 		           		           driver.find_element_by_name(matched_list_address_num_value[3]).send_keys(adid.m_textCtrl32.GetValue())
 		           		           input_history.append(adid.m_textCtrl32.GetValue())
 		           		           print("都道府県から住所入力済み（取得値：２個以上）")
 		              elif len(matched_list_build_value) > 0:
 		           		           driver.find_element_by_name(matched_list_address_value[0]).send_keys(adid.m_comboBox6.GetValue() \
										   + adid.m_textCtrl30.GetValue() \
											   + adid.m_textCtrl31.GetValue())
 		           		           input_history.append("住所")
 		           		           driver.find_element_by_name(matched_list_build_value[0]).send_keys(adid.m_textCtrl32.GetValue())
 		           		           input_history.append("建物名")
 		           		           print("都道府県から「住所」＋「建物名」の組み合わせで入力済み")
 		              else:
 		           		           driver.find_element_by_name(matched_list_address_value[0]).send_keys(adid.m_comboBox6.GetValue() \
										   + adid.m_textCtrl30.GetValue() \
											   + adid.m_textCtrl31.GetValue() \
												   + adid.m_textCtrl32.GetValue())
 		           		           input_history.append("住所")
 		           		           print("都道府県から建物名含む住所入力済み")                                          

#パターン追加（2021.12.22）
#id値でスクレイピング
 		         elif len(matched_list_post3) > 0 \
					  or len(matched_list_post4) > 0:
 		            if len(matched_list_address_value) > 0:
 		              if len([i for i in matched_list_address_value if "0" in i or "1" in i]) > 0:
 		               if len(matched_list_address_num_value) == 2:
 		           		           driver.find_element_by_name(matched_list_address_num_value[0]).send_keys(adid.m_comboBox6.GetValue()
                                                                                   + adid.m_textCtrl30.GetValue())
 		           		           driver.find_element_by_name(matched_list_address_num_value[1]).send_keys(adid.m_textCtrl31.GetValue()
                                                                                   + adid.m_textCtrl32.GetValue())
 		           		           input_history.append("住所")
 		           		           print("都道府県から住所入力済み（取得値：２個）")
 		               elif len(matched_list_address_num_value) > 2:
 		           		           driver.find_element_by_name(matched_list_address_num_value[0]).send_keys(adid.m_comboBox6.GetValue())
 		           		           input_history.append(adid.m_comboBox6.GetValue())
 		           		           driver.find_element_by_name(matched_list_address_num_value[1]).send_keys(adid.m_textCtrl30.GetValue())
 		           		           input_history.append(adid.m_textCtrl30.GetValue())
 		           		           driver.find_element_by_name(matched_list_address_num_value[2]).send_keys(adid.m_textCtrl31.GetValue())
 		           		           input_history.append(adid.m_textCtrl31.GetValue())
 		           		           driver.find_element_by_name(matched_list_address_num_value[3]).send_keys(adid.m_textCtrl32.GetValue())
 		           		           input_history.append(adid.m_textCtrl32.GetValue())
 		           		           print("都道府県から住所入力済み（取得値：２個以上）")
 		              elif len(matched_list_build_value) > 0:
 		           		           driver.find_element_by_name(matched_list_address_value[0]).send_keys(adid.m_comboBox6.GetValue() \
										   + adid.m_textCtrl30.GetValue() \
											   + adid.m_textCtrl31.GetValue())
 		           		           input_history.append("住所")
 		           		           driver.find_element_by_name(matched_list_build_value[0]).send_keys(adid.m_textCtrl32.GetValue())
 		           		           input_history.append("建物名")
 		           		           print("都道府県から「住所」＋「建物名」の組み合わせで入力済み")
 		              else:
 		           		           driver.find_element_by_name(matched_list_address_value[0]).send_keys(adid.m_comboBox6.GetValue() \
										   + adid.m_textCtrl30.GetValue() \
											   + adid.m_textCtrl31.GetValue() \
												   + adid.m_textCtrl32.GetValue())
 		           		           input_history.append("住所")
 		           		           print("都道府県から建物名含む住所入力済み")
                                          

#パターン追加（2021.12.22）
#id値でスクレイピング
 		            elif len(matched_list_address_id) > 0:
 		              if len([i for i in matched_list_address_id if "0" in i or "1" in i]) > 0:
 		               if len(matched_list_address_num_id) == 2:
 		           		           driver.find_element_by_id(matched_list_address_num_id[0]).send_keys(adid.m_comboBox6.GetValue()
									   + adid.m_textCtrl30.GetValue())
 		           		           driver.find_element_by_id(matched_list_address_num_id[1]).send_keys(adid.m_textCtrl31.GetValue()
									   + adid.m_textCtrl32.GetValue())
 		           		           input_history.append("住所")
 		           		           print("都道府県から住所入力済み（取得値：２個）")
 		               elif len(matched_list_address_num_id) > 2:
 		           		           driver.find_element_by_id(matched_list_address_num_id[0]).send_keys(adid.m_comboBox6.GetValue())
 		           		           input_history.append(adid.m_comboBox6.GetValue())
 		           		           driver.find_element_by_id(matched_list_address_num_id[1]).send_keys(adid.m_textCtrl30.GetValue())
 		           		           input_history.append(adid.m_textCtrl30.GetValue())
 		           		           driver.find_element_by_id(matched_list_address_num_id[2]).send_keys(adid.m_textCtrl31.GetValue())
 		           		           input_history.append(adid.m_textCtrl31.GetValue())
 		           		           driver.find_element_by_id(matched_list_address_num_id[3]).send_keys(adid.m_textCtrl32.GetValue())
 		           		           input_history.append(adid.m_textCtrl32.GetValue())
 		           		           print("都道府県から住所入力済み（取得値：２個以上）")

 		              elif len(matched_list_build_value) > 0:
 		           		           driver.find_element_by_id(matched_list_address_id[0]).send_keys(adid.m_comboBox6.GetValue() \
										   + adid.m_textCtrl30.GetValue() \
											   + adid.m_textCtrl31.GetValue())
 		           		           input_history.append("住所")
 		           		           driver.find_element_by_id(matched_list_build_value[0]).send_keys(adid.m_textCtrl32.GetValue())
 		           		           input_history.append("建物名")
 		           		           print("都道府県から「住所」＋「建物名」の組み合わせで入力済み")
 		              else:
 		           		           driver.find_element_by_id(matched_list_address_id[0]).send_keys(adid.m_comboBox6.GetValue() \
										   + adid.m_textCtrl30.GetValue() \
											   + adid.m_textCtrl31.GetValue() \
												   + adid.m_textCtrl32.GetValue())
 		           		           input_history.append("住所")
 		           		           print("都道府県から建物名含む住所入力済み")


#郵便番号～住所
 		         elif len(matched_list_post5) > 0 \
                      or len(matched_list_post6) > 0 \
                          and len(matched_list_post_value) == 1:
 		              driver.find_element_by_name(matched_list_post_value[0]).send_keys(adid.m_textCtrl28.GetValue() + adid.m_textCtrl29.GetValue())
 		              input_history.append("郵便番号")
 		              print("郵便番号入力済み（取得値：１個）")
                       
 		              if len(matched_list_post7) > 0 \
                           or len(matched_list_post8) > 0 \
                               and len([i for i in matched_list_address_value if "1" in i]) > 0:
 		           		          driver.find_element_by_name(matched_list_address_value[0]).clear()
 		           		          driver.find_element_by_name(matched_list_address_value[0]).send_keys(adid.m_comboBox6.GetValue())
 		           		          input_history.append(adid.m_comboBox6.GetValue())
                                      
 		           		          driver.find_element_by_name(matched_list_address_value[1]).clear()
 		           		          driver.find_element_by_name(matched_list_address_value[1]).send_keys(adid.m_textCtrl30.GetValue())
 		           		          input_history.append(adid.m_textCtrl30.GetValue())
                                      
 		           		          driver.find_element_by_name(matched_list_address_value[2]).clear()                                       
 		           		          driver.find_element_by_name(matched_list_address_value[2]).send_keys(adid.m_textCtrl31.GetValue())
 		           		          input_history.append(adid.m_textCtrl31.GetValue())

 		           		          driver.find_element_by_name(matched_list_address_value[3]).clear()
 		           		          driver.find_element_by_name(matched_list_address_value[3]).send_keys(adid.m_textCtrl32.GetValue())
 		           		          input_history.append(adid.m_textCtrl32.GetValue())
 		           		          print("「都道府県」＋「市区町村」＋「番地」＋「建物名」の組み合わせで入力済み")

 		              elif len(matched_list_post7) > 0 \
                           or len(matched_list_post8) > 0 \
                           and len(matched_list_address_value) > 0:
 		           		          driver.find_element_by_name(matched_list_address_value[0]).clear()
 		           		          driver.find_element_by_name(matched_list_address_value[0]).send_keys(adid.m_comboBox6.GetValue() \
                                     + adid.m_textCtrl30.GetValue() \
                                         + adid.m_textCtrl31.GetValue() \
                                             + adid.m_textCtrl32.GetValue())
 		           		          input_history.append("住所")
 		           		          print("「都道府県」＋住所（建物名まで）の組み合わせで入力済み")


 		         elif len(matched_list_post7) > 0 \
                      or len(matched_list_post8) > 0 \
                       or len(matched_list_post_value) > 1:
 		              driver.find_element_by_name(matched_list_post_value[0]).send_keys(adid.m_textCtrl28.GetValue())
 		              input_history.append(adid.m_textCtrl28.GetValue())
 		              driver.find_element_by_name(matched_list_post_value[1]).send_keys(adid.m_textCtrl29.GetValue())
 		              input_history.append(adid.m_textCtrl29.GetValue())
 		              print("郵便番号入力済み（取得値：２個）")

 		              if len([i for i in matched_list_address_value if "1" in i]) > 0:
 		           		          driver.find_element_by_name(matched_list_address_value[0]).clear()
 		           		          driver.find_element_by_name(matched_list_address_value[0]).send_keys(adid.m_comboBox6.GetValue())
 		           		          input_history.append(adid.m_comboBox6.GetValue())
 		           		          driver.find_element_by_name(matched_list_address_value[1]).clear()
 		           		          driver.find_element_by_name(matched_list_address_value[1]).send_keys(adid.m_textCtrl30.GetValue())
 		           		          input_history.append(adid.m_textCtrl30.GetValue())
 		           		          driver.find_element_by_name(matched_list_address_value[2]).clear()                                       
 		           		          driver.find_element_by_name(matched_list_address_value[2]).send_keys(adid.m_textCtrl31.GetValue())
 		           		          input_history.append(adid.m_textCtrl31.GetValue())
 		           		          driver.find_element_by_name(matched_list_address_value[3]).clear()
 		           		          driver.find_element_by_name(matched_list_address_value[3]).send_keys(adid.m_textCtrl32.GetValue())
 		           		          input_history.append(adid.m_textCtrl32.GetValue())
 		           		          print("「都道府県」＋「市区町村」＋「番地」＋「建物名」の組み合わせで入力済み")

 		              elif len(matched_list_post7) > 0 \
                           or len(matched_list_post8) > 0:
 		           		          driver.find_element_by_name(matched_list_address_value[0]).clear()
 		           		          driver.find_element_by_name(matched_list_address_value[0]).send_keys(adid.m_comboBox6.GetValue() \
                                     + adid.m_textCtrl30.GetValue() \
                                         + adid.m_textCtrl31.GetValue() \
                                             + adid.m_textCtrl32.GetValue())
 		           		          input_history.append("住所")
 		           		          print("「都道府県」＋住所（建物名まで）の組み合わせで入力済み")
 		              else:
 		           		          Municipal = driver.find_element_by_name(matched_list_address_value[0])
 		           		          Municipal.clear()   
 		           		          Municipal.send_keys(adid.m_textCtrl30.GetValue() + adid.m_textCtrl31.GetValue() + "　")
 		           		          input_history.append("市区町村")
 		           		          print("「都道府県」を除く「市区町村」までを入力済み")

 		           		          if len(matched_list_build1) > 0 \
										  or len(matched_list_build2) > 0:
 		           		            build = driver.find_element_by_name(matched_list_build_value[0])
 		           		            build.send_keys(adid.m_textCtrl32.GetValue())
 		           		            input_history.append("建物名")
 		           		            print("入力欄：「市区町村」＋「建物名」")

                                    
#（郵便番号入力欄なし）
 		         elif len(matched_list_post7) > 0 \
					  or len(matched_list_post8) > 0 \
						  and len(matched_list_post_value) == 0:
 		           		          print("郵便番号入力欄なし")
 		           		          driver.find_element_by_name(matched_list_address_value[0]).send_keys(adid.m_comboBox6.GetValue() \
                                     + adid.m_textCtrl30.GetValue() \
                                         + adid.m_textCtrl31.GetValue() \
                                             + adid.m_textCtrl32.GetValue())
 		           		          input_history.append("住所")
 		           		          print("「都道府県」＋住所（建物名まで）の組み合わせで入力済み")
#（郵便番号入力欄のみ）
 		         elif len(matched_list_post7) == 0 \
					  or len(matched_list_post8) == 0 \
						  and len(matched_list_post_value1) == 1:
 		              driver.find_element_by_name(matched_list_post_value1[0]).send_keys(adid.m_textCtrl28.GetValue() + adid.m_textCtrl29.GetValue())
 		              input_history.append("郵便番号")
 		              print("郵便番号入力済み：" + str(matched_list_post_value1[0]))
           
#（テキストに市町村、建物名等が含まれない場合は都道府県のみ）
 		         elif len(matched_list_post5) > 0 \
					  or len(matched_list_post6) > 0 \
						  and len(matched_list_pref_value) > 0:
 		            pref = driver.find_element_by_name(matched_list_pref_value[0])
 		            pref.clear()
 		            pref.send_keys(adid.m_comboBox6.GetValue())
 		            input_history.append("都道府県")
 		            print("都道府県入力済み")   

 		            if len(matched_list_post9) > 0 \
						 or len(matched_list_post10) > 0:
 		              Municipal = driver.find_element_by_name(matched_list_address_value[0])
 		              Municipal.clear()
 		              Municipal.send_keys(adid.m_textCtrl30.GetValue() + adid.m_textCtrl31.GetValue())
 		              input_history.append("市区町村")
 		              print("「都道府県」＋「市区町村」入力済み")

 		              if len(matched_list_build1) > 0 \
						   or len(matched_list_build2) > 0:
 		                build = driver.find_element_by_name(matched_list_build_value[0])
 		                build.send_keys(adid.m_textCtrl32.GetValue())
 		                input_history.append("建物名")
 		                print("「都道府県」＋「市区町村」＋「建物名」入力済み")                      


#操作できない要素の回避
 		        except ElementNotInteractableException:
 		          pass
                
#リストインデックスに関するエラー回避                    
 		        except IndexError as e:
 		          print(e)
                

#電話番号
 		        print("「電話番号」関連がテキスト要素に含まれるか否かの確認")
 		        matched_list_tel1 = []
 		        matched_list_tel2 = []
 		        for i in items_1:
 		                   for j in telephone.tel_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_post1.append(i)
 		        print(len(matched_list_tel1))
 		        for i in list_1:
 		                   for j in telephone.tel_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_post2.append(i)
 		        print(len(matched_list_tel2))

 		        if len(matched_list_tel1) > 0 \
                     or len(matched_list_tel2) > 0:
 		          print("「電話番号」関連がテキスト要素に存在します")

 		        elif len(matched_list_tel1) == 0 \
                     or len(matched_list_tel2) == 0:
 		          print("「電話番号」関連がテキスト要素に存在しません")

 		        matched_list_tel_value = []
 		        for i in list_2:
 		                   for j in telephone.tel_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_tel_value.append(i)
 		        print("matched_list_tel_value（name値）：" +str(matched_list_tel_value))

#指定キーワードを除く
 		        if len(matched_list_tel_value) > 2:
 		          matched_list_tel_value = [i for i in matched_list_tel_value if "tic" not in i \
					and "mfp" not in i \
						and "http" not in i \
							and "wpcf7" not in i \
								and "separator" not in i]
 		          print(matched_list_tel_value)

#重複した要素を削除し、新たなリストを生成
 		        matched_list_tel_value = list(dict.fromkeys(matched_list_tel_value))
 		        print(matched_list_tel_value)

 		        if len(matched_list_tel_value) > 0:
 		          print("「電話番号」のname値が存在します")
 		        elif len(matched_list_tel_value) == 0:
 		          print("「電話番号」のname値は存在しません")

 		        matched_list_tel_id = []
 		        for i in list_2d:
 		                   for j in telephone.tel_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_tel_id.append(i)
 		        print("matched_list_tel_id（id値）：" +str(matched_list_tel_id))

#指定キーワードを除く
 		        if len(matched_list_tel_id) > 2:
 		          matched_list_tel_id = [i for i in matched_list_tel_id if "tic" not in i \
					and "mfp" not in i \
						and "http" not in i \
							and "wpcf7" not in i \
								and "separator" not in i]
 		          print(matched_list_tel_id)
                 
#重複した要素を削除し、新たなリストを生成
 		        matched_list_tel_id = list(dict.fromkeys(matched_list_tel_id))
 		        print(matched_list_tel_id)
# 		        print("「電話番号」のid値が存在することを確認しました")

 		        if len(matched_list_tel_id) > 0:
 		          print("「電話番号」のid値が存在します")
 		        elif len(matched_list_tel_id) == 0:
 		          print("「電話番号」のid値は存在しません")

 		        matched_list_tel_class = []
 		        for i in list_2c:
 		                   for j in telephone.tel_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_tel_class.append(i)
 		        print("matched_list_tel_class（class値）：" +str(matched_list_tel_class))

#二次元配列から一次配列への変換
 		        matched_list_tel_class = [i for sublist in matched_list_tel_class for i in sublist]
# 		        print(matched_list_tel_class)

#指定キーワードを除く
 		        if len(matched_list_tel_class) > 2:
 		          matched_list_tel_class = [i for i in matched_list_tel_class if "tic" not in i \
					and "mfp" not in i \
						and "http" not in i \
							and "wpcf7" not in i \
								and "separator" not in i]
 		          print(matched_list_tel_class)
                 
#重複した要素を削除し、新たなリストを生成
 		        matched_list_tel_class = list(dict.fromkeys(matched_list_tel_class))
 		        print(matched_list_tel_class)
# 		        print("「電話番号」のclass値が存在することを確認しました")

 		        if len(matched_list_tel_class) > 0:
 		          print("「電話番号」のclass値が存在します")
 		        elif len(matched_list_tel_class) == 0:
 		          print("「電話番号」のclass値は存在しません")

 		        matched_list_tel_num = []
 		        for i in list_2:
 		                   for j in telephone.tel_value_num_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_tel_num.append(i)
 		        print(len(matched_list_tel_num))

 		        if len(matched_list_tel_num) > 0:
 		          print("「電話番号」の入力値が複数個存在します")

 		        else:
 		          print("「電話番号」の入力値は複数個存在しません")
                     

#（Googleフォーム）
#<input type="text" class="whsOnd zHQkBf" jsname="YPqjbf" autocomplete="off" tabindex="0" aria-labelledby="i9" aria-describedby="i10 i11" required="" dir="auto" data-initial-dir="auto" data-initial-value="">
#<div id="i9" class="HoXoMd D1wxyf G4EHhc" role="heading" aria-level="3" aria-describedby="i12">電話番号<span class="vnumgf" id="i12" aria-label="必須の質問"> *</span></div>

#※「class="quantumWizTextinputPaperinputInput exportInput"」
#及び「class="freebirdFormviewerComponentsQuestionBaseTitle exportItemTitle freebirdCustomFont"」は現在使えないので注意！！（2022.03.02）

 		        try:
 		          if not len([i for i in list_2c if "zHQkBf" in i]) == 0:
 		            element_gf = soup.find_all(class_="HoXoMd D1wxyf G4EHhc")
 		            print(element_gf)
 		            if "電話" in str(element_gf):
 		              driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[2].send_keys(adid.m_textCtrl34.GetValue())
 		              driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[2].send_keys(adid.m_textCtrl35.GetValue())
 		              driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[2].send_keys(adid.m_textCtrl36.GetValue())
 		              input_history.append("電話番号")
                     

#（ハイフンなし市外局番別１）
 		          elif len(matched_list_tel1) == 0 \
					  and len(matched_list_tel2) == 0 \
                          and len(matched_list_tel_num) == 3:
 		             driver.find_element_by_name(matched_list_tel_value[0]) \
 		             .send_keys(adid.m_textCtrl34.GetValue())
 		             input_history.append(adid.m_textCtrl34.GetValue())
 		             driver.find_element_by_name(matched_list_tel_value[1]) \
 		             .send_keys(adid.m_textCtrl35.GetValue())
 		             input_history.append(adid.m_textCtrl35.GetValue())
 		             driver.find_element_by_name(matched_list_tel_value[2]) \
 		             .send_keys(adid.m_textCtrl36.GetValue())
 		             input_history.append(adid.m_textCtrl36.GetValue())
 		             print("「電話番号」を入力済み（取得値複数）：" + str(matched_list_tel_value))

#（ハイフンなし市外局番別２）
# 		          elif len(matched_list_tel1) == 0 \
#					  and len(matched_list_tel2) == 0 \
#                          and len(matched_list_tel_num) == 3:
# 		             driver.find_element_by_name(matched_list_tel_num[0]) \
# 		             .send_keys(adid.m_textCtrl34.GetValue())
# 		             input_history.append(adid.m_textCtrl34.GetValue())
# 		             driver.find_element_by_name(matched_list_tel_num[1]) \
# 		             .send_keys(adid.m_textCtrl35.GetValue())
# 		             input_history.append(adid.m_textCtrl35.GetValue())
# 		             driver.find_element_by_name(matched_list_tel_num[2]) \
# 		             .send_keys(adid.m_textCtrl36.GetValue())
# 		             input_history.append(adid.m_textCtrl36.GetValue())
# 		             print("「電話番号」を入力済み（取得値）：" + str(len(matched_list_tel_num)))

#（ハイフンなし）
 		          elif not len(matched_list_tel1) == 0 \
					  or not len(matched_list_tel2) == 0 \
						  and len([i for i in matched_list_tel1 if "ハイフン不要" in i \
                                       or "ハイフンなし" in i]) == 0 \
                      or not len([i for i in matched_list_tel2 if "ハイフン不要" in i \
                                           or "ハイフンなし" in i]) == 0:
 		             driver.find_element_by_name(matched_list_tel_value[0]).send_keys(adid.m_textCtrl34.GetValue() \
                                                                     + adid.m_textCtrl35.GetValue() \
                                                                         + adid.m_textCtrl36.GetValue())
 		             input_history.append("電話（ハイフンなし）")
 		             print("「電話番号」を入力済み（ハイフンなし）")

#（ハイフン有り）                     
 		          elif not len(matched_list_tel1) == 0 \
					  or not len(matched_list_tel2) == 0:
 		              if len(matched_list_tel_value) > 1:
 		           		          try:
 		           		           elemName0 = driver.find_element_by_name(matched_list_tel_value[0])
 		           		           elemName1 = driver.find_element_by_name(matched_list_tel_value[1])
 		           		           elemName2 = driver.find_element_by_name(matched_list_tel_value[2])
 		           		           if elemName0.is_displayed() is False \
                                           or elemName1.is_displayed() is False \
                                               or elemName2.is_displayed() is False:
 		           		           		          if "1" in matched_list_tel_value[0]:
 		           		           		           print(matched_list_tel_value[0])
 		           		           		           elemName0.send_keys(adid.m_textCtrl33.GetValue())
 		           		           		           input_history.append("電話（ハイフンあり）")
 		           		           		           print("変数「elemName0」にて「電話番号」を入力済み")
 		           		           		          elif "2" in matched_list_tel_value[1]:
 		           		           		           print(matched_list_tel_value[1])
 		           		           		           elemName1.send_keys(adid.m_textCtrl33.GetValue())
 		           		           		           input_history.append("電話（ハイフンあり）")
 		           		           		           print("変数「elemName1」にて「電話番号」を入力済み")
 		           		           		          elif "3" in matched_list_tel_value[2]:
 		           		           		           print(matched_list_tel_value[2])
 		           		           		           elemName2.send_keys(adid.m_textCtrl33.GetValue())
 		           		           		           input_history.append("電話（ハイフンあり）")
 		           		           		           print("変数「elemName2」にて「電話番号」を入力済み")

 		           		           else:
 		           		           		          if "1" in matched_list_tel_value[0] \
                                                             or "0" in matched_list_tel_value[0]:
 		           		           		           print(matched_list_tel_value[0])
 		           		           		           elemName0.send_keys(adid.m_textCtrl34.GetValue())
 		           		           		           input_history.append("市外局番")
 		           		           		          if "2" in matched_list_tel_value[1] \
                                                             or "1" in matched_list_tel_value[1]:
 		           		           		           print(matched_list_tel_value[1])
 		           		           		           elemName1.send_keys(adid.m_textCtrl35.GetValue())
 		           		           		           input_history.append("市内局番")
 		           		           		          if "3" in matched_list_tel_value[2] \
                                                             or "2" in matched_list_tel_value[2]:
 		           		           		           print(matched_list_tel_value[2])
 		           		           		           elemName2.send_keys(adid.m_textCtrl36.GetValue())
 		           		           		           input_history.append("加入者電号")
 		           		           		           print("「市外局番」＋「市外局番」＋「加入者番号」の組み合わせでハイフンなし入力済み")

 		           		          except:
 		           		            try:
 		           		              driver.find_element_by_name(matched_list_tel_value[0]).send_keys(adid.m_textCtrl33.GetValue())
 		           		              input_history.append("電話（ハイフンあり）")
 		           		              print("「電話番号」を入力済み（ハイフンあり）")
 		           		            except:                                            
 		           		              pass

 		              elif len(matched_list_tel_value) == 1:
 		           		            driver.find_element_by_name(matched_list_tel_value[0]).send_keys(adid.m_textCtrl33.GetValue())
 		           		            input_history.append("電話（ハイフンあり）")
 		           		            print("「電話番号」を入力済み（ハイフンあり）（取得値：１個）")

 		          elif len(matched_list_tel1) == 0 \
					  or len(matched_list_tel2) == 0 \
                          and len(matched_list_tel_value) == 1 \
							or len(matched_list_tel_id) == 1 \
								or len(matched_list_tel_class) > 1:
 		            print(matched_list_tel_value)
 		            try:
 		              driver.find_element_by_name(matched_list_tel_value[0]).send_keys(adid.m_textCtrl33.GetValue())
 		              input_history.append("電話（ハイフンあり）")
 		              print("「電話番号」を入力済み（ハイフンあり）（取得値：１個）")
 		            except:
 		              try:
 		                driver.find_element_by_id(matched_list_tel_id[0]).send_keys(adid.m_textCtrl33.GetValue())
 		                input_history.append("電話（ハイフンあり）")
 		                print("「電話番号」を入力済み（ハイフンあり）（取得値：id）")
 		              except:
 		                try:
 		                  driver.find_elements_by_class_name(matched_list_tel_class[0])[1].send_keys(adid.m_textCtrl33.GetValue())
 		                  input_history.append("電話（ハイフンあり）")
 		                  print("「電話番号」を入力済み（ハイフンあり）（取得値：class）")

 		                except WebDriverException:
 		                  pass


#リストインデックスに関するエラー回避                    
 		        except IndexError as e:
 		          print(e)


#メールアドレス
 		        print("「メールアドレス」関連がテキスト要素に含まれるか否かの確認")
 		        matched_list_email1 = []
 		        matched_list_email2 = []
                 
#「import email」はメール本文受信ライブラリになってしまうので、別の変数を割り当てる
 		        for i in items_1:
 		                   for j in e_mail.email_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_email1.append(i)
 		        print(len(matched_list_email1))
 		        for i in list_1:
 		                   for j in e_mail.email_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_email2.append(i)
 		        print(len(matched_list_email2))
 		        print("「メールアドレス」関連がテキスト要素に存在することを確認しました")

 		        matched_list_email_value = []
 		        for i in list_2:
 		                   for j in e_mail.email_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_email_value.append(i)
 		        print(len(matched_list_email_value))

#指定キーワードを除く
 		        matched_list_email_value = [i for i in matched_list_email_value if "mode" not in i \
					  and "mfp" not in i \
						  and "控え" not in i \
                              and "validator" not in i \
                                  and "time" not in i]
 		        print(matched_list_email_value)

#2022.8.16
 		        if len(matched_list_email_value) > 2:
 		          print("「メールアドレス」のname値が複数個存在します")

#指定キーワードを除く
 		          if not len([i for i in list_2 if "mail" in i]) == 0:
 		            matched_list_email_value = [i for i in matched_list_email_value if "address" not in i]
 		            print("指定キーワードを除いて再リスト化：" + str(matched_list_email_value))
 		        elif len(matched_list_email_value) == 1:
 		          print("「メールアドレス」のname値は複数個存在しません")


 		        matched_list_email_id = []
 		        for i in list_2d:
 		                   for j in e_mail.email_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_email_id.append(i)
 		        print(len(matched_list_email_id))

#指定キーワードを除く
 		        matched_list_email_id = [i for i in matched_list_email_id if "mode" not in i \
					  and "mfp" not in i \
						  and "控え" not in i]
 		        print(matched_list_email_id)
 		        print("「メールアドレス」のid値が存在することを確認しました")

 		        matched_list_email_class = []
 		        for i in list_2c:
 		                   for j in e_mail.email_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_email_class.append(i)
 		        print(len(matched_list_email_class))

#指定キーワードを除く
 		        matched_list_email_class = [i for i in matched_list_email_class if "mode" not in i \
					  and "mfp" not in i \
						  and "控え" not in i]
 		        print(matched_list_email_class)
 		        print("「メールアドレス」のclass値が存在することを確認しました")

 		        matched_list_email_num = []
 		        for i in list_2:
 		                   for j in e_mail.email_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_email_num.append(i)
 		        print(len(matched_list_email_num))
 		        if len(matched_list_email_num) > 1:
 		          print("「メールアドレス」の入力値が複数個存在します")
 		        elif len(matched_list_email_num) == 1:
 		          print("「メールアドレス」の入力値は複数個存在しません")

#（Googleフォーム）
#<input type="text" class="whsOnd zHQkBf" jsname="YPqjbf" autocomplete="off" tabindex="0" aria-labelledby="i5" aria-describedby="i6 i7" required="" dir="auto" data-initial-dir="auto" data-initial-value="">
#※「class="quantumWizTextinputPaperinputInput exportInput"」は現在使えないので注意！！（2022.03.02）
 		        try:
 		         if not len([i for i in list_2c if "zHQkBf" in i]) == 0:
 		             try:
# 		               if "biz" in adid.m_textCtrl37.GetValue():
 		                 driver.find_elements_by_css_selector(".whsOnd.zHQkBf")[1].send_keys(adid.m_textCtrl37.GetValue())
 		                 input_history.append("メールアドレス")
                          
#操作できない要素の回避
 		             except ElementNotInteractableException:
 		                  pass                          

#（タグテキストに含まれる）
 		         elif not len(matched_list_email1) == 0 \
                      or not len(matched_list_email2) == 0 \
						  and not len(matched_list_email_value) == 0:
 		             print("「メールアドレス」関連がタグテキストに含まれる")
 		             try:
 #		           		             if "biz" in adid.m_textCtrl37.GetValue():
 		           		               driver.find_element_by_name(matched_list_email_value[0]).send_keys(adid.m_textCtrl37.GetValue())
 		           		               input_history.append("メールアドレス")
 		           		               print("「メールアドレス」を入力済み")
 		           		               driver.find_element_by_name(matched_list_email_value[1]).send_keys(adid.m_textCtrl37.GetValue())
 		           		               input_history.append("メールアドレス")
 		           		               print("「メールアドレス（確認用）」を入力済み")

#操作できない要素の回避
 		             except ElementNotInteractableException:
 		                pass

 		         elif not len(matched_list_email1) == 0 \
					  or not len(matched_list_email2) == 0 \
						  and len(matched_list_email_id) > 0:
 		              print("「メールアドレス」関連がタグテキストに含まれる")
 		              try:
 		                if len(matched_list_email_id) == 1:
# 		                  if "biz" in adid.m_textCtrl37.GetValue():
 		                    driver.find_element_by_id(matched_list_email_id[0]).send_keys(adid.m_textCtrl37.GetValue())
 		                    input_history.append("メールアドレス")
 		                    print("「メールアドレス」を入力済み（id値：１個）")
                                          
 		                elif len(matched_list_email_id) == 2:
# 		                  if "biz" in adid.m_textCtrl37.GetValue():
 		                    driver.find_element_by_id(matched_list_email_id[0]).send_keys(adid.m_textCtrl37.GetValue())       
 		                    input_history.append("メールアドレス")
 		                    driver.find_element_by_id(matched_list_email_id[1]).send_keys(adid.m_textCtrl37.GetValue())             
 		                    input_history.append("メールアドレス")
 		                    print("「メールアドレス」を入力済み（id値：２個）")

#操作できない要素の回避
 		              except ElementNotInteractableException:
 		                 pass                          

 		           		          
 		         elif not len(matched_list_email1) == 0 \
					  or not len(matched_list_email2) == 0 \
						  and len(matched_list_email_class) > 0:
 		              print("「メールアドレス」関連がタグテキストに含まれる")
 		              try:
# 		                if "biz" in adid.m_textCtrl37.GetValue():
 		                  driver.find_elements_by_class_name(matched_list_email_class[0])[2].send_keys(adid.m_textCtrl37.GetValue())
 		                  input_history.append("メールアドレス")
 		                  print("「メールアドレス」を入力済み（class値）")
                           
#操作できない要素の回避
 		              except ElementNotInteractableException:
 		                 pass
                       

#（タグテキストに含まれない）
 		         elif len(matched_list_email1) == 0 \
					  or len(matched_list_email2) == 0 \
						  and len(matched_list_email_value) > 0:
 		             print("「メールアドレス」関連がタグテキストに含まれない")
 		             try:
# 		                if "biz" in adid.m_textCtrl37.GetValue():
 		                  driver.find_element_by_name(matched_list_email_value[0]).send_keys(adid.m_textCtrl37.GetValue())
 		                  input_history.append("メールアドレス")
 		                  driver.find_element_by_name(matched_list_email_value[1]).send_keys(adid.m_textCtrl37.GetValue())
 		                  input_history.append("メールアドレス")
 		                  print("「メールアドレス」を入力済み（取得値：２個）")
                           
#操作できない要素の回避
 		             except ElementNotInteractableException:
 		                pass
                           
 		         elif len(matched_list_email1) == 0 \
					  or len(matched_list_email2) == 0 \
						  and len(matched_list_email_class) > 0:
 		              print("「メールアドレス」関連がタグテキストに含まれない")
 		              try:
# 		                if "biz" in adid.m_textCtrl37.GetValue():
 		                  driver.find_elements_by_class_name(matched_list_email_class[0])[2].send_keys(adid.m_textCtrl37.GetValue())
 		                  input_history.append("メールアドレス")
 		                  print("「メールアドレス」を入力済み（class値）")
                           
#操作できない要素の回避
 		              except ElementNotInteractableException:
 		                 pass

 		         elif len(matched_list_email1) == 0 \
					  or len(matched_list_email2) == 0 \
						  and len(matched_list_email_id) > 0:
 		              print("「メールアドレス」関連がタグテキストに含まれない")
 		              try:
 		                if len(matched_list_email_id) == 1:
# 		                  if "biz" in adid.m_textCtrl37.GetValue():
 		                    driver.find_element_by_id(matched_list_email_id[0]).send_keys(adid.m_textCtrl37.GetValue())
 		                    input_history.append("メールアドレス")
 		                    print("「メールアドレス」を入力済み（id値：１個）")
                                          
 		                elif len(matched_list_email_id) == 2:
# 		                  if "biz" in adid.m_textCtrl37.GetValue():
 		                    driver.find_element_by_id(matched_list_email_id[0]).send_keys(adid.m_textCtrl37.GetValue())       
 		                    input_history.append("メールアドレス")
 		                    driver.find_element_by_id(matched_list_email_id[1]).send_keys(adid.m_textCtrl37.GetValue())             
 		                    input_history.append("メールアドレス")
 		                    print("「メールアドレス」を入力済み（id値：２個）")

#操作できない要素の回避
 		              except ElementNotInteractableException:
 		                 pass

#リストインデックスに関するエラー回避                    
 		        except IndexError as e:
 		          print(e)


#業種
 		        print("「業種」関連がテキスト要素に含まれるか否かの確認")
 		        matched_list_industry1 = []
 		        matched_list_industry2 = []
 		        for i in items_1:
 		                   for j in industry.industry_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_industry1.append(i)
 		        print(len(matched_list_industry1))
 		        for i in list_1:
 		                   for j in industry.industry_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_industry2.append(i)
 		        print(len(matched_list_industry2))
 		        print("「業種」関連がテキスト要素に存在することを確認しました")

 		        matched_list_industry_value = []
 		        for i in list_2:
 		                   for j in industry.industry_value:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_industry_value.append(i)
 		        print(len(matched_list_industry_value))

 		        print("「業種」関連がタグテキストに含まれる")
 		        try:
 		         if not len(matched_list_industry1) == 0 \
                      or not len(matched_list_industry2) == 0 \
						  and not len(matched_list_industry_value) == 0:
 		           driver.find_element_by_name(matched_list_industry_value[0]).send_keys(adid.m_textCtrl61.GetValue())
 		           input_history.append("業種")
 		           print("「業種」を入力済み")
 		           
#リストインデックスに関するエラー回避                    
 		        except IndexError as e:
 		           print(e)


#部署名
 		        print("「部署」関連がテキスト要素に含まれるか否かの確認")
 		        matched_list_department1 = []
 		        matched_list_department2 = []
 		        for i in items_1:
 		                   for j in department.department_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_department1.append(i)
 		        print(len(matched_list_department1))
 		        for i in list_1:
 		                   for j in department.department_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_department2.append(i)
 		        print(len(matched_list_department2))
 		        print("「部署」関連がテキスト要素に存在することを確認しました")

 		        matched_list_department_value = []
 		        for i in list_2:
 		                   for j in department.department_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_department_value.append(i)
 		        print(len(matched_list_department_value))

#指定キーワードを除く
 		        matched_list_department_value = [i for i in matched_list_department_value if "wpcf7_unit" not in i]
 		        print(matched_list_department_value)
 		        print("「部署」のname値が存在することを確認しました")

 		        matched_list_department_id = []
 		        for i in list_2d:
 		                   for j in department.department_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_department_id.append(i)
 		        print(len(matched_list_department_id))

#指定キーワードを除く
 		        matched_list_department_id = [i for i in matched_list_department_id if "wpcf7_unit" not in i]
 		        print(matched_list_department_id)
 		        print("「部署」のid値が存在することを確認しました")

 		        matched_list_department_class = []
 		        for i in list_2c:
 		                   for j in department.department_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_department_class.append(i)
 		        print(len(matched_list_department_class))

#指定キーワードを除く
 		        matched_list_department_class = [i for i in matched_list_department_class if "wpcf7_unit" not in i]
 		        print(matched_list_department_class)
 		        print("「部署」のclass値が存在することを確認しました")


#（タグテキストに含まれる）
 		        print("「部署」関連がタグテキストに含まれる")
 		        try:
 		         if not len(matched_list_department1) == 0 \
                      or not len(matched_list_department2) == 0 \
						  and not len(matched_list_department_value) == 0:
 		             try:
 		               driver.find_element_by_name(matched_list_department_value[0]).send_keys(adid.m_textCtrl24.GetValue())
 		               input_history.append("部署")
 		               print("「部署」を入力済み")

#操作できない要素の回避
 		             except ElementNotInteractableException:
 		                  pass

 		         elif not len(matched_list_department1) == 0 \
					  or not len(matched_list_department2) == 0 \
						  and len(matched_list_department_id) > 0:
 		              try:
 		                    driver.find_element_by_id(matched_list_department_id[0]).send_keys(adid.m_textCtrl24.GetValue())
 		                    input_history.append("部署")
 		                    print("「部署」を入力済み（id値）")
                                          
#操作できない要素の回避
 		              except ElementNotInteractableException:
 		                  pass                          

 		           		          
 		         elif not len(matched_list_department1) == 0 \
					  or not len(matched_list_department2) == 0 \
						  and len(matched_list_department_class) > 0:
 		              try:
 		                  driver.find_elements_by_class_name(matched_list_department_class[0])[2].send_keys(adid.m_textCtrl24.GetValue())
 		                  input_history.append("部署")
 		                  print("「部署」を入力済み（class値）")
#操作できない要素の回避
 		              except ElementNotInteractableException:
 		                  pass


#（タグテキストに含まれない）
 		         elif len(matched_list_department1) == 0 \
					  or len(matched_list_department2) == 0 \
						  and len(matched_list_department_value) > 0:
 		             print("「部署」関連がタグテキストに含まれない")
 		             try:
 		               driver.find_element_by_name(matched_list_department_value[0]).send_keys(adid.m_textCtrl24.GetValue())
 		               input_history.append("部署")
 		               print("「部署」を入力済み")

#操作できない要素の回避
 		             except ElementNotInteractableException:
 		                  pass

                           
 		         elif len(matched_list_department1) == 0 \
					  or len(matched_list_department2) == 0 \
						  and len(matched_list_department_class) > 0:
 		              print("「部署」関連がタグテキストに含まれない")
 		              try:
# 		                if "biz" in adid.m_textCtrl37.GetValue():
 		                  driver.find_elements_by_class_name(matched_list_department_class[0])[2].send_keys(adid.m_textCtrl24.GetValue())
 		                  input_history.append("部署")
 		                  print("「部署」を入力済み（class値）")
#操作できない要素の回避
 		              except ElementNotInteractableException:
 		                 pass

 		         elif len(matched_list_department1) == 0 \
					  or len(matched_list_department2) == 0 \
						  and len(matched_list_department_id) > 0:
 		              print("「部署」関連がタグテキストに含まれない")
 		              try:
 		                    driver.find_element_by_id(matched_list_department_id[0]).send_keys(adid.m_textCtrl24.GetValue())
 		                    input_history.append("部署")
 		                    print("「部署」を入力済み（id値）")
                                          
#操作できない要素の回避
 		              except ElementNotInteractableException:
 		                 pass

#リストインデックスに関するエラー回避                    
 		        except IndexError as e:
 		           print(e)

#役職
 		        print("「役職」関連がテキスト要素に含まれるか否かの確認")
 		        matched_list_position1 = []
 		        matched_list_position2 = []
 		        for i in items_1:
 		                   for j in position.position_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_position1.append(i)
 		        print(len(matched_list_position1))
 		        for i in list_1:
 		                   for j in position.position_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_position2.append(i)
 		        print(len(matched_list_position2))
 		        print("「役職」関連がテキスト要素に存在することを確認しました")

 		        matched_list_position_value = []
 		        for i in list_2:
 		                   for j in position.position_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_position_value.append(i)
 		        print(len(matched_list_position_value))

#指定キーワードを除く
 		        matched_list_position_value = [i for i in matched_list_position_value if "役職" not in i]
 		        print(matched_list_position_value)
 		        print("「役職」のname値が存在することを確認しました")

 		        matched_list_position_id = []
 		        for i in list_2d:
 		                   for j in position.position_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_position_id.append(i)
 		        print(len(matched_list_position_id))

#指定キーワードを除く
 		        matched_list_position_id = [i for i in matched_list_position_id if "役職" not in i]
 		        print(matched_list_position_id)
 		        print("「役職」のid値が存在することを確認しました")

 		        matched_list_position_class = []
 		        for i in list_2c:
 		                   for j in position.position_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_position_class.append(i)
 		        print(len(matched_list_position_class))

#指定キーワードを除く
 		        matched_list_position_class = [i for i in matched_list_position_class if "役職" not in i]
 		        print(matched_list_position_class)
 		        print("「役職」のclass値が存在することを確認しました")


#（タグテキストに含まれる）
 		        print("「役職」関連がタグテキストに含まれる")
 		        try:
 		         if not len(matched_list_position1) == 0 \
                      or not len(matched_list_position2) == 0 \
						  and not len(matched_list_position_value) == 0:
 		             try:
 		               driver.find_element_by_name(matched_list_position_value[0]).send_keys(adid.m_textCtrl25.GetValue())
 		               input_history.append("役職")
 		               print("「役職」を入力済み")

#操作できない要素の回避
 		             except ElementNotInteractableException:
 		                  pass

 		         elif not len(matched_list_position1) == 0 \
					  or not len(matched_list_position2) == 0 \
						  and len(matched_list_position_id) > 0:
 		              try:
 		                    driver.find_element_by_id(matched_list_position_id[0]).clear()
 		                    driver.find_element_by_id(matched_list_position_id[0]).send_keys(adid.m_textCtrl25.GetValue())
 		                    input_history.append("役職")
 		                    print("「役職」を入力済み（id値）")
                                          
#操作できない要素の回避
 		              except ElementNotInteractableException:
 		                  pass                          

 		           		          
 		         elif not len(matched_list_position1) == 0 \
					  or not len(matched_list_position2) == 0 \
						  and len(matched_list_position_class) > 0:
 		              try:
 		                  driver.find_elements_by_class_name(matched_list_position_class[0])[2].send_keys(adid.m_textCtrl25.GetValue())
 		                  input_history.append("役職")
 		                  print("「役職」を入力済み（class値）")
#操作できない要素の回避
 		              except ElementNotInteractableException:
 		                  pass


#（タグテキストに含まれない）
 		         elif len(matched_list_position1) == 0 \
					  or len(matched_list_position2) == 0 \
						  and len(matched_list_position_value) > 0:
 		             print("「役職」関連がタグテキストに含まれない")
 		             try:
 		               driver.find_element_by_name(matched_list_position_value[0]).send_keys(adid.m_textCtrl25.GetValue())
 		               input_history.append("役職")
 		               print("「役職」を入力済み")

#操作できない要素の回避
 		             except ElementNotInteractableException:
 		                  pass

                           
 		         elif len(matched_list_position1) == 0 \
					  or len(matched_list_position2) == 0 \
						  and len(matched_list_position_class) > 0:
 		              print("「役職」関連がタグテキストに含まれない")
 		              try:
 		                  driver.find_elements_by_class_name(matched_list_position_class[0])[2].send_keys(adid.m_textCtrl25.GetValue())
 		                  input_history.append("役職")
 		                  print("「役職」を入力済み（class値）")
#操作できない要素の回避
 		              except ElementNotInteractableException:
 		                 pass

 		         elif len(matched_list_position1) == 0 \
					  or len(matched_list_position2) == 0 \
						  and len(matched_list_position_id) > 0:
 		              print("「役職」関連がタグテキストに含まれない")
 		              try:
 		                    driver.find_element_by_id(matched_list_position_id[0]).send_keys(adid.m_textCtrl25.GetValue())
 		                    input_history.append("役職")
 		                    print("「役職」を入力済み（id値）")
                                          
#操作できない要素の回避
 		              except ElementNotInteractableException:
 		                 pass

#リストインデックスに関するエラー回避                    
 		        except IndexError as e:
 		           print(e)


#ホームページアドレス
 		        adid = MyProject1MyDialog5(self)
 		        print("「ホームページアドレス」関連がテキスト要素に含まれるか否かの確認")
 		        matched_list_url1 = []
 		        matched_list_url2 = []
 		        for i in items_1:
 		                   for j in url.url_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_url1.append(i)
 		        print(len(matched_list_url1))
 		        for i in list_1:
 		                   for j in url.url_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_url2.append(i)
 		        print(len(matched_list_url2))
 		        print("「ホームページアドレス」関連がテキスト要素に存在することを確認しました")

 		        matched_list_url_value = []
 		        for i in list_2:
 		                   for j in url.url_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_url_value.append(i)
 		        print(len(matched_list_url_value))

 		        matched_list_url_id = []
 		        for i in list_2:
 		                   for j in url.url_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_url_id.append(i)
 		        print(len(matched_list_url_id))

 		        matched_list_url_class = []
 		        for i in list_2:
 		                   for j in url.url_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_url_class.append(i)
 		        print(len(matched_list_url_class))


#（タグテキストに含まれる）
 		        print("「ホームページアドレス」関連がタグテキストに含まれる")
 		        try:
 		         if not len(matched_list_url1) == 0 \
                      or not len(matched_list_url2) == 0 \
						  and len(matched_list_url_value) == 1:
 		             elemName0 = driver.find_element_by_name(matched_list_url_value[0])
 		             try:
 		               if elemName0.is_displayed() is False:
 		                 pass
 		               else:
 		                 driver.find_element_by_name(matched_list_url_value[0]).send_keys(adid.m_textCtrl7.GetValue())
 		                 input_history.append("ホームページアドレス")
 		                 print("「ホームページアドレス」を入力済み")

#操作できない要素の回避
 		             except ElementNotInteractableException:
 		               pass

 		         elif not len(matched_list_url1) == 0 \
					  or not len(matched_list_url2) == 0 \
						  and len(matched_list_url_id) == 1:
 		             elemName0 = driver.find_element_by_id(matched_list_url_id[0])
 		             try:
 		               if elemName0.is_displayed() is False:
 		                 pass
 		               else:
 		                 driver.find_element_by_id(matched_list_url_id[0]).send_keys(adid.m_textCtrl7.GetValue())
 		                 input_history.append("ホームページアドレス")
 		                 print("「ホームページアドレス」を入力済み（id値）")
                                          
#操作できない要素の回避
 		             except ElementNotInteractableException:
 		               pass                          

 		           		          
 		         elif not len(matched_list_url1) == 0 \
					  or not len(matched_list_url2) == 0 \
						  and len(matched_list_url_class) == 1:
 		             elemName0 = driver.find_element_by_class_name(matched_list_url_class[0])
 		             try:
 		               if elemName0.is_displayed() is False:
 		                 pass
 		               else:
 		                 driver.find_elements_by_class_name(matched_list_url_class[0])[2].send_keys(adid.m_textCtrl7.GetValue())
 		                 input_history.append("ホームページアドレス")
 		                 print("「ホームページアドレス」を入力済み（class値）")
#操作できない要素の回避
 		             except ElementNotInteractableException:
 		               pass


#（タグテキストに含まれない）
 		         elif len(matched_list_url1) == 0 \
					  or len(matched_list_url2) == 0 \
						  and len(matched_list_url_value) == 1:
 		             print("「ホームページアドレス」関連がタグテキストに含まれない")
 		             elemName0 = driver.find_element_by_name(matched_list_url_value[0])
 		             try:
 		               if elemName0.is_displayed() is False:
 		                 pass
 		               else:
 		                 driver.find_element_by_name(matched_list_url_value[0]).send_keys(adid.m_textCtrl7.GetValue())
 		                 input_history.append("ホームページアドレス")
 		                 print("「ホームページアドレス」を入力済み")

#操作できない要素の回避
 		             except ElementNotInteractableException:
 		               pass

                           
 		         elif len(matched_list_url1) == 0 \
					  or len(matched_list_url2) == 0 \
						  and len(matched_list_url_class) == 1:
 		             print("「ホームページアドレス」関連がタグテキストに含まれない")
 		             elemName0 = driver.find_element_by_class_name(matched_list_url_class[0])
 		             try:
 		               if elemName0.is_displayed() is False:
 		                 pass
 		               else:
 		                 driver.find_elements_by_class_name(matched_list_url_class[0])[2].send_keys(adid.m_textCtrl7.GetValue())
 		                 input_history.append("ホームページアドレス")
 		                 print("「ホームページアドレス」を入力済み（class値）")

#操作できない要素の回避
 		             except ElementNotInteractableException:
 		               pass


 		         elif len(matched_list_url1) == 0 \
					  or len(matched_list_url2) == 0 \
						  and len(matched_list_url_id) == 1:
 		             print("「ホームページアドレス」関連がタグテキストに含まれない")
 		             elemName0 = driver.find_element_by_id(matched_list_url_id[0])
 		             try:
 		               if elemName0.is_displayed() is False:
 		                 pass
 		               else:
 		                 driver.find_element_by_id(matched_list_url_id[0]).send_keys(adid.m_textCtrl7.GetValue())
 		                 input_history.append("ホームページアドレス")
 		                 print("「ホームページアドレス」を入力済み（id値）")
                                          
#操作できない要素の回避
 		             except ElementNotInteractableException:
 		               pass

#リストインデックスに関するエラー回避                    
 		        except IndexError as e:
 		           print(e)                


#件名
 		        print("「お問い合わせ内容タイトル」関連がテキスト要素に含まれるか否かの確認")
 		        matched_list_title1 = []
 		        matched_list_title2 = []
 		        for i in items_1:
 		                   for j in title.title_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_title1.append(i)
 		        print(len(matched_list_title1))
 		        for i in list_1:
 		                   for j in title.title_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_title2.append(i)
 		        print(len(matched_list_title2))
 		        print("「お問い合わせ内容タイトル」関連がテキスト要素に存在することを確認しました")

 		        matched_list_title_value = []
 		        for i in list_2:
 		                   for j in title.title_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_title_value.append(i)
 		        print(len(matched_list_title_value))

#指定キーワードを除く
 		        matched_list_title_value = [i for i in matched_list_title_value if "request" not in i]
 		        print(matched_list_title_value)
 		        print("「お問い合わせ内容タイトル」のname値が存在することを確認しました")

 		        matched_list_title_id = []
 		        for i in list_2d:
 		                   for j in title.title_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_title_id.append(i)
 		        print(len(matched_list_title_id))

#指定キーワードを除く
 		        matched_list_title_id = [i for i in matched_list_title_id if "request" not in i]
 		        print(matched_list_title_id)
 		        print("「お問い合わせ内容タイトル」のid値が存在することを確認しました")

 		        matched_list_title_class = []
 		        for i in list_2c:
 		                   for j in title.title_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_title_class.append(i)
 		        print(len(matched_list_title_class))

#指定キーワードを除く
 		        matched_list_title_class = [i for i in matched_list_title_class if "request" not in i]
 		        print(matched_list_title_class)
 		        print("「お問い合わせ内容タイトル」のclass値が存在することを確認しました")


#（タグテキストに含まれる）
 		        print("「お問い合わせ内容タイトル」関連がタグテキストに含まれる")
 		        try:
 		         if not len(matched_list_title1) == 0 \
                      or not len(matched_list_title2) == 0 \
						  and len(matched_list_title_value) == 1:
 		             elemName0 = driver.find_element_by_name(matched_list_title_value[0])
 		             try:
 		               if elemName0.is_displayed() is False:
 		                 pass
 		               else:
 		                 driver.find_element_by_name(matched_list_title_value[0]).send_keys(adid.m_textCtrl6.GetValue())
 		                 input_history.append("タイトル")
 		                 print("「お問い合わせ内容タイトル」を入力済み")

#操作できない要素の回避
 		             except ElementNotInteractableException:
 		               pass

 		         elif not len(matched_list_title1) == 0 \
					  or not len(matched_list_title2) == 0 \
						  and len(matched_list_title_id) == 1:
 		             elemName0 = driver.find_element_by_id(matched_list_title_id[0])
 		             try:
 		               if elemName0.is_displayed() is False:
 		                 pass
 		               else:
 		                 driver.find_element_by_id(matched_list_title_id[0]).send_keys(adid.m_textCtrl6.GetValue())
 		                 input_history.append("タイトル")
 		                 print("「お問い合わせ内容タイトル」を入力済み（id値）")
                                          
#操作できない要素の回避
 		             except ElementNotInteractableException:
 		               pass                          

 		           		          
 		         elif not len(matched_list_title1) == 0 \
					  or not len(matched_list_title2) == 0 \
						  and len(matched_list_title_class) == 1:
 		             elemName0 = driver.find_element_by_class_name(matched_list_title_class[0])
 		             try:
 		               if elemName0.is_displayed() is False:
 		                 pass
 		               else:
 		                 driver.find_elements_by_class_name(matched_list_title_class[0])[2].send_keys(adid.m_textCtrl6.GetValue())
 		                 input_history.append("タイトル")
 		                 print("「お問い合わせ内容タイトル」を入力済み（class値）")
#操作できない要素の回避
 		             except ElementNotInteractableException:
 		               pass


#（タグテキストに含まれない）
 		         elif len(matched_list_title1) == 0 \
					  or len(matched_list_title2) == 0 \
						  and len(matched_list_title_value) == 1:
 		             print("「お問い合わせ内容タイトル」関連がタグテキストに含まれない")
 		             elemName0 = driver.find_element_by_name(matched_list_title_value[0])
 		             try:
 		               if elemName0.is_displayed() is False:
 		                 pass
 		               else:
 		                 driver.find_element_by_name(matched_list_title_value[0]).send_keys(adid.m_textCtrl6.GetValue())
 		                 input_history.append("タイトル")
 		                 print("「お問い合わせ内容タイトル」を入力済み")

#操作できない要素の回避
 		             except ElementNotInteractableException:
 		               pass

                           
 		         elif len(matched_list_title1) == 0 \
					  or len(matched_list_title2) == 0 \
						  and len(matched_list_title_class) == 1:
 		             print("「お問い合わせ内容タイトル」関連がタグテキストに含まれない")
 		             elemName0 = driver.find_element_by_class_name(matched_list_title_class[0])
 		             try:
 		               if elemName0.is_displayed() is False:
 		                 pass
 		               else:
 		                 driver.find_elements_by_class_name(matched_list_title_class[0])[2].send_keys(adid.m_textCtrl6.GetValue())
 		                 input_history.append("タイトル")
 		                 print("「お問い合わせ内容タイトル」を入力済み（class値）")
#操作できない要素の回避
 		             except ElementNotInteractableException:
 		               pass

 		         elif len(matched_list_title1) == 0 \
					  or len(matched_list_title2) == 0 \
						  and len(matched_list_title_id) == 1:
 		             print("「お問い合わせ内容タイトル」関連がタグテキストに含まれない")
 		             elemName0 = driver.find_element_by_id(matched_list_title_id[0])
 		             try:
 		               if elemName0.is_displayed() is False:
 		                 pass
 		               else:
 		                 driver.find_element_by_id(matched_list_title_id[0]).send_keys(adid.m_textCtrl6.GetValue())
 		                 input_history.append("タイトル")
 		                 print("「お問い合わせ内容タイトル」を入力済み（id値）")
                                          
#操作できない要素の回避
 		             except ElementNotInteractableException:
 		               pass

#リストインデックスに関するエラー回避                    
 		        except IndexError as e:
 		           print(e)
                    

#textareaタグのname値を取得
 		        TEXTAREA_list1 = []
 		        TEXTAREA_list2 = []
 		        TEXTAREA_list3 = []
 		        MAXLEN = []
 		        element3 = soup.find_all("textarea")
 		        print("textareaタグのname値を取得")
 		        print(element3)

#パターン追加（2021.12.07）
#textareaタグのname値が「住所」になっている場合の対策
 		        list_4tn = []
                 
# 		        element4 = soup.find_all("textarea",attrs={"name":"ご住所"})
# 		        print(element4)

 		        if "住所" in str(element3) \
                     or "address" in str(element3):
 		          print("textareaタグのname値に「住所」「address」が含まれることを確認")
 		          adid = MyProject1MyDialog4(self)
 		          for elem in element3:
 		            list_4tn.append(elem.get("name"))

 		          list_4tn = [i for i in list_4tn if i is not None]
 		          print(list_4tn)

 		          list_5tn = [i for i in list_4tn if "住所" in i \
                         or "address" in i]
 		          print(len(list_5tn))

 		          if len([i for i in list_1 if "都道府県以降" in i \
                         or "都道府県以下" in i]) == 0:
 		            driver.find_element_by_name(list_5tn[0]).clear()
 		            driver.find_element_by_name(list_5tn[0]).send_keys(adid.m_comboBox6.GetValue() \
						+ adid.m_textCtrl30.GetValue() \
							+ adid.m_textCtrl31.GetValue() \
								+ adid.m_textCtrl32.GetValue())
 		            input_history.append("住所")
 		            print("textareaタグにおいて「都道府県以降住所」を入力済み")

 		          else:
 		            driver.find_element_by_name(list_5tn[0]).clear()
 		            driver.find_element_by_name(list_5tn[0]).send_keys(adid.m_textCtrl30.GetValue() \
						+ adid.m_textCtrl31.GetValue() \
							+ adid.m_textCtrl32.GetValue())
 		            input_history.append("住所")
 		            print("textareaタグにおいて「都道府県含む住所」を入力済み")

#textareaタグ内のname属性に"問合せ"を含む要素をリスト内包
 		          print("textareaタグのname値に「問合せ」「message」「問い合わせ」が含まれるかの確認")
 		          adid = MyProject1MyDialog5(self)
 		          list_5tn = [i for i in list_4tn if "問合せ" in i \
                         or "message" in i \
                             or "問い合わせ" in i]
 		          print(len(list_5tn))

 		          for elem in element3:
 		            MAXLEN.append(elem.get("maxlength"))
 		          MAXLEN = [i for i in MAXLEN if i is not None]
 		          print("文字数制限有無の確認：" + str(MAXLEN))

#送信本文字数制限チェック
 		          if not MAXLEN == []:
 		           	   if int(MAXLEN[0]) < 2000 and not int(MAXLEN[0]) == 100:
 		           	      input_history.append(MAXLEN[0] + "文字以内に設定されています。")
 		           	      print(MAXLEN[0] + "文字以内に設定されています。")
 		           	   elif int(MAXLEN[0]) == 100:
 		           	      input_history.append("本文字数制限なし")
 		           	      print("本文字数制限なし")
 		          elif MAXLEN == []:
 		           	      input_history.append("本文字数制限なし")
 		           	      print("本文字数制限なし")

#name値のみ存在
 		          if len(list_5tn) > 0 \
                         and not MAXLEN == []:
 		           	 print("textareaタグのname値のみ存在することを確認")
 		           	 if 1000 < int(MAXLEN[0]) < 2000:
 		           	   driver.find_element_by_name(list_5tn[0]).send_keys(adid.m_textCtrl9.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	 elif 500 < int(MAXLEN[0]) < 1000:
 		           	   driver.find_element_by_name(list_5tn[0]).send_keys(adid.m_textCtrl10.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")                           
 		           	 elif int(MAXLEN[0]) <= 500 \
                          and not int(MAXLEN[0]) == 100:
 		           	   driver.find_element_by_name(list_5tn[0]).send_keys(adid.m_textCtrl11.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	 elif int(MAXLEN[0]) == 100:
 		           	   driver.find_element_by_name(list_5tn[0]).send_keys(adid.m_textCtrl8.GetValue())
 		           	   input_history.append("通常本文投稿済み")
 		           	   print("通常本文投稿済み")
 		          elif len(list_5tn) > 0 \
                         and MAXLEN == []:
 		           	   driver.find_element_by_name(list_5tn[0]).send_keys(adid.m_textCtrl8.GetValue())
 		           	   input_history.append("通常本文投稿済み")
 		           	   print("通常本文投稿済み")


#通常のtextareaタグに対する処理
 		        elif not "住所" in str(element3) \
                     or "address" in str(element3):
 		         print("textareaタグのname値に「住所」「address」が含まれていないことを確認")
 		            
 		         for textarea in element3:
 		             TEXTAREA_list1.append(textarea.get("id"))
 		             TEXTAREA_list2.append(textarea.get("name"))
 		             TEXTAREA_list3.append(textarea.get("class"))
 		             MAXLEN.append(textarea.get("maxlength"))
                      
 		         TEXTAREA_list1 = [i for i in TEXTAREA_list1 if i is not None \
					and "recaptcha" not in i \
						and "wpcf7" not in i]
 		         print(TEXTAREA_list1)
                      
 		         TEXTAREA_list2 = [i for i in TEXTAREA_list2 if i is not None \
					and "recaptcha" not in i \
						and "wpcf7" not in i]
 		         print(TEXTAREA_list2)                        
     
 		         TEXTAREA_list3 = [i for i in TEXTAREA_list3 if i is not None \
					and "recaptcha" not in i \
						and "wpcf7" not in i]
                      
#二次元配列から一次配列への変換
 		         TEXTAREA_list3 = [i for sublist in TEXTAREA_list3 for i in sublist]
 		         print(TEXTAREA_list3)
                        
 		         MAXLEN = [i for i in MAXLEN if i is not None]
                  
 		         print("textareaタグの各値は？")
                  
#printは文字列以外のリストを結合しようとすると、「TypeError: can only concatenate str (not "list") to str」になってしまうので注意！！
 		         print("id_=" + ",".join(TEXTAREA_list1))
 		         print("name_=" + ",".join(TEXTAREA_list2))
 		         print("class_=" + ",".join(TEXTAREA_list3))
 		         print("文字数制限有無の確認：" + ",".join(MAXLEN))
                  
# 		            for elem3 in element3: 
# 		             items_1.append(name.get("placeholder"))
# 		             print(items_1)

#送信本文字数制限チェック
 		         if not MAXLEN == []:
 		           if int(MAXLEN[0]) < 2000 and not int(MAXLEN[0]) == 100:
 		           	  input_history.append(MAXLEN[0] + "文字以内に設定されています。")
 		           	  print("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           elif int(MAXLEN[0]) == 100:
 		           	  input_history.append("本文字数制限なし")
 		           	  print("本文字数制限なし")
 		         elif MAXLEN == []:
 		           	  input_history.append("本文字数制限なし")
 		           	  print("本文字数制限なし")                          
                          
#（Googleフォーム）
#<textarea class="KHxj8b tL9Q4c" jsname="YPqjbf" data-rows="1" tabindex="0" aria-label="回答を入力" jscontroller="gZjhIf" jsaction="input:Lg5SV;ti6hGc:XMgOHc;rcuQ6b:WYd;" required="" dir="auto" data-initial-dir="auto" data-initial-value="" aria-labelledby="i13" aria-describedby="i14 i15" style="height: 24px;"></textarea>
#※「class="quantumWizTextinputPapertextareaInput.exportTextarea"」は現在使えないので注意！！（2022.03.02）
 		         if not len([i for i in TEXTAREA_list3 if "tL9Q4c" in i]) == 0:
 		           driver.find_elements_by_css_selector(".KHxj8b.tL9Q4c")[0].send_keys(adid.m_textCtrl8.GetValue())
 		           input_history.append("通常本文投稿済み")

#id値が存在する場合
 		         elif len(TEXTAREA_list1) > 0 \
                       and len(TEXTAREA_list2) == 0 \
                           and len(TEXTAREA_list3) == 0 \
                               and not MAXLEN == []:
 		           	 print("textareaタグのid値が存在する")
                         
 		           	 if 1000 < int(MAXLEN[0]) < 2000:
 		           	   driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl9.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	 elif 500 < int(MAXLEN[0]) < 1000:
 		           	   driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl10.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	 elif int(MAXLEN[0]) <= 500 \
                             and not int(MAXLEN[0]) == 100:
 		           	   driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl11.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	 elif int(MAXLEN[0]) == 100:
 		           	   driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl8.GetValue())
 		           	   input_history.append("通常本文投稿済み")
 		           	   print("通常本文投稿済み")

 		         elif len(TEXTAREA_list1) > 0 \
                       and len(TEXTAREA_list2) == 0 \
                           and len(TEXTAREA_list3) == 0 \
                               and MAXLEN == []:
 		           	   print("textareaタグのid値が存在する")
 		           	   driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl8.GetValue())
 		           	   input_history.append("通常本文投稿済み")
 		           	   print("textareaタグのid値が存在、且つ文字数制限なし")
                           

#name値のみ存在
 		         elif len(TEXTAREA_list1) == 0 \
                       and len(TEXTAREA_list2) > 0 \
                           and len(TEXTAREA_list3) == 0 \
                               and not MAXLEN == []:
 		           	 print("textareaタグのname値が存在する")
                         
 		           	 if 1000 < int(MAXLEN[0]) < 2000:
 		           	   driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl9.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		           	 elif 500 < int(MAXLEN[0]) < 1000:
 		           	   driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl10.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")
                           
 		           	 elif int(MAXLEN[0]) <= 500 \
                          and not int(MAXLEN[0]) == 100:
 		           	   driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl11.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")
                           
 		           	 elif int(MAXLEN[0]) == 100:
 		           	   driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl8.GetValue())
 		           	   input_history.append("通常本文投稿済み")
 		           	   print("通常本文投稿済み")

 		         elif len(TEXTAREA_list1) == 0 \
                       and len(TEXTAREA_list2) > 0 \
                           and len(TEXTAREA_list3) == 0 \
                               and MAXLEN == []:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl8.GetValue())
 		               input_history.append("通常本文投稿済み")
 		               print("textareaタグのname値が存在、且つ文字数制限なし")


#name値及びclass値が存在する場合
 		         elif len(TEXTAREA_list1) == 0 \
                       and len(TEXTAREA_list2) == 1 \
                           and len(TEXTAREA_list3) > 0 \
                               and not MAXLEN == []:
 		           	 print("textareaタグのname値及びclass値が存在する場合")

 		           	 if 1000 < int(MAXLEN[0]) < 2000:
 		           	   driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl9.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		           	 elif 500 < int(MAXLEN[0]) < 1000:
 		           	   driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl10.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		           	 elif int(MAXLEN[0]) <= 500 \
                          and not int(MAXLEN[0]) == 100:
 		           	   driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl11.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		           	 elif int(MAXLEN[0]) == 100:
 		           	   driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl8.GetValue())
 		           	   input_history.append("通常本文投稿済み")
 		           	   print("通常本文投稿済み")

 		         elif len(TEXTAREA_list1) == 0 \
                       and len(TEXTAREA_list2) == 1 \
                           and len(TEXTAREA_list3) > 0 \
                               and MAXLEN == []:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl8.GetValue())
 		               input_history.append("通常本文投稿済み")
 		               print("textareaタグのname値及びclass値が存在、且つ文字数制限なし")


#textareaタグが複数存在する
 		         elif len(TEXTAREA_list1) == 0 \
                       and len(TEXTAREA_list2) > 1 \
                           and len(TEXTAREA_list3) > 1 \
                               and not MAXLEN == []:
 		           	 print("textareaタグが複数、且つname値及びclass値が存在する")
                         
 		           	 if 1000 < int(MAXLEN[0]) < 2000:
 		           	   driver.find_element_by_name(TEXTAREA_list2[len(TEXTAREA_list2)-1]).send_keys(adid.m_textCtrl9.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")
                           
 		           	 elif 500 < int(MAXLEN[0]) < 1000:
 		           	   driver.find_element_by_name(TEXTAREA_list2[len(TEXTAREA_list2)-1]).send_keys(adid.m_textCtrl10.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")
                           
 		           	 elif int(MAXLEN[0]) <= 500 \
                          and not int(MAXLEN[0]) == 100:
 		           	   driver.find_element_by_name(TEXTAREA_list2[len(TEXTAREA_list2)-1]).send_keys(adid.m_textCtrl11.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")
                           
 		           	 elif int(MAXLEN[0]) == 100:
 		           	   driver.find_element_by_name(TEXTAREA_list2[len(TEXTAREA_list2)-1]).send_keys(adid.m_textCtrl8.GetValue())
 		           	   input_history.append("通常本文投稿済み")
 		           	   print("通常本文投稿済み")

 		         elif len(TEXTAREA_list1) == 0 \
                       and len(TEXTAREA_list2) > 1 \
                           and len(TEXTAREA_list3) > 1 \
                               and MAXLEN == []:
 		               driver.find_element_by_name(TEXTAREA_list2[len(TEXTAREA_list2)-1]).send_keys(adid.m_textCtrl8.GetValue())
 		               input_history.append("通常本文投稿済み")
 		               print("textareaタグが複数、且つname値及びclass値が存在して文字数制限なし")


#id値及びclass値の両方が存在
 		         elif len(TEXTAREA_list1) > 0 \
                       and len(TEXTAREA_list2) == 0 \
                           and len(TEXTAREA_list3) > 0 \
                               and not MAXLEN == []:
 		           	 print("textareaタグのid値及びclass値が存在する")
                         
 		           	 if 1000 < int(MAXLEN[0]) < 2000:
 		           	   driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl9.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		           	 elif 500 < int(MAXLEN[0]) < 1000:
 		           	   driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl10.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")
                           
 		           	 elif int(MAXLEN[0]) <= 500 \
                          and not int(MAXLEN[0]) == 100:
 		           	   driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl11.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		           	 elif int(MAXLEN[0]) == 100:
 		           	   driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl8.GetValue())
 		           	   input_history.append("通常本文投稿済み")
 		           	   print("通常本文投稿済み")

 		         elif len(TEXTAREA_list1) > 0 \
                       and len(TEXTAREA_list2) == 0 \
                           and len(TEXTAREA_list3) > 0 \
                               and MAXLEN == []:
 		               driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl8.GetValue())
 		               input_history.append("通常本文投稿済み")
 		               print("textareaタグのid値及びclass値が存在、且つ文字数制限なし")


#id値及びname値が存在しない場合
 		         elif len(TEXTAREA_list1) == 0 \
                       and len(TEXTAREA_list2) == 0 \
                           and len(TEXTAREA_list3) > 0 \
                               and not MAXLEN == []:
 		           	 print("textareaタグのclass値が存在する")                                   
                                   
 		           	 if 1000 < int(MAXLEN[0]) < 2000:
 		           	   driver.find_element_by_class_name(TEXTAREA_list3[0]).send_keys(adid.m_textCtrl9.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		           	 elif 500 < int(MAXLEN[0]) < 1000:
 		           	   driver.find_element_by_class_name(TEXTAREA_list3[0]).send_keys(adid.m_textCtrl10.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")
                           
 		           	 elif int(MAXLEN[0]) <= 500 \
                          and not int(MAXLEN[0]) == 100:
 		           	   driver.find_element_by_class_name(TEXTAREA_list3[0]).send_keys(adid.m_textCtrl11.GetValue())
 		           	   input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		           	 elif int(MAXLEN[0]) == 100:
 		           	   driver.find_element_by_class_name(TEXTAREA_list3[0]).send_keys(adid.m_textCtrl8.GetValue())
 		           	   input_history.append("通常本文投稿済み")
 		           	   print("本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		         elif len(TEXTAREA_list1) == 0 \
                       and len(TEXTAREA_list2) == 0 \
                           and len(TEXTAREA_list3) > 0 \
                               and MAXLEN == []:
 		               driver.find_element_by_class_name(TEXTAREA_list3[0]).send_keys(adid.m_textCtrl8.GetValue())
 		               input_history.append("通常本文投稿済み")
 		               print("textareaタグのclass値が存在、且つ文字数制限なし")


#id値及びname値の両方が存在
 		         elif len(TEXTAREA_list1) > 0 \
                       and len(TEXTAREA_list2) > 0 \
                           and len(TEXTAREA_list3) == 0:
 		           		          print("textareaタグのid値及びname値が存在する")
 		           		          elemName0 = driver.find_element_by_name(TEXTAREA_list2[0]) 		           		          
 		           		          if len(TEXTAREA_list2) > 1:
 		           		            elemName1 = driver.find_element_by_name(TEXTAREA_list2[1])
 		           		            elemName2 = driver.find_element_by_name(TEXTAREA_list2[2])
 		           		            print("「TEXTAREA_list2」タグが１個以上存在することを確認")
                                        
 		           		            try:
 		           		              if elemName0.is_displayed() is False \
                                              or elemName1.is_displayed() is False \
                                                  or elemName2.is_displayed() is False:

 		           		           		          if "1" in TEXTAREA_list2[0]:
 		           		           		            driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl8.GetValue())
 		           		           		            input_history.append("通常本文投稿済み")
 		           		           		            print("通常本文投稿済み：" + TEXTAREA_list2[0])
 		           		           		          elif "2" in TEXTAREA_list2[1]:
 		           		           		            driver.find_element_by_name(TEXTAREA_list2[1]).send_keys(adid.m_textCtrl8.GetValue())
 		           		           		            input_history.append("通常本文投稿済み")
 		           		           		            print("通常本文投稿済み：" + TEXTAREA_list2[1])
 		           		           		          elif "3" in TEXTAREA_list2[2]:
 		           		           		            driver.find_element_by_name(TEXTAREA_list2[2]).send_keys(adid.m_textCtrl8.GetValue())
 		           		           		            input_history.append("通常本文投稿済み")
 		           		           		            print("通常本文投稿済み：" + TEXTAREA_list2[2])
 		           		           		           
#操作できない要素の回避
 		           		            except ElementNotInteractableException:
 		           		              pass
 		           		           		           
 		           		          else:
 		           		            driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl8.GetValue())
 		           		            input_history.append("通常本文投稿済み")
 		           		            print("通常本文投稿済み：" + TEXTAREA_list1[0])

#全て存在
 		         elif len(TEXTAREA_list1) > 0 \
                       and len(TEXTAREA_list2) > 0 \
                           and len(TEXTAREA_list3) > 0 \
                               and not MAXLEN == []:
 		             print("textareaタグのid値・name値・class値の全てが存在する")
                                   
 		             if 1000 < int(MAXLEN[0]) < 2000:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl9.GetValue())
 		               input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		               print("本文" + MAXLEN[0] + "文字以内で投稿しました。")

#パターン追加（2021.12.26）
#<textarea name="data[Contact][message]" maxlength="1000" cols="30" rows="6" id="ContactMessage" required="required"></textarea>
 		             elif 500 < int(MAXLEN[0]) < 1000 \
                          or int(MAXLEN[0]) == 1000:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl10.GetValue())
 		               input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		               print("本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif int(MAXLEN[0]) <= 500 \
                          and not int(MAXLEN[0]) == 100:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl11.GetValue())
 		               input_history.append("本文" + MAXLEN[0] + "文字以内で投稿しました。")
 		               print("本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif int(MAXLEN[0]) == 100:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl8.GetValue())
 		               input_history.append("通常本文投稿済み")
 		               print("通常本文投稿済み")

 		         elif len(TEXTAREA_list1) > 0 \
                       and len(TEXTAREA_list2) > 0 \
                           and len(TEXTAREA_list3) > 0 \
                               and MAXLEN == []:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl8.GetValue())
 		               input_history.append("通常本文投稿済み")
 		               print("textareaタグのid値・name値・class値の全てが存在、且つ文字数制限なし")


#（お問い合わせ内容）
#プルダウンメニュー
 		        print("「お問い合わせ内容」に関するドロップダウンボックスが存在するか否かの確認")
 		        list_6 = []
 		        for element5 in soup.find_all("select"):
 		            list_6.append(element5.get("name"))
 		        list_6 =[i for i in list_6 if i is not None]
 		        print("selectタグのname値：" + ",".join(list_6))
 		        list_7 = []
 		        for element5 in soup.find_all("select"):
 		            list_7.append(element5.get("id"))
 		        list_7 =[i for i in list_7 if i is not None]
 		        print("selectタグのid値：" + ",".join(list_7))

 		        SELECT_list1 = []
 		        for element in soup.find_all("option"): 
 		             SELECT_list1.append(element.get("value"))
 		        SELECT_list1 =[i for i in SELECT_list1 if i is not None]
 		        print("optionタグのvalue値：" + ",".join(SELECT_list1))

 		        if SELECT_list1 == []:
 		          for element in soup.find_all("option"): 
 		             SELECT_list1.append(element.get("value"))
 		          SELECT_list1 =[i for i in SELECT_list1 if i is not None]
 		          print("optionタグのvalue値なし：" + ",".join(SELECT_list1))
 		        else:
 		          pass

 		        matched_list_option_value = []
 		        for i in SELECT_list1:
 		                   for j in Select_contents.option_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_option_value.append(i)
 		        for i in SELECT_list1:
 		                   for j in Select_contents.option_value_mat:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_option_value.append(i)
 		        print("optionタグのvalue値（お問い合わせの種類）：" + str(matched_list_option_value))

 		        matched_list_select_name_value = []
 		        for i in list_6:
 		                   for j in Select_contents.select_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_select_name_value.append(i)
# 		        print("selectタグのname値に含まれた数：" + str(len(matched_list_select_name_value)))

 		        matched_list_select_id_value = []
 		        for i in list_7:
 		                   for j in Select_contents.select_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_select_id_value.append(i)
# 		        print("selectタグのid値に含まれた数：" + str(len(matched_list_select_id_value)))

 		        matched_list_select_name_Time_value = []
 		        for i in list_6:
 		                   for j in contact_method.select_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_select_name_Time_value.append(i)
 		        print("selectタグのname値：" + str(matched_list_select_name_value))

 		        matched_list_select_id_Time_value = []
 		        for i in list_7:
 		                   for j in contact_method.select_value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_select_id_Time_value.append(i)
 		        print("selectタグのid値：" + str(matched_list_select_id_value))


 		        matched_list_option_contact_value = []
 		        for i in SELECT_list1:
 		                   for j in contact_method.value_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_option_contact_value.append(i)
 		        print("optionタグのvalue値（連絡方法）：" + str(matched_list_option_contact_value))

 		        matched_list_contact_method_name_value = []
 		        for i in list_6:
 		                   for j in contact_method.keywords_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_contact_method_name_value.append(i)
 		        print("matched_list_contact_method_name_value：" + str(matched_list_contact_method_name_value))

 		        matched_list_contact_method_id_value = []
 		        for i in list_7:
 		                   for j in contact_method.keywords_inc:
 		                     if not j in i:
 		                       pass
 		                     elif j in i:
 		                       matched_list_contact_method_id_value.append(i)
 		        print("matched_list_contact_method_id_value：" + str(matched_list_contact_method_id_value))


#optionタグ内のvalue値が1個もない
#selectタグ内のname値が0個でない
#selectタグ内のid値が1個もない 		             
 		        if len(SELECT_list1) == 0 \
                     and not matched_list_option_value == [] \
                         and not len(matched_list_select_name_value) == 0 \
                             and len(matched_list_select_id_value) == 0:
 		              print("SELECT_list1：" + str(len(SELECT_list1)))
 		              print("matched_list_option_value：" + str(len(matched_list_option_value)))
 		              print("matched_list_select_name_value：" + str(len(matched_list_select_name_value)))
 		              print("matched_list_select_id_value：" + str(len(matched_list_select_id_value)))
                       
 		              if len([i for i in items_1 if "連絡方法" in i]) > 0 \
                           or len([i for i in list_1 if "連絡方法" in i]) > 0:
 		           		          if not matched_list_select_name_value == [] \
									and not matched_list_contact_method_name_value == []:
 		           		            print("「連絡方法」関連がテキスト要素及び値に含まれている")
 		           		            dropdown = driver.find_element_by_name(matched_list_contact_method_name_value[0])
 		           		            select = Select(dropdown)
 		           		            select.select_by_index(len(select.options)-1)
 		           		            input_history.append(len(select.options)-1)
 		           		            print("selectタグから取得可能な選択肢の最後を選択済み")

 		           		            if len(matched_list_select_name_Time_value) > 0:
 		           		              dropdown = driver.find_element_by_name(matched_list_select_name_Time_value[0])
 		           		              print(matched_list_select_name_Time_value[0])
 		           		              select = Select(dropdown)
 		           		           
#選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
 		           		              select.select_by_index(len(select.options)-1)
 		           		           
#select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
#len()を使うことで選択肢の数を求めて最終選択肢を指定。
 		           		              input_history.append(len(select.options)-1)
 		           		              print("ドロップダウンボックス要素：" + str(matched_list_select_name_Time_value[0]))
 		           		              print("時間帯指定済み")
									  
 		           		              dropdown = driver.find_element_by_name(matched_list_select_name_value[0])
 		           		              select = Select(dropdown)
 		           		              select.select_by_index(len(select.options)-1)
 		           		              input_history.append(len(select.options)-1)
 		           		              print("ドロップダウンボックス要素：" + str(matched_list_select_name_value[0]))
 		           		              print("お問い合わせ内容選択済み")
 		              else:
 		           		          if not matched_list_select_name_value == []: 		           		             
 		           		            dropdown = driver.find_element_by_name(matched_list_select_name_value[0])
 		           		            print(matched_list_select_name_value[0])
 		           		            select = Select(dropdown)
 		           		           
#選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
 		           		            select.select_by_index(len(select.options)-1)
 		           		           
#select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
#len()を使うことで選択肢の数を求めて最終選択肢を指定。
 		           		            input_history.append(len(select.options)-1)
# 		           		            print("ドロップダウンボックス要素：" + matched_list_select_name_value[0])
 		           		            print("選択肢の数が不明な為、select.optionにより選択肢の数を求めて最終選択肢を指定：" + str(len(select.options)-1))
                                        

#optionタグ内のvalue値が0個以上
#selectタグ内のname値が0個でない
#selectタグ内のid値が1個もない
 		        elif len(SELECT_list1) > 0 \
                     and not matched_list_option_value == [] \
                         and not len(matched_list_select_name_value) == 0 \
                             and len(matched_list_select_id_value) == 0:
 		              print("SELECT_list1：" + str(len(SELECT_list1)))
 		              print("matched_list_option_value：" + str(len(matched_list_option_value)))
 		              print("matched_list_select_name_value：" + str(len(matched_list_select_name_value)))
 		              print("matched_list_select_id_value：" + str(len(matched_list_select_id_value)))

 		              if len([i for i in items_1 if "連絡方法" in i]) > 0 \
                           or len([i for i in list_1 if "連絡方法" in i]) > 0:
 		           		          if not matched_list_select_name_value == [] \
									and not matched_list_contact_method_name_value == []:
 		           		            print("「連絡方法」関連がテキスト要素及び値に含まれている")
 		           		            dropdown = driver.find_element_by_name(matched_list_contact_method_name_value[0])
 		           		            select = Select(dropdown)
 		           		            select.select_by_value(matched_list_option_contact_value[len(matched_list_option_contact_value)-1])
 		           		            input_history.append(matched_list_option_contact_value[len(matched_list_option_contact_value)-1])
 		           		            print("optionタグから取得可能なvalue値の最後を選択：" + str(matched_list_option_value[len(matched_list_option_value)-1]))

 		           		            if len(matched_list_select_name_Time_value) > 0:
 		           		              dropdown = driver.find_element_by_name(matched_list_select_name_Time_value[0])
 		           		              print(matched_list_select_name_Time_value[0])
 		           		              select = Select(dropdown)
 		           		           
#選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
 		           		              select.select_by_index(len(select.options)-1)
 		           		           
#select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
#len()を使うことで選択肢の数を求めて最終選択肢を指定。
 		           		              input_history.append(len(select.options)-1)
 		           		              print("ドロップダウンボックス要素：" + str(matched_list_select_name_Time_value[0]))
 		           		              print("時間帯指定：" + str(len(select.options)-1))
									  
 		           		              dropdown = driver.find_element_by_name(matched_list_select_name_value[0])
 		           		              select = Select(dropdown)

#選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
 		           		              select.select_by_index(len(select.options)-1)
 		           		              input_history.append(matched_list_option_value[len(matched_list_option_value)-1])
 		           		              print("ドロップダウンボックス要素：" + str(matched_list_select_name_value[0]))
 		           		              print("お問い合わせ内容：" + str(matched_list_option_value[len(matched_list_option_value)-1]))
                         
 		              else:
 		           		          if not matched_list_select_name_value == []: 		           		             
 		           		            dropdown = driver.find_element_by_name(matched_list_select_name_value[0])
 		           		            print(matched_list_select_name_value[0])
 		           		            select = Select(dropdown)

#選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
 		           		            select.select_by_index(len(select.options)-1)
 		           		           
#select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
#len()を使うことで選択肢の数を求めて最終選択肢を指定。
 		           		            input_history.append(len(select.options)-1)
# 		           		            print("ドロップダウンボックス要素：" + matched_list_select_name_value[0])
 		           		            print("選択肢の数が不明な為、select.optionにより選択肢の数を求めて最終選択肢を指定：" + str(len(select.options)-1))


#optionタグ内のvalue値が0個以上
#selectタグ内のname値が1個もない
#selectタグ内のid値が0個でない
 		        elif len(SELECT_list1) > 0 \
                     and not matched_list_option_value == [] \
                         and len(matched_list_select_name_value) == 0 \
                             and not len(matched_list_select_id_value) == 0:

 		              print("SELECT_list1：" + str(len(SELECT_list1)))
 		              print("matched_list_option_value：" + str(len(matched_list_option_value)))
 		              print("matched_list_select_name_value：" + str(len(matched_list_select_name_value)))
 		              print("matched_list_select_id_value：" + str(len(matched_list_select_id_value)))

 		              if len([i for i in items_1 if "連絡方法" in i]) > 0 \
                           or len([i for i in list_1 if "連絡方法" in i]) > 0:
 		           		          if not matched_list_select_id_value == [] \
									and not matched_list_contact_method_id_value == []:
 		           		            print("「連絡方法」関連がテキスト要素及び値に含まれている")
 		           		            dropdown = driver.find_element_by_id(matched_list_contact_method_id_value[0])
 		           		            select = Select(dropdown)
 		           		            select.select_by_value(matched_list_option_contact_value[len(matched_list_option_contact_value)-1])
 		           		            input_history.append(matched_list_option_contact_value[len(matched_list_option_contact_value)-1])
 		           		            print("optionタグから取得可能なvalue値の最後を選択：" + str(matched_list_option_value[len(matched_list_option_value)-1]))

 		           		            if len(matched_list_select_id_Time_value) > 0:
 		           		              dropdown = driver.find_element_by_id(matched_list_select_id_Time_value[0])
 		           		              print(matched_list_select_id_Time_value[0])
 		           		              select = Select(dropdown)
 		           		           
#選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
 		           		              select.select_by_index(len(select.options)-1)
 		           		           
#select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
#len()を使うことで選択肢の数を求めて最終選択肢を指定。
 		           		              input_history.append(len(select.options)-1)
 		           		              print("ドロップダウンボックス要素：" + str(matched_list_select_id_Time_value[0]))
 		           		              print("時間帯指定：" + str(len(select.options)-1))
									  
 		           		              dropdown = driver.find_element_by_id(matched_list_select_id_value[0])
 		           		              select = Select(dropdown)
 		           		              select.select_by_value(matched_list_option_value[len(matched_list_option_value)-1])
 		           		              input_history.append(matched_list_option_value[len(matched_list_option_value)-1])
 		           		              print("ドロップダウンボックス要素：" + str(matched_list_select_id_value[0]))
 		           		              print("お問い合わせ内容：" + str(matched_list_option_value[len(matched_list_option_value)-1]))

 		              else:
 		           		          if not matched_list_select_id_value == []: 		           		             
 		           		            dropdown = driver.find_element_by_id(matched_list_select_id_value[0])
 		           		            print(matched_list_select_id_value[0])
 		           		            select = Select(dropdown)

#選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
 		           		            select.select_by_index(len(select.options)-1)
 		           		           
#select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
#len()を使うことで選択肢の数を求めて最終選択肢を指定。
 		           		            input_history.append(len(select.options)-1)
# 		           		            print("ドロップダウンボックス要素：" + matched_list_select_id_value[0])
 		           		            print("選択肢の数が不明な為、select.optionにより選択肢の数を求めて最終選択肢を指定：" + str(len(select.options)-1))

# 		               else:
# 		                 if not matched_list_select_id_value == []:
# 		                   dropdown = driver.find_element_by_id(matched_list_select_id_value[0])
# 		                   print(matched_list_select_id_value[0])
# 		                   select = Select(dropdown)
# 		                   select.select_by_value(matched_list_option_value[len(matched_list_option_value)-1])
# 		                   input_history.append(matched_list_option_value[len(matched_list_option_value)-1])


#optionタグ内のvalue値が0個以上
#selectタグ内のname値が0個でない
#selectタグ内のid値が0個でない
 		        elif len(SELECT_list1) > 0 \
                     and not matched_list_option_value == [] \
                         and not len(matched_list_select_name_value) == 0 \
                             and not len(matched_list_select_id_value) == 0:
                                 
 		              print("SELECT_list1：" + str(len(SELECT_list1)))
 		              print("matched_list_option_value：" + str(len(matched_list_option_value)))
 		              print("matched_list_select_name_value：" + str(len(matched_list_select_name_value)))
 		              print("matched_list_select_id_value：" + str(len(matched_list_select_id_value)))

 		              if len([i for i in items_1 if "連絡方法" in i]) > 0 \
                           or len([i for i in list_1 if "連絡方法" in i]) > 0:
# 		           		          if not matched_list_select_id_value == []:
 		           		          if not matched_list_select_id_value == [] \
									and not matched_list_contact_method_id_value == []:
 		           		            print("「連絡方法」関連がテキスト要素及び値に含まれている")
 		           		            dropdown = driver.find_element_by_id(matched_list_contact_method_id_value[0])
 		           		            select = Select(dropdown)
 		           		            select.select_by_value(matched_list_option_contact_value[len(matched_list_option_contact_value)-1])
 		           		            input_history.append(matched_list_option_contact_value[len(matched_list_option_contact_value)-1])
 		           		            print("optionタグから取得可能なvalue値の最後を選択：" + str(matched_list_option_value[len(matched_list_option_value)-1]))

 		           		            if len(matched_list_select_id_Time_value) > 0:
 		           		              dropdown = driver.find_element_by_id(matched_list_select_id_Time_value[0])
 		           		              print(matched_list_select_id_Time_value[0])
 		           		              select = Select(dropdown)
 		           		           
#選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
 		           		              select.select_by_index(len(select.options)-1)
 		           		           
#select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
#len()を使うことで選択肢の数を求めて最終選択肢を指定。
 		           		              input_history.append(len(select.options)-1)
 		           		              print("ドロップダウンボックス要素：" + str(matched_list_select_id_Time_value[0]))
 		           		              print("時間帯指定：" + str(len(select.options)-1))
									  
 		           		              dropdown = driver.find_element_by_id(matched_list_select_id_value[0])
 		           		              select = Select(dropdown)
 		           		              select.select_by_value(matched_list_option_value[len(matched_list_option_value)-1])
 		           		              input_history.append(matched_list_option_value[len(matched_list_option_value)-1])
 		           		              print("ドロップダウンボックス要素：" + str(matched_list_select_id_value[0]))
 		           		              print("お問い合わせ内容：" + str(matched_list_option_value[len(matched_list_option_value)-1]))

 		              else:
# 		           		          if not matched_list_select_id_value == []: 		           		             
 		           		            dropdown = driver.find_element_by_id(matched_list_select_id_value[0])
 		           		            select = Select(dropdown)

#選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
 		           		            select.select_by_index(len(select.options)-1)
 		           		           
#select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
#len()を使うことで選択肢の数を求めて最終選択肢を指定。
 		           		            input_history.append(len(select.options)-1)
# 		           		            print("ドロップダウンボックス選択済み：" + str(matched_list_select_id_value[len(matched_list_select_id_value)-1]))
 		           		            print("選択肢の数が不明な為、select.optionにより選択肢の数を求めて最終選択肢を指定：" + str(len(select.options)-1))

#選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
# 		                   select.select_by_index(len(select.options)-1)
 		           		           
#select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
#len()を使うことで選択肢の数を求めて最終選択肢を指定。                            
# 		                   select.select_by_value(matched_list_option_value[len(matched_list_option_value)-1])
# 		                   input_history.append(matched_list_option_value[len(matched_list_option_value)-1])


#optionタグ内のvalue値が0個以上
#「matched_list_option_value」が文字列以外（数字等）
#selectタグ内のname値が0個でない
#selectタグ内のid値が0個である
 		        elif len(SELECT_list1) > 0 \
                     and matched_list_option_value == [] \
                         and not len(matched_list_select_name_value) == 0 \
                             and len(matched_list_select_id_value) == 0:
                                 
 		              print("SELECT_list1：" + str(len(SELECT_list1)))
 		              print("matched_list_option_value：" + str(len(matched_list_option_value)))
 		              print("matched_list_select_name_value：" + str(len(matched_list_select_name_value)))
 		              print("matched_list_select_id_value：" + str(len(matched_list_select_id_value)))

 		              if len([i for i in items_1 if "連絡方法" in i]) > 0 \
                           or len([i for i in list_1 if "連絡方法" in i]) > 0:
# 		           		          if not matched_list_select_id_value == []:
 		           		            print("「連絡方法」関連がテキスト要素に含まれていることを確認")
 		           		            dropdown = driver.find_element_by_id(matched_list_select_id_value[0])
 		           		            select = Select(dropdown)
 		           		            select.select_by_value(matched_list_option_value[len(matched_list_option_value)-1])
 		           		            input_history.append(matched_list_option_value[len(matched_list_option_value)-1])
# 		           		            print("ドロップダウンボックス要素：" + matched_list_select_id_value[0])
 		           		            print("optionタグから取得可能なvalue値の最後を選択：" + str(matched_list_option_value[len(matched_list_option_value)-1]))

 		              else:
# 		           		          if not matched_list_select_id_value == []: 		           		             
# 		           		            dropdown = driver.find_element_by_id(matched_list_select_id_value[0])
 		           		            dropdown = driver.find_element_by_name(list_6[0])
 		           		            select = Select(dropdown)

#選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
 		           		            select.select_by_index(len(select.options)-1)
 		           		           
#select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
#len()を使うことで選択肢の数を求めて最終選択肢を指定。
 		           		            input_history.append(len(select.options)-1)
 		           		            print("選択肢の数が不明な為、select.optionにより選択肢の数を求めて最終選択肢を指定：" + str(len(select.options)-1))

#選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
# 		                   select.select_by_index(len(select.options)-1)
 		           		           
#select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
#len()を使うことで選択肢の数を求めて最終選択肢を指定。                            
# 		                   select.select_by_value(matched_list_option_value[len(matched_list_option_value)-1])
# 		                   input_history.append(matched_list_option_value[len(matched_list_option_value)-1])


#連絡可能時間
# 		        elif len(SELECT_list1) > 0 \
#                     and not matched_list_option_value == [] \
#                         and not len([i for i in matched_list_select_name_value if "time" in i \
#							or "時間帯" in i]) == 0 \
#                             and len(matched_list_select_id_value) == 0:
                                 
# 		              print("SELECT_list1：" + str(len(SELECT_list1)))
# 		              print("matched_list_option_value：" + str(len(matched_list_option_value)))
# 		              print("matched_list_select_name_value：" + str(len(matched_list_select_name_value)))
# 		              print("matched_list_select_id_value：" + str(len(matched_list_select_id_value)))

# 		              matched_list_select_name_value = [i for i in matched_list_select_name_value if "time" in i]
# 		              dropdown = driver.find_element_by_name(matched_list_select_name_value[0])
# 		              print(matched_list_select_name_value[0])
# 		              select = Select(dropdown)
 		           		           
#選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
# 		              select.select_by_index(len(select.options)-1)
 		           		           
#select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
#len()を使うことで選択肢の数を求めて最終選択肢を指定。
# 		              input_history.append(len(select.options)-1)
# 		              print("ドロップダウンボックス要素：" + matched_list_select_id_value[0])
# 		              print("選択肢の数が不明な為、select.optionにより選択肢の数を求めて最終選択肢を指定：" + str(len(select.options)-1))
                       
 		        else:
 		             input_history.append("ドロップボックスなし（又は未選択）")

 		           		             
#（連絡方法）・・・必要になったら後日検討
# 		           SELECT_list2 = [] 		            
# 		           SELECT_list2 = [i for i in SELECT_list1 if "メール" in i]
# 		           print(SELECT_list2)
 		            
# 		           if len(list_6) > 0:
# 		             for j in range(1, len(SELECT_list2)+1):
# 		              time.sleep(1) 		           		          
# 		             ws4.update_cell(Cell_12.row, Cell_12.col+1, SELECT_list2[j-1])
# 		              dropdown = driver.find_element_by_name(list_6[0])
# 		              print(list_6[0])
# 		             dropdown.click()
# 		              select = Select(dropdown)
# 		              select.select_by_value(SELECT_list2[j-1])

#（アンケート）
 		        if "知りましたか" in str(soup.find_all("form")) \
                        or "お知りに" in str(soup.find_all("form")):
 		            print("「アンケート」に関するテキスト要素が含まれていることを確認")
 		            SELECT_list2 = [i for i in SELECT_list1 if "ネット" in i]
 		            
 		            if len(list_6) == 1:
 		             for j in range(1, len(SELECT_list2)+1):
 		              dropdown = driver.find_element_by_name(list_6[0])
# 		             dropdown.click()
 		              select = Select(dropdown)
 		              select.select_by_value(SELECT_list2[j-1])
 		              print("selectタグのname値が１個：" + list_6[0])
 		              print("ドロップダウンボックスの選択肢：" + SELECT_list2[j-1])
 		              
 		            if len(list_6) > 1:
 		             for j in range(1, len(SELECT_list2)+1):
 		              dropdown = driver.find_element_by_name(list_6[1])
 		              print(list_6[1])
# 		             dropdown.click()
 		              select = Select(dropdown)
 		              select.select_by_value(SELECT_list2[j-1])
 		              print("selectタグのname値が２個以上：" + list_6[1])
 		              print("ドロップダウンボックスの選択肢：" + SELECT_list2[j-1])

#後で対応項目追加予定
# 		           elif len([i for i in list_2 if "知りましたか" in i \
# 		           		           		           		           		           or "お知りに" in i]) > 0:
# 		           		            Cell_list9 = [i for i in list_2 if "知りましたか" in i \
# 		           		           		           		           		           or "お知りに" in i]
# 		           		            print(Cell_list9)
# 		           		            driver.find_element_by_name(Cell_list9[0]).send_keys(ws2.cell(1, 3).value)
# 		           		            lastcol = len(list(ws3.row_values(k)))
# 		           		            time.sleep(1) 		           		             
# 		           		            ws3.update_cell(k, lastcol+1, ws2.cell(1, 3).value)


#チェックボックス
 		        element6 = soup.find_all("input",type="checkbox")
 		        print("チェックボックス要素")
 		        print(element6)
# 		        list_6 = []
 		            
#name
 		        matched_list_checkbox_name = []
 		        for elem1 in element6:
 		             matched_list_checkbox_name.append(elem1.get("name"))

#リストにNoneが含まれていると「TypeError: argument of type 'NoneType' is not iterable」が発生するので、リスト内包表記で処理
 		        matched_list_checkbox_name = [i for i in matched_list_checkbox_name if i is not None]
 		        print("inputタグに含まれるname値：" + ",".join(matched_list_checkbox_name))

#id
 		        matched_list_checkbox_id = []
 		        for elem2 in element6: 
 		             matched_list_checkbox_id.append(elem2.get("id"))
 		             
 		        matched_list_checkbox_id = [i for i in matched_list_checkbox_id if i is not None]
 		        print("inputタグに含まれるid値：" + ",".join(matched_list_checkbox_id))

#value
 		        matched_list_checkbox_value = []
 		        for elem1 in element6: 
 		             matched_list_checkbox_value.append(elem1.get("value"))

 		        matched_list_checkbox_value = [i for i in matched_list_checkbox_value if i is not None]
 		        print("inputタグに含まれるvalue値：" + ",".join(matched_list_checkbox_value))

#data-name
# 		        matched_list_checkbox_dataname = []
# 		        for elem1 in element6: 
# 		            matched_list_checkbox_dataname.append(elem1.get("data-name"))

# 		        matched_list_checkbox_dataname = [i for i in matched_list_checkbox_dataname if i is not None]
# 		        print("inputタグに含まれるdata-name値：" + matched_list_checkbox_dataname)


                                      

#お問い合わせの内容、項目選択
 		        try:
 		            print("お問い合わせに必要な選択要素が含まれるか否かの確認")
 		            matched_list_inquiry_sec1 = []
 		            matched_list_inquiry_sec2 = []
 		            matched_list_inquiry_sec3 = []
 		            matched_list_inquiry_sec4 = []                 
# 		        for i in items_1:
# 		                   for j in inquiry_selection.keywords_inc:
# 		                     if not j in i:
# 		                       pass
# 		                     elif j in i:
# 		                       matched_list_inquiry_selection1.append(i)
# 		        print(len(matched_list_inquiry_selection1))
# 		        for i in list_1:
# 		                   for j in inquiry_selection.keywords_inc:
# 		                     if not j in i:
# 		                       pass
# 		                     elif j in i:
# 		                       matched_list_inquiry_selection2.append(i)
# 		        print(len(matched_list_inquiry_selection2))

# 		        if len(matched_list_inquiry_selection1) > 0 \
#                     or len(matched_list_inquiry_selection2) > 0:
# 		          print("お問い合わせに必要な選択要素が含まれることを確認しました")

#formタグから文字列要素のみ取得し、
#更に「inquiry_selection.py」でリスト化された「keywords_inc」で絞り込む
 		            for i in str(soup.find_all("form")):
 		              for j in inquiry_selection.keywords_inc:
 		                if j in i:
 		                  matched_list_inquiry_sec1.append(i)

#指定キーワードを除く
 		            matched_list_inquiry_sec1 = [i for i in matched_list_inquiry_sec1 if i is not None]
 		            print("formタグに含まれる文字列要素：" + ",".join(matched_list_inquiry_sec1))

#name
 		            for i in matched_list_checkbox_name:
                         
#更に「inquiry_selection.py」でリスト化された「select_value_inc」で絞り込む
 		              for j in inquiry_selection.select_value_inc:
 		                if j in i:
 		                  matched_list_inquiry_sec2.append(i)
                           
#指定キーワードを除く
 		            matched_list_inquiry_sec2 = [i for i in matched_list_inquiry_sec2 if i is not None]
 		            print("お問い合わせに必要な選択要素が含まれるname値：" + ",".join(matched_list_inquiry_sec2))

#id
 		            for i in matched_list_checkbox_id:
                         
#更に「inquiry_selection.py」でリスト化された「select_value_inc」で絞り込む
 		              for j in inquiry_selection.select_value_inc:
 		                if j in i:
 		                  matched_list_inquiry_sec3.append(i)
                           
#指定キーワードを除く
 		            matched_list_inquiry_sec3 = [i for i in matched_list_inquiry_sec3 if i is not None]
 		            print("お問い合わせに必要な選択要素が含まれるid値：" + ",".join(matched_list_inquiry_sec3))

#value
 		            for i in matched_list_checkbox_value:
                         
#更に「inquiry_selection.py」でリスト化された「select_value_inc」で絞り込む
 		              for j in inquiry_selection.select_value_inc:
 		                if j in i:
 		                  matched_list_inquiry_sec4.append(i)
                           
#指定キーワードを除く
 		            matched_list_inquiry_sec4 = [i for i in matched_list_inquiry_sec4 if i is not None \
                                            and "採用" not in i]
 		            print("お問い合わせに必要な選択要素が含まれるvalue値：" + str(len(matched_list_inquiry_sec4)))

#重複した要素を削除し、新たなリストを生成（2022.8.16）
 		            if len(matched_list_inquiry_sec4) > 1:
 		              matched_list_inquiry_sec4 = list(dict.fromkeys(matched_list_inquiry_sec4))
 		              print(matched_list_inquiry_sec4)

 		            if len(matched_list_inquiry_sec4) == 1:
 		              print("「matched_list_inquiry_sec4」が１個存在します")
 		            if len(matched_list_inquiry_sec4) > 2:
 		              print("「matched_list_inquiry_sec4」が複数個存在します")
 		            elif len(matched_list_inquiry_sec4) == 0:
 		              print("「matched_list_inquiry_sec4」は存在しません")

#2022.8.16
#id要素が存在する
 		            if len(matched_list_inquiry_sec2) == 0 \
                             and len(matched_list_inquiry_sec3) == 1 \
								 and len(matched_list_inquiry_sec4) == 0:
 		              checkbox_id = driver.find_element_by_id(matched_list_inquiry_sec3[0])
 		              driver.execute_script("arguments[0].click();", checkbox_id)
 		              print(checkbox_id.is_selected())
 		              if checkbox_id.is_selected() is True:
 		                input_history.append(matched_list_inquiry_sec3[0])
 		                print("id値：" + matched_list_inquiry_sec3[0])


#id，value，name要素が存在する
 		            elif len(matched_list_inquiry_sec2) == 1 \
							 and len(matched_list_inquiry_sec3) == 1 \
								 and len(matched_list_inquiry_sec4) == 1:
 		              print("name、value、idが存在することを確認")

 		              checkbox_name = driver.find_element_by_name(matched_list_inquiry_sec2[0])
 		              if checkbox_name.is_selected() is not True:
 		                driver.execute_script("arguments[0].click();", checkbox_name)
 		                input_history.append(matched_list_inquiry_sec2[0])
 		                print("name値：" + matched_list_inquiry_sec2[0])
 		                if checkbox_name.is_selected() is not True:
 		                   checkbox_value = driver.find_element_by_css_selector("[value='"+ matched_list_inquiry_sec4[0] + "']")
 		                   driver.execute_script("arguments[0].click();", checkbox_value)
 		                   print("value値：" + matched_list_inquiry_sec4[0])
 		                   if checkbox_value.is_selected() is not True:
 		                     checkbox_id = driver.find_element_by_id(matched_list_inquiry_sec4[0])
 		                     input_history.append(matched_list_inquiry_sec4[0])
 		                     print(checkbox_id.is_selected() + "id値：" + matched_list_inquiry_sec4[0])

                                          
#valueのみしか存在しない
 		            elif len(matched_list_inquiry_sec2) == 0 \
							 and len(matched_list_inquiry_sec3) == 0 \
								 and len(matched_list_inquiry_sec4) == 1:
 		              print("valueが存在することを確認")
 		              checkbox_value = driver.find_element_by_css_selector("[value='"+ matched_list_inquiry_sec4[0] + "']")
 		              driver.execute_script("arguments[0].click();", checkbox_value)
 		              print(checkbox_value.is_selected())
 		              if checkbox_value.is_selected() is True:
 		                input_history.append(matched_list_inquiry_sec4[0])
 		                print("value値：" + matched_list_inquiry_sec4[0])


#id且つvalueの両方存在
 		            elif len(matched_list_inquiry_sec2) == 0 \
                             and len(matched_list_inquiry_sec3) == 1 \
                                 and len(matched_list_inquiry_sec4) == 1:
 		              print("value及びidが存在することを確認")
 		              checkbox_id = driver.find_element_by_id(matched_list_inquiry_sec3[0])
 		              driver.execute_script("arguments[0].click();", checkbox_id)
 		              print(checkbox_id.is_selected())
 		              if checkbox_id.is_selected() is True:
 		                input_history.append(matched_list_inquiry_sec3[0])
 		                print("id値：" + matched_list_inquiry_sec3[0])


#value且つnameの両方存在
 		            elif len(matched_list_inquiry_sec2) > 0 \
							 and len(matched_list_inquiry_sec3) == 0 \
								 and len(matched_list_inquiry_sec4) > 0:
 		              print("name及びvalueが存在することを確認")

 		              checkbox_name = driver.find_element_by_name(matched_list_inquiry_sec2[0])
 		              checkbox_value = driver.find_element_by_css_selector("[value='"+ matched_list_inquiry_sec4[0] + "']")

# 		              if len([i for i in matched_list_inquiry_sec4 if "採用" in i]) == 1 \
#                           and len(matched_list_inquiry_sec4) > 0:

# 		           		                try:
# 		           		                  checkbox_value = driver.find_elements_by_css_selector("[" + "value=" + matched_list_inquiry_sec4[len(matched_list_inquiry_sec4)-1] +"]")[len(matched_list_inquiry_sec4)-1]
 		              if checkbox_value.is_selected() is not True:
 		           		                      driver.execute_script("arguments[0].click();", checkbox_value)
 		           		                      print(checkbox_value.is_selected())
 		           		                      print("チェックボックス選択：" + matched_list_inquiry_sec4[len(matched_list_inquiry_sec4)-1])
 		           		                      input_history.append(matched_list_inquiry_sec4[len(matched_list_inquiry_sec4)-1])

# 		           		                except:
# 		           		                  pass

 		              elif checkbox_name.is_selected() is not True:
 		                driver.execute_script("arguments[0].click();", checkbox_name)
 		                input_history.append(matched_list_inquiry_sec2[0])
 		                print("name値：" + matched_list_inquiry_sec2[0])
 		                if checkbox_name.is_selected() is not True:
 		                   checkbox_value = driver.find_element_by_css_selector("[value='"+ matched_list_inquiry_sec4[0] + "']")
 		                   driver.execute_script("arguments[0].click();", checkbox_value)
# 		                   print(checkbox_value.is_selected() + "value値：" + matched_list_inquiry_sec4[0])
 		                   if checkbox_value.is_selected() is True:
 		                     input_history.append(matched_list_inquiry_sec4[0])
 		                     print("value値：" + matched_list_inquiry_sec4[0])


#一旦チェックボックスを外す
 		                     if "その他" in matched_list_inquiry_sec4[0]:
 		           		                  try:                                                
 		           		           		           checkbox1 = driver.find_element_by_css_selector("[" + "value=" + matched_list_inquiry_sec4[0] +"]")
 		           		           		           print(checkbox1.is_selected())
                                                            
#選択状態にある場合
 		           		           		           if checkbox1.is_selected() is True \
                                                              and len([i for i in input_history if "その他" in i]) > 0:
 		           		           		             pass

#選択状態にない場合
 		           		           		           elif checkbox1.is_selected() is False \
                                                              and not len([i for i in input_history if "その他" in i]) > 0:
 		           		           		             checkbox = driver.find_element_by_css_selector("[" + "value=" + matched_list_inquiry_sec4[0] +"]")
 		           		           		             driver.execute_script("arguments[0].click();", checkbox)
 		           		           		             print(checkbox.is_selected())
 		           		           		             if checkbox.is_selected() is True:
 		           		           		           		          input_history.append("その他（再選択）")
 		           		                  except:
 		           		                    pass


# 		                     elif "採用" in matched_list_inquiry_sec4[0] \
#                                  and "その他" in matched_list_inquiry_sec4[len(matched_list_inquiry_sec4)-1]:
# 		           		                try:
# 		           		                  checkbox_1 = driver.find_elements_by_css_selector("[" + "value=" + matched_list_inquiry_sec4[0] +"]")[0]
# 		           		                  checkbox_2 = driver.find_elements_by_css_selector("[" + "value=" + matched_list_inquiry_sec4[len(matched_list_inquiry_sec4)-1] +"]")[len(matched_list_inquiry_sec4)-1]
# 		           		                  if checkbox_1.is_selected() is True:
# 		           		                    driver.execute_script("arguments[0].click();", checkbox_1)
# 		           		                    print(checkbox.is_selected())
# 		           		                    print("チェックボックス解除：" + matched_list_inquiry_sec4[0])
# 		           		                    if checkbox_2.is_selected() is not True:
# 		           		                      driver.execute_script("arguments[0].click();", checkbox_2)
# 		           		                      print(checkbox_2.is_selected())
# 		           		                      print("チェックボックス選択：" + matched_list_inquiry_sec4[len(matched_list_inquiry_sec4)-1])
# 		           		                      input_history.append(matched_list_inquiry_sec4[len(matched_list_inquiry_sec4)-1])

# 		           		                except:
# 		           		                  pass

 		                     elif "お問い合わせ" in matched_list_inquiry_sec4[0]:
 		           		                try:
 		           		                  checkbox = driver.find_elements_by_css_selector("[" + "value=" + matched_list_inquiry_sec4[0] +"]")[0]
 		           		                  if checkbox.is_selected() is not True:
 		           		                    driver.execute_script("arguments[0].click();", checkbox)
 		           		                    print(checkbox.is_selected())
 		           		                    if checkbox.is_selected() is True:
 		           		                      input_history.append(matched_list_inquiry_sec4[0])
                                                  
 		           		                except:
 		           		                  pass

 		        except:
 		          pass


#（個人情報取り扱いに関する同意）
 		        try:
 		          matched_list_person_info1 = []
 		          matched_list_person_info2 = []
 		          matched_list_person_info3 = []
 		          matched_list_person_info4 = []
# 		            matched_list_person_info5 = []
 		          print("個人情報保護方針の同意を行うため要素の抽出開始")

#formタグから文字列要素のみ取得し、
#更に「Checkbox.py」でリスト化された「personal_info_value_inc」で絞り込む
 		          for i in str(soup.find_all("form")):
 		              for j in Checkbox.personal_info_value_inc:
 		                if j in i:
 		                  matched_list_person_info1.append(i)

#指定キーワードを除く
 		          matched_list_person_info1 = [i for i in matched_list_person_info1 if i is not None]
 		          print("formタグに含まれる文字列要素：" + ",".join(matched_list_person_info1))

#name
 		          for i in matched_list_checkbox_name:
                         
#更に「Checkbox.py」でリスト化された「personal_info_value_inc」で絞り込む
 		              for j in Checkbox.personal_info_value_inc:
 		                if j in i:
 		                  matched_list_person_info2.append(i)
                           
#指定キーワードを除く
 		          matched_list_person_info2 = [i for i in matched_list_person_info2 if i is not None]
 		          print("「個人情報保護方針」の関連が含まれるname値：" + ",".join(matched_list_person_info2))

#id
 		          for i in matched_list_checkbox_id:
                         
#更に「Checkbox.py」でリスト化された「personal_info_value_inc」で絞り込む
 		              for j in Checkbox.personal_info_value_inc:
 		                if j in i:
 		                  matched_list_person_info3.append(i)
                           
#指定キーワードを除く
 		          matched_list_person_info3 = [i for i in matched_list_person_info3 if i is not None]
 		          print("「個人情報保護方針」の関連が含まれるid値：" + ",".join(matched_list_person_info3))

#value
 		          for i in matched_list_checkbox_value:
                         
#更に「Checkbox.py」でリスト化された「personal_info_value_inc」で絞り込む
 		              for j in Checkbox.personal_info_value_inc:
 		                if j in i:
 		                  matched_list_person_info4.append(i)
                           
#指定キーワードを除く
 		          matched_list_person_info4 = [i for i in matched_list_person_info4 if i is not None]
 		          print("「個人情報保護方針」の関連が含まれるvalue値：" + ",".join(matched_list_person_info4))

#data-name
# 		            for i in matched_list_checkbox_dataname:
                         
#更に「Checkbox.py」でリスト化された「personal_info_value_inc」で絞り込む
# 		              for j in Checkbox.personal_info_value_inc:
# 		                if j in i:
# 		                  matched_list_person_info5.append(i)
                           
#指定キーワードを除く
# 		            matched_list_person_info5 = [i for i in matched_list_person_info5 if i is not None]
# 		            print("「個人情報保護方針」の関連が含まれるdata-name値：" + matched_list_person_info5)


#name、idの両方が存在する場合
 		          if len(matched_list_person_info1) > 0 \
                       and len(matched_list_person_info2) == 1 \
                           and len(matched_list_person_info3) == 1 \
                               and len(matched_list_person_info4) == 0:
 		              print("同意チェックはname値、id値の両方で可能")
 		              checkbox_name = driver.find_element_by_name(matched_list_person_info2[len(matched_list_person_info2)-1])
 		              if checkbox_name.is_selected() is not True:
 		                driver.execute_script("arguments[0].click();", checkbox_name)
 		                input_history.append("同意")
 		                print("name値にて個人情報保護方針の同意チェック済")
 		                if checkbox_name.is_selected() is not True:
 		                   checkbox_id = driver.find_element_by_id(matched_list_person_info3[0])
 		                   driver.execute_script("arguments[0].click();", checkbox_id) 		           		             
 		                   input_history.append(matched_list_person_info3[0])
 		                   print("id値にて個人情報保護方針の同意チェック済")

#2022.8.16
#valueのみ存在する場合
 		          elif len(matched_list_person_info1) > 0 \
					and len(matched_list_person_info2) == 0 \
						and len(matched_list_person_info3) == 0 \
							and len(matched_list_person_info4) == 1 \
								and checkbox_value.is_selected() is not True:
 		              print("同意チェックはvalue値のみで可能")
 		              checkbox_value = driver.find_element_by_css_selector("[value='"+ matched_list_person_info4[0] + "']")
 		              if checkbox_value.is_selected() is not True:
 		                driver.execute_script("arguments[0].click();", checkbox_value)
 		                print(checkbox_value.is_selected())
 		                if checkbox_value.is_selected() is True:
 		                  input_history.append("同意")
 		                  print("value値にて個人情報保護方針の同意チェック済")

#2022.8.16
#nameのみ存在する場合
 		          elif len(matched_list_person_info1) > 0 \
					and len(matched_list_person_info2) == 1 \
						and len(matched_list_person_info3) == 0 \
							and len(matched_list_person_info4) == 0 \
								and checkbox_value.is_selected() is not True:
 		              print("同意チェックはname値のみで可能")
 		              checkbox_name = driver.find_elements_by_name(matched_list_person_info2[len(matched_list_person_info2)-1])[len(matched_list_person_info2)]
 		              if checkbox_name.is_selected() is not True:
 		                driver.execute_script("arguments[0].click();", checkbox_name)
 		                print(checkbox_name.is_selected())
 		                if checkbox_name.is_selected() is True:
 		                  input_history.append("同意")
 		                  print("name値にて個人情報保護方針の同意チェック済")

#2022.8.16
#idのみ存在する場合
 		          elif len(matched_list_person_info1) > 0 \
					and len(matched_list_person_info2) == 0 \
						and len(matched_list_person_info3) == 1 \
							and len(matched_list_person_info4) == 0 \
								and checkbox_value.is_selected() is not True:
 		              print("同意チェックはid値のみで可能")
 		              checkbox_id = driver.find_element_by_id(matched_list_person_info3[0])
 		              if checkbox_id.is_selected() is not True:
 		                driver.execute_script("arguments[0].click();", checkbox_id)
 		                print(checkbox_id.is_selected())
 		                if checkbox_id.is_selected() is True:
 		                  input_history.append("同意")
 		                  print("id値にて個人情報保護方針の同意チェック済")

#2022.8.16
#name及びvalueの両方存在
 		          elif len(matched_list_person_info1) > 0 \
					and len(matched_list_person_info2) > 0 \
						and len(matched_list_person_info3) == 0 \
							and len(matched_list_person_info4) > 0 \
								and checkbox_value.is_selected() is not True:
 		              print("同意チェックはname値、value値（未選択）の両方で可能")
 		              checkbox_name = driver.find_element_by_name(matched_list_person_info2[0])
 		              if checkbox_name.is_selected() is not True:
 		                driver.execute_script("arguments[0].click();", checkbox_name)
 		                input_history.append("同意")
 		                print("name値にて個人情報保護方針の同意チェック済")
 		                if checkbox_name.is_selected() is not True:
 		                   checkbox_value = driver.find_element_by_css_selector("[value='"+ matched_list_person_info4[0] + "']")
 		                   driver.execute_script("arguments[0].click();", checkbox_value)
 		                   print(checkbox_value.is_selected())
 		                   if checkbox_value.is_selected() is True:
 		                     input_history.append("同意")
 		                     print("value値にて個人情報保護方針の同意チェック済")

                             
 		          elif len(matched_list_person_info1) > 0 \
					and len(matched_list_person_info2) == 3 \
						and len(matched_list_person_info3) == 0 \
							and len(matched_list_person_info4) == 1 \
								and checkbox_value.is_selected() is not True:
 		              print("同意チェックはname値（3個）、value値（1個：未選択）の両方で可能")
 		              for i in range(len(matched_list_person_info2)+1):
 		                  checkbox = driver.find_element_by_name(matched_list_person_info2[i-1])
 		                  if checkbox.is_selected() is not True:
       		           		          driver.execute_script("arguments[0].click();", checkbox)
       		           		          print(checkbox.is_selected()) 		           		           		             
       		           		          input_history.append(matched_list_person_info2[i-1])


#2022.8.16
#name及びvalue且つidの全て存在

 		          elif len(matched_list_person_info1) > 0 \
					and len(matched_list_person_info2) == 1 \
						and len(matched_list_person_info3) == 1 \
							and len(matched_list_person_info4) == 1 \
								and checkbox_value.is_selected() is not True:
 		              print("同意チェックはname値、value値（未選択）、id値の全てで可能")

 		              checkbox_name = driver.find_element_by_name(matched_list_person_info2[0])
 		              if checkbox_name.is_selected() is not True:
 		                driver.execute_script("arguments[0].click();", checkbox_name)
 		                input_history.append("同意")
 		                print("name値にて個人情報保護方針の同意チェック済")
 		                if checkbox_name.is_selected() is not True:
 		                   checkbox_value = driver.find_element_by_css_selector("[value='"+ matched_list_person_info4[0] + "']")
 		                   driver.execute_script("arguments[0].click();", checkbox_value)
 		                   print(checkbox_value.is_selected())
 		                   if checkbox_value.is_selected() is True:
 		                     input_history.append("同意")
 		                     print("value値にて個人情報保護方針の同意チェック済")
 		                   elif checkbox_value.is_selected() is not True:
 		                     checkbox_id = driver.find_element_by_id(matched_list_person_info4[0])
 		                     input_history.append(matched_list_person_info4[0])
 		                     print("id値にて個人情報保護方針の同意チェック済")


#リスト「matched_list_person_info2」に値"accept"が存在しない時の処理

 		          elif not len([i for i in matched_list_person_info2 if "accept" in i \
                                          and i is not None]) == 0:
 		              print("「matched_list_person_info2」に値（accept）が存在しない")
 		              checkbox_name = driver.find_element_by_name(matched_list_person_info2[len(matched_list_person_info2)-1])
 		              if checkbox_name.is_selected() is not True:
 		           		          driver.execute_script("arguments[0].click();", checkbox_name)
 		           		          input_history.append(matched_list_person_info2[len(matched_list_person_info2)-1])
 		           		          print("name値にて個人情報保護方針の同意チェック済")


 		          else:
 		                checkbox_name = driver.find_element_by_name(matched_list_person_info2[len(matched_list_person_info2)-1])
 		                print("name値にて個人情報保護方針の同意チェック済")
 		                if checkbox_name.is_selected() is not True:
 		           		          driver.execute_script("arguments[0].click();", checkbox_name)
 		           		          print(checkbox_name.is_selected() + "name値にて個人情報保護方針の同意チェック済")
 		           		          input_history.append(matched_list_person_info2[len(matched_list_person_info2)-1])

 		                elif checkbox_value.is_selected() is True \
                             and not len(matched_list_person_info4) == 0:
 		                  print("チェックボックス関係のvalue値:" + str(len(matched_list_person_info4)))
 		                  checkbox_value = driver.find_element_by_css_selector("[value='"+ matched_list_person_info4[0] + "']")
 		                  driver.execute_script("arguments[0].click();", checkbox_value)
 		                  print("name値にて個人情報保護方針の同意チェック済")
 		                  input_history.append(matched_list_person_info4[0])
# 		              break

 		        except:
 		          pass                                   


#どちらの回答方法を希望するか？
 		        try:
 		            print("回答方法選択の要素が含まれるか否かの確認")
 		            matched_list_contact_med1 = []
 		            matched_list_contact_med2 = []
 		            matched_list_contact_med3 = []
 		            matched_list_contact_med4 = []                 

#formタグから文字列要素のみ取得し、
#更に「contact_method.py」でリスト化された「keywords_inc」で絞り込む
 		            for i in str(soup.find_all("form")):
 		              for j in contact_method.value_inc:
 		                if j in i:
 		                  matched_list_contact_med1.append(i)

#指定キーワードを除く
 		            matched_list_contact_med1 = [i for i in matched_list_contact_med1 if i is not None]
 		            print("formタグに含まれる文字列要素：" + matched_list_contact_med1)

#name
 		            for i in matched_list_checkbox_name:
                         
#更に「contact_method.py」でリスト化された「value_inc」で絞り込む
 		              for j in contact_method.select_value_inc:
 		                if j in i:
 		                  matched_list_contact_med2.append(i)
                           
#指定キーワードを除く
 		            matched_list_contact_med2 = [i for i in matched_list_contact_med2 if i is not None]
 		            print("回答方法選択の要素が含まれるname値：" + matched_list_contact_med2)

#id
 		            for i in matched_list_checkbox_id:
                         
#更に「contact_method.py」でリスト化された「value_inc」で絞り込む
 		              for j in contact_method.select_value_inc:
 		                if j in i:
 		                  matched_list_contact_med3.append(i)
                           
#指定キーワードを除く
 		            matched_list_contact_med3 = [i for i in matched_list_contact_med3 if i is not None]
 		            print("回答方法選択の要素が含まれるid値：" + matched_list_contact_med3)

#value
 		            for i in matched_list_checkbox_value:
                         
#更に「contact_method.py」でリスト化された「value_inc」で絞り込む
 		              for j in contact_method.select_value_inc:
 		                if j in i:
 		                  matched_list_contact_med4.append(i)
                           
#指定キーワードを除く
 		            matched_list_contact_med4 = [i for i in matched_list_contact_med4 if i is not None]
 		            print("回答方法選択の要素が含まれるvalue値：" + matched_list_contact_med4)


#spanタグの指定要素のみ取得
 		            element9 = soup.find_all("span",class_="mwform-checkbox-field-text")
 		            print(element9)
 		            list_9sc = []

#各属性値 		         		           
 		            for elem in element9:
 		                list_9sc.append(elem.getText())

#class値
 		            list_9sc = [i for i in list_9sc if i is not None]
 		            print(list_9sc)

 		              
#id要素が存在する
 		            if len(matched_list_contact_med1) > 0 \
                         and len(matched_list_contact_med2) == 0 \
                             and len(matched_list_contact_med3) == 1:
 		              checkbox_id = driver.find_element_by_id(matched_list_contact_med3[len(matched_list_contact_med3)-1])
 		              if checkbox_id.is_selected() is not True:
 		                driver.execute_script("arguments[0].click();", checkbox_id)
 		                print("id値：" + matched_list_contact_med3[len(matched_list_contact_med3)-1])
 		                input_history.append(matched_list_contact_med3[len(matched_list_contact_med3)-1])

#valueのみしか存在しない
 		            elif len(matched_list_inquiry_sec1) > 0 \
                         and len(matched_list_inquiry_sec2) == 0 \
							 and len(matched_list_inquiry_sec3) == 0 \
								 and len(matched_list_inquiry_sec4) == 1:
 		              print("valueが存在することを確認")
 		              if len([i for i in matched_list_inquiry_sec4 if "メール" in i]) > 0:
 		                matched_list_inquiry_sec4 = [i for i in matched_list_inquiry_sec4 if "メール" in i]
 		                checkbox_value = driver.find_element_by_css_selector("[value='"+ matched_list_inquiry_sec4[0] + "']")
 		                if checkbox_value.is_selected() is not True:
 		                  driver.execute_script("arguments[0].click();", checkbox_value)
 		                  print("value値：" + matched_list_inquiry_sec4[0])
 		                  input_history.append(matched_list_inquiry_sec4[0])

 		              elif len([i for i in matched_list_inquiry_sec4 if "mail" in i]) > 0:
 		                matched_list_inquiry_sec4 = [i for i in matched_list_inquiry_sec4 if "mail" in i]
 		                checkbox_value = driver.find_element_by_css_selector("[value='"+ matched_list_inquiry_sec4[0] + "']")
 		                if checkbox_value.is_selected() is not True:
 		                  driver.execute_script("arguments[0].click();", checkbox_value)
 		                  print("value値：" + matched_list_inquiry_sec4[0])
 		                  input_history.append(matched_list_inquiry_sec4[0])

                                       

 		            elif len([i for i in list_9sc if "メール" in i]) > 0 \
                         and len(list_9sc) == 2:

#複数要素から任意の番数を指定する際、
#「find_element_by」では「TypeError: 'WebElement' object is not subscriptable」となるので要注意！！
 		           		                  checkbox = driver.find_elements_by_name(SELECT_list3[len(SELECT_list3)-1])[len(SELECT_list3)-1]
 		           		                  if checkbox.is_selected() is not True:                                              
 		           		                    driver.execute_script("arguments[0].click();", checkbox)
 		           		                    if checkbox.is_selected() is True:
 		           		                      input_history.append(SELECT_list3[len(SELECT_list3)-1])
 		           		                      print(checkbox.is_selected())
# 		           		              except:
 		        except:
 		          pass

 		             
#（メール配信）
 		        if "希望しない" in str(soup.find_all("form")):
 		           		           		            
 		            SELECT_list3 = []
 		            for elem1 in element6: 
 		             SELECT_list3.append(elem1.get("name"))

#リストにNoneが含まれていると「TypeError: argument of type 'NoneType' is not iterable」
#が発生するので、リスト内包表記で処理
 		            SELECT_list3 = [i for i in SELECT_list3 if i is not None]
 		            print(SELECT_list3)
 		            
 		            SELECT_list4 = []
 		            for elem2 in element6: 
 		             SELECT_list4.append(elem2.get("id"))
 		             
#リストにNoneが含まれていると「TypeError: argument of type 'NoneType' is not iterable」
#が発生するので、リスト内包表記で処理
 		            SELECT_list4 = [i for i in SELECT_list4 if i is not None]
 		            print(SELECT_list4)
 		           		           
#name、idの両方が存在する場合
 		            try:
 		              if len(SELECT_list3) == 1 \
                           and len(SELECT_list4) == 1:
 		                checkbox = driver.find_element_by_id(SELECT_list4[0])
 		                driver.execute_script("arguments[0].click();", checkbox)
 		                if checkbox.is_selected() is True:
 		           		          input_history.append(SELECT_list4[0])

 		                else:
 		           		          checkbox = driver.find_element_by_name(SELECT_list3[0])
 		           		          driver.execute_script("arguments[0].click();", checkbox)
 		           		          print(checkbox.is_selected())
 		           		          input_history.append(SELECT_list3[0])


 		              elif len(SELECT_list3) > 1 \
                           and len(SELECT_list4) > 1:
 		                checkbox = driver.find_element_by_id(SELECT_list4[len(SELECT_list4)-1])
 		                driver.execute_script("arguments[0].click();", checkbox)
 		                input_history.append("希望しない")

# 		              break
#nameのみ存在
 		              elif len(SELECT_list3) == 1 \
                           and len(SELECT_list4) == 0:
 		                checkbox = driver.find_element_by_name(SELECT_list3[0])
 		                driver.execute_script("arguments[0].click();", checkbox)
 		                input_history.append("希望しない")
 		              elif len(SELECT_list3) > 1 \
                           and len(SELECT_list4) == 0:
 		                checkbox = driver.find_element_by_name(SELECT_list3[len(SELECT_list3)-1])
 		                driver.execute_script("arguments[0].click();", checkbox)
 		                input_history.append("希望しない")
# 		              break
 		           		           
 		            except:
 		              pass


#（スパムメール防止のためのチェックボックス）
 		        try:
 		          if not len([i for i in list_2c if "spam" in i \
                       or "accept" in i]) == 0:
 		           		           checkbox = driver.find_element_by_css_selector("[value='1']")
 		           		           driver.execute_script("arguments[0].click();", checkbox)
 		           		           input_history.append("スパムメール防止チェック済")

 		        except:
 		          pass


#（チェックボックス：上記の内容で送信する）
 		        try:
 		            print("送信前確認用選択項目の要素が含まれるか否かの確認")
 		            matched_list_confirm_sec1 = []
 		            matched_list_confirm_sec2 = []
 		            matched_list_confirm_sec3 = []
 		            matched_list_confirm_sec4 = []                 

#formタグから文字列要素のみ取得し、
#更に「Checkbox.py」でリスト化された「keywords_inc」で絞り込む
 		            for i in str(soup.find_all("form")):
 		              for j in Checkbox.value_inc:
 		                if j in i:
 		                  matched_list_confirm_sec1.append(i)

#指定キーワードを除く
 		            matched_list_confirm_sec1 = [i for i in matched_list_confirm_sec1 if i is not None]
 		            print("formタグに含まれる文字列要素：" + matched_list_confirm_sec1)

#name
 		            for i in matched_list_checkbox_name:
                         
#更に「Checkbox.py」でリスト化された「Confirm_bf_send_value_inc」で絞り込む
 		              for j in Checkbox.Confirm_bf_send_value_inc:
 		                if j in i:
 		                  matched_list_confirm_sec2.append(i)
                           
#指定キーワードを除く
 		            matched_list_confirm_sec2 = [i for i in matched_list_confirm_sec2 if i is not None]
 		            print("送信前確認用選択項目の要素が含まれるname値：" + matched_list_confirm_sec2)

#id
 		            for i in matched_list_checkbox_id:
                         
#更に「Checkbox.py」でリスト化された「Confirm_bf_send_value_inc」で絞り込む
 		              for j in Checkbox.Confirm_bf_send_value_inc:
 		                if j in i:
 		                  matched_list_confirm_sec3.append(i)
                           
#指定キーワードを除く
 		            matched_list_confirm_sec3 = [i for i in matched_list_confirm_sec3 if i is not None]
 		            print("送信前確認用選択項目の要素が含まれるid値：" + matched_list_confirm_sec3)

#value
 		            for i in matched_list_checkbox_value:
                         
#更に「Checkbox.py」でリスト化された「Confirm_bf_send_value_inc」で絞り込む
 		              for j in Checkbox.Confirm_bf_send_value_inc:
 		                if j in i:
 		                  matched_list_confirm_sec4.append(i)
                           
#指定キーワードを除く
 		            matched_list_confirm_sec4 = [i for i in matched_list_confirm_sec4 if i is not None]
 		            print("送信前確認用選択項目の要素が含まれるvalue値：" + matched_list_confirm_sec4)


#nameのみ存在する場合
 		            if len(matched_list_confirm_sec1) > 0 \
                         and len(matched_list_confirm_sec2) > 0:
 		              checkbox_name = driver.find_element_by_name(matched_list_confirm_sec2[0])
 		              if checkbox.is_selected() is not True:
 		                checkbox_name.click()
 		                print("name値：" + matched_list_confirm_sec2[0])
 		                input_history.append(matched_list_confirm_sec2[0])


 		        except:
 		          pass


#パターン追加(2021.12.26)
#お問い合わせ内容の控えを送る
 		        try:
 		          if not len([i for i in list_1 if "メール受信" in i]) == 0 \
                       and not len([i for i in SELECT_list5 if "送信" in i]) == 0:
# 		          Checkboxlist = [i for i in list_2 if "copy" in i \
#                             or "mail" in i \
#                                         and i is not None]
 		            print(SELECT_list5[0])
 		            checkbox = driver.find_element_by_css_selector("[value=" + SELECT_list5[0] + "]")
 		            if checkbox.is_selected() is False:
 		              driver.execute_script("arguments[0].click();", checkbox)
 		              print(checkbox.is_selected()) 		              
# 		            if checkbox.is_selected() is True:
# 		              lastcol = len(list(ws3.row_values(k)))
# 		              time.sleep(1)
# 		              ws3.update_cell(k, lastcol+1, SELECT_list5[0])
 		              input_history.append(SELECT_list5[0])
                       
 		        except:
 		          pass


#（次は此処から修正開始）
#送信実行

#パターン追加（2021.12.03）                       
#（buttonタグのclass値に指定キーワードが含まれる）
 		        if "フォーム要素あり" in ws3.cell(k, 7).value \
                     and not len([i for i in list_4bc if "_1fbEI" in i \
                         or "m-btn" in i]) == 0:
 		             print([i for i in list_4bc if "_1fbEI" in i \
                       or "m-btn" in i])
                       
 		             try:
#送信ボタン押下
#<button aria-disabled="false" data-testid="buttonElement" class="_1fbEI"><span class="_1Qjd7">Sign Up!</span></button>
 		           		          if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		            driver.find_element_by_class_name("_1fbEI").click()
# 		           		            time.sleep(3)
 		           		            html = driver.page_source
 		           		            soup = BeautifulSoup(html, 'html.parser')

#送信されたかどうかのテキスト取得
#<div id="comp-juhyx0qr" class="_1Q9if" data-testid="richTextElement"><p class="font_9" style="font-size:15px">Thanks for submitting!</p></div>
# 		           		            lastcol = len(list(ws3.row_values(k)))
# 		           		            cell_list2 = ws3.range(k, 7, k, lastcol)
# 		           		            print(cell_list2)

 		           		            for result in soup.select("._1Q9if"):
 		           		           	  if "メッセージを受信しました" in result.getText() \
                                               or "Thanks for" in result.getText() \
                                                   or "送信しました" in result.getText() \
                                                       and len([i for i in input_history if "投稿" in i]) > 0 \
                                                           and len([i for i in input_history if "メールアドレス" in i]) > 0 \
                                                               and len([i for i in input_history if "氏名" in i]) > 0 \
                                                                   or len([i for i in input_history if "姓" in i]) > 0 \
                                                                       and not "完了" in ws3.cell(k, 7).value:
 		           		           	    ws3.update_cell(k, 8, "メッセージを送信しました")
 		           		           	    dt_now = datetime.datetime.now()
 		           		           	    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		           	    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		           		           	    print(soup.select("._1Q9if"))
                                               
#「メールアドレス」「氏名」「本文」のどれかが入力履歴に無い場合、
#アプリ側でエラー検知
 		           		           	  elif not "メールアドレス" in cell_list2:
 		           		           	    ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		           		           	    dt_now = datetime.datetime.now()
 		           		           	    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		           	    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		           		           	  elif not "投稿" in cell_list2:
 		           		           		                   ws3.update_cell(k, 8, "本文が入力されていません")
 		           		           		                   dt_now = datetime.datetime.now()
 		           		           		                   ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		           		                   format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		           		           	  elif not "氏名" in cell_list2 \
                                                 or not "姓" in cell_list2:
 		           		           		                   ws3.update_cell(k, 8, "氏名が入力されていません")
 		           		           		                   dt_now = datetime.datetime.now()
 		           		           		                   ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))																  
 		           		           		                   format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		             except:
 		               try:
                                
#パターン追加（2021.12.10）
#class値に半角スペースが複数含まれている場合
 		           		          if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		            try:                                            
 		           		              if len(list_4bc) == 4:
 		           		                  list_4bc = "." + list_4bc[0] \
                                                  + "." + list_4bc[1]  \
                                                      + "." + list_4bc[2] \
                                                          + "." + list_4bc[3]
 		           		              print(list_4bc)
 		           		              elem = driver.find_element_by_css_selector(list_4bc)
 		           		              driver.execute_script("arguments[0].click();", elem)                                          

#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		           		              alert = driver.switch_to.alert
 		           		              Content = re.sub("[\n]", "", alert.text, 6)
 		           		              Content = re.sub("[\s]", "", Content, 50)     
 		           		              ws3.update_cell(k, 7, Content)
 		           		              print(Content)
 		           		              format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		           		            except NoAlertPresentException:
 		           		              time.sleep(3)
 		           		              html = driver.page_source
 		           		              soup = BeautifulSoup(html, 'html.parser')
                            
#エラーメッセージ
#<span class="txt_alert">こちらは必須項目です。</span>
 		           		              for result in soup.find_all(class_=re.compile("attention")):
 		           		                Content = re.sub("[\n]", "", result.getText(), 4)
 		           		                ws3.update_cell(k, 7, Content)
 		           		              format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		           		              print(soup.find_all(class_=re.compile("attention")))

#画像認証有無の確認
 		           		              if "captcha" in str(soup.find_all("form")):
 		           		                ws3.update_cell(k, 7, "CAPTCHA")
 		           		                dt_now = datetime.datetime.now()
 		           		                ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)
 		           		              else:
 		           		                list_4bc = []
 		           		                element11 = soup.find_all("button")
 		           		                if "submit" in str(element11):
 		           		                  print(element11)
 		           		                  elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                  driver.execute_script("arguments[0].click();", elem) 		           		                
 		           		                  time.sleep(3)
 		           		                  ws3.update_cell(k, 7, driver.title)
 		           		                  dt_now = datetime.datetime.now()
 		           		                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                  print(driver.title)
 		           		                  if "エラー" in ws3.cell(k, 7).value:
 		           		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		           		                  else:
 		           		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                            
 		               except:
 		                 pass



#（name値に指定キーワードが含まれない、且つtype値に指定キーワードが含まれる）

#パターン追加（2021.12.10）
#（spanタグのclass値に指定キーワードが含まれる）
 		        elif len([i for i in list_2 if "submit" in i]) == 0 \
                       or len([i for i in list_2t if "submit" in i \
                               or "button" in i \
                                   or "image" in i]) > 0 \
                           or not len([i for i in list_12sc if "appsMaterialWizButtonPaperbuttonLabel" in i]) == 0:
#                           or len([i for i in list_3t if "button" in i]) > 0:
 		             print(list_2t)
 		             print(len(list_2t))
 		             print([i for i in list_12sc if "appsMaterialWizButtonPaperbuttonLabel" in i])                      
                      
#対象物が画面の外にあると、
#「ElementClickInterceptedException: element click intercepted: Element is not clickable at point」
#になってしまうので以下の方法で回避
# 		           		          driver.execute_script("window.scrollTo(0, 200);")

#リスト（変数）の初期化
 		             list_12io = []
 		             list_13ia = []
 		             list_14ia = []
 		             list_15iv = []
 		             list_16iv = []
 		             list_17ao = []
 		             list_18c = []
 		             list_10ia = []
 		             list_11ia = []
 		             list_19in = []
 		             list_19id = []
 		             list_20ah = []
 		             list_21it = []
 		             list_22bt = []
 		             list_23bt = []
 		             list_24it = []
 		             list_25iv = []
 		             list_26bc = []


#パターン追加（2022.01.24）
#<img src="/images/bt_confirmation.jpg" alt="確認画面へ">
#送信ボタン（imgタグの指定要素のみ取得）
 		             element11 = soup.find_all("img",alt=re.compile("確認"))
 		             print(element11)

#パターン追加（2021.12.28）
#ボタンが２つ存在（リセットボタンあり）
#<li><input type="button" value="" id="button_mfp_reset" onclick="mfp_reset(this.form)" onkeypress="mfp_reset(this.form)" onmouseover="mfp_bt(this,1)" onmouseout="mfp_bt(this,0)" style="background-position: 0px 0px;"></li>
#<li><input type="button" value="" id="button_mfp_goconfirm" onclick="sendMail(this.form)" onkeypress="sendMail(this.form)" onmouseover="mfp_bt(this,1)" onmouseout="mfp_bt(this,0)" style="background-position: 0px 0px;"></li>
 		             element12 = soup.find_all("input",onclick=re.compile("send"))
 		             print(element12)
                                                         
#パターン追加（2021.01.02）
#<input type="image" class="submit transi" value="" name="Submit" src="./images/btn_input.png" alt="入力確認画面へ">
 		             element13 = soup.find_all("input",alt=re.compile("確認"))
 		             print(element13)

 		             element14 = soup.find_all("input",alt=re.compile("送信"))
 		             print(element14)

#パターン追加（2022.01.01）
#<input type="submit" name="submitConfirm" value="確認する">                                               

 		             element15 = soup.find_all("input",value=re.compile("確認"))
 		             print(element15)

#<input type="submit" value="送信" style="cursor: pointer; margin: 0pt; text-align: center;margin-bottom:10px;">
 		             element16 = soup.find_all("input",value=re.compile("送信"))
 		             print(element16)

#パターン追加（2022.01.24）
#<input class="formButton" onclick="resetForm();" type="button" value="リセット"/>, <input class="formButton" onclick="nextForm();" type="button" value="  次へ  "/>
 		             element25 = soup.find_all("input",value=re.compile("次へ"))
 		             print(element25)


#パターン追加（2022.01.21）
#<a href="#" onclick="frmcheck();" class="btn_check">確認画面へ</a>
#送信ボタン（aタグの指定要素のみ取得）
 		             element17 = soup.find_all("a",onclick=re.compile("check"))
 		             print(element17)

#パターン追加（2022.01.21）
#<input type="submit" value="送 信" class="wpcf7-form-control has-spinner wpcf7-submit" id="submit">
 		             element18 = soup.find_all("span",class_=re.compile("wpcf7"))
 		             print(element18)
                      
#パターン追加（2022.01.22）
#<img src="/img/inquiry/submit_bt.gif" width="40" height="28" border="0" alt="送信">                    
#送信ボタン（imgタグの指定要素のみ取得）
 		             element10 = soup.find_all("img",alt=re.compile("送信"))
 		             print(element10)

#パターン追加（2022.01.22）
#<input type="image" src="https://technicalws.sakura.ne.jp/wp-content/uploads/2013/11/btn_check.gif" name="send-to-confirm" alt="">
 		             element19 = soup.find_all("input",type=re.compile("image"))
 		             print(element19)

#パターン追加（2022.01.22）
#<a href="javascript:chk_privacy();">入力内容を確認する</a>
#送信ボタン（aタグの指定要素のみ取得）
 		             element20 = soup.find_all("a",href=re.compile("chk"))
 		             print(element20)

#パターン追加（2022.01.22）
#<input type="submit" value="" class="next">
 		             element21 = soup.find_all("input",type=re.compile("submit"))
 		             print(element21)

#パターン追加（2022.01.23）
#<button type="submit" class="pure-button pure-button-primary">同意して確認画面へ</button>
 		             element22 = soup.find_all("button",type=re.compile("submit"))
 		             print(element22)

#パターン追加（2022.01.24）
#<button type="button" id="check_btn">確認画面に進む</button>
 		             element23 = soup.find_all("button",type=re.compile("button"))
 		             print(element23)

#パターン追加（2022.01.24）
#
 		             element24 = soup.find_all("input",type=re.compile("button"))
 		             print(element24)

#パターン追加（2022.8.17）
#<button class="yellow-button">お問い合わせ送信</button>
 		             element26 = soup.find_all("button",class_=re.compile("button"))
 		             print(element26)


#各変数のリスト化
 		             for olk in element12:
 		               list_12io.append(olk.get("onclick"))
 		             print("onclick:" + ",".join(list_12io))
# 		             print(list_12io)

 		             for alt in element13:
 		               list_13ia.append(alt.get("alt"))
 		             print("alt:" + ",".join(list_13ia))
# 		             print(list_13ia)

 		             for alt in element14:
 		               list_14ia.append(alt.get("alt"))
 		             print("alt:" + ",".join(list_14ia))
# 		             print(list_14ia)
                                                           
 		             for val in element15:
 		               list_15iv.append(val.get("value"))
 		             print("value:" + ",".join(list_15iv))
# 		             print(list_15iv)

 		             for val in element16:
 		               list_16iv.append(val.get("value"))
 		             print("value:" + ",".join(list_16iv))
# 		             print(list_16iv)

 		             for val in element25:
 		               list_25iv.append(val.get("value"))
 		             print("value:" + ",".join(list_25iv))
# 		             print(list_25iv)
                      
 		             for olk in element17:
 		               list_17ao.append(olk.get("onclick"))
 		             print("onclick:" + ",".join(list_17ao))
# 		             print(list_17ao)

 		             for class_ in element18:
 		               list_18c.append(class_.get("class"))
# 		             print("class:" + ",".join(list_18c))
# 		             print(list_18c)

 		             for alt in element10:
 		               list_10ia.append(alt.get("alt"))
 		             print("alt:" + ",".join(list_10ia))
# 		             print(list_10ia)

 		             for alt in element11:
 		               list_11ia.append(alt.get("alt"))
 		             print("alt:" + ",".join(list_11ia))
# 		             print(list_11ia)

 		             for name in element19:
 		               list_19in.append(name.get("name"))
                        
#指定キーワードを除く
 		             list_19in = [i for i in list_19in if i is not None]
 		             print("name:" + str(len(list_19in)))
# 		             print(list_19in)
# 		             print(len(list_19in))

 		             for href in element20:
 		               list_20ah.append(href.get("href"))
 		             print("href:" + ",".join(list_20ah))
# 		             print(list_20ah)

 		             for type_ in element21:
 		               list_21it.append(type_.get("type"))
 		             print("type:" + ",".join(list_21it))
# 		             print(list_21it)

 		             for type_ in element22:
 		               list_22bt.append(type_.get("type"))
 		             print("type:" + ",".join(list_22bt))
 		             print(list_22bt)

 		             for type_ in element23:
 		               list_23bt.append(type_.get("type"))
 		             print("type:" + ",".join(list_23bt))
# 		             print(list_23bt)

 		             for type_ in element24:
 		               list_24it.append(type_.get("type"))
 		             print("type:" + ",".join(list_24it))
# 		             print(list_24it)

#パターン追加（2022.08.08）
#<input type="image" src="../img/contact/sub_btn.gif" id="mail_submit_button">
 		             for id_ in element19:
 		               list_19id.append(id_.get("id"))

#指定キーワードを除く
 		             list_19id = [i for i in list_19id if i is not None]
 		             print("id:" + str(len(list_19id)))
# 		             print(list_19id)
# 		             print(len(list_19id))
# 		             print("id:" + ",".join(list_19id) + str(len(list_19id)))

 		             for class_ in element26:
 		               list_26bc.append(class_.get("class"))

#二次元配列から一次配列への変換
 		             list_26bc = [i for sublist in list_26bc for i in sublist]
 		             print("class:" + str(list_26bc))
# 		             print(list_26bc)

# 		             try:

#確認画面遷移後に送信（その０）
 		             if len(list_18c) > 0:

#WordPressの「Contact Form7」プラグインを使用（その１）
# 		                               except NoSuchElementException:
 		               try:
 		                                   elem = driver.find_element_by_css_selector('.wpcf7-form-control.wpcf7-submit')
 		                                   driver.execute_script("arguments[0].click();", elem)
 		                                   time.sleep(3)
 		                                   html = driver.page_source
 		                                   soup = BeautifulSoup(html, 'html.parser')

#エラーメッセージ
# 		                                   for result in soup.select("#response"):
# 		                                     Content = re.sub("[\n]", "", result.getText(), 4)
# 		                                   ws3.update_cell(k, 7, Content)
# 		                                   if "失敗" in ws3.cell(k, 7).value:
# 		                                     format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                                   else:
# 		                                     format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                                   print(soup.select("#response"))

 		                                   for result in soup.select(".wpcf7-not-valid-tip"):
 		                                     Content = re.sub("[\n]", "", result.getText(), 4)
 		                                   ws3.update_cell(k, 7, Content)
 		                                   format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                                   print(soup.select(".wpcf7-not-valid-tip"))

#結果出力
 		                                   for result in soup.select(".wpcf7-response-output"):
 		                                     Content = re.sub("[\n]", "", result.getText(), 4)
 		                                   print(soup.select(".wpcf7-response-output"))
 		                                   ws3.update_cell(k, 8, Content)
 		                                   dt_now = datetime.datetime.now()
 		                                   ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                   if Content == "":
 		                                     ws3.update_cell(k, 8, "送信に失敗しました。")
 		                                     format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                                   else:
 		                                     if "入力内容に" in ws3.cell(k, 8).value:
 		                                       format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                                     else:
 		                                       format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		           		              

#WordPressの「Contact Form7」プラグインを使用（その２）
#画面遷移なしで入力内容確認                                          
 		               except:
 		                 try:
 		                                     elem = driver.find_element_by_css_selector('.wpcf7-form-control.wpcf7-confirm')
 		                                     driver.execute_script("arguments[0].click();", elem)
 		                                     time.sleep(3)
 		                                     html = driver.page_source
 		                                     soup = BeautifulSoup(html, 'html.parser')
 		           		           		           
#エラーメッセージ
# 		                                     for result in soup.select("#response"):
# 		                                       Content = re.sub("[\n]", "", result.getText(), 4)
# 		                                     ws3.update_cell(k, 7, Content)
# 		                                     if "失敗" in ws3.cell(k, 7).value:
# 		                                       format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                                     else:
# 		                                       format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                                     print(soup.select("#response"))
                                            
 		                                     for result in soup.select(".wpcf7-not-valid-tip"):
 		                                       Content = re.sub("[\n]", "", result.getText(), 4)
 		                                     ws3.update_cell(k, 7, Content)
 		                                     dt_now = datetime.datetime.now()
 		                                     ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                     format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                                     print(soup.select(".wpcf7-not-valid-tip"))
                                          
#結果出力
 		                                     for result in soup.select(".wpcf7-response-output"):
 		                                       Content = re.sub("[\n]", "", result.getText(), 4)
 		                                     print(Content)
 		                                     ws3.update_cell(k, 8, Content)
 		                                     dt_now = datetime.datetime.now()
 		                                     ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                     if "入力内容に" in ws3.cell(k, 8).value:
 		                                       format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                                     else:
 		                                       elem = driver.find_element_by_css_selector('.wpcf7-form-control.wpcf7-submit')
 		                                       driver.execute_script("arguments[0].click();", elem)
 		                                       time.sleep(3)
 		                                       soup = BeautifulSoup(html, 'html.parser')
 		                                       for result in soup.select(".wpcf7-response-output"):
 		                                         Content = re.sub("[\n]", "", result.getText(), 4)
 		                                       format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                                       ws3.update_cell(k, 8, Content)
 		                                       dt_now = datetime.datetime.now()
 		                                       ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                       print(Content)
                                              

#WordPressの「Contact Form7」プラグインを使用（その３）
 		                 except:
 		                   try:
 		                                                if "フォーム要素あり" in ws3.cell(k, 7).value:
 		                                                  elem = driver.find_element_by_css_selector("input[type='image']")
 		                                                  driver.execute_script("arguments[0].click();", elem)
 		                                                  time.sleep(3)
 		                                                  html = driver.page_source
 		                                                  soup = BeautifulSoup(html, 'html.parser')
 		           		           		           
#エラーメッセージ
# 		                                                  for result in soup.select("#response"):
# 		                                                    Content = re.sub("[\n]", "", result.getText(), 4)
# 		                                                  ws3.update_cell(k, 7, Content)
# 		                                                  if "失敗" in ws3.cell(k, 7).value:
# 		                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                                                  else:
# 		                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                                                  print(soup.select("#response"))

 		                                                  for result in soup.select(".wpcf7-not-valid-tip"):
 		                                                    Content = re.sub("[\n]", "", result.getText(), 4)
 		                                                  ws3.update_cell(k, 7, Content)
 		                                                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                                                  print(soup.select(".wpcf7-not-valid-tip"))

#結果出力
 		                                                  for result in soup.select(".wpcf7-response-output"):
 		                                                    Content = re.sub("[\n]", "", result.getText(), 4)
 		                                                  print(soup.select(".wpcf7-response-output"))
 		                                                  ws3.update_cell(k, 8, Content)
 		                                                  dt_now = datetime.datetime.now()
 		                                                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))														   
 		                                                  if Content == "":
 		                                             		    ws3.update_cell(k, 8, "送信に失敗しました。")
 		                                             		    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                                                  else:
 		                                                      if "入力内容に" in ws3.cell(k, 8).value:
 		                                                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                                                      else:
 		                                                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                   except:
 		                                    ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                    dt_now = datetime.datetime.now()
 		                                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))											 
 		                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

                                

#確認画面遷移後に送信（その１）
 		             elif len(list_12io) > 0:
 		                try:
 		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		                  print(list_12io)
 		                  elem = driver.find_element_by_css_selector(list_12io)
 		                  driver.execute_script("arguments[0].click();", elem)

#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  dt_now = datetime.datetime.now()
 		                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知

#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                  if not len([i for i in str(input_history) if "メールアドレス" in i]) > 0:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not len([i for i in str(input_history) if "氏名" in i]) > 0 \
                               or not len([i for i in str(input_history) if "姓" in i]) > 0:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not len([i for i in str(input_history) if "投稿" in i]) > 0:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif len([i for i in str(input_history) if "メールアドレス" in i]) > 0 \
                               and len([i for i in str(input_history) if "氏名" in i]) > 0 \
                                   or len([i for i in str(input_history) if "姓" in i]) > 0 \
                                       and len([i for i in str(input_history) if "投稿" in i]) > 0 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print("list_12ia:" + str(list_12ia))
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                      

#確認画面遷移後に送信（その２）
 		             elif len(list_13ia) > 0:                           
 		                try:
 		                  list_13ia = "input[alt='" + list_13ia[0] + "']"
 		                  print("list_13ia:" + str(list_13ia))
 		                  elem = driver.find_element_by_css_selector(list_13ia)
 		                  driver.execute_script("arguments[0].click();", elem)
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  dt_now = datetime.datetime.now()
 		                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ（コーディング一部仮変更中２）
 		                  for Content in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(id=re.compile("attention")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("red")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("err")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("Err")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("Err")))

 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("emesg")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("alert")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("style1")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("style1")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("alart")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("alart")))

#パターン追加（2022.8.10）
#<p class="notice lastChild">必須項目です</p>
 		                  for Content in soup.find_all(class_=re.compile("notice")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("notice")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("notice")))

#パターン追加（2022.8.11）
#<div class="invalid-feedback">入力されていません</div>
 		                  for Content in soup.find_all(class_=re.compile("invalid")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("invalid")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("invalid")))


#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("msg")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("msg")))

#パターン追加（2022.8.14）
# #<font color="red">必須の入力項目です<br></font>
 		                  for Content in soup.find_all("font",color=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(color=re.compile("red")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("font",color=re.compile("red")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all("p",style=re.compile("#f00")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("p",style=re.compile("#f00")))

#パターン追加（2022.8.16）
#<p class="caution3">お名前が入力されていません！</p>
 		                  for Content in soup.find_all("p",class_=re.compile("caution")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all("p",class_=re.compile("caution")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("p",class_=re.compile("caution")))

#パターン追加（2022.8.15）
#<span style="color:#dd0000">姓は入力必須です.</span>
 		                  for Content in soup.find_all("span",style=re.compile("#dd0000")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all("span",style=re.compile("#dd0000")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("span",style=re.compile("#dd0000")))

#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(style=re.compile("block")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("div",style=re.compile("block")))

 		                  for Content in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.select(".vali") == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.select(".vali"))

# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
                                                       
#エラーテキストが含まれている場合
# 		                  if Content is not None:
# 		                   	ws3.update_cell(k, 7, Content)
# 		                   	format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(Content)


#確認画面遷移後に送信ボタン押下
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知

#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                  if not len([i for i in str(input_history) if "メールアドレス" in i]) > 0:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not len([i for i in str(input_history) if "氏名" in i]) > 0 \
                               or not len([i for i in str(input_history) if "姓" in i]) > 0:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not len([i for i in str(input_history) if "投稿" in i]) > 0:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif len([i for i in str(input_history) if "メールアドレス" in i]) > 0 \
                               and len([i for i in str(input_history) if "氏名" in i]) > 0 \
                                   or len([i for i in str(input_history) if "姓" in i]) > 0 \
                                       and len([i for i in str(input_history) if "投稿" in i]) > 0 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))


# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))
                             

 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:

#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print("list_12ia:" + str(list_12ia))
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

                                          
#確認画面遷移後に送信（その３）
 		             elif len(list_14ia) > 0:
 		                try:
 		                  list_14ia = "input[alt='" + list_14ia[0] + "']"
 		                  print("list_14ia:" + str(list_14ia))
 		                  elem = driver.find_element_by_css_selector(list_14ia)
 		                  driver.execute_script("arguments[0].click();", elem)
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  dt_now = datetime.datetime.now()
 		                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ（コーディング一部仮変更中２）
 		                  for Content in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(id=re.compile("attention")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("red")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("err")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("Err")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("Err")))

 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("emesg")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("alert")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("style1")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("style1")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("alart")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("alart")))

#パターン追加（2022.8.10）
#<p class="notice lastChild">必須項目です</p>
 		                  for Content in soup.find_all(class_=re.compile("notice")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("notice")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("notice")))

#パターン追加（2022.8.11）
#<div class="invalid-feedback">入力されていません</div>
 		                  for Content in soup.find_all(class_=re.compile("invalid")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("invalid")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("invalid")))


#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("msg")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("msg")))

#パターン追加（2022.8.14）
# #<font color="red">必須の入力項目です<br></font>
 		                  for Content in soup.find_all("font",color=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(color=re.compile("red")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("font",color=re.compile("red")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all("p",style=re.compile("#f00")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("p",style=re.compile("#f00")))

#パターン追加（2022.8.16）
#<p class="caution3">お名前が入力されていません！</p>
 		                  for Content in soup.find_all("p",class_=re.compile("caution")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all("p",class_=re.compile("caution")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("p",class_=re.compile("caution")))

#パターン追加（2022.8.15）
#<span style="color:#dd0000">姓は入力必須です.</span>
 		                  for Content in soup.find_all("span",style=re.compile("#dd0000")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all("span",style=re.compile("#dd0000")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("span",style=re.compile("#dd0000")))

#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(style=re.compile("block")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("div",style=re.compile("block")))

 		                  for Content in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.select(".vali") == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.select(".vali"))

# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
                                                       
#エラーテキストが含まれている場合
# 		                  if Content is not None:
# 		                   	ws3.update_cell(k, 7, Content)
# 		                   	format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(Content)


#確認画面遷移後に送信ボタン押下
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知

#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                  if not len([i for i in str(input_history) if "メールアドレス" in i]) > 0:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not len([i for i in str(input_history) if "氏名" in i]) > 0 \
                               or not len([i for i in str(input_history) if "姓" in i]) > 0:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not len([i for i in str(input_history) if "投稿" in i]) > 0:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif len([i for i in str(input_history) if "メールアドレス" in i]) > 0 \
                               and len([i for i in str(input_history) if "氏名" in i]) > 0 \
                                   or len([i for i in str(input_history) if "姓" in i]) > 0 \
                                       and len([i for i in str(input_history) if "投稿" in i]) > 0 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))


# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))
                             

 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                     
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print(("list_12ia:" + str(list_12ia)))
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

#2022.8.17
#確認画面遷移後に送信（その４）
#※エラー「UnexpectedAlertPresentException: unexpected alert open: {Alert text : }」を回避する為のコーディングが含まれているので、
#他のパターンにコピーペーストする際は注意！！
 		             elif len(list_15iv) > 0 \
						and len(list_16iv) > 0 \
							and len(list_21it) > 0:
 		                try:                          
 		                  list_15iv = "input[value='" + list_15iv[0] + "']"
 		                  print("list_15iv:" +str(list_15iv))
 		                  print("list_16iv:" +str(list_16iv))
 		                  print("list_21it:" +str(list_21it))
 		                  elem = driver.find_element_by_css_selector(list_15iv)
 		                  driver.execute_script("arguments[0].click();", elem)

#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  dt_now = datetime.datetime.now()
 		                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ（コーディング一部仮変更中２）
 		                  for Content in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(id=re.compile("attention")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("red")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("err")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("Err")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("Err")))

 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("emesg")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("alert")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("style1")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("style1")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("alart")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("alart")))

#パターン追加（2022.8.10）
#<p class="notice lastChild">必須項目です</p>
 		                  for Content in soup.find_all(class_=re.compile("notice")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("notice")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("notice")))

#パターン追加（2022.8.11）
#<div class="invalid-feedback">入力されていません</div>
 		                  for Content in soup.find_all(class_=re.compile("invalid")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("invalid")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("invalid")))


#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("msg")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("msg")))

#パターン追加（2022.8.14）
# #<font color="red">必須の入力項目です<br></font>
 		                  for Content in soup.find_all("font",color=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(color=re.compile("red")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("font",color=re.compile("red")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all("p",style=re.compile("#f00")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("p",style=re.compile("#f00")))

#パターン追加（2022.8.16）
#<p class="caution3">お名前が入力されていません！</p>
 		                  for Content in soup.find_all("p",class_=re.compile("caution")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all("p",class_=re.compile("caution")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("p",class_=re.compile("caution")))

#パターン追加（2022.8.15）
#<span style="color:#dd0000">姓は入力必須です.</span>
 		                  for Content in soup.find_all("span",style=re.compile("#dd0000")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all("span",style=re.compile("#dd0000")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("span",style=re.compile("#dd0000")))

#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(style=re.compile("block")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("div",style=re.compile("block")))

 		                  for Content in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.select(".vali") == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.select(".vali"))

# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
                                                       
#エラーテキストが含まれている場合
# 		                  if Content is not None:
# 		                   	ws3.update_cell(k, 7, Content)
# 		                   	format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(Content)


#確認画面遷移後に送信ボタン押下
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知

#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                  if not len([i for i in str(input_history) if "メールアドレス" in i]) > 0:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                        try:
 		                          driver.get(ws3.cell(k+1, 6).value)
               
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                          alert = driver.switch_to.alert
 		                          alert.accept()
 		                        except NoAlertPresentException:
 		                          pass

 		                  elif not len([i for i in str(input_history) if "氏名" in i]) > 0 \
                               or not len([i for i in str(input_history) if "姓" in i]) > 0:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                        try:
 		                          driver.get(ws3.cell(k+1, 6).value)
               
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                          alert = driver.switch_to.alert
 		                          alert.accept()
 		                        except NoAlertPresentException:
 		                          pass
                                                                  
 		                  elif not len([i for i in str(input_history) if "投稿" in i]) > 0:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                        try:
 		                          driver.get(ws3.cell(k+1, 6).value)
               
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                          alert = driver.switch_to.alert
 		                          alert.accept()
 		                        except NoAlertPresentException:
 		                          pass
                                                                  
 		                  elif len([i for i in str(input_history) if "メールアドレス" in i]) > 0 \
                               and len([i for i in str(input_history) if "氏名" in i]) > 0 \
                                   or len([i for i in str(input_history) if "姓" in i]) > 0 \
                                       and len([i for i in str(input_history) if "投稿" in i]) > 0 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                                                                                                 
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))


# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []
 		                       list_14iv = []

#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)

#パターン追加（2022.8.16）
#<input type="submit" name="確認・送信" value="送信する">
 		                       element20 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element20)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))

 		                       for val in element20:
 		                         list_14iv.append(val.get("value"))

 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print("list_12ia:" + str(list_12ia))
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_14iv) > 0:
 		           		                  list_14iv = "input[value='" + list_14iv[0] + "']"
 		           		                  print(list_14iv)
 		           		                  elem = driver.find_element_by_css_selector(list_14iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

#2022.8.16
#確認画面遷移後に送信（その４）
#※エラー「UnexpectedAlertPresentException: unexpected alert open: {Alert text : }」を回避する為のコーディング無しバージョン
#他のパターンにコピーペーストする際は注意！！
 		             elif len(list_15iv) > 0 \
						and len([i for i in list_21it if "submit" in i]) == 0:

 		                  list_15iv = "input[value='" + list_15iv[0] + "']"
 		                  print("list_15iv:" +str(list_15iv))
 		                  print("list_21it:" +str(list_21it))
 		                  elem = driver.find_element_by_css_selector(list_15iv)
 		                  driver.execute_script("arguments[0].click();", elem)
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ（コーディング一部仮変更中２）
 		                  for Content in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(id=re.compile("attention")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("red")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("err")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("Err")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("Err")))

 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("emesg")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("alert")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("style1")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("style1")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("alart")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("alart")))

#パターン追加（2022.8.10）
#<p class="notice lastChild">必須項目です</p>
 		                  for Content in soup.find_all(class_=re.compile("notice")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("notice")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("notice")))

#パターン追加（2022.8.11）
#<div class="invalid-feedback">入力されていません</div>
 		                  for Content in soup.find_all(class_=re.compile("invalid")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("invalid")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("invalid")))


#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("msg")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("msg")))

#パターン追加（2022.8.14）
# #<font color="red">必須の入力項目です<br></font>
 		                  for Content in soup.find_all("font",color=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(color=re.compile("red")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("font",color=re.compile("red")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all("p",style=re.compile("#f00")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("p",style=re.compile("#f00")))

#パターン追加（2022.8.16）
#<p class="caution3">お名前が入力されていません！</p>
 		                  for Content in soup.find_all("p",class_=re.compile("caution")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all("p",class_=re.compile("caution")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("p",class_=re.compile("caution")))

#パターン追加（2022.8.15）
#<span style="color:#dd0000">姓は入力必須です.</span>
 		                  for Content in soup.find_all("span",style=re.compile("#dd0000")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all("span",style=re.compile("#dd0000")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("span",style=re.compile("#dd0000")))

#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(style=re.compile("block")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("div",style=re.compile("block")))

 		                  for Content in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.select(".vali") == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.select(".vali"))

# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
                                                       
#エラーテキストが含まれている場合
# 		                  if Content is not None:
# 		                   	ws3.update_cell(k, 7, Content)
# 		                   	format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(Content)


#確認画面遷移後に送信ボタン押下
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知

#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                  if not len([i for i in str(input_history) if "メールアドレス" in i]) > 0:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                        try:
 		                          driver.get(ws3.cell(k+1, 6).value)
               
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                          alert = driver.switch_to.alert
 		                          alert.accept()
 		                        except NoAlertPresentException:
 		                          pass

 		                  elif not len([i for i in str(input_history) if "氏名" in i]) > 0 \
                               or not len([i for i in str(input_history) if "姓" in i]) > 0:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                        try:
 		                          driver.get(ws3.cell(k+1, 6).value)
               
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                          alert = driver.switch_to.alert
 		                          alert.accept()
 		                        except NoAlertPresentException:
 		                          pass
                                                                  
 		                  elif not len([i for i in str(input_history) if "投稿" in i]) > 0:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                        try:
 		                          driver.get(ws3.cell(k+1, 6).value)
               
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                          alert = driver.switch_to.alert
 		                          alert.accept()
 		                        except NoAlertPresentException:
 		                          pass
                                                                  
 		                  elif len([i for i in str(input_history) if "メールアドレス" in i]) > 0 \
                               and len([i for i in str(input_history) if "氏名" in i]) > 0 \
                                   or len([i for i in str(input_history) if "姓" in i]) > 0 \
                                       and len([i for i in str(input_history) if "投稿" in i]) > 0 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                                                                                                 
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))


# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []
 		                       list_14iv = []

#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)

#パターン追加（2022.8.16）
#<input type="submit" name="確認・送信" value="送信する">
 		                       element20 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element20)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))

 		                       for val in element20:
 		                         list_14iv.append(val.get("value"))

 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print("list_12ia:" + str(list_12ia))
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_14iv) > 0:
 		           		                  list_14iv = "input[value='" + list_14iv[0] + "']"
 		           		                  print(list_14iv)
 		           		                  elem = driver.find_element_by_css_selector(list_14iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その４）
#※エラー「UnexpectedAlertPresentException: unexpected alert open: {Alert text : }」を回避する為のコーディングが含まれているので、
#他のパターンにコピーペーストする際は注意！！
 		             elif len(list_15iv) > 0:
 		                try:                          
 		                  list_15iv = "input[value='" + list_15iv[0] + "']"
 		                  print("list_15iv:" +str(list_15iv))
 		                  elem = driver.find_element_by_css_selector(list_15iv)
 		                  driver.execute_script("arguments[0].click();", elem)

#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  dt_now = datetime.datetime.now()
 		                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ（コーディング一部仮変更中２）
 		                  for Content in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(id=re.compile("attention")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("red")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("err")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("Err")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("Err")))

 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("emesg")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("alert")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("style1")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("style1")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("alart")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("alart")))

#パターン追加（2022.8.10）
#<p class="notice lastChild">必須項目です</p>
 		                  for Content in soup.find_all(class_=re.compile("notice")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("notice")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("notice")))

#パターン追加（2022.8.11）
#<div class="invalid-feedback">入力されていません</div>
 		                  for Content in soup.find_all(class_=re.compile("invalid")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("invalid")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("invalid")))


#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("msg")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("msg")))

#パターン追加（2022.8.14）
# #<font color="red">必須の入力項目です<br></font>
 		                  for Content in soup.find_all("font",color=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(color=re.compile("red")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("font",color=re.compile("red")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all("p",style=re.compile("#f00")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("p",style=re.compile("#f00")))

#パターン追加（2022.8.16）
#<p class="caution3">お名前が入力されていません！</p>
 		                  for Content in soup.find_all("p",class_=re.compile("caution")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all("p",class_=re.compile("caution")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("p",class_=re.compile("caution")))

#パターン追加（2022.8.15）
#<span style="color:#dd0000">姓は入力必須です.</span>
 		                  for Content in soup.find_all("span",style=re.compile("#dd0000")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all("span",style=re.compile("#dd0000")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("span",style=re.compile("#dd0000")))

#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(style=re.compile("block")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("div",style=re.compile("block")))

 		                  for Content in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.select(".vali") == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.select(".vali"))

# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
                                                       
#エラーテキストが含まれている場合
# 		                  if Content is not None:
# 		                   	ws3.update_cell(k, 7, Content)
# 		                   	format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(Content)


#確認画面遷移後に送信ボタン押下
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知

#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                  if not len([i for i in str(input_history) if "メールアドレス" in i]) > 0:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                        try:
 		                          driver.get(ws3.cell(k+1, 6).value)
               
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                          alert = driver.switch_to.alert
 		                          alert.accept()
 		                        except NoAlertPresentException:
 		                          pass

 		                  elif not len([i for i in str(input_history) if "氏名" in i]) > 0 \
                               or not len([i for i in str(input_history) if "姓" in i]) > 0:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                        try:
 		                          driver.get(ws3.cell(k+1, 6).value)
               
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                          alert = driver.switch_to.alert
 		                          alert.accept()
 		                        except NoAlertPresentException:
 		                          pass
                                                                  
 		                  elif not len([i for i in str(input_history) if "投稿" in i]) > 0:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                        try:
 		                          driver.get(ws3.cell(k+1, 6).value)
               
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                          alert = driver.switch_to.alert
 		                          alert.accept()
 		                        except NoAlertPresentException:
 		                          pass
                                                                  
 		                  elif len([i for i in str(input_history) if "メールアドレス" in i]) > 0 \
                               and len([i for i in str(input_history) if "氏名" in i]) > 0 \
                                   or len([i for i in str(input_history) if "姓" in i]) > 0 \
                                       and len([i for i in str(input_history) if "投稿" in i]) > 0 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                                                                                                 
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))


# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []
 		                       list_14iv = []

#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)

#パターン追加（2022.8.16）
#<input type="submit" name="確認・送信" value="送信する">
 		                       element20 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element20)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))

 		                       for val in element20:
 		                         list_14iv.append(val.get("value"))

 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print("list_12ia:" + str(list_12ia))
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_14iv) > 0:
 		           		                  list_14iv = "input[value='" + list_14iv[0] + "']"
 		           		                  print(list_14iv)
 		           		                  elem = driver.find_element_by_css_selector(list_14iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その４）
 		             elif len(list_25iv) > 0:
 		                try:                          
 		                  list_25iv = "input[value='" + list_25iv[0] + "']"
 		                  print(list_25iv)
 		                  elem = driver.find_element_by_css_selector(list_25iv)
 		                  driver.execute_script("arguments[0].click();", elem)

#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  dt_now = datetime.datetime.now()
 		                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知

#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                  if not len([i for i in str(input_history) if "メールアドレス" in i]) > 0:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not len([i for i in str(input_history) if "氏名" in i]) > 0 \
                               or not len([i for i in str(input_history) if "姓" in i]) > 0:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not len([i for i in str(input_history) if "投稿" in i]) > 0:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif len([i for i in str(input_history) if "メールアドレス" in i]) > 0 \
                               and len([i for i in str(input_history) if "氏名" in i]) > 0 \
                                   or len([i for i in str(input_history) if "姓" in i]) > 0 \
                                       and len([i for i in str(input_history) if "投稿" in i]) > 0 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print("list_12ia:" + str(list_12ia))
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その５）
 		             elif len(list_16iv) > 0:
 		                try:                          
 		                  list_16iv = "input[value='" + list_16iv[0] + "']"
 		                  print(list_16iv)
 		                  elem = driver.find_element_by_css_selector(list_16iv)
 		                  driver.execute_script("arguments[0].click();", elem)

#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  dt_now = datetime.datetime.now()
 		                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知

#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                  if not len([i for i in str(input_history) if "メールアドレス" in i]) > 0:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not len([i for i in str(input_history) if "氏名" in i]) > 0 \
                               or not len([i for i in str(input_history) if "姓" in i]) > 0:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not len([i for i in str(input_history) if "投稿" in i]) > 0:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif len([i for i in str(input_history) if "メールアドレス" in i]) > 0 \
                               and len([i for i in str(input_history) if "氏名" in i]) > 0 \
                                   or len([i for i in str(input_history) if "姓" in i]) > 0 \
                                       and len([i for i in str(input_history) if "投稿" in i]) > 0 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print("list_12ia:" + str(list_12ia))
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その６）
 		             elif len(list_17ao) > 0:                           
 		                try:                          
 		                  list_17ao = "a[onclick^='" + list_17ao[0] + "']"
 		                  print(list_17ao)
 		                  elem = driver.find_element_by_css_selector(list_17ao)
 		                  driver.execute_script("arguments[0].click();", elem)
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  dt_now = datetime.datetime.now()
 		                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知

#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                  if not len([i for i in str(input_history) if "メールアドレス" in i]) > 0:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not len([i for i in str(input_history) if "氏名" in i]) > 0 \
                               or not len([i for i in str(input_history) if "姓" in i]) > 0:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not len([i for i in str(input_history) if "投稿" in i]) > 0:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif len([i for i in str(input_history) if "メールアドレス" in i]) > 0 \
                               and len([i for i in str(input_history) if "氏名" in i]) > 0 \
                                   or len([i for i in str(input_history) if "姓" in i]) > 0 \
                                       and len([i for i in str(input_history) if "投稿" in i]) > 0 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print("list_12ia:" + str(list_12ia))
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#Googleフォームから送信（その７）
 		             elif len(list_12sc) > 0:
 		                  list_12sc = "." + list_12sc[0] \
                                                  + "." + list_12sc[1]  \
                                                      + "." + list_12sc[2]
 		                  print(list_12sc)
 		                  elem = driver.find_element_by_css_selector(list_12sc)
 		                  driver.execute_script("arguments[0].click();", elem)
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                                                                                        
#エラーメッセージ
#<span class="RHiWt">この質問は必須です</span>
#※「<span class="freebirdFormviewerComponentsQuestionBaseErrorText">この質問は必須です</span>」は現在使用できないので注意！！（2022.03.02）
 		                  try:
 		                    for Content in soup.find_all("span",class_=re.compile("RHiWt")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                    print(soup.find_all(class_=re.compile("RHiWt")))

#入力履歴（セル）全てをリスト化
# 		                    lastcol = len(list(ws3.row_values(k)))
# 		                    cell_list2 = ws3.range(k, 9, k, lastcol)
# 		                    print(cell_list2)
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知

#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                    if len([i for i in str(input_history) if "メールアドレス" in i]) == 0:
 		                      ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                      dt_now = datetime.datetime.now()
 		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                      try:
 		                        driver.get(ws3.cell(k+1, 6).value)
               
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                        alert = driver.switch_to.alert
 		                        alert.accept()
                                 
 		                      except InvalidArgumentException:
 		                        pass

 		                      except NoAlertPresentException:
 		                        pass

 		                    elif not len([i for i in str(input_history) if "氏名" in i]) > 0 \
                               or not len([i for i in str(input_history) if "姓" in i]) > 0:
 		                      ws3.update_cell(k, 8, "氏名が入力されていません")
 		                      dt_now = datetime.datetime.now()
 		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                      try:
 		                        driver.get(ws3.cell(k+1, 6).value)
               
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                        alert = driver.switch_to.alert
 		                        alert.accept()
 		                      except NoAlertPresentException:
 		                        pass
                                                                  
 		                    elif not len([i for i in str(input_history) if "投稿" in i]) > 0:
 		                      ws3.update_cell(k, 8, "本文が入力されていません")
 		                      dt_now = datetime.datetime.now()
 		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                      try:
 		                        driver.get(ws3.cell(k+1, 6).value)
               
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                        alert = driver.switch_to.alert
 		                        alert.accept()
 		                      except NoAlertPresentException:
 		                        pass                                 
                             
#エラーが無い場合「UnboundLocalError:local variable 'Err' referenced before assignment」と表示されてしまうので回避
 		                  except UnboundLocalError:
 		                    lastcol = len(list(ws3.row_values(k)))
 		                    cell_list2 = ws3.range(k, 9, k, lastcol)
 		                    print(cell_list2)
                                                                                                 
# 		                    if "メールアドレス" in cell_list2 \
#                                 and "氏名" in cell_list2 \
#                                     or "姓" in cell_list2 \
#                                         and "投稿" in cell_list2 \
#                                             and not "完了" in ws3.cell(k, 7).value:
                                               
#送信完了画面
 		                    if "フォーム要素あり" in ws3.cell(k, 7).value:
 		                      for result in soup.find_all(class_=re.compile("ResponseConfirmationMessage")):
 		                        Content = re.sub("[\n]", "", result.getText(), 4)
 		                        ws3.update_cell(k, 7, Content)
 		                      dt_now = datetime.datetime.now()
 		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                           
 		                      print(soup.find_all(class_=re.compile("ResponseConfirmationMessage")))


#確認画面遷移後に送信（その８）
 		             elif len(list_10ia) > 0:
 		                try:
 		                  list_10ia = "img[alt='" + list_10ia[0] + "']"
 		                  print(list_10ia)
 		                  elem = driver.find_element_by_css_selector(list_10ia)
 		                  driver.execute_script("arguments[0].click();", elem)

#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  dt_now = datetime.datetime.now()
 		                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知

#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                  if not len([i for i in str(input_history) if "メールアドレス" in i]) > 0:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not len([i for i in str(input_history) if "氏名" in i]) > 0 \
                               or not len([i for i in str(input_history) if "姓" in i]) > 0:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not len([i for i in str(input_history) if "投稿" in i]) > 0:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif len([i for i in str(input_history) if "メールアドレス" in i]) > 0 \
                               and len([i for i in str(input_history) if "氏名" in i]) > 0 \
                                   or len([i for i in str(input_history) if "姓" in i]) > 0 \
                                       and len([i for i in str(input_history) if "投稿" in i]) > 0 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print("list_12ia:" + str(list_12ia))
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その９）
 		             elif len(list_11ia) > 0:
 		                try:
 		                  list_11ia = "img[alt='" + list_11ia[0] + "']"
 		                  print(list_11ia)
 		                  elem = driver.find_element_by_css_selector(list_11ia)
 		                  driver.execute_script("arguments[0].click();", elem)

#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  dt_now = datetime.datetime.now()
 		                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知

#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                  if not len([i for i in str(input_history) if "メールアドレス" in i]) > 0:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not len([i for i in str(input_history) if "氏名" in i]) > 0 \
                               or not len([i for i in str(input_history) if "姓" in i]) > 0:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not len([i for i in str(input_history) if "投稿" in i]) > 0:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif len([i for i in str(input_history) if "メールアドレス" in i]) > 0 \
                               and len([i for i in str(input_history) if "氏名" in i]) > 0 \
                                   or len([i for i in str(input_history) if "姓" in i]) > 0 \
                                       and len([i for i in str(input_history) if "投稿" in i]) > 0 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print("list_12ia:" + str(list_12ia))
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その１５）
 		             elif len([i for i in list_19id if "confirm" in i \
                              or "image" in i \
                                  or "submit" in i]) > 0:
# 		                try:                          
 		                  list_19id = list_19id[0]
 		                  driver.find_element_by_id(list_19id).click()
 		                  print("確認ボタン押下：" + str(list_19id))
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
# 		                  alert = driver.switch_to.alert
# 		                  Content = re.sub("[\n]", "", alert.text, 6)
# 		                  Content = re.sub("[\s]", "", Content, 50)     
# 		                  ws3.update_cell(k, 7, Content)
# 		                  print(Content)
# 		                  dt_now = datetime.datetime.now()
# 		                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  alert.accept()
# 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知

#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                  if not len([i for i in str(input_history) if "メールアドレス" in i]) > 0:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not len([i for i in str(input_history) if "氏名" in i]) > 0 \
                               or not len([i for i in str(input_history) if "姓" in i]) > 0:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not len([i for i in str(input_history) if "投稿" in i]) > 0:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif len([i for i in str(input_history) if "メールアドレス" in i]) > 0 \
                               and len([i for i in str(input_history) if "氏名" in i]) > 0 \
                                   or len([i for i in str(input_history) if "姓" in i]) > 0 \
                                       and len([i for i in str(input_history) if "投稿" in i]) > 0 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print("list_12ia:" + str(list_12ia))
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

#2022.8.16
#確認画面遷移後に送信（その９）
 		             elif len([i for i in list_19in if "confirm" in i \
                              or "image" in i \
                                  or "submit" in i \
									or "inspect" in i]) > 0:
# 		                try:                          
 		                  list_19in = list_19in[0]
 		                  driver.find_element_by_name(list_19in).click()
 		                  print("確認ボタン押下：" + str(list_19in))
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
# 		                  alert = driver.switch_to.alert
# 		                  Content = re.sub("[\n]", "", alert.text, 6)
# 		                  Content = re.sub("[\s]", "", Content, 50)     
# 		                  ws3.update_cell(k, 7, Content)
# 		                  print(Content)
# 		                  dt_now = datetime.datetime.now()
# 		                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  alert.accept()
# 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知

#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                  if not len([i for i in str(input_history) if "メールアドレス" in i]) > 0:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not len([i for i in str(input_history) if "氏名" in i]) > 0 \
                               or not len([i for i in str(input_history) if "姓" in i]) > 0:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not len([i for i in str(input_history) if "投稿" in i]) > 0:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif len([i for i in str(input_history) if "メールアドレス" in i]) > 0 \
                               and len([i for i in str(input_history) if "氏名" in i]) > 0 \
                                   or len([i for i in str(input_history) if "姓" in i]) > 0 \
                                       and len([i for i in str(input_history) if "投稿" in i]) > 0 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print("list_12ia:" + str(list_12ia))
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その１０）
 		             elif len(list_20ah) > 0:                           
 		                try:
 		                  list_20ah = "a[href^='" + list_20ah[0] + "']"
 		                  print(list_20ah)
 		                  elem = driver.find_element_by_css_selector(list_20ah)
 		                  driver.execute_script("arguments[0].click();", elem)
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  dt_now = datetime.datetime.now()
 		                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知

#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                  if not len([i for i in str(input_history) if "メールアドレス" in i]) > 0:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not len([i for i in str(input_history) if "氏名" in i]) > 0 \
                               or not len([i for i in str(input_history) if "姓" in i]) > 0:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not len([i for i in str(input_history) if "投稿" in i]) > 0:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif len([i for i in str(input_history) if "メールアドレス" in i]) > 0 \
                               and len([i for i in str(input_history) if "氏名" in i]) > 0 \
                                   or len([i for i in str(input_history) if "姓" in i]) > 0 \
                                       and len([i for i in str(input_history) if "投稿" in i]) > 0 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print("list_12ia:" + str(list_12ia))
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その１１）
 		             elif len(list_21it) > 0 \
                          and not len(list_22bt) > 0:
 		                try:
 		                  list_21it = "input[type='" + list_21it[0] + "']"
 		                  print(list_21it)
 		                  elem = driver.find_element_by_css_selector(list_21it)
 		                  driver.execute_script("arguments[0].click();", elem)
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  dt_now = datetime.datetime.now()
 		                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知

#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                  if not len([i for i in str(input_history) if "メールアドレス" in i]) > 0:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not len([i for i in str(input_history) if "氏名" in i]) > 0 \
                               or not len([i for i in str(input_history) if "姓" in i]) > 0:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not len([i for i in str(input_history) if "投稿" in i]) > 0:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif len([i for i in str(input_history) if "メールアドレス" in i]) > 0 \
                               and len([i for i in str(input_history) if "氏名" in i]) > 0 \
                                   or len([i for i in str(input_history) if "姓" in i]) > 0 \
                                       and len([i for i in str(input_history) if "投稿" in i]) > 0 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print("list_12ia:" + str(list_12ia))
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その１２）
 		             elif len(list_22bt) > 0:
 		                try:
 		                  list_22bt = "button[type='" + list_22bt[0] + "']"
 		                  print(list_22bt)
 		                  elem = driver.find_element_by_css_selector(list_22bt)
 		                  driver.execute_script("arguments[0].click();", elem)
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  dt_now = datetime.datetime.now()
 		                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知

#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                  if not len([i for i in str(input_history) if "メールアドレス" in i]) > 0:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not len([i for i in str(input_history) if "氏名" in i]) > 0 \
                               or not len([i for i in str(input_history) if "姓" in i]) > 0:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not len([i for i in str(input_history) if "投稿" in i]) > 0:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif len([i for i in str(input_history) if "メールアドレス" in i]) > 0 \
                               and len([i for i in str(input_history) if "氏名" in i]) > 0 \
                                   or len([i for i in str(input_history) if "姓" in i]) > 0 \
                                       and len([i for i in str(input_history) if "投稿" in i]) > 0 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print("list_12ia:" + str(list_12ia))
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その１３）
 		             elif len(list_23bt) > 0:
 		                try:
 		                  list_23bt = "button[type='" + list_23bt[0] + "']"
 		                  print(list_23bt)
 		                  elem = driver.find_element_by_css_selector(list_23bt)
 		                  driver.execute_script("arguments[0].click();", elem)
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  dt_now = datetime.datetime.now()
 		                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
# 		                  lastcol = len(list(ws3.row_values(k)))
# 		                  cell_list2 = ws3.range(k, 9, k, lastcol)
# 		                  print(cell_list2)

                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知
# 		                  if not "メールアドレス" in cell_list2:
# 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
# 		                        dt_now = datetime.datetime.now()
# 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
# 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

# 		                  elif not "氏名" in cell_list2 \
#                               or not "姓" in cell_list2:
# 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
# 		                        dt_now = datetime.datetime.now()
# 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
# 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
# 		                  elif not "投稿" in cell_list2:
# 		                        ws3.update_cell(k, 8, "本文が入力されていません")
# 		                        dt_now = datetime.datetime.now()
# 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
# 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                            
#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                  if not len([i for i in str(input_history) if "メールアドレス" in i]) > 0:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not len([i for i in str(input_history) if "氏名" in i]) > 0 \
                               or not len([i for i in str(input_history) if "姓" in i]) > 0:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not len([i for i in str(input_history) if "投稿" in i]) > 0:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif len([i for i in str(input_history) if "メールアドレス" in i]) > 0 \
                               and len([i for i in str(input_history) if "氏名" in i]) > 0 \
                                   or len([i for i in str(input_history) if "姓" in i]) > 0 \
                                       and len([i for i in str(input_history) if "投稿" in i]) > 0 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print("list_12ia:" + str(list_12ia))
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その１４）
 		             elif len(list_24it) > 0:
 		                try:
 		                  list_24it = "input[type='" + list_24it[0] + "']"
 		                  print(list_24it)
 		                  elem = driver.find_element_by_css_selector(list_24it)
 		                  driver.execute_script("arguments[0].click();", elem)
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  dt_now = datetime.datetime.now()
 		                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知

#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                  if not len([i for i in str(input_history) if "メールアドレス" in i]) > 0:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not len([i for i in str(input_history) if "氏名" in i]) > 0 \
                               or not len([i for i in str(input_history) if "姓" in i]) > 0:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not len([i for i in str(input_history) if "投稿" in i]) > 0:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif len([i for i in str(input_history) if "メールアドレス" in i]) > 0 \
                               and len([i for i in str(input_history) if "氏名" in i]) > 0 \
                                   or len([i for i in str(input_history) if "姓" in i]) > 0 \
                                       and len([i for i in str(input_history) if "投稿" in i]) > 0 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print("list_12ia:" + str(list_12ia))
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#パターン追加（2022.8.17）
#確認画面遷移後に送信（その１６）
 		             elif len(list_26bc) > 0:
 		                try:
 		                  list_26bc = "." + list_26bc[0]
 		                  print("list_26bc:" + list_26bc)
 		                  elem = driver.find_element_by_css_selector(list_26bc)
 		                  driver.execute_script("arguments[0].click();", elem)
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  dt_now = datetime.datetime.now()
 		                  ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ（コーディング一部仮変更中２）
 		                  for Content in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(id=re.compile("attention")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("red")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("err")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("Err")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("Err")))

 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("emesg")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("alert")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("style1")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("style1")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("alart")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("alart")))

#パターン追加（2022.8.10）
#<p class="notice lastChild">必須項目です</p>
 		                  for Content in soup.find_all(class_=re.compile("notice")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("notice")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("notice")))

#パターン追加（2022.8.11）
#<div class="invalid-feedback">入力されていません</div>
 		                  for Content in soup.find_all(class_=re.compile("invalid")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("invalid")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("invalid")))


#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(class_=re.compile("msg")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all(class_=re.compile("msg")))

#パターン追加（2022.8.14）
# #<font color="red">必須の入力項目です<br></font>
 		                  for Content in soup.find_all("font",color=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(color=re.compile("red")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("font",color=re.compile("red")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all("p",style=re.compile("#f00")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("p",style=re.compile("#f00")))

#パターン追加（2022.8.16）
#<p class="caution3">お名前が入力されていません！</p>
 		                  for Content in soup.find_all("p",class_=re.compile("caution")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all("p",class_=re.compile("caution")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("p",class_=re.compile("caution")))

#パターン追加（2022.8.15）
#<span style="color:#dd0000">姓は入力必須です.</span>
 		                  for Content in soup.find_all("span",style=re.compile("#dd0000")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all("span",style=re.compile("#dd0000")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("span",style=re.compile("#dd0000")))

#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.find_all(style=re.compile("block")) == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.find_all("div",style=re.compile("block")))

 		                  for Content in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", Content.getText(), 1000)
 		                  if not soup.select(".vali") == []:
 		                   	ws3.update_cell(k, 7, Content)
# 		                  print(soup.select(".vali"))

# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                                                                                  
#エラーテキストが含まれている場合
# 		                  if Content is not None:
# 		                   	ws3.update_cell(k, 7, Content)
# 		                   	format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(Content)


#確認画面遷移後に送信ボタン押下
# 		                  lastcol = len(list(ws3.row_values(k)))
# 		                  cell_list2 = ws3.range(k, 9, k, lastcol)
# 		                  print(cell_list2)

                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知
# 		                  if not "メールアドレス" in cell_list2:
# 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
# 		                        dt_now = datetime.datetime.now()
# 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
# 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

# 		                  elif not "氏名" in cell_list2 \
#                               or not "姓" in cell_list2:
# 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
# 		                        dt_now = datetime.datetime.now()
# 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
# 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
# 		                  elif not "投稿" in cell_list2:
# 		                        ws3.update_cell(k, 8, "本文が入力されていません")
# 		                        dt_now = datetime.datetime.now()
# 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
# 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                            
#リスト型変数「input_history」はそのままだと「TypeError: argument of type 'int' is not iterable」になるので
#必ずstr型に変換すること！！
 		                  if len([i for i in input_history if "メールアドレス" in i]) == 0:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                        print("メールアドレスが入力されていません")

 		                  elif not len([i for i in input_history if "氏名" in i \
							or "姓" in i]) > 0:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                        print("氏名が入力されていません")
                                                                  
 		                  elif len([i for i in input_history if "投稿" in i]) == 0:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        dt_now = datetime.datetime.now()
 		                        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))								 
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                        print("本文が入力されていません")
                                                                  
 		                  elif len([i for i in input_history if "メールアドレス" in i]) > 0 \
                               and len([i for i in input_history if "氏名" in i \
								or "姓" in i]) > 0 \
									and len([i for i in input_history if "投稿" in i]) > 0 \
										and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    dt_now = datetime.datetime.now()
 		                    ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))

 		                    time.sleep(3)
 		                    print(driver.title)

 		                    if "エラー" in driver.title \
								or "SPAM BLOCK" in driver.title \
									or "404 Not Found" in driver.title:
 		                      ws3.update_cell(k, 7, driver.title)
 		                      dt_now = datetime.datetime.now()
 		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                    else:
 		                      ws3.update_cell(k, 7, driver.title)
 		                      dt_now = datetime.datetime.now()
 		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print("list_12ia:" + str(list_12ia))
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))                              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      dt_now = datetime.datetime.now()
 		           		                      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))              
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         dt_now = datetime.datetime.now()
 		           		                         ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")
 		                                 dt_now = datetime.datetime.now()
 		                                 ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#上記リスト変数の条件に該当しない場合
# 		             else:
# 		             except:
# 		               try:
# 		                 try:

# 		                           elem = driver.find_element_by_css_selector("[type='submit']")
# 		                           driver.execute_script("arguments[0].click();", elem)
# 		                           time.sleep(3)
# 		                           if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                             ws3.update_cell(k, 7, driver.title)
# 		                             print(driver.title)
# 		                             format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                           else:
# 		                             format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
# 		                                except:
# 		                                  print(driver.title)
# 		                                  if "エラー" in driver.title \
#                                               or "SPAM BLOCK" in driver.title \
#                                                   or "404 Not Found" in driver.title:
# 		                                    ws3.update_cell(k, 8, driver.title)
# 		                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
# 		                                  else:
# 		                                    ws3.update_cell(k, 8, "送信ボタン押下不可")                                                        
# 		                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)




 		      else:
 		          ws3.update_cell(k, 7, "フォーム要素取得不可")
 		          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)
 		          dt_now = datetime.datetime.now()
 		          ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))


#エラー処理（４）
 		   except TimeoutException as e:
 		      print("error:", e)
# 		      wx.MessageBox(f'{e}', u'Sever error', wx.ICON_ERROR)
# 		      break
 		      ws3.update_cell(k, 7, "Time out!!")
 		      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)
 		      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))           
# 		      dlg.Destroy()

#chromeドライバーの終了（この処理をお忘れなく！！）
# 		      driver.quit()

#エラー処理（３）
 		   except UnexpectedAlertPresentException as e:
 		      print("error:", e)
 		      driver.switch_to.alert.accept()
               
#エラー処理（２）
 		   except gspread.exceptions.APIError as e:
 		      print("error:", e)
 		      wx.MessageBox(f'{e}', u'Spreadsheet API error', wx.ICON_ERROR)
 		      break
           
 		      dlg.Destroy()

#chromeドライバーの終了（この処理をお忘れなく！！）
 		      driver.quit()

#※以下、コーディング検証時はコメントアウト

#エラー処理（１）
 		   except:
 		      ws3.update_cell(k, 7, "unknown error!!")
 		      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)
 		      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))

# except:
#  ws3.update_cell(k, 9, "無限ページロードによりスキップしました。")
#   elif ws3.cell(k, 8).value == r"-":
#    ws3.cell(k, 9).value == "フォーム要素なし"



 		   if ws3.cell(k, 7).value is None:

#法人名称～投稿日時まで表示
 		     adid6.grid.SetCellValue(t, 0, ws3.cell(k, 2).value)
# 		     adid6.grid.SetCellValue(t, 1, ws3.cell(k, 7).value)
 		     adid6.grid.SetCellValue(t, 2, ws3.cell(k, 8).value)
 		     adid6.grid.SetCellValue(t, 3, ws3.cell(k, 9).value)
 		     print(input_history)

 		     i = 0
 		     for i in range(len(input_history)):
 		       adid6.grid.SetCellValue(t, i+4, str(input_history[i]))

 		     adid6.grid.AutoSize()

#投稿件数カウントアップ
 		     cnt = int(adid8.m_textCtrl53.GetValue())
 		     cnt += 1
              
#今日の日付を取得
 		     d_today = datetime.date.today()
 		     adid8.m_textCtrl52.SetValue(d_today.strftime('%Y年%m月%d日'))
 		     adid8.m_textCtrl53.SetValue(str(cnt))
 		     print(d_today.strftime('%Y年%m月%d日'))
 		     print(cnt)
              
 		     t += 1
             
 		     update = True
 		     rate += 1/((row4+1)-row3)*100
 		     (update, skip) = dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
 		     if not update:
 		       wx.MessageBox(u'Posting to the inquiry form and automatic transmission have been cancelled.', 
                      u'This process cannot be continued! !!', wx.ICON_ERROR)
 		       break
            
#１日当たりの件数が制限オーバーしていないか確認
 		     elif adid8.m_textCtrl52.GetValue() == d_today.strftime('%Y年%m月%d日') \
                  and int(adid8.m_textCtrl53.GetValue()) > 1000:
 		       wx.MessageBox(u'The number of posts that can be posted per day has been exceeded!!',
                        u'Over limit', wx.ICON_ERROR)
 		       break


 		   elif ws3.cell(k, 8).value is None:

#法人名称～投稿日時まで表示
 		     adid6.grid.SetCellValue(t, 0, ws3.cell(k, 2).value)
 		     adid6.grid.SetCellValue(t, 1, ws3.cell(k, 7).value)
# 		     adid6.grid.SetCellValue(t, 2, ws3.cell(k, 8).value)
 		     adid6.grid.SetCellValue(t, 3, ws3.cell(k, 9).value)
 		     print(input_history)

 		     i = 0
 		     for i in range(len(input_history)):
 		       adid6.grid.SetCellValue(t, i+4, str(input_history[i]))

 		     adid6.grid.AutoSize()

#投稿件数カウントアップ
 		     cnt = int(adid8.m_textCtrl53.GetValue())
 		     cnt += 1
              
#今日の日付を取得
 		     d_today = datetime.date.today()
 		     adid8.m_textCtrl52.SetValue(d_today.strftime('%Y年%m月%d日'))
 		     adid8.m_textCtrl53.SetValue(str(cnt))
 		     print(d_today.strftime('%Y年%m月%d日'))
 		     print(cnt)

 		     t += 1
             
 		     try:
 		       update = True
 		       rate += 1/((row4+1)-row3)*100
 		       (update, skip) = dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
 		       if not update:
 		         wx.MessageBox(u'Posting to the inquiry form and automatic transmission have been cancelled.', 
                      u'This process cannot be continued! !!', wx.ICON_ERROR)
 		         break

#１日当たりの件数が制限オーバーしていないか確認
 		       elif adid8.m_textCtrl52.GetValue() == d_today.strftime('%Y年%m月%d日') \
                    and int(adid8.m_textCtrl53.GetValue()) > 1000:
 		         wx.MessageBox(u'The number of posts that can be posted per day has been exceeded!!',
                          u'Over limit', wx.ICON_ERROR)
 		         break

 		     except:
 		       break
                


 		   elif ws3.cell(k, 7).value is None \
                and ws3.cell(k, 8).value is None:

#法人名称～投稿日時まで表示
 		     adid6.grid.SetCellValue(t, 0, ws3.cell(k, 2).value)
# 		     adid6.grid.SetCellValue(t, 1, ws3.cell(k, 7).value)
# 		     adid6.grid.SetCellValue(t, 2, ws3.cell(k, 8).value)
 		     adid6.grid.SetCellValue(t, 3, ws3.cell(k, 9).value)
 		     print(input_history)

 		     i = 0
 		     for i in range(len(input_history)):
 		       adid6.grid.SetCellValue(t, i+4, str(input_history[i]))

 		     adid6.grid.AutoSize()

#投稿件数カウントアップ
 		     cnt = int(adid8.m_textCtrl53.GetValue())
 		     cnt += 1
              
#今日の日付を取得
 		     d_today = datetime.date.today()
 		     adid8.m_textCtrl52.SetValue(d_today.strftime('%Y年%m月%d日'))
 		     adid8.m_textCtrl53.SetValue(str(cnt))
 		     print(d_today.strftime('%Y年%m月%d日'))
 		     print(cnt)
              
 		     t += 1
             
 		     update = True
 		     rate += 1/((row4+1)-row3)*100
 		     (update, skip) = dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
 		     if not update:
 		       wx.MessageBox(u'Posting to the inquiry form and automatic transmission have been cancelled.', 
                      u'This process cannot be continued! !!', wx.ICON_ERROR)
 		       break
            
#１日当たりの件数が制限オーバーしていないか確認
 		     elif adid8.m_textCtrl52.GetValue() == d_today.strftime('%Y年%m月%d日') \
                  and int(adid8.m_textCtrl53.GetValue()) > 1000:
 		       wx.MessageBox(u'The number of posts that can be posted per day has been exceeded!!',
                        u'Over limit', wx.ICON_ERROR)
 		       break


 		   elif not ws3.cell(k, 7).value is None \
                and not ws3.cell(k, 8).value is None:

#法人名称～投稿日時まで表示
 		     adid6.grid.SetCellValue(t, 0, ws3.cell(k, 2).value)
 		     adid6.grid.SetCellValue(t, 1, ws3.cell(k, 7).value)
 		     adid6.grid.SetCellValue(t, 2, ws3.cell(k, 8).value)
 		     adid6.grid.SetCellValue(t, 3, ws3.cell(k, 9).value)
 		     print(input_history)

 		     i = 0
 		     for i in range(len(input_history)):
 		       adid6.grid.SetCellValue(t, i+4, str(input_history[i]))

 		     adid6.grid.AutoSize()

#投稿件数カウントアップ
 		     cnt = int(adid8.m_textCtrl53.GetValue())
 		     cnt += 1
              
#今日の日付を取得
 		     d_today = datetime.date.today()
 		     adid8.m_textCtrl52.SetValue(d_today.strftime('%Y年%m月%d日'))
 		     adid8.m_textCtrl53.SetValue(str(cnt))
 		     print(d_today.strftime('%Y年%m月%d日'))
 		     print(cnt)
              
 		     t += 1
             
 		     update = True
 		     rate += 1/((row4+1)-row3)*100
 		     (update, skip) = dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
 		     if not update:
 		       wx.MessageBox(u'Posting to the inquiry form and automatic transmission have been cancelled.', 
                      u'This process cannot be continued! !!', wx.ICON_ERROR)
 		       break
            
#１日当たりの件数が制限オーバーしていないか確認
 		     elif adid8.m_textCtrl52.GetValue() == d_today.strftime('%Y年%m月%d日') \
                  and int(adid8.m_textCtrl53.GetValue()) > 1000:
 		       wx.MessageBox(u'The number of posts that can be posted per day has been exceeded!!',
                        u'Over limit', wx.ICON_ERROR)
 		       break


#投稿件数に含まないので、制限に関するコーディング不要
 		   elif "専用フォーム" in ws3.cell(k, 7).value \
                    or "取得不可" in ws3.cell(k, 7).value \
                        or "unknown" in ws3.cell(k, 7).value \
                            or "CAPTCHA" in ws3.cell(k, 7).value \
                                or "お断り" in ws3.cell(k, 7).value \
                                    or "-" in ws3.cell(k, 7).value:

#法人名称～投稿日時まで表示
 		     adid6.grid.SetCellValue(t, 0, ws3.cell(k, 2).value)
 		     adid6.grid.SetCellValue(t, 1, ws3.cell(k, 7).value)
# 		     adid6.grid.SetCellValue(t, 2, ws3.cell(k, 8).value)
 		     adid6.grid.SetCellValue(t, 3, ws3.cell(k, 9).value)
 		     adid6.grid.AutoSize()

 		     t += 1
             
 		     update = True
 		     rate += 1/((row4+1)-row3)*100
 		     (update, skip) = dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
 		     if not update:
 		       wx.MessageBox(u'Posting to the inquiry form and automatic transmission have been cancelled.', 
                      u'This process cannot be continued! !!', wx.ICON_ERROR)
 		       break


 		   else:
    
#法人名称～投稿日時まで表示
 		     adid6.grid.SetCellValue(t, 0, ws3.cell(k, 2).value)
 		     adid6.grid.SetCellValue(t, 1, ws3.cell(k, 7).value)
 		     adid6.grid.SetCellValue(t, 2, ws3.cell(k, 8).value)
 		     adid6.grid.SetCellValue(t, 3, ws3.cell(k, 9).value)
 		     print(input_history)

 		     i = 0
 		     for i in range(len(input_history)):

#以下のエラーが返されないよう、リスト型変数「input_history」を必ず文字列型に変換すること！！
#TypeError: Grid.SetCellValue(): arguments did not match any overloaded call:
#  overload 1: argument 3 has unexpected type 'int'
#  overload 2: argument 1 has unexpected type 'int'                  
 		       adid6.grid.SetCellValue(t, i+4, str(input_history[i]))

 		     adid6.grid.AutoSize()

#投稿件数カウントアップ
 		     cnt = int(adid8.m_textCtrl53.GetValue())
 		     cnt += 1
              
#今日の日付を取得
 		     d_today = datetime.date.today()
 		     adid8.m_textCtrl52.SetValue(d_today.strftime('%Y年%m月%d日'))
 		     adid8.m_textCtrl53.SetValue(str(cnt))
 		     print(d_today.strftime('%Y年%m月%d日'))
 		     print(cnt)
                  
 		     t += 1
             
 		     update = True
 		     rate += 1/((row4+1)-row3)*100
 		     (update, skip) = dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
 		     if not update:
 		       wx.MessageBox(u'Posting to the inquiry form and automatic transmission have been cancelled.', 
                      u'This process cannot be continued! !!', wx.ICON_ERROR)
 		       break

#１日当たりの件数が制限オーバーしていないか確認
 		     elif adid8.m_textCtrl52.GetValue() == d_today.strftime('%Y年%m月%d日') \
                  and int(adid8.m_textCtrl53.GetValue()) > 1000:
 		       wx.MessageBox(u'The number of posts that can be posted per day has been exceeded!!',
                        u'Over limit', wx.ICON_ERROR)
 		       break

#進捗ダイアログ「自動投稿プログラム実行中」を廃棄
		  dlg.Destroy()

#chromeドライバーの終了（この処理をお忘れなく！！）
		  driver.quit()

# calculate elapsed time
		  elapsed_time = int(time.time() - start)

# convert second to hour, minute and seconds
		  elapsed_hour = elapsed_time // 3600
		  elapsed_minute = (elapsed_time % 3600) // 60
		  elapsed_second = (elapsed_time % 3600 % 60)

# print as 00:00:00
		  print("所要時間：" + str(elapsed_hour).zfill(2) + "h" \
 		           + str(elapsed_minute).zfill(2) + "m" + str(elapsed_second).zfill(2) + "s")


	def graph_start(self, event):
	    row3 = self.row11.GetValue()
	    row4 = self.row21.GetValue()
        
#ラジオボタンが１個も選択されていない
	    if self.m_radioBtn1.GetValue() is False \
            and self.m_radioBtn2.GetValue() is False \
                and self.m_radioBtn3.GetValue() is False:
	      wx.MessageBox(u'No check items have been selected!!', u'Extraction error', wx.ICON_ERROR)
          
	    elif self.m_comboBox11.GetValue() == '選択して下さい':
	     self.m_comboBox11.SetBackgroundColour("#f56cbe")
	     wx.MessageBox(u'Please select the Worksheet title!!', u'Setting value error', wx.ICON_ERROR)
	    elif row3 == 0 and row4 == 0:
	     self.row11.SetBackgroundColour('#f56cbe')
	     self.row21.SetBackgroundColour('#f56cbe')
	     self.m_comboBox11.SetBackgroundColour("#FFFFFF")
	     wx.MessageBox(u'Please set the range!!', u'Setting value error', wx.ICON_ERROR)
	    elif row4 - row3 > 10000:
	     self.row11.SetBackgroundColour('#f56cbe')
	     self.row21.SetBackgroundColour('#f56cbe')
	     self.m_comboBox11.SetBackgroundColour("#FFFFFF")
	     wx.MessageBox(u'The value exceeds the configurable range!!', u'Setting value error', wx.ICON_ERROR)
	    elif row4 - row3 < 0:
	     self.row11.SetBackgroundColour('#f56cbe')
	     self.row21.SetBackgroundColour('#f56cbe')
	     self.m_comboBox11.SetBackgroundColour("#FFFFFF")
	     wx.MessageBox(u'Illegal range!!', u'Setting value error', wx.ICON_ERROR)
	    elif self.m_comboBox11.GetValue() == '選択して下さい' \
            and row3 == 0 \
                and row4 == 0:
	     self.row11.SetBackgroundColour('#f56cbe')
	     self.row21.SetBackgroundColour('#f56cbe')
	     self.m_comboBox11.SetBackgroundColour("#f56cbe")
	     wx.MessageBox(u'Please select the Worksheet title and Illegal range!!', u'Setting value error', wx.ICON_ERROR) 

#件数の可視化          
	    elif self.m_radioBtn1.GetValue() is True:
	      adid = MyProject1MyDialog3(self)
	      credentials = ServiceAccountCredentials.from_json_keyfile_name(adid.m_textCtrl11.GetValue(), scope)
	      gc = gspread.authorize(credentials)                   
	      wb = gc.open_by_key(adid.m_comboBox6.GetValue())            
	      ws3 = wb.worksheet(self.m_comboBox11.GetValue())
	      self.row11.SetBackgroundColour('#FFFFFF')
	      self.row21.SetBackgroundColour('#FFFFFF')
	      self.m_comboBox11.SetBackgroundColour("#FFFFFF")
	      #import wx.lib
	      #import wx.lib.plot as plot
#	      import matplotlib
#	      matplotlib.use('WXAgg')
	      import matplotlib.pyplot as mlp

	      import pandas as pd
	      #import seaborn as sns

	      dlg = wx.ProgressDialog(
            title="データ処理中",
            message="0/100",
            maximum=100,
            style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )
         
# ダイアログ表示
	      dlg.Show()
	      rate = 0

          
	      date = []
	      cell_list_X = ws3.range(row3, 9, row4, 9)
#	      print(cell_list_X)

	      i = 0
	      j = 0
	      for i in range(len(cell_list_X)):
	        print(cell_list_X[i].value)           
            
#時刻を消して日付だけにしたいとき
#https://qiita.com/daijiro_maeyama/items/8a62fbb0741e5bad8568
	        dt_str, new_time = cell_list_X[i].value.split()
            
#空リスト「date」に上記の式で区切った文字列を追加
	        date.append(dt_str)
            
	        j += 1
	        rate += 1/(row4)*100
            # 値の更新
	        dlg.Update(value=rate, newmsg="%d/100" % rate + "%")

	      print(date)

#listをDataFrameに変換する          
#https://qiita.com/fault/items/6d5d69d4a0c257ed39df
	      df = pd.DataFrame({'Date':date})
	      print(df)
          
#value_counts()・・・DataFrameの特定の「列」に入っている「ユニークな要素」の「出現回数」を抽出することができる関数
#棒グラフで時系列順に表示する（Index順にソートしてからプロット）
#https://teratail.com/questions/265731
	      val = df["Date"].value_counts().sort_index()
	      print(val)

#グラフウィンドウのタイトル
	      mlp.figure("Number of executions")

#X軸ラベル設定
	      mlp.xlabel("件数", fontname="Yu Gothic")
          
#X軸目盛ラベルの文字を「游ゴシック」
	      mlp.xticks(fontname="Yu Gothic")
          
#Y軸ラベル設定（非表示）
	      mlp.ylabel("", fontname="Yu Gothic")
          
#Y軸目盛ラベルの文字を「游ゴシック」
	      mlp.yticks(fontname="Yu Gothic")
          
#グラフの種類を「横棒グラフ」に設定
	      val.plot(kind='barh')

	      dlg.Destroy()          

#プロットしたグラフを表示  
	      mlp.show()
          

#送信完了数
	    elif self.m_radioBtn2.GetValue() is True:
	      adid = MyProject1MyDialog3(self)
	      credentials = ServiceAccountCredentials.from_json_keyfile_name(adid.m_textCtrl11.GetValue(), scope)
	      gc = gspread.authorize(credentials)                   
	      wb = gc.open_by_key(adid.m_comboBox6.GetValue())            
	      ws3 = wb.worksheet(self.m_comboBox11.GetValue())
	      self.row11.SetBackgroundColour('#FFFFFF')
	      self.row21.SetBackgroundColour('#FFFFFF')
	      self.m_comboBox11.SetBackgroundColour("#FFFFFF")
	      import matplotlib.pyplot as mlp

	      import pandas as pd
#	      import seaborn as sns

	      dlg = wx.ProgressDialog(
            title="データ処理中",
            message="0/100",
            maximum=100,
            style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )
         
# ダイアログ表示
	      dlg.Show()
	      rate = 0

          
	      data1 = []
	      cell_list_1 = ws3.range(row3, 9, row4, 9)
#	      print(cell_list_1)

	      i = 0
	      j = 0
	      for i in range(len(cell_list_1)):
#	        print(cell_list_1[i].value)
            
#時刻を消して日付だけにしたいとき
#https://qiita.com/daijiro_maeyama/items/8a62fbb0741e5bad8568
	        dt_str, new_time = cell_list_1[i].value.split()
            
#空リスト「data1」に上記の式で区切った文字列を追加
	        data1.append(dt_str)

	        j += 1
	        rate += 1/(row4)*100
            # 値の更新
	        dlg.Update(value=rate, newmsg="%d/100" % rate + "%")

	      print(data1)

#7列目（文字列のみ）
	      data2 = []
	      cell_list_2 = ws3.range(row3, 7, row4, 7)
#	      print(cell_list_2)

	      rate = 0
	      i = 0
	      j = 0
	      for i in range(len(cell_list_2)):
#	        print(cell_list_2[i].value)
	        data2.append(cell_list_2[i].value)
            
	        j += 1
	        rate += 1/(row4)*100
            # 値の更新
	        dlg.Update(value=rate, newmsg="%d/100" % rate + "%")

	      print(data2)
#listをDataFrameに変換する          
#https://qiita.com/fault/items/6d5d69d4a0c257ed39df
	      df1 = pd.DataFrame(list(zip(data1,data2)), columns = ['Date','Result'])
	      print(df1)

#           Date                        Result
#0   2021年12月22日                サービスに関する専用フォーム
#1   2021年12月22日   x この項目 "メールアドレス" は入力が必須です。
#2   2021年12月22日                 入力にエラーがあります。
#3   2021年12月22日                    フォーム要素取得不可
#4   2021年12月22日                    フォーム要素取得不可
#..          ...                           ...
#79  2021年12月24日                     送信完了しました。
#80  2021年12月24日  お問い合わせを送信いたしました。ありがとうございました。
#81  2021年12月24日                     送信完了しました。
#82  2021年12月24日                          送信完了
#83  2021年12月24日                          完了画面
          
#value_counts()・・・DataFrameの特定の「列」に入っている「ユニークな要素」の「出現回数」を抽出することができる関数
#棒グラフで時系列順に表示する（Index順にソートしてからプロット）
#https://teratail.com/questions/265731
	      val1 = df1["Date"].value_counts().sort_index()
	      print(val1)

#[84 rows x 2 columns]
#2021年12月21日    18
#2021年12月22日    22
#2021年12月23日    26
#2021年12月24日    18
#Name: Date, dtype: int64

	      val2 = df1["Result"].value_counts().sort_index()
	      print(val2)

#	      df_str = df[['Date','Result']]
#	      print(df_str)          

# x この項目 "メールアドレス" は入力が必須です。
#                                 1
#* 必須項目です* メールアドレスが正しくありません
#                                   1
#Email *
#             1
#TYPE2ERRORメールアドレスが正しくありません。
#                              1
#Thank you for your message. It has been sent.
#             1
#【Email】は必須入力項目です。
#                         1
#【Email】は必須項目です。
#                       1
#あなたのメッセージは送信されました。ありがとうございました。
#                                           6
#ありがとうございます。メッセージは送信されました。
#                                     15
#ありがとうございます。メッセージは送信されました。なお、自動返信メールが届かない場合は、メールア
#ドレス誤記の可能性がございますので、ご確認をお願いいたします。                              1   
#お問い合わせありがとうございました。
#                               1
#お問い合わせを送信いたしました。ありがとうございました。
#                                         2
#お問い合わせメッセージを送信しました。
#                                1
#お問い合わせ頂きまして、誠に有難うございます。内容を確認後、早急にご返信させて頂きます。 もし数 
#日中に返事が無い場合は、正しく受信できなかった可能性がありますので、恐れ入りますが再度のご連絡を
#お願い致します。     1
#サービスに関する専用フォーム
#                           4
#フォーム要素取得不可
#                       5
#メッセージは送信されました。ありがとうございました。
#                                       1
#メールアドレスが入力されていません
#                              3
#メール送信終了｜エムアンドシーシステム（株）
#                                   1
#入力にエラーがあります。
#                         1
#営業お断り！！
#                    1
#完了画面
#                 1
#必須項目に入力してください。
#                           5
#必須項目に記入もれがあります。
#                            4
#資料請求専用フォーム
#                       6
#送信できませんでした。入力に不備があります。
#                                   1
#送信完了
#                 4
#送信完了 株式会社ナガツカ
#                         1
#送信完了しました。
#                     11
#送信完了｜お問い合わせ
#                        1

#Result全体より指定キーワードにて抽出
#論理積（かつ）: &演算子
#論理和（または）: |演算子
#否定（でない）: ~演算子
#https://note.nkmk.me/python-pandas-count-condition/
	      df2 = df1[df1['Result'].str.contains("送信されました") \
                | df1['Result'].str.contains("完了") \
                    | df1['Result'].str.contains("終了") \
                        | df1['Result'].str.contains("送信いたしました") \
                            | df1['Result'].str.contains("送信しました") \
                                | df1['Result'].str.contains("ございま") \
                                    | df1['Result'].str.contains("Thank")]
	      print(df2)

#           Date                                             Result
#36  2021年12月21日                          ありがとうございます。メッセージは送信されました。  
#37  2021年12月21日                          ありがとうございます。メッセージは送信されました。  
#38  2021年12月21日                                               送信完了
#39  2021年12月21日                                          送信完了しました。
#40  2021年12月21日                       お問い合わせを送信いたしました。ありがとうございました 
#。
#42  2021年12月21日                                          送信完了しました。
#43  2021年12月21日                          ありがとうございます。メッセージは送信されました。  
#44  2021年12月21日                                          送信完了しました。
#45  2021年12月21日                                               送信完了
#46  2021年12月21日                     あなたのメッセージは送信されました。ありがとうございまし 
#た。
#47  2021年12月21日                                お問い合わせメッセージを送信しました。        
#48  2021年12月21日                                          送信完了しました。
#49  2021年12月21日                         メッセージは送信されました。ありがとうございました。 
#50  2021年12月21日                     あなたのメッセージは送信されました。ありがとうございまし 
#た。
#51  2021年12月21日                                      送信完了 株式会社ナガツカ
#52  2021年12月21日                                          送信完了しました。
#53  2021年12月21日                                        送信完了｜お問い合わせ
#54  2021年12月22日                                          送信完了しました。
#55  2021年12月22日                                          送信完了しました。
#56  2021年12月22日                          ありがとうございます。メッセージは送信されました。  
#57  2021年12月22日                             メール送信終了｜エムアンドシーシステム（株）     
#58  2021年12月22日                          ありがとうございます。メッセージは送信されました。  
#59  2021年12月22日                     あなたのメッセージは送信されました。ありがとうございまし 
#た。
#60  2021年12月22日                     あなたのメッセージは送信されました。ありがとうございまし 
#た。
#61  2021年12月23日                                          送信完了しました。
#62  2021年12月23日                          ありがとうございます。メッセージは送信されました。  
#63  2021年12月23日                                               送信完了
#64  2021年12月23日  お問い合わせ頂きまして、誠に有難うございます。内容を確認後、早急にご返信させ
#て頂きます。 も...
#65  2021年12月23日                          ありがとうございます。メッセージは送信されました。  
#66  2021年12月23日                          ありがとうございます。メッセージは送信されました。  
#67  2021年12月23日                     あなたのメッセージは送信されました。ありがとうございまし 
#た。
#68  2021年12月23日                                 お問い合わせありがとうございました。
#69  2021年12月23日                          ありがとうございます。メッセージは送信されました。  
#70  2021年12月23日                          ありがとうございます。メッセージは送信されました。  
#71  2021年12月23日                          ありがとうございます。メッセージは送信されました。  
#72  2021年12月23日                          ありがとうございます。メッセージは送信されました。  
#73  2021年12月23日  ありがとうございます。メッセージは送信されました。なお、自動返信メールが届か
#ない場合は、メー...
#74  2021年12月23日                     あなたのメッセージは送信されました。ありがとうございまし 
#た。
#75  2021年12月23日                          ありがとうございます。メッセージは送信されました。  
#76  2021年12月23日                          ありがとうございます。メッセージは送信されました。  
#77  2021年12月24日                                          送信完了しました。
#78  2021年12月24日                          ありがとうございます。メッセージは送信されました。  
#79  2021年12月24日                                          送信完了しました。
#80  2021年12月24日                       お問い合わせを送信いたしました。ありがとうございました 
#。
#81  2021年12月24日                                          送信完了しました。
#82  2021年12月24日                                               送信完了
#83  2021年12月24日                                               完了画面
          
#	      val3 = df[df['Result'].str.contains("送信されました")].value_counts().sort_index()
#	      print(df[df['Result'].str.contains("送信されました")].value_counts().sort_index())

	      val3 = df2["Date"].value_counts().sort_index()
	      print(val3)

#2021年12月21日    17
#2021年12月22日     7
#2021年12月23日    16
#2021年12月24日     7
#Name: Date, dtype: int64

#日付別件数

#listをDataFrameに変換する          
#https://qiita.com/fault/items/6d5d69d4a0c257ed39df
#	      df3 = pd.DataFrame({'Date':data1})
#	      print(df3)
          
#value_counts()・・・DataFrameの特定の「列」に入っている「ユニークな要素」の「出現回数」を抽出することができる関数
#棒グラフで時系列順に表示する（Index順にソートしてからプロット）
#https://teratail.com/questions/265731
#	      val4 = df3["Date"].value_counts().sort_index()
#	      print(val4)


#グラフウィンドウのタイトル
	      mlp.figure("Number of executions")

#X軸ラベル設定
	      mlp.xlabel("件数", fontname="Yu Gothic")
          
#X軸目盛ラベルの文字を「游ゴシック」
	      mlp.xticks(fontname="Yu Gothic")
          
#Y軸ラベル設定（非表示）
	      mlp.ylabel("", fontname="Yu Gothic")
          
#Y軸目盛ラベルの文字を「游ゴシック」
	      mlp.yticks(fontname="Yu Gothic")
          
#グラフの種類を「横棒グラフ」に設定
	      val3.plot(kind='barh', color='cornflowerblue')
          
	      dlg.Destroy()
  
#プロットしたグラフを表示  
	      mlp.show()


#エラー内訳を可視化
	    elif self.m_radioBtn3.GetValue() is True:
	      adid = MyProject1MyDialog3(self)
	      credentials = ServiceAccountCredentials.from_json_keyfile_name(adid.m_textCtrl11.GetValue(), scope)
	      gc = gspread.authorize(credentials)                   
	      wb = gc.open_by_key(adid.m_comboBox6.GetValue())            
	      ws3 = wb.worksheet(self.m_comboBox11.GetValue())
	      self.row11.SetBackgroundColour('#FFFFFF')
	      self.row21.SetBackgroundColour('#FFFFFF')
	      self.m_comboBox11.SetBackgroundColour("#FFFFFF")
	      #import wx.lib
	      #import wx.lib.plot as plot
	      import matplotlib.pyplot as mlp
	      import pandas as pd
	      from matplotlib import rcParams
	      #import seaborn as sns

#スクリプトの最初でフォント変更の宣言
#https://qiita.com/yniji/items/3fac25c2ffa316990d0c
	      rcParams['font.family'] = 'sans-serif'
	      rcParams['font.sans-serif'] = ['Yu Gothic']

	      dlg = wx.ProgressDialog(
            title="データ処理中",
            message="0/100",
            maximum=100,
            style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )

# ダイアログ表示
	      dlg.Show()
	      rate = 0

	      data = []
	      cell_list_X = ws3.range(row3, 7, row4, 7)
#	      print(cell_list_X)

	      i = 0
	      j = 0
	      for i in range(len(cell_list_X)):
#	        print(cell_list_X[i].value)
	        data.append(cell_list_X[i].value)
            
	        j += 1
	        rate += 1/(row4)*100
            # 値の更新
	        dlg.Update(value=rate, newmsg="%d/100" % rate + "%")

	      print(data)

#listをDataFrameに変換する          
#https://qiita.com/fault/items/6d5d69d4a0c257ed39df
	      df1 = pd.DataFrame({'Result':data})
	      print(df1)

#Result全体より指定キーワードにて抽出
#論理積（かつ）: &演算子
#論理和（または）: |演算子
#否定（でない）: ~演算子
#https://note.nkmk.me/python-pandas-count-condition/
	      df2 = df1[~(df1['Result'].str.contains("送信されました")) \
                & ~(df1['Result'].str.contains("完了")) \
                    & ~(df1['Result'].str.contains("終了")) \
                        & ~(df1['Result'].str.contains("送信いたしました")) \
                            & ~(df1['Result'].str.contains("送信しました")) \
                                & ~(df1['Result'].str.contains("ございま")) \
                                    & ~(df1['Result'].str.contains("Thank")) \
                                        & df1['Result'].str.contains("専用") \
                                            | df1['Result'].str.contains("必須") \
                                                    | df1['Result'].str.contains("要素") \
                                                        | df1['Result'].str.contains("メールアドレス") \
                                                            | df1['Result'].str.contains("エラー") \
                                                                | df1['Result'].str.contains("正しくありません") \
                                                                    | df1['Result'].str.contains("不備") \
                                                                        | df1['Result'].str.contains("営業") \
                                                                            | df1['Result'].str.contains("Email") \
                                                                                    | df1['Result'].str.contains("入力") \
                                                                                        | df1['Result'].str.contains("問題") \
                                                                                            | df1['Result'].str.contains("不可") \
                                                                                                | df1['Result'].str.contains("rror") \
                                                                                                    | df1['Result'].str.contains("記入") \
                                                                                                        | df1['Result'].str.contains("失敗") \
                                                                                                            | df1['Result'].str.contains("URL") \
                                                                                                                | df1['Result'].str.contains("RROR")]
	      print(df2)

          
#value_counts()・・・DataFrameの特定の「列」に入っている「ユニークな要素」の「出現回数」を抽出することができる関数
#棒グラフで時系列順に表示する（Index順にソートしてからプロット）
#https://teratail.com/questions/265731
	      val = df2["Result"].value_counts()
	      print(val)

#グラフウィンドウのタイトル
	      mlp.figure("Breakdown of errors")

#プロットの色変更
	      cmap=mlp.get_cmap("Set3") 
          
#Qualitativeの種類（参考）
#	      ['Pastel1', 'Pastel2', 'Paired', 'Accent',
#        'Dark2', 'Set1', 'Set2', 'Set3',
#        'tab10', 'tab20', 'tab20b', 'tab20c']
 
	      colors = [cmap(i) for i in range(len(val))]

#円グラフを描画するための引数設定
	      mlp.pie(val, 
               autopct='%.d%%',
               pctdistance=0.8,
               counterclock=False,
               startangle=90,
               textprops={"fontsize": 15,'weight': "bold"},
               wedgeprops={'width': 0.5, 'linewidth': 1, 'edgecolor':"white"},
               colors=colors, 
               radius=1.2)

#ラベルテキストのサイズ設定
#	      mlp.rcParams['font.size'] = 15

#凡例の表示
#微調整は「loc='lower left'」「bbox_to_anchor=(0.9,0.5)」等を引数に設定
#参考サイト（https://www.yutaka-note.com/entry/matplotlib_legend#loc%E3%81%A7%E7%B0%A1%E5%8D%98%E4%BD%8D%E7%BD%AE%E8%AA%BF%E6%95%B4）
	      mlp.legend(val.index, fancybox=True, loc='upper left', bbox_to_anchor=(0.9,0.5))

	      dlg.Destroy()
          
#プロットしたグラフを表示          
	      mlp.show()