"""Subclass of MyFrame2, which is generated by wxFormBuilder."""

from gspread_formatting.batch_update_requests import format_cell_range
import wx
import app
import json
import codecs
import wx.grid
import gspread
#from datetime import datetime


#セルに色や枠線を付けたりする標準機能
from gspread_formatting import *

import requests

#ServiceAccountCredentials：Googleの各サービスへアクセスできるservice変数を生成します。
from oauth2client.service_account import ServiceAccountCredentials

import time
import re
from bs4 import BeautifulSoup
from tqdm import tqdm

#2つのAPIを記述しないとリフレッシュトークンを3600秒毎に発行し続けなければならない
scope = ['https://spreadsheets.google.com/feeds','https://www.googleapis.com/auth/drive']


#色付けの初期化
data_fmt0 = CellFormat(backgroundColor=Color(1, 1, 1))

#色付けの準備（red）
data_fmt1 = CellFormat(backgroundColor=Color(1, 0, 0))

#色付けの準備（gray）
data_fmt2 = CellFormat(backgroundColor=Color(0.5, 0.5, 0.5))

#色付けの準備（black）
data_fmt3 = CellFormat(backgroundColor=Color(0, 0, 0))

#色付けの準備（yellow）→backgroundColor=Color(1, 1, 0)
data_fmt4 = CellFormat(backgroundColor=Color(1, 1, 0))

#色付けの準備（blue）
data_fmt5 = CellFormat(backgroundColor=Color(0.7, 0.7, 1))


#ドラッグアンドドロップの実装
class FileDropTarget1(wx.FileDropTarget):
    def __init__(self, window):
        wx.FileDropTarget.__init__(self)
        self.window = window

    def OnDropFiles(self, x, y, files):
        self.window.m_textCtrl11.SetLabel(files[0])
        return 0

class FileDropTarget2(wx.FileDropTarget):
    def __init__(self, window):
        wx.FileDropTarget.__init__(self)
        self.window = window

    def OnDropFiles(self, x, y, files):
        self.window.m_textCtrl111.SetLabel(files[0])
        return 0
    
# Implementing MyFrame2
class MyProject1MyFrame2( app.MyFrame2 ):
	def __init__( self, parent ):
		app.MyFrame2.__init__( self, parent )
 
#Setting up the menu on menubar.
		self.m_menubar1 = wx.MenuBar( 0 )
		self.m_menu1 = wx.Menu()
#		self.m_menuItem1 = wx.MenuItem( self.m_menu1, wx.ID_ANY, u"MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
#		self.m_menu1.Append( self.m_menuItem1 )

		self.m_menuItem2 = wx.MenuItem( self.m_menu1, wx.ID_ANY, u"Exit", wx.EmptyString, wx.ITEM_NORMAL )
		self.m_menu1.Append( self.m_menuItem2 )

		self.m_menubar1.Append( self.m_menu1, u"File" )

		self.m_menu2 = wx.Menu()
		self.m_menuItem3 = wx.MenuItem( self.m_menu2, wx.ID_ANY, u"Configuration", wx.EmptyString, wx.ITEM_NORMAL )
		self.m_menu2.Append( self.m_menuItem3 )

		self.m_menuItem4 = wx.MenuItem( self.m_menu2, wx.ID_ANY, u"Profile", wx.EmptyString, wx.ITEM_NORMAL )
		self.m_menu2.Append( self.m_menuItem4 )

		self.m_menuItem5 = wx.MenuItem( self.m_menu2, wx.ID_ANY, u"Send text creation", wx.EmptyString, wx.ITEM_NORMAL )
		self.m_menu2.Append( self.m_menuItem5 )

		self.m_menubar1.Append( self.m_menu2, u"Setting" )

		self.m_menu3 = wx.Menu()
		self.m_menuItem6 = wx.MenuItem( self.m_menu3, wx.ID_ANY, u"Create", wx.EmptyString, wx.ITEM_NORMAL )
		self.m_menu3.Append( self.m_menuItem6 )

		self.m_menuItem7 = wx.MenuItem( self.m_menu3, wx.ID_ANY, u"Inquiry", wx.EmptyString, wx.ITEM_NORMAL )
		self.m_menu3.Append( self.m_menuItem7 )

		self.m_menubar1.Append( self.m_menu3, u"List" )

		self.m_menu4 = wx.Menu()
		self.m_menuItem8 = wx.MenuItem( self.m_menu4, wx.ID_ANY, u"About", wx.EmptyString, wx.ITEM_NORMAL )
		self.m_menu4.Append( self.m_menuItem8 )

		self.m_menubar1.Append( self.m_menu4, u"Help" )
		self.SetMenuBar( self.m_menubar1 )

#Connect Events
		self.Bind( wx.EVT_MENU, self.quit_button, self.m_menuItem2 )
		self.Bind( wx.EVT_MENU, self.Configuration, self.m_menuItem3 )
		self.Bind( wx.EVT_MENU, self.Profile, self.m_menuItem4 )
		self.Bind( wx.EVT_MENU, self.Send_email_body, self.m_menuItem5 )
		self.Bind( wx.EVT_MENU, self.create_button, self.m_menuItem6 )
		self.Bind( wx.EVT_MENU, self.inquiry_button, self.m_menuItem7 )
		self.Bind( wx.EVT_MENU, self.Creator_info, self.m_menuItem8 )
		self.Bind(wx.EVT_CLOSE, self.quit_button) 
        
#各メニュー項目選択後の画面遷移
	def Configuration(self, event):
	    adid = MyProject1MyDialog3(self)
	    adid.ShowModal()
	    adid.Destroy()

	def Profile(self, event):
	    adid = MyProject1MyDialog4(self)
	    adid.ShowModal()
	    adid.Destroy()

	def Send_email_body(self, event):
	    adid = MyProject1MyDialog5(self)
	    adid.ShowModal()
	    adid.Destroy()

	def Creator_info(self, event):
	    adid = MyProject1MyDialog7(self)
	    adid.ShowModal()
	    adid.Destroy()


	def inquiry_button(self, event):
	   adid = MyProject1MyDialog3(self)
        
	   if adid.m_comboBox6.GetValue() == '' \
           or not 'json' in adid.m_textCtrl11.GetValue():
	      adid.m_comboBox6.SetBackgroundColour('#f56cbe')
	      adid.m_textCtrl11.SetBackgroundColour('#f56cbe')
#	      self.m_textCtrl111.SetForegroundColour('#f56cbe')
	      wx.MessageBox(u'The key is incorrect or does not exist!!', u'Setting value error', wx.ICON_ERROR)
	   elif not 'chromedriver.exe' in adid.m_textCtrl111.GetValue():
	      adid.m_textCtrl111.SetForegroundColour('#f56cbe')
	      wx.MessageBox(u'The web driver file is not set or the file path does not pass!!', u'Setting value error', wx.ICON_ERROR)
	   elif not adid.m_comboBox6.GetValue() == '' \
           and 'json' in adid.m_textCtrl11.GetValue() \
               and 'chromedriver.exe' in adid.m_textCtrl111.GetValue():
	      adid.m_comboBox6.SetBackgroundColour('#FFFFFF')
	      adid.m_textCtrl11.SetBackgroundColour('#FFFFFF')
	      adid.m_textCtrl111.SetBackgroundColour('#FFFFFF')

#例外処理開始
	      try:
              
#秘密鍵（JSONファイル）のファイル名を入力
	        credentials = ServiceAccountCredentials.from_json_keyfile_name(adid.m_textCtrl11.GetValue(), scope)

#OAuth2の資格情報を使用してGoogle APIにログインします。
	        gc = gspread.authorize(credentials)

#存在するワークシートの情報を全て取得
	        wb = gc.open_by_key(adid.m_comboBox6.GetValue())
	        worksheets = wb.worksheets()

	        sbSizer5 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel6, wx.ID_ANY, u"Processing related to inquiry form" ), wx.VERTICAL )

	        bSizer15 = wx.BoxSizer( wx.VERTICAL )

#機能追加のため此処からコーディング変更（2022.01.12）
	        gSizer43 = wx.GridSizer( 0, 2, 0, 0 )

#2021.12.06機能追加（お問い合わせフォーム投稿前に営業リストをプレビュー表示）

	        self.m_panel85 = wx.Panel( sbSizer5.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
	        sbSizer75 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel85, wx.ID_ANY, u"The created sales list" ), wx.VERTICAL )

#2022.01.08機能追加（リストプレビュー時の必要項目選択）
	        self.m_panel87 = wx.Panel( sbSizer75.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
	        gSizer41 = wx.GridSizer( 0, 2, 0, 0 )

	        self.m_checkBox1 = wx.CheckBox( self.m_panel87, wx.ID_ANY, u"Address", wx.DefaultPosition, wx.DefaultSize, 0 )
	        gSizer41.Add( self.m_checkBox1, 0, wx.ALL, 5 )

	        self.m_checkBox2 = wx.CheckBox( self.m_panel87, wx.ID_ANY, u"Tel number", wx.DefaultPosition, wx.DefaultSize, 0 )
	        gSizer41.Add( self.m_checkBox2, 0, wx.ALL, 5 )

	        self.m_checkBox3 = wx.CheckBox( self.m_panel87, wx.ID_ANY, u"Corporate site", wx.DefaultPosition, wx.DefaultSize, 0 )
	        gSizer41.Add( self.m_checkBox3, 0, wx.ALL, 5 )

	        self.m_checkBox4 = wx.CheckBox( self.m_panel87, wx.ID_ANY, u"Inquiry url", wx.DefaultPosition, wx.DefaultSize, 0 )
	        gSizer41.Add( self.m_checkBox4, 0, wx.ALL, 5 )

	        self.m_checkBox5 = wx.CheckBox( self.m_panel87, wx.ID_ANY, u"Result", wx.DefaultPosition, wx.DefaultSize, 0 )
	        gSizer41.Add( self.m_checkBox5, 0, wx.ALL, 5 )
	        self.m_checkBox5.SetValue(True)

	        self.m_checkBox6 = wx.CheckBox( self.m_panel87, wx.ID_ANY, u"Date and time", wx.DefaultPosition, wx.DefaultSize, 0 )
	        gSizer41.Add( self.m_checkBox6, 0, wx.ALL, 5 )
	        self.m_checkBox6.SetValue(True)

	        self.m_panel87.SetSizer( gSizer41 )
	        self.m_panel87.Layout()
	        gSizer41.Fit( self.m_panel87 )
	        sbSizer75.Add( self.m_panel87, 1, wx.EXPAND |wx.ALL, 5 )

	        self.m_panel86 = wx.Panel( sbSizer75.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )

#ここまで機能追加のコーディング

	        gSizer8 = wx.GridSizer( 0, 2, 0, 0 )

	        self.m_staticText612 = wx.StaticText( self.m_panel86, wx.ID_ANY, u"sheet title", wx.DefaultPosition, wx.DefaultSize, 0 )
	        self.m_staticText612.Wrap( -1 )

	        gSizer8.Add( self.m_staticText612, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )

#現在のワークシートのタイトルをリストへ格納
	        m_comboBox12Choices = [worksheet.title for worksheet in worksheets]
	        self.m_comboBox12 = wx.ComboBox( self.m_panel86, wx.ID_ANY, u"選択して下さい", wx.DefaultPosition, wx.DefaultSize, m_comboBox12Choices, wx.CB_DROPDOWN )
	        gSizer8.Add( self.m_comboBox12, 0, wx.ALL, 5 )

	        self.btn32 = wx.Button( self.m_panel86, wx.ID_ANY, u"Confirm", wx.DefaultPosition, wx.DefaultSize, 0 )
	        self.btn32.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

	        gSizer8.Add( self.btn32, 0, wx.ALL, 5 )

	        self.m_panel86.SetSizer( gSizer8 )
	        self.m_panel86.Layout()
	        gSizer8.Fit( self.m_panel86 )
	        sbSizer75.Add( self.m_panel86, 1, wx.EXPAND |wx.ALL, 5 )

	        self.m_panel85.SetSizer( sbSizer75 )
	        self.m_panel85.Layout()
	        sbSizer75.Fit( self.m_panel85 )
	        gSizer43.Add( self.m_panel85, 1, wx.EXPAND |wx.ALL, 5 )


	        self.m_panel27 = wx.Panel( sbSizer5.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
	        self.m_panel27.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

	        sbSizer20 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel27, wx.ID_ANY, u"Extraction of inquiry page" ), wx.VERTICAL )

	        self.m_panel5 = wx.Panel( sbSizer20.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
	        bSizer16 = wx.BoxSizer( wx.VERTICAL )

	        gSizer5 = wx.GridSizer( 0, 2, 0, 0 )
        
#	      self.m_panel17 = wx.Panel( self.m_panel5, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
#	      self.m_panel17.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

#	      sbSizer15 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel17, wx.ID_ANY, u"Worksheet title" ), wx.VERTICAL )

	        self.m_staticText5 = wx.StaticText( self.m_panel5, wx.ID_ANY, u"start", wx.DefaultPosition, wx.DefaultSize, 0 )
	        self.m_staticText5.Wrap( -1 )

	        self.m_staticText5.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

	        gSizer5.Add( self.m_staticText5, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )

	        self.row1 = wx.SpinCtrl( self.m_panel5, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 100,-1 ), wx.SP_ARROW_KEYS, 0, 10000, 0 )
	        gSizer5.Add( self.row1, 0, wx.ALL, 5 )
#	      self.row1.Disable()

	        self.m_staticText6 = wx.StaticText( self.m_panel5, wx.ID_ANY, u"last", wx.DefaultPosition, wx.DefaultSize, 0 )
	        self.m_staticText6.Wrap( -1 )

	        gSizer5.Add( self.m_staticText6, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )

	        self.row2 = wx.SpinCtrl( self.m_panel5, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 100,-1 ), wx.SP_ARROW_KEYS, 0, 10000, 0 )
	        gSizer5.Add( self.row2, 0, wx.ALL, 5 )
#	      self.row2.Disable()

	        self.m_staticText61 = wx.StaticText( self.m_panel5, wx.ID_ANY, u"sheet title", wx.DefaultPosition, wx.DefaultSize, 0 )
	        self.m_staticText61.Wrap( -1 )

	        gSizer5.Add( self.m_staticText61, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )
                          
#現在のワークシートのタイトルをリストへ格納
	        m_comboBox1Choices = [worksheet.title for worksheet in worksheets]
#	      print(m_comboBox1Choices)
	        self.m_comboBox1 = wx.ComboBox( self.m_panel5, wx.ID_ANY, u"選択して下さい", wx.DefaultPosition, wx.DefaultSize, m_comboBox1Choices, wx.CB_DROPDOWN )
        
	        gSizer5.Add( self.m_comboBox1, 0, wx.ALL, 5 )

#（お問い合わせページの抽出：機能未完成によりドロップボックスを無効）        
#	      self.m_comboBox1.Enable(False)
	        self.m_comboBox1.Enable(True)

	        self.btn3 = wx.Button( self.m_panel5, wx.ID_ANY, u"Check", wx.DefaultPosition, wx.DefaultSize, 0 )
	        self.btn3.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )
#	      self.btn3.Disable()
          
	        gSizer5.Add( self.btn3, 0, wx.ALL, 5 )

	        gSizer62 = wx.GridSizer( 0, 2, 0, 0 )


	        gSizer5.Add( gSizer62, 1, wx.EXPAND, 5 )


	        bSizer16.Add( gSizer5, 1, wx.EXPAND, 5 )


	        self.m_panel5.SetSizer( bSizer16 )
	        self.m_panel5.Layout()
	        bSizer16.Fit( self.m_panel5 )
	        sbSizer20.Add( self.m_panel5, 1, wx.EXPAND |wx.ALL, 5 )


	        self.m_panel27.SetSizer( sbSizer20 )
	        self.m_panel27.Layout()
	        sbSizer20.Fit( self.m_panel27 )
#	        gSizer8.Add( self.m_panel27, 1, wx.EXPAND |wx.ALL, 5 )
	        gSizer43.Add( self.m_panel27, 1, wx.EXPAND |wx.ALL, 5 )


	        bSizer15.Add( gSizer43, 1, wx.EXPAND, 5 )

	        self.m_panel28 = wx.Panel( sbSizer5.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
	        self.m_panel28.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

	        sbSizer21 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel28, wx.ID_ANY, u"Automatic form posting" ), wx.VERTICAL )

	        self.m_panel51 = wx.Panel( sbSizer21.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
	        bSizer17 = wx.BoxSizer( wx.VERTICAL )

	        gSizer6 = wx.GridSizer( 0, 2, 0, 0 )


#以下、機能追加のためコーディング変更（2022.01.10）
	        self.m_panel88 = wx.Panel( self.m_panel51, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
	        sbSizer78 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel88, wx.ID_ANY, u"Setting" ), wx.VERTICAL )

	        gSizer61 = wx.GridSizer( 0, 2, 0, 0 )

	        self.m_staticText51 = wx.StaticText( sbSizer78.GetStaticBox(), wx.ID_ANY, u"start", wx.DefaultPosition, wx.DefaultSize, 0 )
	        self.m_staticText51.Wrap( -1 )

	        self.m_staticText51.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

	        gSizer61.Add( self.m_staticText51, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )

	        self.row11 = wx.SpinCtrl( sbSizer78.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 100,-1 ), wx.SP_ARROW_KEYS, 0, 10000, 0 )
	        gSizer61.Add( self.row11, 0, wx.ALL, 5 )
#	      self.row11.Disable()
          
	        self.m_staticText62 = wx.StaticText( sbSizer78.GetStaticBox(), wx.ID_ANY, u"last", wx.DefaultPosition, wx.DefaultSize, 0 )
	        self.m_staticText62.Wrap( -1 )

	        gSizer61.Add( self.m_staticText62, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )

	        self.row21 = wx.SpinCtrl( sbSizer78.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 100,-1 ), wx.SP_ARROW_KEYS, 0, 10000, 0 )
	        gSizer61.Add( self.row21, 0, wx.ALL, 5 )
#	      self.row21.Disable()
          
	        self.m_staticText611 = wx.StaticText( sbSizer78.GetStaticBox(), wx.ID_ANY, u"sheet title", wx.DefaultPosition, wx.DefaultSize, 0 )
	        self.m_staticText611.Wrap( -1 )

	        gSizer61.Add( self.m_staticText611, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )

	        m_comboBox11Choices = [worksheet.title for worksheet in worksheets]
	        self.m_comboBox11 = wx.ComboBox( sbSizer78.GetStaticBox(), wx.ID_ANY, u"選択して下さい", wx.DefaultPosition, wx.DefaultSize, m_comboBox11Choices, wx.CB_DROPDOWN )
#	      print(m_comboBox1Choices)

	        gSizer61.Add( self.m_comboBox11, 0, wx.ALL, 5 )

#（お問い合わせページの自動入力：機能未完成によりドロップボックスを無効）        
#	      self.m_comboBox11.Enable(False)
	        self.m_comboBox11.Enable(True)

	        self.btn4 = wx.Button( sbSizer78.GetStaticBox(), wx.ID_ANY, u"Posting", wx.DefaultPosition, wx.DefaultSize, 0 )
	        self.btn4.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )
#	      self.btn31.Disable()
          
	        gSizer61.Add( self.btn4, 0, wx.ALL, 5 )


	        sbSizer78.Add( gSizer61, 1, wx.EXPAND, 5 )


	        self.m_panel88.SetSizer( sbSizer78 )
	        self.m_panel88.Layout()
	        sbSizer78.Fit( self.m_panel88 )
	        gSizer6.Add( self.m_panel88, 1, wx.EXPAND |wx.ALL, 5 )

	        self.m_panel89 = wx.Panel( self.m_panel51, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
	        sbSizer76 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel89, wx.ID_ANY, u"Graph drawing" ), wx.VERTICAL )

	        self.m_panel90 = wx.Panel( sbSizer76.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
	        bSizer20 = wx.BoxSizer( wx.VERTICAL )

	        self.m_radioBtn1 = wx.RadioButton( self.m_panel90, wx.ID_ANY, u"Number of executions", wx.DefaultPosition, wx.DefaultSize, 0 )
	        bSizer20.Add( self.m_radioBtn1, 0, wx.ALL, 5 )

	        self.m_radioBtn2 = wx.RadioButton( self.m_panel90, wx.ID_ANY, u"Number of send completely", wx.DefaultPosition, wx.DefaultSize, 0 )
	        bSizer20.Add( self.m_radioBtn2, 0, wx.ALL, 5 )
#	        self.m_radioBtn2.Disable()

	        self.m_radioBtn3 = wx.RadioButton( self.m_panel90, wx.ID_ANY, u"Breakdown of errors", wx.DefaultPosition, wx.DefaultSize, 0 )
	        bSizer20.Add( self.m_radioBtn3, 0, wx.ALL, 5 )
#	        self.m_radioBtn3.Disable()
            
	        self.btn5 = wx.Button( self.m_panel90, wx.ID_ANY, u"Report", wx.DefaultPosition, wx.DefaultSize, 0 )
	        self.btn5.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

	        bSizer20.Add( self.btn5, 0, wx.ALL, 5 )

	        gSizer42 = wx.GridSizer( 0, 2, 0, 0 )


	        bSizer20.Add( gSizer42, 1, wx.EXPAND, 5 )


	        self.m_panel90.SetSizer( bSizer20 )
	        self.m_panel90.Layout()
	        bSizer20.Fit( self.m_panel90 )
	        sbSizer76.Add( self.m_panel90, 1, wx.EXPAND |wx.ALL, 5 )


	        self.m_panel89.SetSizer( sbSizer76 )
	        self.m_panel89.Layout()
	        sbSizer76.Fit( self.m_panel89 )
	        gSizer6.Add( self.m_panel89, 1, wx.EXPAND |wx.ALL, 5 )


#以上、ここまでが機能追加のためのコーディング変更分

	        bSizer17.Add( gSizer6, 1, wx.EXPAND, 5 )


	        self.m_panel51.SetSizer( bSizer17 )
	        self.m_panel51.Layout()
	        bSizer17.Fit( self.m_panel51 )
	        sbSizer21.Add( self.m_panel51, 1, wx.EXPAND |wx.ALL, 5 )


	        self.m_panel28.SetSizer( sbSizer21 )
	        self.m_panel28.Layout()
	        sbSizer21.Fit( self.m_panel28 )
	        bSizer15.Add( self.m_panel28, 1, wx.EXPAND |wx.ALL, 5 )


#	        bSizer15.Add( gSizer8, 1, wx.EXPAND, 5 )
#	        bSizer15.Add( gSizer43, 1, wx.EXPAND |wx.ALL, 5 )


	        sbSizer5.Add( bSizer15, 1, wx.EXPAND, 5 )


	        self.m_panel6.SetSizer( sbSizer5 )
	        self.m_panel6.Layout()
	        sbSizer5.Fit( self.m_panel6 )


# Connect Events
	        self.btn3.Bind( wx.EVT_BUTTON, self.inquiry_url )
	        self.btn4.Bind( wx.EVT_BUTTON, self.inquiry_post )
	        self.btn5.Bind( wx.EVT_BUTTON, self.graph_start )
	        self.btn32.Bind( wx.EVT_BUTTON, self.list_view )

#2021.12.06機能追加（'setting.json'へ設定値の書き込み）
#	        self.Bind( wx.EVT_BUTTON, self.quit_button )


#設定情報（json）読み込み
#文字コードをUTF-8に変換しないとエラーが発生するため注意！！
#	        with codecs.open('setting.json','r',encoding='utf-8') as f:
#「JSONDecodeError: Invalid control character at」が返さないようにする。
#strictがfalse（デフォルトはTrue）の場合、制御文字を文字列に含めることができます。
#ここで言う制御文字とは、'\t'（タブ）、'\n'、'\r'、'\0'を含む0-31の範囲のコードを持つ文字のことです。
#	          j = json.load(f,strict=False)
#            print(j)
#	          f.close()
#	          self.m_comboBox12.SetValue(j['sheetname1'])
#	          self.m_comboBox1.SetValue(j['sheetname2'])
#	          self.m_comboBox11.SetValue(j['sheetname3'])
#	          self.row1.SetValue(j['row1'])
#	          self.row2.SetValue(j['row2'])
#	          self.row11.SetValue(j['row11'])
#	          self.row21.SetValue(j['row21'])

#エラーメッセージ表示
	      except requests.exceptions.ConnectionError as e:
	        print("error:", e)
	        wx.MessageBox(f'{e}', u'Server error', wx.ICON_ERROR)

#エラーメッセージ表示
	      except gspread.exceptions.APIError as e:
	        print("error:", e)
	        wx.MessageBox(f'{e}', u'Setting value error', wx.ICON_ERROR)

#設定情報（json）書き出し
#	def quit_button(self, event):
#	        adid = MyProject1MyDialog3(self)

#文字コードをUTF-8に変換しないとエラー発生がするため注意！！
#	        with open('setting.json','w',encoding='utf-8') as f:
#	            w_data = {}
#	            w_data['verificationkey'] = adid.m_textCtrl11.GetValue()
#	            w_data['spreadsheetkey'] = adid.m_comboBox6.GetValue()
#	            w_data['webdriver'] = adid.m_textCtrl111.GetValue()
#	            w_data['user'] = adid.m_textCtrl4.GetValue()
#	            w_data['password'] = adid.m_textCtrl5.GetValue()
#	            w_data['remember'] = adid.m_checkBox1.GetValue()
#	            w_data['sheetname1'] = self.m_comboBox12.GetValue()
#	            w_data['sheetname2'] = self.m_comboBox1.GetValue()
#	            w_data['sheetname3'] = self.m_comboBox11.GetValue()
#	            w_data['row1'] = self.row1.GetValue()
#	            w_data['row2'] = self.row2.GetValue()
#	            w_data['row11'] = self.row11.GetValue()
#	            w_data['row21'] = self.row21.GetValue()                
                
#	            json.dump(w_data, f, ensure_ascii=False, indent=1, sort_keys=True, separators=(',', ': '))
#	            print('WRITE:')
#               print(w_data)
#	            self.Destroy()
                

	def list_view( self, event ):
	        adid = MyProject1MyDialog3(self)
	        credentials = ServiceAccountCredentials.from_json_keyfile_name(adid.m_textCtrl11.GetValue(), scope)
	        gc = gspread.authorize(credentials)                   

	        if self.m_comboBox12.GetValue() == '選択して下さい':
	         self.m_comboBox12.SetBackgroundColour("#ff0000")
	         wx.MessageBox(u'Please select the Worksheet title!!', u'Setting value error', wx.ICON_ERROR)
#	        elif self.m_comboBox12.GetValue() == '完成例':
#	         self.m_comboBox12.SetBackgroundColour("#FFFFFF")
#	         wx.MessageBox(u'The selected sheet name is not valid.!!', u'Setting value error', wx.ICON_ERROR)
		# Set cell values.
	        else:
	         wb = gc.open_by_key(adid.m_comboBox6.GetValue())
	         ws3 = wb.worksheet(self.m_comboBox12.GetValue())
	         lastrow = len(ws3.col_values(1))         
	         self.m_comboBox12.SetBackgroundColour("#FFFFFF")
             
#住所＋電話番号不要
	         if self.m_checkBox1.GetValue() is False \
                and self.m_checkBox2.GetValue() is False \
                    and self.m_checkBox3.GetValue() is True \
                       and self.m_checkBox4.GetValue() is True \
                           and self.m_checkBox5.GetValue() is True \
                              and self.m_checkBox6.GetValue() is True:

#MyDialogの各設定値をMyFrame5に受け渡し
	           adid = MyProject1MyFrame5(self)
	           adid.grid.ClearGrid()
       		   adid.grid.CreateGrid(10000, 6)
       		   adid.grid.SetColLabelValue(0, "法人名称")
       		   adid.grid.SetColLabelValue(1, "ホームページ")
       		   adid.grid.SetColLabelValue(2, "お問い合わせページ")
       		   adid.grid.SetColLabelValue(3, "結果・エラー情報等（１）")
       		   adid.grid.SetColLabelValue(4, "結果・エラー情報等（２）")
       		   adid.grid.SetColLabelValue(5, "投稿日時")

	           dlg = wx.ProgressDialog(
	             title="リスト取得中",
	             message="0/100",
	             maximum=100,
	             style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )
	         
# ダイアログ表示
	           dlg.Show()
	           rate = 0

	           cell_list2 = ws3.range(1, 2, lastrow, 2)
	           cell_list5 = ws3.range(1, 5, lastrow, 5)
	           cell_list6 = ws3.range(1, 6, lastrow, 6)
	           cell_list7 = ws3.range(1, 7, lastrow, 7)
	           cell_list8 = ws3.range(1, 8, lastrow, 8)
	           cell_list9 = ws3.range(1, 9, lastrow, 9)               
             
	           i = 0
	           for row in range(lastrow):
	             adid.grid.SetCellValue(row, 0, cell_list2[i].value)
	             adid.grid.SetCellValue(row, 1, cell_list5[i].value)
	             adid.grid.SetCellValue(row, 2, cell_list6[i].value)
	             adid.grid.SetCellValue(row, 3, cell_list7[i].value)
	             adid.grid.SetCellValue(row, 4, cell_list8[i].value)
	             adid.grid.SetCellValue(row, 5, cell_list9[i].value)                 
                
	             i += 1
	             rate += 1/(lastrow+1)*100
                 
	             # 値の更新
	             dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
	           
	           dlg.Destroy()
	            
	           adid.grid.AutoSize()
	           adid.Show()

#住所＋電話番号＋ホームページＵＲＬ＋お問い合わせページＵＲＬ不要
	         elif self.m_checkBox1.GetValue() is False \
                 and self.m_checkBox2.GetValue() is False \
                     and self.m_checkBox3.GetValue() is False \
                         and self.m_checkBox4.GetValue() is False \
                             and self.m_checkBox5.GetValue() is True \
                                and self.m_checkBox6.GetValue() is True:

#MyDialogの各設定値をMyFrame5に受け渡し
	           adid = MyProject1MyFrame5(self)
	           adid.grid.ClearGrid()
       		   adid.grid.CreateGrid(10000, 4)
       		   adid.grid.SetColLabelValue(0, "法人名称")
       		   adid.grid.SetColLabelValue(1, "結果・エラー情報等（１）")
       		   adid.grid.SetColLabelValue(2, "結果・エラー情報等（２）")
       		   adid.grid.SetColLabelValue(3, "投稿日時")

	           dlg = wx.ProgressDialog(
	             title="リスト取得中",
	             message="0/100",
	             maximum=100,
	             style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )
	         
# ダイアログ表示
	           dlg.Show()
	           rate = 0

	           cell_list2 = ws3.range(1, 2, lastrow, 2)
	           cell_list7 = ws3.range(1, 7, lastrow, 7)
	           cell_list8 = ws3.range(1, 8, lastrow, 8)
	           cell_list9 = ws3.range(1, 9, lastrow, 9)
               
	           i = 0
	           for row in range(lastrow):
	             adid.grid.SetCellValue(row, 0, cell_list2[i].value)
	             adid.grid.SetCellValue(row, 1, cell_list7[i].value)
	             adid.grid.SetCellValue(row, 2, cell_list8[i].value)
	             adid.grid.SetCellValue(row, 3, cell_list9[i].value)
                 
	             i += 1
	             rate += 1/(lastrow+1)*100
                 
	             # 値の更新
	             dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
	           
	           dlg.Destroy()
	            
	           adid.grid.AutoSize()
	           adid.Show()


#電話番号＋ホームページＵＲＬ＋お問い合わせページＵＲＬ不要
	         elif self.m_checkBox1.GetValue() is True \
                 and self.m_checkBox2.GetValue() is False \
                     and self.m_checkBox3.GetValue() is False \
                         and self.m_checkBox4.GetValue() is False \
                             and self.m_checkBox5.GetValue() is True \
                                and self.m_checkBox6.GetValue() is True:

#MyDialogの各設定値をMyFrame5に受け渡し
	           adid = MyProject1MyFrame5(self)
	           adid.grid.ClearGrid()
       		   adid.grid.CreateGrid(10000, 5)
       		   adid.grid.SetColLabelValue(0, "法人名称")
       		   adid.grid.SetColLabelValue(1, "住所")                  
       		   adid.grid.SetColLabelValue(2, "結果・エラー情報等（１）")
       		   adid.grid.SetColLabelValue(3, "結果・エラー情報等（２）")
       		   adid.grid.SetColLabelValue(4, "投稿日時")

	           dlg = wx.ProgressDialog(
	             title="リスト取得中",
	             message="0/100",
	             maximum=100,
	             style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )
	         
# ダイアログ表示
	           dlg.Show()
	           rate = 0

	           cell_list2 = ws3.range(1, 2, lastrow, 2)
	           cell_list3 = ws3.range(1, 3, lastrow, 3)
	           cell_list7 = ws3.range(1, 7, lastrow, 7)
	           cell_list8 = ws3.range(1, 8, lastrow, 8)
	           cell_list9 = ws3.range(1, 9, lastrow, 9)
               
	           i = 0
	           for row in range(lastrow):
	             adid.grid.SetCellValue(row, 0, cell_list2[i].value)
	             adid.grid.SetCellValue(row, 1, cell_list3[i].value)                 
	             adid.grid.SetCellValue(row, 2, cell_list7[i].value)
	             adid.grid.SetCellValue(row, 3, cell_list8[i].value)
	             adid.grid.SetCellValue(row, 4, cell_list9[i].value)
                 
	             i += 1
	             rate += 1/(lastrow+1)*100
                 
	             # 値の更新
	             dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
	           
	           dlg.Destroy()
	            
	           adid.grid.AutoSize()
	           adid.Show()

#電話番号＋ホームページＵＲＬ不要
	         elif self.m_checkBox1.GetValue() is True \
                 and self.m_checkBox2.GetValue() is False \
                     and self.m_checkBox3.GetValue() is False \
                         and self.m_checkBox4.GetValue() is True \
                             and self.m_checkBox5.GetValue() is True \
                                and self.m_checkBox6.GetValue() is True:

#MyDialogの各設定値をMyFrame5に受け渡し
	           adid = MyProject1MyFrame5(self)
	           adid.grid.ClearGrid()
       		   adid.grid.CreateGrid(10000, 6)
       		   adid.grid.SetColLabelValue(0, "法人名称")
       		   adid.grid.SetColLabelValue(1, "住所")
       		   adid.grid.SetColLabelValue(2, "お問い合わせページ")
       		   adid.grid.SetColLabelValue(3, "結果・エラー情報等（１）")
       		   adid.grid.SetColLabelValue(4, "結果・エラー情報等（２）")
       		   adid.grid.SetColLabelValue(5, "投稿日時")

	           dlg = wx.ProgressDialog(
	             title="リスト取得中",
	             message="0/100",
	             maximum=100,
	             style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )
	         
# ダイアログ表示
	           dlg.Show()
	           rate = 0

	           cell_list2 = ws3.range(1, 2, lastrow, 2)
	           cell_list3 = ws3.range(1, 3, lastrow, 3)
	           cell_list6 = ws3.range(1, 6, lastrow, 6)
	           cell_list7 = ws3.range(1, 7, lastrow, 7)
	           cell_list8 = ws3.range(1, 8, lastrow, 8)
	           cell_list9 = ws3.range(1, 9, lastrow, 9)
               
	           i = 0
	           for row in range(lastrow):
	             adid.grid.SetCellValue(row, 0, cell_list2[i].value)
	             adid.grid.SetCellValue(row, 1, cell_list3[i].value)
	             adid.grid.SetCellValue(row, 2, cell_list6[i].value)
	             adid.grid.SetCellValue(row, 3, cell_list7[i].value)
	             adid.grid.SetCellValue(row, 4, cell_list8[i].value)
	             adid.grid.SetCellValue(row, 5, cell_list9[i].value)
                 
	             i += 1
	             rate += 1/(lastrow+1)*100
                 
	             # 値の更新
	             dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
	           
	           dlg.Destroy()
	            
	           adid.grid.AutoSize()
	           adid.Show()

#住所＋ホームページＵＲＬ＋お問い合わせページＵＲＬ不要
	         elif self.m_checkBox1.GetValue() is False \
                 and self.m_checkBox2.GetValue() is True \
                     and self.m_checkBox3.GetValue() is False \
                         and self.m_checkBox4.GetValue() is False \
                             and self.m_checkBox5.GetValue() is True \
                                and self.m_checkBox6.GetValue() is True:

#MyDialogの各設定値をMyFrame5に受け渡し
	           adid = MyProject1MyFrame5(self)
	           adid.grid.ClearGrid()
       		   adid.grid.CreateGrid(10000, 5)
       		   adid.grid.SetColLabelValue(0, "法人名称")
       		   adid.grid.SetColLabelValue(1, "電話番号")                  
       		   adid.grid.SetColLabelValue(2, "結果・エラー情報等（１）")
       		   adid.grid.SetColLabelValue(3, "結果・エラー情報等（２）")
       		   adid.grid.SetColLabelValue(4, "投稿日時")

	           dlg = wx.ProgressDialog(
	             title="リスト取得中",
	             message="0/100",
	             maximum=100,
	             style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )
	         
# ダイアログ表示
	           dlg.Show()
	           rate = 0

	           cell_list2 = ws3.range(1, 2, lastrow, 2)
	           cell_list4 = ws3.range(1, 4, lastrow, 4)
	           cell_list7 = ws3.range(1, 7, lastrow, 7)
	           cell_list8 = ws3.range(1, 8, lastrow, 8)
	           cell_list9 = ws3.range(1, 9, lastrow, 9)
               
	           i = 0
	           for row in range(lastrow):
	             adid.grid.SetCellValue(row, 0, cell_list2[i].value)
	             adid.grid.SetCellValue(row, 1, cell_list4[i].value)
	             adid.grid.SetCellValue(row, 2, cell_list7[i].value)
	             adid.grid.SetCellValue(row, 3, cell_list8[i].value)
	             adid.grid.SetCellValue(row, 4, cell_list9[i].value)
                 
	             i += 1
	             rate += 1/(lastrow+1)*100
                 
	             # 値の更新
	             dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
	           
	           dlg.Destroy()
	            
	           adid.grid.AutoSize()
	           adid.Show()


#住所＋電話番号＋お問い合わせページＵＲＬ不要
	         elif self.m_checkBox1.GetValue() is False \
                 and self.m_checkBox2.GetValue() is False \
                     and self.m_checkBox3.GetValue() is True \
                         and self.m_checkBox4.GetValue() is False \
                             and self.m_checkBox5.GetValue() is True \
                                and self.m_checkBox6.GetValue() is True:

#MyDialogの各設定値をMyFrame5に受け渡し
	           adid = MyProject1MyFrame5(self)
	           adid.grid.ClearGrid()
       		   adid.grid.CreateGrid(10000, 5)
       		   adid.grid.SetColLabelValue(0, "法人名称")
       		   adid.grid.SetColLabelValue(1, "ホームページ")                  
       		   adid.grid.SetColLabelValue(2, "結果・エラー情報等（１）")
       		   adid.grid.SetColLabelValue(3, "結果・エラー情報等（２）")
       		   adid.grid.SetColLabelValue(4, "投稿日時")

	           dlg = wx.ProgressDialog(
	             title="リスト取得中",
	             message="0/100",
	             maximum=100,
	             style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )
	         
# ダイアログ表示
	           dlg.Show()
	           rate = 0

	           cell_list2 = ws3.range(1, 2, lastrow, 2)
	           cell_list5 = ws3.range(1, 5, lastrow, 5)
	           cell_list7 = ws3.range(1, 7, lastrow, 7)
	           cell_list8 = ws3.range(1, 8, lastrow, 8)
	           cell_list9 = ws3.range(1, 9, lastrow, 9)
               
	           i = 0
	           for row in range(lastrow):
	             adid.grid.SetCellValue(row, 0, cell_list2[i].value)
	             adid.grid.SetCellValue(row, 1, cell_list5[i].value)                 
	             adid.grid.SetCellValue(row, 2, cell_list7[i].value)
	             adid.grid.SetCellValue(row, 3, cell_list8[i].value)
	             adid.grid.SetCellValue(row, 4, cell_list9[i].value)
                 
	             i += 1
	             rate += 1/(lastrow+1)*100
                 
	             # 値の更新
	             dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
	           
	           dlg.Destroy()
	            
	           adid.grid.AutoSize()
	           adid.Show()


#住所＋電話番号＋ホームページＵＲＬ不要
	         elif self.m_checkBox1.GetValue() is False \
                 and self.m_checkBox2.GetValue() is False \
                     and self.m_checkBox3.GetValue() is False \
                         and self.m_checkBox4.GetValue() is True \
                             and self.m_checkBox5.GetValue() is True \
                                and self.m_checkBox6.GetValue() is True:

#MyDialogの各設定値をMyFrame5に受け渡し
	           adid = MyProject1MyFrame5(self)
	           adid.grid.ClearGrid()
       		   adid.grid.CreateGrid(10000, 5)
       		   adid.grid.SetColLabelValue(0, "法人名称")
       		   adid.grid.SetColLabelValue(1, "お問い合わせページ")
       		   adid.grid.SetColLabelValue(2, "結果・エラー情報等（１）")
       		   adid.grid.SetColLabelValue(3, "結果・エラー情報等（２）")
       		   adid.grid.SetColLabelValue(4, "投稿日時")

	           dlg = wx.ProgressDialog(
	             title="リスト取得中",
	             message="0/100",
	             maximum=100,
	             style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )
	         
# ダイアログ表示
	           dlg.Show()
	           rate = 0

	           cell_list2 = ws3.range(1, 2, lastrow, 2)
	           cell_list6 = ws3.range(1, 6, lastrow, 6)
	           cell_list7 = ws3.range(1, 7, lastrow, 7)
	           cell_list8 = ws3.range(1, 8, lastrow, 8)
	           cell_list9 = ws3.range(1, 9, lastrow, 9)
               
	           i = 0
	           for row in range(lastrow):
	             adid.grid.SetCellValue(row, 0, cell_list2[i].value)
	             adid.grid.SetCellValue(row, 1, cell_list6[i].value)
	             adid.grid.SetCellValue(row, 2, cell_list7[i].value)
	             adid.grid.SetCellValue(row, 3, cell_list8[i].value)
	             adid.grid.SetCellValue(row, 4, cell_list9[i].value)
                 
	             i += 1
	             rate += 1/(lastrow+1)*100
                 
	             # 値の更新
	             dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
	           
	           dlg.Destroy()
	            
	           adid.grid.AutoSize()
	           adid.Show()


#ホームページＵＲＬ＋お問い合わせページＵＲＬ不要
	         elif self.m_checkBox1.GetValue() is True \
                 and self.m_checkBox2.GetValue() is True \
                     and self.m_checkBox3.GetValue() is False \
                         and self.m_checkBox4.GetValue() is False \
                             and self.m_checkBox5.GetValue() is True \
                                and self.m_checkBox6.GetValue() is True:

#MyDialogの各設定値をMyFrame5に受け渡し
	           adid = MyProject1MyFrame5(self)
	           adid.grid.ClearGrid()
       		   adid.grid.CreateGrid(10000, 6)
       		   adid.grid.SetColLabelValue(0, "法人名称")
       		   adid.grid.SetColLabelValue(1, "住所")
       		   adid.grid.SetColLabelValue(2, "電話番号")
       		   adid.grid.SetColLabelValue(3, "結果・エラー情報等（１）")
       		   adid.grid.SetColLabelValue(4, "結果・エラー情報等（２）")
       		   adid.grid.SetColLabelValue(5, "投稿日時")

	           dlg = wx.ProgressDialog(
	             title="リスト取得中",
	             message="0/100",
	             maximum=100,
	             style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )
	         
# ダイアログ表示
	           dlg.Show()
	           rate = 0

	           cell_list2 = ws3.range(1, 2, lastrow, 2)
	           cell_list3 = ws3.range(1, 3, lastrow, 3)
	           cell_list4 = ws3.range(1, 4, lastrow, 4)
	           cell_list7 = ws3.range(1, 7, lastrow, 7)
	           cell_list8 = ws3.range(1, 8, lastrow, 8)
	           cell_list9 = ws3.range(1, 9, lastrow, 9)
               
	           i = 0
	           for row in range(lastrow):
	             adid.grid.SetCellValue(row, 0, cell_list2[i].value)
	             adid.grid.SetCellValue(row, 1, cell_list3[i].value)
	             adid.grid.SetCellValue(row, 2, cell_list4[i].value)
	             adid.grid.SetCellValue(row, 3, cell_list7[i].value)
	             adid.grid.SetCellValue(row, 4, cell_list8[i].value)
	             adid.grid.SetCellValue(row, 5, cell_list9[i].value)
                 
	             i += 1
	             rate += 1/(lastrow+1)*100
                 
	             # 値の更新
	             dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
	           
	           dlg.Destroy()
	            
	           adid.grid.AutoSize()
	           adid.Show()


#電話番号＋お問い合わせページＵＲＬ不要
	         elif self.m_checkBox1.GetValue() is True \
                 and self.m_checkBox2.GetValue() is False \
                     and self.m_checkBox3.GetValue() is True \
                         and self.m_checkBox4.GetValue() is False \
                             and self.m_checkBox5.GetValue() is True \
                                and self.m_checkBox6.GetValue() is True:

#MyDialogの各設定値をMyFrame5に受け渡し
	           adid = MyProject1MyFrame5(self)
	           adid.grid.ClearGrid()
       		   adid.grid.CreateGrid(10000, 6)
       		   adid.grid.SetColLabelValue(0, "法人名称")
       		   adid.grid.SetColLabelValue(1, "住所")
       		   adid.grid.SetColLabelValue(2, "ホームページ")
       		   adid.grid.SetColLabelValue(3, "結果・エラー情報等（１）")
       		   adid.grid.SetColLabelValue(4, "結果・エラー情報等（２）")
       		   adid.grid.SetColLabelValue(5, "投稿日時")

	           dlg = wx.ProgressDialog(
	             title="リスト取得中",
	             message="0/100",
	             maximum=100,
	             style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )
	         
# ダイアログ表示
	           dlg.Show()
	           rate = 0

	           cell_list2 = ws3.range(1, 2, lastrow, 2)
	           cell_list3 = ws3.range(1, 3, lastrow, 3)
	           cell_list5 = ws3.range(1, 5, lastrow, 5)
	           cell_list7 = ws3.range(1, 7, lastrow, 7)
	           cell_list8 = ws3.range(1, 8, lastrow, 8)
	           cell_list9 = ws3.range(1, 9, lastrow, 9)
               
	           i = 0
	           for row in range(lastrow):
	             adid.grid.SetCellValue(row, 0, cell_list2[i].value)
	             adid.grid.SetCellValue(row, 1, cell_list3[i].value)
	             adid.grid.SetCellValue(row, 2, cell_list5[i].value)
	             adid.grid.SetCellValue(row, 3, cell_list7[i].value)
	             adid.grid.SetCellValue(row, 4, cell_list8[i].value)
	             adid.grid.SetCellValue(row, 5, cell_list9[i].value)
                 
	             i += 1
	             rate += 1/(lastrow+1)*100
                 
	             # 値の更新
	             dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
	           
	           dlg.Destroy()
	            
	           adid.grid.AutoSize()
	           adid.Show()


#住所＋会社ホームページＵＲＬ不要
	         elif self.m_checkBox1.GetValue() is False \
                 and self.m_checkBox2.GetValue() is True \
                     and self.m_checkBox3.GetValue() is False \
                         and self.m_checkBox4.GetValue() is True \
                             and self.m_checkBox5.GetValue() is True \
                                and self.m_checkBox6.GetValue() is True:

#MyDialogの各設定値をMyFrame5に受け渡し
	           adid = MyProject1MyFrame5(self)
	           adid.grid.ClearGrid()
       		   adid.grid.CreateGrid(10000, 6)
       		   adid.grid.SetColLabelValue(0, "法人名称")
       		   adid.grid.SetColLabelValue(1, "電話番号")
       		   adid.grid.SetColLabelValue(2, "お問い合わせページ")
       		   adid.grid.SetColLabelValue(3, "結果・エラー情報等（１）")
       		   adid.grid.SetColLabelValue(4, "結果・エラー情報等（２）")
       		   adid.grid.SetColLabelValue(5, "投稿日時")

	           dlg = wx.ProgressDialog(
	             title="リスト取得中",
	             message="0/100",
	             maximum=100,
	             style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )
	         
# ダイアログ表示
	           dlg.Show()
	           rate = 0

	           cell_list2 = ws3.range(1, 2, lastrow, 2)
	           cell_list4 = ws3.range(1, 4, lastrow, 4)
	           cell_list6 = ws3.range(1, 6, lastrow, 6)
	           cell_list7 = ws3.range(1, 7, lastrow, 7)
	           cell_list8 = ws3.range(1, 8, lastrow, 8)
	           cell_list9 = ws3.range(1, 9, lastrow, 9)
               
	           i = 0
	           for row in range(lastrow):
	             adid.grid.SetCellValue(row, 0, cell_list2[i].value)
	             adid.grid.SetCellValue(row, 1, cell_list4[i].value)
	             adid.grid.SetCellValue(row, 2, cell_list6[i].value)
	             adid.grid.SetCellValue(row, 3, cell_list7[i].value)
	             adid.grid.SetCellValue(row, 4, cell_list8[i].value)
	             adid.grid.SetCellValue(row, 5, cell_list9[i].value)
                 
	             i += 1
	             rate += 1/(lastrow+1)*100
                 
	             # 値の更新
	             dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
	           
	           dlg.Destroy()
	            
	           adid.grid.AutoSize()
	           adid.Show()


#「結果・エラー情報等」及び「投稿日時」のチェックは必須
	         elif self.m_checkBox5.GetValue() is False \
                 and self.m_checkBox6.GetValue() is False \
                     or self.m_checkBox5.GetValue() is False \
                        or self.m_checkBox6.GetValue() is False:
	           wx.MessageBox(u'Please check the required items!!', u'Extraction error', wx.ICON_ERROR)
                     

#チェック項目が１個も選択されていない
	         elif self.m_checkBox1.GetValue() is False \
                 and self.m_checkBox2.GetValue() is False \
                     and self.m_checkBox3.GetValue() is False \
                         and self.m_checkBox4.GetValue() is False \
                             and self.m_checkBox5.GetValue() is False \
                                 and self.m_checkBox6.GetValue() is False:

	           wx.MessageBox(u'No check items have been selected!!', u'Extraction error', wx.ICON_ERROR)

        
	# Handlers for MyFrame2 events.
	def create_button( self, event ):
	   adid = MyProject1MyDialog3(self)
	   if adid.m_comboBox6.GetValue() == '' \
               or not 'json' in adid.m_textCtrl11.GetValue() \
                   or not 'chromedriver.exe' in adid.m_textCtrl111.GetValue():
	      wx.MessageBox(u'The key is incorrect or does not exist!!', u'Setting value error', wx.ICON_ERROR)
	   elif not 'chromedriver.exe' in adid.m_textCtrl111.GetValue():
	      wx.MessageBox(u'The web driver file is not set or the file path does not pass!!', u'Setting value error', wx.ICON_ERROR)          
	   else:
           
#例外処理開始
	     try:
#MyFrame2のテキストボックス及びコンボボックスの値をMyDialogに受け渡し
	       adid = MyProject1MyDialog(self)
	       adid.ShowModal()
	       adid.Destroy()
           
#エラーメッセージ表示
	     except gspread.exceptions.APIError as e:
	       print("error:", e)
	       wx.MessageBox(f'{e}', u'Setting value error', wx.ICON_ERROR)
           
	def quit_button( self, event ):
		# TODO: Implement quit_button
		self.Destroy()
        
	def inquiry_url( self, event ):
		adid = MyProject1MyDialog3(self)
		credentials = ServiceAccountCredentials.from_json_keyfile_name(adid.m_textCtrl11.GetValue(), scope)
		gc = gspread.authorize(credentials)                   
		row1 = self.row1.GetValue()
		row2 = self.row2.GetValue()

		if self.m_comboBox1.GetValue() == '選択して下さい':
		 self.m_comboBox1.SetBackgroundColour("#f56cbe")
		 wx.MessageBox(u'Please select the Worksheet title!!', u'Setting value error', wx.ICON_ERROR)
		elif row1 == 0 and row2 == 0:
		 self.row1.SetBackgroundColour('#f56cbe')
		 self.row2.SetBackgroundColour('#f56cbe')
		 self.m_comboBox1.SetBackgroundColour("#FFFFFF")
		 wx.MessageBox(u'Please set the range!!', u'Setting value error', wx.ICON_ERROR)
		elif row2 - row1 > 10000:
		 self.row1.SetBackgroundColour('#f56cbe')
		 self.row2.SetBackgroundColour('#f56cbe')
		 self.m_comboBox1.SetBackgroundColour("#FFFFFF")
		 wx.MessageBox(u'The value exceeds the configurable range!!', u'Setting value error', wx.ICON_ERROR)
		elif row2 - row1 < 0:
		 self.row1.SetBackgroundColour('#f56cbe')
		 self.row2.SetBackgroundColour('#f56cbe')
		 self.m_comboBox1.SetBackgroundColour("#FFFFFF")
		 wx.MessageBox(u'Illegal range!!', u'Setting value error', wx.ICON_ERROR)
		elif self.m_comboBox1.GetValue() == '選択して下さい' \
            and row1 == 0 \
                and row2 == 0:
		 self.row1.SetBackgroundColour('#f56cbe')
		 self.row2.SetBackgroundColour('#f56cbe')
		 self.m_comboBox1.SetBackgroundColour("#f56cbe")
		 wx.MessageBox(u'Please select the Worksheet title and Illegal range!!', u'Setting value error', wx.ICON_ERROR)
                  
		# Set cell values.
		else:
		 from selenium import webdriver
		 from selenium.webdriver.chrome.options import Options

#例外処理用のlibraryをimport
		 from selenium.common.exceptions import NoSuchElementException
		 from selenium.common.exceptions import WebDriverException
		 from selenium.common.exceptions import TimeoutException
		 from selenium.common.exceptions import SessionNotCreatedException

#Selectモジュールをインポート
		 #from selenium.webdriver.support.select import Select

#オプションの作成
		 option = Options()

#起動オプション
# ヘッドレスモードを有効にする（次の行をコメントアウトすると画面が表示される）。
		 option.add_argument('--headless')

#「unknown error: net::ERR_CONNECTION_CLOSED」の回避用
		 option.add_argument('--disable-dev-shm-usage')

# ChromeのWebDriverオブジェクトを作成する。
		 try:
		   driver = webdriver.Chrome(adid.m_textCtrl111.GetValue(),options=option)
		   driver.set_page_load_timeout(60)
		   wb = gc.open_by_key(adid.m_comboBox6.GetValue())            
		   ws3 = wb.worksheet(self.m_comboBox1.GetValue())
		   self.row1.SetBackgroundColour('#FFFFFF')
		   self.row2.SetBackgroundColour('#FFFFFF')
		   self.m_comboBox1.SetBackgroundColour("#FFFFFF")
		   adid = MyProject1MyFrame5(self)
		   adid.grid.ClearGrid()
#		 self.m_gauge2.SetValue( 0 )
#		 self.m_gauge2.SetRange(row2-row1)

#Chromeドライバーのバージョンがブラウザのバージョンと合わない場合のエラーメッセージ
		 except SessionNotCreatedException as e:
		   print("error:", e)
		   wx.MessageBox(f'{e}', u'driver error', wx.ICON_ERROR)

		 else:
		  dlg = wx.ProgressDialog(
            title="お問い合わせページ抽出中",
            message="0/100",
            maximum=100,
            style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME | wx.PD_CAN_ABORT )         
         
# ダイアログ表示
		  dlg.Show()
		  rate = 0

#所要時間計測開始
		  start = time.time()
    
#お問い合わせページのリンク
#		 lastrow1 = len(ws3.col_values(1))

		  try:
		   for k in tqdm(range(row1, row2+1)):
		    if not ws3.cell(k, 5).value == "-" \
                or not ws3.cell(k, 5).value == "":
		     try:
		      driver.get(ws3.cell(k, 5).value)
		      time.sleep(2)

#		      if 'Error 502 (Server Error)!!1' in driver.title:
#		        ws3.update_cell(k, 6, driver.title) 		  
#		        continue
#		      elif 'Not Found' in driver.title:
#		        ws3.update_cell(k, 6, driver.title)
#		        continue
#		      elif 'エラー' in driver.title:
#		        ws3.update_cell(k, 6, driver.title)
#		        continue

		      html = driver.page_source  
#   print(res.status_code)
		      soup = BeautifulSoup(html, 'html.parser')
#		      print(soup)


#サブクラスの例外１
		     except TypeError as e:
		      print("error:", e)
		      ws3.update_cell(k, 6, f'{e}')
		      continue

#サブクラスの例外２
		     except TimeoutException:
		      print("Time out!!")   
		      ws3.update_cell(k, 6, "Time out!!")
		      continue

#スーパークラスの例外
		     except WebDriverException:
		      print("unknown error!!")   
		      ws3.update_cell(k, 6, "unknown error!!")
		      continue   

#抽出開始
		     if not "このサイトにアクセスできません" in html:
		      links_1 = []
		      for link in soup.select('a[href]'):
#		       print(soup.find_all('a'))
		       if "contact" in str(link.get("href")) \
                   and not "actover" in str(link.get("href")) \
                       and not "projection" in str(link.get("href")) \
                           and not "consultation" in str(link.get("href")) \
                               and not "regist" in str(link.get("href")) \
                                   and not "research" in str(link.get("href")) \
                                       and not "mailto" in str(link.get("href")) \
                                           and not "privacy" in str(link.get("href")) \
                                               and not "service" in str(link.get("href")) \
                                                   and not "recruit" in str(link.get("href")) \
                                                       and not "sdgs" in str(link.get("href")) \
                                                           and not "magazine" in str(link.get("href")) \
                   or "form2" in str(link.get("href")) \
                       and "inq" in str(link.get("href")) \
                   or "contact" in str(link.get("href")) \
                       and "salesmarketingservice" in str(link.get("href")) \
		     	   or r"contact/inq" in str(link.get("href")) \
		     	   or "CONTACT" in str(link.get("href")) \
                        and not "mailto" in str(link.get("href")) \
                            and not "privacy" in str(link.get("href")) \
                                and not "service" in str(link.get("href")) \
                                    and not "recruit" in str(link.get("href")) \
                                        and not "sdgs" in str(link.get("href")) \
		     	   or "Contact" in str(link.get("href")) \
                        and not "mailto" in str(link.get("href")) \
                            and not "privacy" in str(link.get("href")) \
                                and not "service" in str(link.get("href")) \
                                    and not "recruit" in str(link.get("href")) \
                                        and not "sdgs" in str(link.get("href")) \
		     	   or "INQ" in str(link.get("href")) \
                        and not "mailto" in str(link.get("href")) \
                            and not "privacy" in str(link.get("href")) \
                                and not "service" in str(link.get("href")) \
                                    and not "recruit" in str(link.get("href")) \
                                        and not "sdgs" in str(link.get("href")) \
		     	   or "Inq" in str(link.get("href")) \
                        and not "mailto" in str(link.get("href")) \
                            and not "privacy" in str(link.get("href")) \
                                and not "service" in str(link.get("href")) \
                                    and not "recruit" in str(link.get("href")) \
                                        and not "sdgs" in str(link.get("href")) \
		     	   or "inq" in str(link.get("href")) \
                        and not "mailto" in str(link.get("href")) \
                            and not "privacy" in str(link.get("href")) \
                                and not "service" in str(link.get("href")) \
                                    and not "recruit" in str(link.get("href")) \
                                        and not "sdgs" in str(link.get("href")) \
		     	   or r".info/" in str(link.get("href")) \
                        and not "privacy" in str(link.get("href")) \
                            and not "service" in str(link.get("href")) \
                                and not "recruit" in str(link.get("href")) \
                                    and not "sdgs" in str(link.get("href")) \
		     	   or r"/info" in str(link.get("href")) \
                        and not "privacy" in str(link.get("href")) \
                            and not "service" in str(link.get("href")) \
                                and not "recruit" in str(link.get("href")) \
                                    and not "sdgs" in str(link.get("href")) \
		     	   or "お問い合わせ" in str(link.get("href")) \
                        and not r"/よくある質問" in str(link.get("href")) \
		     	   or "お問合せ" in str(link.get("href")) \
                        and not r"/よくある質問" in str(link.get("href")) \
		     	   or "お問い合せ" in str(link.get("href")) \
                        and not r"/よくある質問" in str(link.get("href")) \
		     	   or "お問合わせ" in str(link.get("href")) \
                        and not r"/よくある質問" in str(link.get("href")) \
		     	   or "mail" in str(link.get("href")) \
                        and not "download" in str(link.get("href")) \
                            and not "mailto" in str(link.get("href")) \
                                and not "privacy" in str(link.get("href")) \
                                    and not "service" in str(link.get("href")) \
                                        and not "recruit" in str(link.get("href")) \
                                            and not "sdgs" in str(link.get("href")) \
                                                and not "magazine" in str(link.get("href")) \
		     	   or "mailto" in str(link.get("href")) \
                        and not "privacy" in str(link.get("href")) \
                            and not "service" in str(link.get("href")) \
                                and not "recruit" in str(link.get("href")) \
                                    and not "sdgs" in str(link.get("href")) \
		     	   or "page_id=233" in str(link.get("href")) \
		     	   or "page_id=39" in str(link.get("href")) \
		     	   or "page_id=93" in str(link.get("href")) \
		     	   or "page_id=15" in str(link.get("href")) \
		     	   or "page_id=3781" in str(link.get("href")) \
		     	   or r"form.run" in str(link.get("href")) \
		     	   or r"form.php" in str(link.get("href")) \
		     	   or r"/form$" in str(link.get("href")) \
		     	   or r"form.html" in str(link.get("href")) \
                   or "form" in str(link.get("href")) \
		     	   or r"%e3%81%8a%e5%95%8f%e3%81%84%e5%90%88%e3%82%8f%e3%81%9b" in str(link.get("href")) \
		     	   or r"ask.html" in str(link.get("href")) \
		     	   or r"/ask" in str(link.get("href")) \
		     	   or r"forms.gle" in str(link.get("href")) \
		     	   or "toiawase" in str(link.get("href")) \
		     	   or "faq" in str(link.get("href")) \
                        and not "mailto" in str(link.get("href")):
		        links_1.append(link.get("href"))   
		      print(links_1)
		      print(len(links_1))

#「http」で始まる文字列のリスト
#		        if len([i for i in links_1 if r"^http" in i]) > 0:
		      links_2 = [i for i in links_1 \
                   if "http" in i and r".info/contact" in i \
                       or "http" in i and r"/faq" in i \
                           or "http" in i and not r"/info" in i \
                               or "http" in i and not "recruit" in i \
                                   or "http" in i and r"/ask" in i \
                                       or "http" in i and r"form2/B01" in i \
                                           or "http" in i and "contact" in i \
                                               or "http" in i and "mail" in i \
                                                   or "http" in i and "inq" in i]
		      print(links_2)
		      print(len(links_2))
#それ以外（"http"は含めない）
#		        elif len([j for j in links_1 if r"^http" in j]) == 0:
		      links_3 = [j for j in links_1 \
                   if r"/contact" in j and not "http" in j and not "mailto" in j \
                       or r"/CONTACT" in j and not "http" in j and not "mailto" in j \
                           or r"/Contact" in j and not "http" in j and not "mailto" in j \
                               or r"Contact/" in j and not "http" in j and not "mailto" in j \
                                   or r"mail/" in j and not "http" in j and not "mailto" in j \
                                       or r"#contact" in j and not "http" in j and not "mailto" in j \
                                           or r"#CONTACT" in j and not "http" in j and not "mailto" in j \
                                               or r"#Contact" in j and not "http" in j and not "mailto" in j \
                                                   or not "05contact" in j and not "http" in j and not "mailto" in j \
                                                       or r"CONTACT" in j and not "http" in j and not "mailto" in j \
                                                           or r"Contact" in j and not "http" in j and not "mailto" in j \
                                                               or r"/お問い合わせ" in j and not "http" in j and not "mailto" in j \
                                                                   or r"/お問合せ" in j and not "http" in j and not "mailto" in j \
                                                                       or r"/お問い合せ" in j and not "http" in j and not "mailto" in j \
                                                                           or r"/お問合わせ" in j and not "http" in j and not "mailto" in j \
                                                                               or r"page_id" in j and not "http" in j and not "mailto" in j \
                                                                                   or r"ask" in j and not "http" in j and not "mailto" in j \
                                                                                       or r".info/contact" in j and not "http" in j and not "mailto" in j \
                                                                                           or r"%e3%81%8a%e5%95%8f%e3%81%84%e5%90%88%e3%82%8f%e3%81%9b" in j and not "http" in j and not "mailto" in j \
                                                                                               or r"contact.html" in j and not "http" in j and not "mailto" in j \
                                                                                                   or r"/contact.html" in j and not "http" in j and not "mailto" in j \
                                                                                                       or r"_contact" in j and not "http" in j and not "mailto" in j \
                                                                                                           or r"contact.php" in j and not "http" in j and not "mailto" in j \
                                                                                                               or r"/mail" in j and not "http" in j and not "mailto" in j \
                                                                                                                   or r"forms.gle" in j and not "http" in j and not "mailto" in j \
                                                                                                                       or r"form.run" in j and not "http" in j and not "mailto" in j \
                                                                                                                           or r"section_contact" in j and not "http" in j and not "mailto" in j \
                                                                                                                               or r"form.php" in j and not "http" in j and not "mailto" in j \
                                                                                                                                   or r"/form$" in j and not "http" in j and not "mailto" in j \
                                                                                                                                       or "toiawase" in j and not "mailto" in j and not "http" in j \
                                                                                                                                           or "inq" in j and not "mailto" in j and not "http" in j \
                                                                                                                                               or "INQ" in j and not "mailto" in j and not "http" in j \
                                                                                                                                                   or "Inq" in j and not "mailto" in j and not "http" in j]
		      print(links_3)
		      print(len(links_3))
              
#メールアドレス（今は使用しない）
		      links_4 = [l for l in links_1 if "mailto" in l]
		      print(links_4)
		      print(len(links_4))

#リストlinks_4及びリストlinks_3が空でない、且つリストlinks_2が空である
		      if links_2 == [] \
		       and not links_3 == [] \
               and not links_4 == []:
		      		       if len(links_3) == 1:
		      		        ws3.update_cell(k, 6, ws3.cell(k, 5).value + links_3[0])
		      		        print(ws3.cell(k, 6).value)		      		      		      		      		      		         
		      		       elif 1 <= len(links_3) <= 5:
		      		        for j in range(1,len(links_3)):
		      		         time.sleep(3) 
		      		         ws3.update_cell(k, 6, ws3.cell(k, 5).value + links_3[j])
		      		         print(ws3.cell(k, 6).value)
		      		       elif len(links_3) > 5:
		      		        for j in range(1,len(links_3)):
		      		         time.sleep(3) 
		      		         ws3.update_cell(k, 6, ws3.cell(k, 5).value + links_3[j-1])
		      		         print(ws3.cell(k, 6).value)		      		         
#		      		         break

#リストlinks_4が空、リストlinks_3、且つリストlinks_2が空でない
		      elif not links_2 == [] \
		       and not links_3 == [] \
               and links_4 == []:
		       if len(links_2) == 1 and len(links_3) == 1:
		        ws3.update_cell(k, 6, links_2[0])
		        print(ws3.cell(k, 6).value)                         

		       elif len(links_2) > 1 and len(links_3) == 1:
		        for i in range(1,len(links_3)+1):    
		         time.sleep(1)
		         if r"//" in links_3[i-1]:
		          ws3.update_cell(k, 6, r"https:" + links_3[i-1])
		          print(ws3.cell(k, 6).value)
		         else:
		          ws3.update_cell(k, 6, ws3.cell(k, 5).value + links_3[i-1])
		          print(ws3.cell(k, 6).value)
		        
		       elif len(links_2) == 1 and len(links_3) > 1:
		        ws3.update_cell(k, 6, links_2[0])
		        print(ws3.cell(k, 6).value)
              
		       elif len(links_2) == 1 and len(links_3) > 1:
		        ws3.update_cell(k, 6, links_2[0])
		        print(ws3.cell(k, 6).value)

		       elif len(links_2) > 1 and len(links_3) > 1:
		        links_2 =[i for i in links_2 if "contact" in i \
                    or "inq" in i\
		       		       and i is not None]
		        links_3 =[i for i in links_3 if "contact" in i \
                    or "inq" in i\
		       		       and i is not None]
		        if len(links_2) > 0:
		         for i in range(1,len(links_2)):    
		          time.sleep(1)
		          ws3.update_cell(k, 6, links_2[i-1])
		          print(ws3.cell(k, 6).value)
		        elif len(links_3) > 0:
		         for j in range(1,len(links_3)):    
		          time.sleep(1)		        
		          ws3.update_cell(k, 6, ws3.cell(k, 5).value + links_3[j-1])
		          print(ws3.cell(k, 6).value)

#リストlinks_4及びリストlinks_3が空、リストlinks_2が空でない		      		      		          
		      elif not links_2 == [] \
                  and links_3 == [] \
                      and links_4 == []:
		      		       if len(links_2) == 1:
		      		        ws3.update_cell(k, 6, links_2[0])
		      		        print(ws3.cell(k, 6).value)
#		      		        break
		      		       elif len(links_2) > 1:
		      		        links_2 = [i for i in links_2 if "contact" in i \
		      		      		      		         or "page_id=93" in i \
		      		      		      		      		        or "toiawase" in i \
                                                                            or "inq" in i]
		      		        for i in range(1,len(links_2)+1):
		      		         time.sleep(1)		      		        
		      		         ws3.update_cell(k, 6, links_2[i-1])		      		       
		      		         print(ws3.cell(k, 6).value)
#		      		         break
#リストlinks_4及びリストlinks_2が空、リストlinks_3が空でない		         
		      elif links_2 == [] \
                  and not links_3 == [] \
                      and links_4 == []:
		      		       if len(links_3) == 1:
		      		        ws3.update_cell(k, 6, ws3.cell(k, 5).value + links_3[0])
		      		        print(ws3.cell(k, 6).value)		      		      		      		      		      		         
		      		       elif 1 <= len(links_3) <= 5:
		      		        for j in range(1,len(links_3)):
		      		         time.sleep(3) 
		      		         ws3.update_cell(k, 6, ws3.cell(k, 5).value + links_3[j])
		      		         print(ws3.cell(k, 6).value)
		      		       elif len(links_3) > 5:
		      		        for j in range(1,len(links_3)):
		      		         time.sleep(3) 
		      		         ws3.update_cell(k, 6, ws3.cell(k, 5).value + links_3[j-1])
		      		         print(ws3.cell(k, 6).value)		      		         
#		      		         break
		          
#リストlinks_4が空でない
		      elif links_2 == [] \
                  and links_3 == [] \
                      and not links_4 == []:
		      		        ws3.update_cell(k, 6, links_4[0])
		      		        print(ws3.cell(k, 6).value)
		      		        
#リストlinks_2が空でない（コーディング不要）
#		      elif not links_2 == [] \
#                  and links_3 == [] \
#                      and links_4 == []:
#		      		        ws3.update_cell(k, 6, links_2[0])
#		      		        print(ws3.cell(k, 6).value)		      		      		      		      		      		         
		      		        
#リストlinks_3が空でない
		      elif links_2 == [] \
                  and not links_3 == [] \
                      and links_4 == []:
		      		        ws3.update_cell(k, 6, ws3.cell(k, 5).value + links_3[0])
		      		        print(ws3.cell(k, 6).value)		      		      		      		      		      		         

#パターン追加（2021.12.16）
#リストlinks_3のみ空
		      elif not links_2 == [] \
		       and links_3 == [] \
               and not links_4 == []:
		      		       if len(links_2) == 1:
		      		        ws3.update_cell(k, 6, links_2[0])
		      		        print(ws3.cell(k, 6).value)
		      		       elif 1 <= len(links_2) <= 5:
		      		        for j in range(1,len(links_2)):
		      		         time.sleep(3) 
		      		         ws3.update_cell(k, 6, links_2[j])
		      		         print(ws3.cell(k, 6).value)
		      		       elif len(links_2) > 5:
		      		        for j in range(1,len(links_2)):
		      		         time.sleep(3) 
		      		         ws3.update_cell(k, 6, links_2[j-1])
		      		         print(ws3.cell(k, 6).value)		      		         


#リストlinks_2及びリストlinks_3が空でない（コーディング不要）
#		      elif not links_2 == [] \
#                      and not links_3 == [] \
#                          and links_4 == []:
#		      		        ws3.update_cell(k, 6, links_2[0])
#		      		        print(ws3.cell(k, 6).value)

#links_4、links_3、links_2の何れにおいても空である
		      elif links_2 == [] \
                  and links_3 == [] \
                      and links_4 == []:
		      		        ws3.update_cell(k, 6, "-")

		      else:
		         ws3.update_cell(k, 6, "-")
		     else:
		      ws3.update_cell(k, 6, "このサイトにアクセスできません")
		    else:
		      ws3.update_cell(k, 6, "-")


		    update = True
		    rate += 1/((row2+1)-row1)*100
		    (update, skip) = dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
		    if not update:
		       wx.MessageBox(u'The link acquisition of the inquiry page has been canceled.', 
                      u'This process cannot be continued! !!', wx.ICON_ERROR)
		       break
                
#		    rate += 1/((row2+1)-row1)*100
            # 値の更新
#		    dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
           
		   dlg.Destroy()

#chromeドライバーの終了
		   driver.quit()

# calculate elapsed time
		   elapsed_time = int(time.time() - start)

# convert second to hour, minute and seconds
		   elapsed_hour = elapsed_time // 3600
		   elapsed_minute = (elapsed_time % 3600) // 60
		   elapsed_second = (elapsed_time % 3600 % 60)

# print as 00:00:00
		   print("所要時間：" + str(elapsed_hour).zfill(2) + "h" \
		       + str(elapsed_minute).zfill(2) + "m" + str(elapsed_second).zfill(2) + "s")

#エラーメッセージ表示（サブクラスの例外）
		  except ConnectionError as e:
		     print("error:", e)
		     wx.MessageBox(f'{e}', u'Setting value error', wx.ICON_ERROR)
		     driver.quit()
		     dlg.Destroy()

#エラーメッセージ表示（スーパークラスの例外）
		  except gspread.exceptions.APIError as e:
		     print("error:", e)
		     wx.MessageBox(f'{e}', u'Setting value error', wx.ICON_ERROR)
		     driver.quit()
		     dlg.Destroy()


#MyDialogの各設定値をMyFrame5に受け渡し
		  adid = MyProject1MyFrame5(self)
		  adid.grid.ClearGrid()
		  adid.grid.CreateGrid(10000, 2)
		  adid.grid.SetColLabelValue(0, "法人名称")
		  adid.grid.SetColLabelValue(1, "お問い合わせページ")
          
		  dlg = wx.ProgressDialog(
            title="リスト取得中",
            message="0/100",
            maximum=100,
            style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )         
         
# ダイアログ表示
		  dlg.Show()
		  rate = 0

#		  cell_list1 = ws3.range(1, 1, row2, 1)
		  cell_list2 = ws3.range(1, 2, row2, 2)
#		  cell_list3 = ws3.range(1, 3, row2, 3)
#		  cell_list4 = ws3.range(1, 4, row2, 4)
#		  cell_list5 = ws3.range(1, 5, row2, 5)
		  cell_list6 = ws3.range(1, 6, row2, 6)
         
		  i = 0
		  for row in range(row2):           
#		     adid.grid.SetCellValue(row, 0, cell_list1[i].value)
		     adid.grid.SetCellValue(row, 0, cell_list2[i].value)
#		     adid.grid.SetCellValue(row, 2, cell_list3[i].value)
#		     adid.grid.SetCellValue(row, 3, cell_list4[i].value)
#		     adid.grid.SetCellValue(row, 4, cell_list5[i].value)
		     adid.grid.SetCellValue(row, 1, cell_list6[i].value)
#		    print(cell_list1[i].value)
#		    print(cell_list2[i].value)
#		    print(cell_list3[i].value)
#		    print(cell_list4[i].value)
#		    print(cell_list5[i].value)
#		    print(cell_list6[i].value)

		     i += 1
		     rate += 1/(row2+1)*100
            # 値の更新
		     dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
           
		  dlg.Destroy()
		  adid.grid.AutoSize()
		  adid.Show()


	def inquiry_post( self, event ):
		adid = MyProject1MyDialog3(self)
		credentials = ServiceAccountCredentials.from_json_keyfile_name(adid.m_textCtrl11.GetValue(), scope)
		gc = gspread.authorize(credentials)                   
		row3 = self.row11.GetValue()
		row4 = self.row21.GetValue()

		if self.m_comboBox11.GetValue() == '選択して下さい':
		 self.m_comboBox11.SetBackgroundColour("#f56cbe")
		 wx.MessageBox(u'Please select the Worksheet title!!', u'Setting value error', wx.ICON_ERROR)
		elif row3 == 0 and row4 == 0:
		 self.row11.SetBackgroundColour('#f56cbe')
		 self.row21.SetBackgroundColour('#f56cbe')
		 self.m_comboBox11.SetBackgroundColour("#FFFFFF")
		 wx.MessageBox(u'Please set the range!!', u'Setting value error', wx.ICON_ERROR)
		elif row4 - row3 > 10000:
		 self.row11.SetBackgroundColour('#f56cbe')
		 self.row21.SetBackgroundColour('#f56cbe')
		 self.m_comboBox11.SetBackgroundColour("#FFFFFF")
		 wx.MessageBox(u'The value exceeds the configurable range!!', u'Setting value error', wx.ICON_ERROR)
		elif row4 - row3 < 0:
		 self.row11.SetBackgroundColour('#f56cbe')
		 self.row21.SetBackgroundColour('#f56cbe')
		 self.m_comboBox11.SetBackgroundColour("#FFFFFF")
		 wx.MessageBox(u'Illegal range!!', u'Setting value error', wx.ICON_ERROR)
		elif self.m_comboBox11.GetValue() == '選択して下さい' \
            and row3 == 0 \
                and row4 == 0:
		 self.row11.SetBackgroundColour('#f56cbe')
		 self.row21.SetBackgroundColour('#f56cbe')
		 self.m_comboBox11.SetBackgroundColour("#f56cbe")
		 wx.MessageBox(u'Please select the Worksheet title and Illegal range!!', u'Setting value error', wx.ICON_ERROR)         
         
		# Set cell values.
		else:
		 import datetime
		 from selenium import webdriver
		 from selenium.webdriver.chrome.options import Options
         
#Selectモジュールをインポート
		 from selenium.webdriver.support.select import Select         

#例外処理用のlibraryをimport
		 from selenium.common.exceptions import NoSuchElementException
		 from selenium.common.exceptions import NoAlertPresentException         
		 from selenium.common.exceptions import WebDriverException
		 from selenium.common.exceptions import TimeoutException
		 from selenium.common.exceptions import ElementNotInteractableException
		 from selenium.common.exceptions import SessionNotCreatedException
		 from selenium.common.exceptions import InvalidArgumentException
		 from selenium.common.exceptions import UnexpectedAlertPresentException

#Selectモジュールをインポート
#		 from selenium.webdriver.support.select import Select

#オプションの作成
		 option = Options()

#起動オプション
# ヘッドレスモードを有効にする（次の行をコメントアウトすると画面が表示される）。
		 option.add_argument('--headless')

#「unknown error: net::ERR_CONNECTION_CLOSED」の回避用
		 option.add_argument('--disable-dev-shm-usage')

# ChromeのWebDriverオブジェクトを作成する。
		 try:
		   driver = webdriver.Chrome(adid.m_textCtrl111.GetValue(),options=option)
		   driver.set_page_load_timeout(60)
           
#エラー「ElementNotInteractableException: element not interactable」が出ないようにするため追加
		   driver.set_window_size('1200', '1000')
                      
		   wb = gc.open_by_key(adid.m_comboBox6.GetValue())            
		   ws3 = wb.worksheet(self.m_comboBox11.GetValue())
		   self.row11.SetBackgroundColour('#FFFFFF')
		   self.row21.SetBackgroundColour('#FFFFFF')
		   self.m_comboBox11.SetBackgroundColour("#FFFFFF")
		   adid = MyProject1MyFrame5(self)
		   adid.grid.ClearGrid()
#		 self.m_gauge2.SetValue( 0 )
#		 self.m_gauge2.SetRange(row2-row1)

#Chromeドライバーのバージョンがブラウザのバージョンと合わない場合のエラーメッセージ
		 except SessionNotCreatedException as e:
		   print("error:", e)
		   wx.MessageBox(f'{e}', u'driver error', wx.ICON_ERROR)

		 else:
		  dlg = wx.ProgressDialog(
            title="自動投稿プログラム実行中",
            message="0/100",
            maximum=100,
            style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME | wx.PD_CAN_ABORT )
         
# ダイアログ表示
		  dlg.Show()
		  rate = 0

#所要時間計測開始
		  start = time.time()

#現在日時（日付と時刻）のオブジェクトを取得
		  dt_now = datetime.datetime.now()


#お問い合わせフォームへの自動投稿本体プログラム
#ws1の行数を取得
#		 lastrow = len(ws3.col_values(1))
		  for k in tqdm(range(row3, row4+1)):

 		   try:

#シートの初期化
 		    lastcol = len(list(ws3.row_values(k)))
 		    cell_list2 = ws3.range(k, 7, k, lastcol)
 		    print(cell_list2)
 		    for cell in cell_list2:
 		      cell.value = ""
#             time.sleep(1)
 		    ws3.update_cells(cell_list2)
           
 		    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt0)

# try:
# 		   try:
 		    if ws3.cell(k, 6).value == r"-" \
 		         or "Not Found" in ws3.cell(k, 6).value \
 		             or "Time out!!" in ws3.cell(k, 6).value \
 		                 or "unknown error!!" in ws3.cell(k, 6).value \
                              or "mailto" in ws3.cell(k, 6).value:
 		     ws3.update_cell(k, 7, "-")

#取得したdatetimeオブジェクトでstrftime()メソッドを使うことで、元の文字列と異なるフォーマットで日付や時刻を表すことができる。
 		     ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		     format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)

 		    else:
 		      driver.get(ws3.cell(k, 6).value)
 		      time.sleep(1)
 		      html = driver.page_source
 		      soup = BeautifulSoup(html, 'html.parser')

#フォーム送信ＮＧ
 		      if "営業のご連絡" in html \
 		        or "営業のお問い合わせ" in html \
 		            or "営業を目的" in html \
 		                or "営業目的" in html \
 		                    or "営業メール" in html \
 		                        or "弊社への営業" in html \
 		                            or "広告メール" in html \
 		                                or "フォームからの営業" in html \
 		                                    or "セールスの" in html \
                                                 or "セールスは" in html \
                                                     or "セールス等の" in html \
                                                         or "セールスを目的" in html \
                                                             or "売り込み" in html \
                                                                 or "フォームからのセールス" in html:
 		        ws3.update_cell(k, 7, "営業お断り！！")
 		        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt1)
                 
# 		      elif "recaptcha" in html:
# 		        ws3.update_cell(k, 7, "reCAPTCHA")
# 		        ws3.update_cell(k, 8, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
# 		        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)
        
 		      elif "このページはサービス" in html \
                   or "ご興味のあるサービス" in html \
                       or "当サービスへのお問合わせ" in html \
                           or "サービスに関するお問い合わせ" in html \
                               or "サービスについてのお問い合わせ" in html \
                                   or "サービスをご検討" in html:
 		        ws3.update_cell(k, 7, "サービスに関する専用フォーム")
 		        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)

 		      elif "資料請求" in str(soup.find_all("form")):
 		        ws3.update_cell(k, 7, "資料請求専用フォーム")
 		        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)

 		      elif "無料見積り" in html:
 		        ws3.update_cell(k, 7, "無料見積り専用フォーム")
 		        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)

 		      elif "応募" in str(soup.find_all("form")) \
                   or "自己アピール" in str(soup.find_all("form")) \
                       or "動機" in str(soup.find_all("form")):
 		        ws3.update_cell(k, 7, "お仕事エントリー専用フォーム")
 		        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)


#自動送信対象     
 		      elif "確認" in str(soup.find_all("form")) \
 		        or "送信" in str(soup.find_all("form")) \
 		            or "お問い合わせ" in str(soup.find_all("form")) \
 		                or "メールアドレス" in str(soup.find_all("form")):
 		        ws3.update_cell(k, 7, "フォーム要素あり")
 		        ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))

#labelタグのテキストを取得
 		        if "お問い合わせ" in str(soup.find_all("label")) \
 		                 or "メールアドレス" in str(soup.find_all("label")):
 		          element1 = soup.find_all("label")
 		          list_1 = []
 		          for list_ in element1:
 		            if "企業" in list_.getText() \
 		             or "社名" in list_.getText() \
 		             or "法人" in list_.getText() \
 		             or "ふりがな" in list_.getText() \
 		             or "フリガナ" in list_.getText() \
 		             or "カナ" in list_.getText() \
 		             or "担当者" in list_.getText() \
 		             or "役職" in list_.getText() \
 		             or "部署" in list_.getText() \
 		             or "郵便番号" in list_.getText() \
 		             or "都道府県" in list_.getText() \
 		             or "市区町村" in list_.getText() \
 		             or "番地" in list_.getText() \
 		             or "建物名" in list_.getText() \
 		             or "住所" in list_.getText() \
 		             or "所在地" in list_.getText() \
 		             or "お問い合わせ" in list_.getText() \
 		             or "お問合わせ" in list_.getText() \
 		             or "お問い合せ" in list_.getText() \
 		             or "お問合せ" in list_.getText() \
 		             or "名前" in list_.getText() \
 		             or "氏名" in list_.getText() \
 		             or "姓" in list_.getText() \
 		             or "名" in list_.getText() \
 		             or "電話" in list_.getText() \
 		             or "TEL" in list_.getText() \
 		             or "連絡先" in list_.getText() \
 		             or "メールアドレス" in list_.getText() \
 		             or "mail" in list_.getText() \
 		             or "URL" in list_.getText() \
 		             or "サイト" in list_.getText() \
 		             or "ホームページ" in list_.getText() \
 		             or "種別" in list_.getText() \
 		             or "業種" in list_.getText() \
 		             or "題名" in list_.getText() \
 		             or "本文" in list_.getText() \
 		             or "詳細" in list_.getText() \
 		             or "連絡方法" in list_.getText() \
 		             or "用件" in list_.getText() \
 		             or "件名" in list_.getText() \
 		             or "ご意見" in list_.getText() \
 		             or "返信方法" in list_.getText() \
 		             or "項目" in list_.getText():
 		             list_1.append(re.sub("[\n]", "", list_.getText(), 3))
# 		          print(list_1)

#tdタグのテキストを取得
 		        if "お問い合わせ" in str(soup.find_all("td")) \
 		                 or "メールアドレス" in str(soup.find_all("td")):
 		          element1 = soup.find_all("td")
 		          list_1 = []
 		          for list_ in element1:
 		            if "企業" in list_.getText() \
 		             or "社名" in list_.getText() \
 		             or "法人" in list_.getText() \
 		             or "ふりがな" in list_.getText() \
 		             or "フリガナ" in list_.getText() \
 		             or "カナ" in list_.getText() \
 		             or "担当者" in list_.getText() \
 		             or "役職" in list_.getText() \
 		             or "部署" in list_.getText() \
 		             or "郵便番号" in list_.getText() \
 		             or "都道府県" in list_.getText() \
 		             or "市区町村" in list_.getText() \
 		             or "番地" in list_.getText() \
 		             or "建物名" in list_.getText() \
 		             or "住所" in list_.getText() \
 		             or "所在地" in list_.getText() \
 		             or "お問い合わせ" in list_.getText() \
 		             or "お問合わせ" in list_.getText() \
 		             or "お問い合せ" in list_.getText() \
 		             or "お問合せ" in list_.getText() \
 		             or "名前" in list_.getText() \
 		             or "氏名" in list_.getText() \
 		             or "姓" in list_.getText() \
 		             or "名" in list_.getText() \
 		             or "電話" in list_.getText() \
 		             or "TEL" in list_.getText() \
 		             or "連絡先" in list_.getText() \
 		             or "メールアドレス" in list_.getText() \
 		             or "mail" in list_.getText() \
 		             or "URL" in list_.getText() \
 		             or "サイト" in list_.getText() \
 		             or "ホームページ" in list_.getText() \
 		             or "種別" in list_.getText() \
 		             or "業種" in list_.getText() \
 		             or "題名" in list_.getText() \
 		             or "本文" in list_.getText() \
 		             or "詳細" in list_.getText() \
 		             or "連絡方法" in list_.getText() \
 		             or "用件" in list_.getText() \
 		             or "件名" in list_.getText() \
 		             or "ご意見" in list_.getText() \
 		             or "返信方法" in list_.getText() \
 		             or "項目" in list_.getText():
 		             list_1.append(re.sub("[\n]", "", list_.getText(), 3))
# 		          print(list_1)

#dtタグのテキストを取得
 		        if "お問い合わせ" in str(soup.find_all("dt")) \
 		                 or "メールアドレス" in str(soup.find_all("dt")):
 		          element1 = soup.find_all("dt")
 		          list_1 = []
 		          for list_ in element1:
 		            if "企業" in list_.getText() \
 		             or "社名" in list_.getText() \
 		             or "法人" in list_.getText() \
 		             or "ふりがな" in list_.getText() \
 		             or "フリガナ" in list_.getText() \
 		             or "カナ" in list_.getText() \
 		             or "担当者" in list_.getText() \
 		             or "役職" in list_.getText() \
 		             or "部署" in list_.getText() \
 		             or "郵便番号" in list_.getText() \
 		             or "都道府県" in list_.getText() \
 		             or "市区町村" in list_.getText() \
 		             or "番地" in list_.getText() \
 		             or "建物名" in list_.getText() \
 		             or "住所" in list_.getText() \
 		             or "所在地" in list_.getText() \
 		             or "お問い合わせ" in list_.getText() \
 		             or "お問合わせ" in list_.getText() \
 		             or "お問い合せ" in list_.getText() \
 		             or "お問合せ" in list_.getText() \
 		             or "名前" in list_.getText() \
 		             or "氏名" in list_.getText() \
 		             or "姓" in list_.getText() \
 		             or "名" in list_.getText() \
 		             or "電話" in list_.getText() \
 		             or "TEL" in list_.getText() \
 		             or "連絡先" in list_.getText() \
 		             or "メールアドレス" in list_.getText() \
 		             or "mail" in list_.getText() \
 		             or "URL" in list_.getText() \
 		             or "サイト" in list_.getText() \
 		             or "ホームページ" in list_.getText() \
 		             or "種別" in list_.getText() \
 		             or "業種" in list_.getText() \
 		             or "題名" in list_.getText() \
 		             or "本文" in list_.getText() \
 		             or "詳細" in list_.getText() \
 		             or "連絡方法" in list_.getText() \
 		             or "用件" in list_.getText() \
 		             or "件名" in list_.getText() \
 		             or "ご意見" in list_.getText() \
 		             or "返信方法" in list_.getText() \
 		             or "項目" in list_.getText():
 		             list_1.append(re.sub("[\n]", "", list_.getText(), 3))
# 		          print(list_1)

#pタグのテキストを取得
 		        if "お問い合わせ" in str(soup.find_all("p")) \
 		                 or "メールアドレス" in str(soup.find_all("p")):
 		          element1 = soup.find_all("p")
 		          list_1 = []
 		          for list_ in element1:
 		            if "企業" in list_.getText() \
 		             or "社名" in list_.getText() \
 		             or "法人" in list_.getText() \
 		             or "ふりがな" in list_.getText() \
 		             or "フリガナ" in list_.getText() \
 		             or "カナ" in list_.getText() \
 		             or "担当者" in list_.getText() \
 		             or "役職" in list_.getText() \
 		             or "部署" in list_.getText() \
 		             or "郵便番号" in list_.getText() \
 		             or "都道府県" in list_.getText() \
 		             or "市区町村" in list_.getText() \
 		             or "番地" in list_.getText() \
 		             or "建物名" in list_.getText() \
 		             or "住所" in list_.getText() \
 		             or "所在地" in list_.getText() \
 		             or "お問い合わせ" in list_.getText() \
 		             or "お問合わせ" in list_.getText() \
 		             or "お問い合せ" in list_.getText() \
 		             or "お問合せ" in list_.getText() \
 		             or "名前" in list_.getText() \
 		             or "氏名" in list_.getText() \
 		             or "姓" in list_.getText() \
 		             or "名" in list_.getText() \
 		             or "電話" in list_.getText() \
 		             or "TEL" in list_.getText() \
 		             or "連絡先" in list_.getText() \
 		             or "メールアドレス" in list_.getText() \
 		             or "mail" in list_.getText() \
 		             or "URL" in list_.getText() \
 		             or "サイト" in list_.getText() \
 		             or "ホームページ" in list_.getText() \
 		             or "種別" in list_.getText() \
 		             or "業種" in list_.getText() \
 		             or "題名" in list_.getText() \
 		             or "本文" in list_.getText() \
 		             or "詳細" in list_.getText() \
 		             or "連絡方法" in list_.getText() \
 		             or "用件" in list_.getText() \
 		             or "件名" in list_.getText() \
 		             or "ご意見" in list_.getText() \
 		             or "返信方法" in list_.getText() \
 		             or "項目" in list_.getText():
 		             list_1.append(re.sub("[\n]", "", list_.getText(), 3))
# 		          print(list_1)

#thタグのテキストを取得
 		        if "お問い合わせ" in str(soup.find_all("th")) \
 		                 or "メールアドレス" in str(soup.find_all("th")):
 		          element1 = soup.find_all("th")
 		          list_1 = []
 		          for list_ in element1:
 		            if "企業" in list_.getText() \
 		             or "社名" in list_.getText() \
 		             or "法人" in list_.getText() \
 		             or "ふりがな" in list_.getText() \
 		             or "フリガナ" in list_.getText() \
 		             or "カナ" in list_.getText() \
 		             or "担当者" in list_.getText() \
 		             or "役職" in list_.getText() \
 		             or "部署" in list_.getText() \
 		             or "郵便番号" in list_.getText() \
 		             or "都道府県" in list_.getText() \
 		             or "市区町村" in list_.getText() \
 		             or "番地" in list_.getText() \
 		             or "建物名" in list_.getText() \
 		             or "住所" in list_.getText() \
 		             or "所在地" in list_.getText() \
 		             or "お問い合わせ" in list_.getText() \
 		             or "お問合わせ" in list_.getText() \
 		             or "お問い合せ" in list_.getText() \
 		             or "お問合せ" in list_.getText() \
 		             or "名前" in list_.getText() \
 		             or "氏名" in list_.getText() \
 		             or "姓" in list_.getText() \
 		             or "名" in list_.getText() \
 		             or "電話" in list_.getText() \
 		             or "TEL" in list_.getText() \
 		             or "連絡先" in list_.getText() \
 		             or "メールアドレス" in list_.getText() \
 		             or "mail" in list_.getText() \
 		             or "URL" in list_.getText() \
 		             or "サイト" in list_.getText() \
 		             or "ホームページ" in list_.getText() \
 		             or "種別" in list_.getText() \
 		             or "業種" in list_.getText() \
 		             or "題名" in list_.getText() \
 		             or "本文" in list_.getText() \
 		             or "詳細" in list_.getText() \
 		             or "連絡方法" in list_.getText() \
 		             or "用件" in list_.getText() \
 		             or "件名" in list_.getText() \
 		             or "ご意見" in list_.getText() \
 		             or "返信方法" in list_.getText() \
 		             or "項目" in list_.getText():
 		             list_1.append(re.sub("[\n]", "", list_.getText(), 3))
# 		          print(list_1)

#指定のタグからテキストを取得しない場合
 		        else:
 		          element1 = soup.find_all("form")
 		          list_1 = []
 		          for list_ in element1:
 		            if "企業" in list_.getText() \
 		             or "社名" in list_.getText() \
 		             or "法人" in list_.getText() \
 		             or "ふりがな" in list_.getText() \
 		             or "フリガナ" in list_.getText() \
 		             or "カナ" in list_.getText() \
 		             or "担当者" in list_.getText() \
 		             or "役職" in list_.getText() \
 		             or "部署" in list_.getText() \
 		             or "郵便番号" in list_.getText() \
 		             or "都道府県" in list_.getText() \
 		             or "市区町村" in list_.getText() \
 		             or "番地" in list_.getText() \
 		             or "建物名" in list_.getText() \
 		             or "住所" in list_.getText() \
 		             or "所在地" in list_.getText() \
 		             or "お問い合わせ" in list_.getText() \
 		             or "お問合わせ" in list_.getText() \
 		             or "お問い合せ" in list_.getText() \
 		             or "お問合せ" in list_.getText() \
 		             or "名前" in list_.getText() \
 		             or "氏名" in list_.getText() \
 		             or "姓" in list_.getText() \
 		             or "名" in list_.getText() \
 		             or "電話" in list_.getText() \
 		             or "TEL" in list_.getText() \
 		             or "連絡先" in list_.getText() \
 		             or "メールアドレス" in list_.getText() \
 		             or "mail" in list_.getText() \
 		             or "URL" in list_.getText() \
 		             or "サイト" in list_.getText() \
 		             or "ホームページ" in list_.getText() \
 		             or "種別" in list_.getText() \
 		             or "業種" in list_.getText() \
 		             or "題名" in list_.getText() \
 		             or "本文" in list_.getText() \
 		             or "詳細" in list_.getText() \
 		             or "連絡方法" in list_.getText() \
 		             or "用件" in list_.getText() \
 		             or "件名" in list_.getText() \
 		             or "ご意見" in list_.getText() \
 		             or "返信方法" in list_.getText() \
 		             or "項目" in list_.getText():
 		             list_1.append(re.sub("[\n]", "", list_.getText(), 3))
 		          print(list_1)

 		        items_1 =[i.replace("必須", "") \
                     .replace("半角英数字", "") \
                         .replace("全角漢字", "") \
                             .replace("携帯電話可", "") \
                                 .replace("携帯可", "") \
                                     .replace("全角", "") \
                                         .replace(r"()","") \
                                             .replace(r"（）","") \
                                                 .replace(" ","") \
                                                     .replace(r"*","") \
                                                         .replace(r"※","") \
                                                             .split(r"・")[0] \
                                                                 for i in list_1]                  
#     print(items_1)

#inputタグの全要素を取得
 		        element2 = soup.find_all("input")
# 		         print(element2)
 		        list_2 = []
 		        list_2c = []
 		        list_2d = []
 		        list_2t = []
 		        list_2v = []

#inputタグの各要素を取得
# 		        element3 = soup.find_all("button")
# 		         print(element2)
# 		        list_3t = []

#各属性値 		         		           
 		        for elem in element2:
 		          items_1.append(elem.get("placeholder"))
 		          list_2.append(elem.get("name"))
 		          list_2d.append(elem.get("id"))
 		          list_2c.append(elem.get("class"))
 		          list_2t.append(elem.get("type"))
 		          list_2v.append(elem.get("value"))

# 		        for elem in element3:
# 		          items_1.append(name.get("placeholder"))
# 		          list_3t.append(elem.get("type"))
# 		        print(list_3t)


#リストにNoneが含まれていると「TypeError: argument of type 'NoneType' is not iterable」
#が発生するので、リスト内包表記で処理

#placeholder
 		        items_1 = [i for i in items_1 if i is not None]
 		        print(items_1)

#name値
# 		        if not len(list_2) == 0:
 		        list_2 = [i for i in list_2 if i is not None]
 		        print(list_2)
 		          
#id値
# 		        if not len(list_2d) == 0:
 		        list_2d = [i for i in list_2d if i is not None]
 		        print(list_2d)

#class値
# 		        if not len(list_2c) == 0:
 		        list_2c = [i for i in list_2c if i is not None]
 		        print(list_2c)

#type値
 		        list_2t = [i for i in list_2t if i is not None]
 		        print(list_2t)

#value値
 		        list_2v = [i for i in list_2v if i is not None]
 		        print(list_2v)

                 
#送信ボタン（buttonタグの全要素取得）
 		        element4 = soup.find_all("button")
 		        list_4bc = []

 		        for elem in element4:
 		          list_4bc.append(elem.get("class"))
 		        list_4bc = [i for i in list_4bc if i is not None]

#二次元配列から一次配列への変換
 		        list_4bc = [i for sublist in list_4bc for i in sublist]
 		        print(list_4bc)


#送信ボタン（divタグの指定要素のみ取得）
#※要素の絞り込みに使用する「re.compile」はsoup.selectだとエラーになるので注意！！
 		        element11 = soup.find_all("div",class_=re.compile("submit"))
 		        print(element11)
 		        list_11dc = []

 		        for elem in element11:
 		          list_11dc.append(elem.get("class"))
 		        list_11dc = [i for i in list_11dc if i is not None]
 		        print(list_11dc)

#パターン追加（2021.12.10）
#<span class="appsMaterialWizButtonPaperbuttonLabel quantumWizButtonPaperbuttonLabel exportLabel">送信</span>
#spanタグの指定要素のみ取得
 		        element12 = soup.find_all("span",class_=re.compile("appsMaterialWizButtonPaperbuttonLabel"))
 		        print(element12)
 		        list_12sc = []     
 		        for elem in element12:
 		          list_12sc.append(elem.get("class"))

 		        list_12sc = [i for i in list_12sc if i is not None]
 		        print(list_12sc)
                 
#二次元配列から一次配列への変換
 		        list_12sc = [i for sublist in list_12sc for i in sublist]
 		        print(list_12sc)

#spanタグの指定要素のみ取得
 		        element14 = soup.find_all("span",class_=re.compile("supplement"))
 		        print(element14)
 		        list_14sc = []     
 		        for elem in element14:
 		          list_14sc.append(elem.getText())

 		        list_14sc = [i for i in list_14sc if i is not None]
 		        print(list_14sc)
                 

#ラジオボタン
 		        element5 = soup.find_all("input",type="radio")
# 		        print(element5)
 		        element6 = soup.find_all("input",class_="questionTypeRadio")
# 		        print(element6)
 		        element7 = soup.find_all("input",attrs={"name":"questioner_type","type":"radio"})
# 		        print(element7)
 		         
 		        SELECT_list1 = []
 		        SELECT_list2 = []
 		        SELECT_list3 = []
 		        SELECT_list4 = []
 		        SELECT_list5 = []

 		        for elem in element5: 
 		           SELECT_list1.append(elem.get("value"))
 		           SELECT_list1 = [i for i in SELECT_list1 if i is not None]
 		        print(SELECT_list1)

 		        for elem in element5:
 		           SELECT_list2.append(elem.get("id"))
 		           SELECT_list2 = [i for i in SELECT_list2 if i is not None]
 		        print(SELECT_list2)

 		        for elem in element6: 
 		           SELECT_list3.append(elem.get("id"))
 		           SELECT_list3 = [i for i in SELECT_list3 if i is not None]
# 		           print(SELECT_list3)

 		        for elem in element7: 
 		           SELECT_list4.append(elem.get("id"))
 		           SELECT_list4 = [i for i in SELECT_list4 if i is not None]
 		        print(SELECT_list4)

 		        for elem in element5:
 		           SELECT_list5.append(elem.get("name"))
 		           SELECT_list5 = [i for i in SELECT_list5 if i is not None]
 		        print(SELECT_list5)

#value値のみの場合
 		        if len(SELECT_list1) > 0 \
                     and len(SELECT_list2) == 0 \
                         and len(SELECT_list3) == 0 \
                             and len(SELECT_list4) == 0 \
                                 and len(SELECT_list5) == 0:
 		          print(len(SELECT_list1))
 		          print(len(SELECT_list2))
 		          print(len(SELECT_list3))
 		          print(len(SELECT_list4))
 		          print(len(SELECT_list5))

#（区別）
 		          try:
 		           if len([i for i in SELECT_list1 if "法人" in i]) == 1:
 		            SELECT_list11 = [i for i in SELECT_list1 if "法人" in i]
 		            print(SELECT_list11)
 		            radiobutton = driver.find_element_by_css_selector("[value='" + SELECT_list11[0] + "']")
 		            driver.execute_script("arguments[0].click();", radiobutton)
 		            print(radiobutton.is_selected())
 		            if radiobutton.is_selected() is True:
 		         		         lastcol = len(list(ws3.row_values(k)))    
 		         		         time.sleep(1) 		         		           
 		         		         ws3.update_cell(k, lastcol+1, SELECT_list11[0])
 		         		         print(radiobutton.is_selected())
 		          except:
 		            pass

#（連絡方法）
 		          try:
 		           if len([i for i in SELECT_list1 if "メール" in i]) > 0:
 		            SELECT_list12 = [i for i in SELECT_list1 if "メール" in i]
 		            print(SELECT_list12)
 		            radiobutton = driver.find_element_by_css_selector("[value='" + SELECT_list12[0] + "']")
 		            driver.execute_script("arguments[0].click();", radiobutton)
 		            print(radiobutton.is_selected())
 		            if radiobutton.is_selected() is True:
 		         		         lastcol = len(list(ws3.row_values(k)))    
 		         		         time.sleep(1) 		         		           
 		         		         ws3.update_cell(k, lastcol+1, SELECT_list12[0])
 		         		         print(radiobutton.is_selected())
 		          except:
 		            pass
                 
#（アンケート:後で反映させる予定）
# 		          if "知りましたか" in str(soup.find_all("form")) \
# 		         		         and len([i for i in list_2 if "知りましたか" in i]) > 0:
# 		           radiobutton = driver.find_element_by_name(SELECT_list5[0])
# 		           print(SELECT_list5[0])
# 		           driver.execute_script("arguments[0].click();", radiobutton)
# 		           print(radiobutton.is_selected())
# 		           lastcol = len(list(ws3.row_values(k)))
# 		           time.sleep(1) 		         		           
# 		           ws3.update_cell(k, lastcol+1, SELECT_list5[0])
# 		           Cell_list9 = [i for i in list_2 if "知りましたか" in i]
# 		           print(Cell_list9)
# 		           driver.find_element_by_name(Cell_list9[0]).send_keys(ws2.cell(1, 3).value)
# 		           lastcol = len(list(ws3.row_values(k)))
# 		           time.sleep(1) 		         		           
# 		           ws3.update_cell(k, lastcol+1, ws2.cell(1, 3).value)
 		         		          

#value値及びid値有りの場合
 		        elif len(SELECT_list1) > 0 \
                     and len(SELECT_list2) > 0 \
                         and len(SELECT_list3) == 0 \
                             and len(SELECT_list4) == 0 \
                                 and len(SELECT_list5) == 0:
 		          print(len(SELECT_list1))
 		          print(len(SELECT_list2))
 		          print(len(SELECT_list3))
 		          print(len(SELECT_list4))
 		          print(len(SELECT_list5))                   

#（区別）
 		          try:
 		           if len([i for i in SELECT_list1 if "法人" in i]) == 1:
 		            SELECT_list11 = [i for i in SELECT_list1 if "法人" in i]
 		            print(SELECT_list11)                     
 		            radiobutton = driver.find_element_by_css_selector("[value='" + SELECT_list11[0] + "']")
 		            driver.execute_script("arguments[0].click();", radiobutton)
 		            print(radiobutton.is_selected())
 		            if radiobutton.is_selected() is True:
 		         		         lastcol = len(list(ws3.row_values(k)))    
 		         		         time.sleep(1) 		         		           
 		         		         ws3.update_cell(k, lastcol+1, SELECT_list11[0])
 		         		         print(radiobutton.is_selected())
 		          except:
 		            pass

#（連絡方法）
 		          try:
 		           if len([i for i in SELECT_list1 if "メール" in i]) > 0:
 		            SELECT_list12 = [i for i in SELECT_list1 if "メール" in i]
 		            print(SELECT_list12)                     
 		            radiobutton = driver.find_element_by_css_selector("[value='" + SELECT_list12[0] + "']")
 		            driver.execute_script("arguments[0].click();", radiobutton)
 		            print(radiobutton.is_selected())
 		            if radiobutton.is_selected() is True:
 		         		         lastcol = len(list(ws3.row_values(k)))    
 		         		         time.sleep(1) 		         		           
 		         		         ws3.update_cell(k, lastcol+1, SELECT_list12[0])
 		         		         print(radiobutton.is_selected())
 		          except:
 		            pass

#（個人情報保護方針の同意）
 		          try:
 		           if len([i for i in SELECT_list1 if "個人情報" in i \
                                       or "同意" in i \
                                           or "プライバシーポリシー" in i \
                                               or "反社会的勢力" in i \
                                                   or "確認" in i \
                                                       and i is not None]) == 1 \
                        and len([i for i in SELECT_list2 if "個人情報" in i \
                                           or "同意" in i \
                                               or "プライバシーポリシー" in i \
                                                   or "反社会的勢力" in i \
                                                       or "確認" in i \
                                                           and i is not None]) == 1:                        
 		                      SELECT_list13 = [i for i in SELECT_list2 if "個人情報" in i \
                                        or "同意" in i \
                                            or "プライバシーポリシー" in i \
                                                or "反社会的勢力" in i \
                                                    or "確認" in i \
                                                        and i is not None]
 		                      print(SELECT_list13)
 		                      radiobutton = driver.find_element_by_id(SELECT_list13[len(SELECT_list13)-1])
 		                      driver.execute_script("arguments[0].click();", radiobutton)
 		                      print(radiobutton.is_selected())
 		                      if radiobutton.is_selected() is True:
 		                         lastcol = len(list(ws3.row_values(k)))    
 		                         time.sleep(1) 		         		           
 		                         ws3.update_cell(k, lastcol+1, SELECT_list13[len(SELECT_list13)-1])
 		                         print(radiobutton.is_selected())

 		           elif len([i for i in SELECT_list1 if "個人情報" in i \
                                       or "同意" in i \
                                           or "プライバシーポリシー" in i \
                                               or "反社会的勢力" in i \
                                                   or "確認" in i \
                                                       and i is not None]) == 1 \
                        and len([i for i in SELECT_list2 if "個人情報" in i \
                                           or "同意" in i \
                                               or "プライバシーポリシー" in i \
                                                   or "反社会的勢力" in i \
                                                       or "確認" in i \
                                                           and i is not None]) == 0:
 		            SELECT_list13 = [i for i in SELECT_list1 if "個人情報" in i \
                                        or "同意" in i \
                                            or "プライバシーポリシー" in i \
                                                or "反社会的勢力" in i \
                                                    or "確認" in i \
                                                        and i is not None]
 		            print(SELECT_list13)
 		            radiobutton = driver.find_element_by_css_selector("[value='"+ SELECT_list13[0] + "']")
 		            driver.execute_script("arguments[0].click();", radiobutton)
 		            print(radiobutton.is_selected())
 		            if radiobutton.is_selected() is True:
 		         		         lastcol = len(list(ws3.row_values(k)))    
 		         		         time.sleep(1) 		         		           
 		         		         ws3.update_cell(k, lastcol+1, SELECT_list13[0])
 		         		         print(radiobutton.is_selected())
                                   
 		          except:
 		            try:
 		              if len([i for i in SELECT_list2 if "pribacy" in i \
                         or "privacy" in i]) == 1:
 		                radiobutton = driver.find_elements_by_id(SELECT_list2[len(SELECT_list2)-1])[len(SELECT_list2)]
 		                driver.execute_script("arguments[0].click();", radiobutton)
 		                print(radiobutton.is_selected())
 		                lastcol = len(list(ws3.row_values(k))) 		         		         		         
 		                ws3.update_cell(k, lastcol+1, SELECT_list2[len(SELECT_list2)-1])
                         
 		            except:
 		              pass

                        
#（種別）
 		          if "種別" in str(soup.find_all("form")) \
                       or "項目" in str(soup.find_all("form")) \
                           or "内容" in str(soup.find_all("form")) \
                               or "件名" in str(soup.find_all("form")) \
                                   or "ジャンル" in str(soup.find_all("form")) \
                                       or "区分" in str(soup.find_all("form")) \
                                           or "どのようなお問い合わせ" in str(soup.find_all("form")):
 		           try:
 		            radiobutton = driver.find_elements_by_id(SELECT_list2[len(SELECT_list2)-1])[len(SELECT_list2)]
 		            driver.execute_script("arguments[0].click();", radiobutton)
 		            print(radiobutton.is_selected())
 		            lastcol = len(list(ws3.row_values(k))) 		         		         		         
 		            ws3.update_cell(k, lastcol+1, SELECT_list2[len(SELECT_list2)-1])

#操作できない要素の回避
 		           except:
 		             try:
 		         		    if len ([i for i in SELECT_list1 if "other" in i]) > 0:
 		         		        SELECT_list14 = [i for i in SELECT_list1 if "other" in i]
 		         		        print(SELECT_list14)                                  
 		         		        radiobutton = driver.find_element_by_css_selector("[value='" + SELECT_list14[0] + "']")
 		         		        driver.execute_script("arguments[0].click();", radiobutton)
 		         		        print(radiobutton.is_selected())
 		         		        if radiobutton.is_selected() is True: 		           
 		         		          lastcol = len(list(ws3.row_values(k)))
 		         		          time.sleep(1)
 		         		          ws3.update_cell(k, lastcol+1, SELECT_list14[0])


# 		                  except NoSuchElementException:
 		         		    elif len([i for i in SELECT_list1 if "その他" in i \
                               or "提案" in i]) > 0:
#                        and len([i for i in SELECT_list5 if "店舗" in i \
#                          or "本社" in i]) > 0:
# 		                    SELECT_list5 = [i for i in SELECT_list5 if "店舗" in i \
#                                       or "本社" in i]
 		         		        radiobutton = driver.find_elements_by_id(SELECT_list2[0])[len(SELECT_list2)-1]
 		         		        driver.execute_script("arguments[0].click();", radiobutton)
 		         		        print(radiobutton.is_selected())
 		         		        if radiobutton.is_selected() is True:
 		         		           lastcol = len(list(ws3.row_values(k)))    
 		         		           time.sleep(1)
 		         		           ws3.update_cell(k, lastcol+1, SELECT_list2[0])
 		         		           print(radiobutton.is_selected())

#操作できない要素の回避
 		             except:
 		               try:                         
 		                 radiobutton = driver.find_element_by_id(SELECT_list2[len(SELECT_list2)-1])
 		                 driver.execute_script("arguments[0].click();", radiobutton)
 		                 print(radiobutton.is_selected())
 		                 lastcol = len(list(ws3.row_values(k))) 		         		         		         
 		                 ws3.update_cell(k, lastcol+1, SELECT_list2[len(SELECT_list2)-1])

 		               except:
 		                 pass

#value値及びname値有りの場合
 		        elif len(SELECT_list1) > 0 \
                     and len(SELECT_list2) == 0 \
                         and len(SELECT_list3) == 0 \
                             and len(SELECT_list4) == 0 \
                                 and len(SELECT_list5) > 0:
 		          print(len(SELECT_list1))
 		          print(len(SELECT_list2))
 		          print(len(SELECT_list3))
 		          print(len(SELECT_list4))
 		          print(len(SELECT_list5))

#（区別）
 		          try:
 		           if len([i for i in SELECT_list1 if "法人" in i]) == 1:
 		            SELECT_list11 = [i for i in SELECT_list1 if "法人" in i]
 		            radiobutton = driver.find_element_by_css_selector("[value='" + SELECT_list11[0] + "']")
 		            driver.execute_script("arguments[0].click();", radiobutton)
 		            print(radiobutton.is_selected())
 		            if radiobutton.is_selected() is True:
 		         		         lastcol = len(list(ws3.row_values(k)))    
 		         		         time.sleep(1) 		         		           
 		         		         ws3.update_cell(k, lastcol+1, SELECT_list11[0])
 		         		         print(radiobutton.is_selected())
 		          except:
 		            pass

#（連絡方法）
 		          try:
 		           if len([i for i in SELECT_list1 if "メール" in i]) > 0:
 		            SELECT_list12 = [i for i in SELECT_list1 if "メール" in i]
 		            radiobutton = driver.find_element_by_css_selector("[value='" + SELECT_list12[0] + "']")
 		            driver.execute_script("arguments[0].click();", radiobutton)
 		            print(radiobutton.is_selected())
 		            if radiobutton.is_selected() is True:
 		         		         lastcol = len(list(ws3.row_values(k)))    
 		         		         time.sleep(1) 		         		           
 		         		         ws3.update_cell(k, lastcol+1, SELECT_list12[0])
 		         		         print(radiobutton.is_selected())
 		          except:
 		            pass

#（お問い合わせ先）
 		          try:
 		           if len([i for i in SELECT_list1 if "本店" in i \
                      or "本社" in i]) > 0 \
                        and len([i for i in SELECT_list5 if "店舗" in i \
                          or "本社" in i]) > 0:
 		             SELECT_list13 = [i for i in SELECT_list5 if "店舗" in i \
                      or "本社" in i]
 		             print(SELECT_list13)
 		             radiobutton = driver.find_element_by_name(SELECT_list13[0])
 		             driver.execute_script("arguments[0].click();", radiobutton)
 		             print(radiobutton.is_selected())
 		             if radiobutton.is_selected() is True:
 		         		         lastcol = len(list(ws3.row_values(k)))    
 		         		         time.sleep(1) 		         		           
 		         		         ws3.update_cell(k, lastcol+1, SELECT_list13[0])
 		         		         print(radiobutton.is_selected())
 		          except:
 		            pass

#（アンケート）
 		          try:
 		           if "知りましたか" in str(soup.find_all("form")) \
                       or "きっかけ" in str(soup.find_all("form")) \
                           or "お知りに" in str(soup.find_all("form")):
                           
# 		             SELECT_list5 = [i for i in list_2 if "知りましたか" in i \
#                                 or "きっかけ" in i \
#                                     or "お知り" in i]
 		             radiobutton = driver.find_element_by_name(SELECT_list5[0])
 		             print(SELECT_list5[0])
 		             driver.execute_script("arguments[0].click();", radiobutton)
 		             print(radiobutton.is_selected())
 		             if radiobutton.is_selected() is True:
 		         		         lastcol = len(list(ws3.row_values(k)))    
 		         		         time.sleep(1) 		         		           
 		         		         ws3.update_cell(k, lastcol+1, SELECT_list5[0])
 		         		         print(radiobutton.is_selected())
 		          except:
 		            pass

#（個人情報保護方針の同意）
 		          try:
 		           if len([i for i in SELECT_list1 if "個人情報" in i \
                                       or "同意" in i \
                                           or "プライバシーポリシー" in i \
                                               or "反社会的勢力" in i \
                                                   or "確認" in i \
                                                       and i is not None]) == 1 \
                        and len([i for i in SELECT_list5 if "個人情報" in i \
                                           or "同意" in i \
                                               or "プライバシーポリシー" in i \
                                                   or "反社会的勢力" in i \
                                                       or "確認" in i \
                                                           and i is not None]) == 1:
 		                      SELECT_list14 = [i for i in SELECT_list5 if "個人情報" in i \
                                        or "同意" in i \
                                            or "プライバシーポリシー" in i \
                                                or "反社会的勢力" in i \
                                                    or "確認" in i \
                                                        and i is not None]
 		                      print(SELECT_list14)
 		                      radiobutton = driver.find_element_by_name(SELECT_list14[len(SELECT_list14)-1])
 		                      driver.execute_script("arguments[0].click();", radiobutton)
 		                      print(radiobutton.is_selected())
 		                      if radiobutton.is_selected() is True:
 		                         lastcol = len(list(ws3.row_values(k)))    
 		                         time.sleep(1) 		         		           
 		                         ws3.update_cell(k, lastcol+1, SELECT_list14[len(SELECT_list14)-1])
 		                         print(radiobutton.is_selected())

 		           elif len([i for i in SELECT_list1 if "個人情報" in i \
                                       or "同意" in i \
                                           or "プライバシーポリシー" in i \
                                               or "反社会的勢力" in i \
                                                   or "確認" in i \
                                                       and i is not None]) == 1 \
                        and len([i for i in SELECT_list5 if "個人情報" in i \
                                           or "同意" in i \
                                               or "プライバシーポリシー" in i \
                                                   or "反社会的勢力" in i \
                                                       or "確認" in i \
                                                           and i is not None]) == 0:
 		            SELECT_list14 = [i for i in SELECT_list1 if "個人情報" in i \
                                        or "同意" in i \
                                            or "プライバシーポリシー" in i \
                                                or "反社会的勢力" in i \
                                                    or "確認" in i \
                                                        and i is not None]
 		            print(SELECT_list14)
 		            radiobutton = driver.find_element_by_css_selector("[value='"+ SELECT_list14[0] + "']")
 		            driver.execute_script("arguments[0].click();", radiobutton)
 		            print(radiobutton.is_selected())
 		            if radiobutton.is_selected() is True:
 		         		         lastcol = len(list(ws3.row_values(k)))    
 		         		         time.sleep(1) 		         		           
 		         		         ws3.update_cell(k, lastcol+1, SELECT_list14[0])
 		         		         print(radiobutton.is_selected())
 		          except:
 		            pass                                   

#（種別）
 		          try:
 		               if "種別" in str(soup.find_all("form")) \
                            or "項目" in str(soup.find_all("form")) \
                                or "内容" in str(soup.find_all("form")) \
                                    or "件名" in str(soup.find_all("form")) \
                                        or "ジャンル" in str(soup.find_all("form")) \
                                            or "区分" in str(soup.find_all("form")) \
                                                or "どのようなお問い合わせ" in str(soup.find_all("form")):
# 		           radiobutton = driver.find_elements_by_name(SELECT_list5[len(SELECT_list5)-1])[len(SELECT_list5)-1]
 		                   if len ([i for i in SELECT_list1 if "other" in i]) > 0:
 		                        SELECT_list15 = [i for i in SELECT_list1 if "other" in i]
 		                        print(SELECT_list15)
 		                        radiobutton = driver.find_element_by_css_selector("[value='" + SELECT_list15[0] + "']")
 		                        driver.execute_script("arguments[0].click();", radiobutton)
 		                        print(radiobutton.is_selected())
 		                        if radiobutton.is_selected() is True: 		           
 		                           lastcol = len(list(ws3.row_values(k)))
 		                           time.sleep(1)
 		                           ws3.update_cell(k, lastcol+1, SELECT_list15[0])
 		                           print(radiobutton.is_selected())

# 		                  except NoSuchElementException:
 		                   elif len([i for i in SELECT_list1 if "その他" in i \
                               or "提案" in i]) > 0:
 		                        SELECT_list15 = [i for i in SELECT_list1 if "その他" in i \
                                           or "提案" in i]
 		                        print(SELECT_list15)
 		                        radiobutton = driver.find_element_by_css_selector("[value='" + SELECT_list15[0] + "']")
 		                        driver.execute_script("arguments[0].click();", radiobutton)
 		                        print(radiobutton.is_selected())
 		                        if radiobutton.is_selected() is True:
 		                           lastcol = len(list(ws3.row_values(k)))    
 		                           time.sleep(1)
 		                           ws3.update_cell(k, lastcol+1, SELECT_list15[0])
 		                           print(radiobutton.is_selected())

 		          except:
 		            pass


#value値及びid値、且つname値有りの場合
 		        elif len(SELECT_list1) > 0 \
                     and len(SELECT_list2) > 0 \
                         and len(SELECT_list3) == 0 \
                             and len(SELECT_list4) == 0 \
                                 and len(SELECT_list5) > 0:
 		          print(len(SELECT_list1))
 		          print(len(SELECT_list2))
# 		          print(len(SELECT_list3))
# 		          print(len(SELECT_list4))
 		          print(len(SELECT_list5))

#（区別）
 		          try:
 		           if len([i for i in SELECT_list1 if "法人" in i]) == 1:
 		            SELECT_list11 = [i for i in SELECT_list1 if "法人" in i]
 		            radiobutton = driver.find_element_by_css_selector("[value='" + SELECT_list11[0] + "']")
 		            driver.execute_script("arguments[0].click();", radiobutton)
 		            print(radiobutton.is_selected())
 		            if radiobutton.is_selected() is True:
 		         		         lastcol = len(list(ws3.row_values(k)))    
 		         		         time.sleep(1) 		         		           
 		         		         ws3.update_cell(k, lastcol+1, SELECT_list11[0])
 		         		         print(radiobutton.is_selected())
                                   
 		          except:
 		            pass
                   
#（連絡方法）
 		          try:
 		              if len([i for i in SELECT_list1 if "メール" in i]) > 0:
 		                SELECT_list12 = [i for i in SELECT_list1 if "メール" in i]
 		                radiobutton = driver.find_element_by_css_selector("[value='" + SELECT_list12[0] + "']")
 		                driver.execute_script("arguments[0].click();", radiobutton)
 		                print(radiobutton.is_selected())
 		                if radiobutton.is_selected() is True:
 		         		         lastcol = len(list(ws3.row_values(k)))    
 		         		         time.sleep(1) 		         		           
 		         		         ws3.update_cell(k, lastcol+1, SELECT_list12[0])
 		         		         print(radiobutton.is_selected())
                                   
 		          except:
 		            pass

#（お問い合わせ先）
 		          try:
 		                if len([i for i in SELECT_list1 if "本店" in i \
                           or "本社" in i]) > 0 \
                             and len([i for i in SELECT_list5 if "店舗" in i \
                                      or "本社" in i]) > 0:
 		                  SELECT_list13 = [i for i in SELECT_list5 if "店舗" in i \
                                     or "本社" in i]
 		                  radiobutton = driver.find_element_by_name(SELECT_list13[0])
 		                  driver.execute_script("arguments[0].click();", radiobutton)
 		                  print(radiobutton.is_selected())
 		                  if radiobutton.is_selected() is True:
 		         		         lastcol = len(list(ws3.row_values(k)))    
 		         		         time.sleep(1) 		         		           
 		         		         ws3.update_cell(k, lastcol+1, SELECT_list13[0])
 		         		         print(radiobutton.is_selected())

 		          except:
 		            pass
                 
#（アンケート）
 		          try:
 		                  if "知りましたか" in str(soup.find_all("form")) \
                               or "きっかけ" in str(soup.find_all("form")) \
                                   or "お知りに" in str(soup.find_all("form")):
                           
# 		             SELECT_list5 = [i for i in list_2 if "知りましたか" in i \
#                                 or "きっかけ" in i \
#                                     or "お知り" in i]
 		                    radiobutton = driver.find_element_by_name(SELECT_list5[0])
 		                    print(SELECT_list5[0])
 		                    driver.execute_script("arguments[0].click();", radiobutton)
 		                    print(radiobutton.is_selected())
 		                    if radiobutton.is_selected() is True:
 		                         lastcol = len(list(ws3.row_values(k)))    
 		                         time.sleep(1) 		         		           
 		                         ws3.update_cell(k, lastcol+1, SELECT_list5[0])
 		                         print(radiobutton.is_selected())

 		          except:
 		            pass

#（個人情報保護方針の同意）
 		          try:
 		                    if len([i for i in SELECT_list1 if "個人情報" in i \
                                       or "同意" in i \
                                           or "プライバシーポリシー" in i \
                                               or "反社会的勢力" in i \
                                                   or "確認" in i \
                                                       and i is not None]) == 1 \
                                 and len([i for i in SELECT_list5 if "個人情報" in i \
                                           or "同意" in i \
                                               or "プライバシーポリシー" in i \
                                                   or "反社会的勢力" in i \
                                                       or "確認" in i \
                                                           and i is not None]) == 1:
 		                      SELECT_list14 = [i for i in SELECT_list5 if "個人情報" in i \
                                        or "同意" in i \
                                            or "プライバシーポリシー" in i \
                                                or "反社会的勢力" in i \
                                                    or "確認" in i \
                                                        and i is not None]
 		                      print(SELECT_list14)
 		                      radiobutton = driver.find_element_by_name(SELECT_list14[len(SELECT_list14)-1])
 		                      driver.execute_script("arguments[0].click();", radiobutton)
 		                      print(radiobutton.is_selected())
 		                      if radiobutton.is_selected() is True:
 		                         lastcol = len(list(ws3.row_values(k)))    
 		                         time.sleep(1) 		         		           
 		                         ws3.update_cell(k, lastcol+1, SELECT_list14[len(SELECT_list14)-1])
 		                         print(radiobutton.is_selected())

 		                    elif len([i for i in SELECT_list1 if "個人情報" in i \
                                       or "同意" in i \
                                           or "プライバシーポリシー" in i \
                                               or "反社会的勢力" in i \
                                                   or "確認" in i \
                                                       and i is not None]) == 1 \
                                 and len([i for i in SELECT_list5 if "個人情報" in i \
                                           or "同意" in i \
                                               or "プライバシーポリシー" in i \
                                                   or "反社会的勢力" in i \
                                                       or "確認" in i \
                                                           and i is not None]) == 0:
 		                      SELECT_list14 = [i for i in SELECT_list1 if "個人情報" in i \
                                        or "同意" in i \
                                            or "プライバシーポリシー" in i \
                                                or "反社会的勢力" in i \
                                                    or "確認" in i \
                                                        and i is not None]
 		                      print(SELECT_list14)
 		                      radiobutton = driver.find_element_by_css_selector("[value='"+ SELECT_list14[0] + "']")
 		                      driver.execute_script("arguments[0].click();", radiobutton)
 		                      print(radiobutton.is_selected())
 		                      if radiobutton.is_selected() is True:
 		                         lastcol = len(list(ws3.row_values(k)))    
 		                         time.sleep(1) 		         		           
 		                         ws3.update_cell(k, lastcol+1, SELECT_list14[0])
 		                         print(radiobutton.is_selected())

#「同意する」「同意しない」の２つが存在
 		                    elif len([i for i in SELECT_list1 if "個人情報" in i \
                                       or "同意" in i \
                                           or "プライバシーポリシー" in i \
                                               or "反社会的勢力" in i \
                                                   or "確認" in i \
                                                       and i is not None]) > 1 \
                                 and len([i for i in SELECT_list5 if "個人情報" in i \
                                           or "同意" in i \
                                               or "プライバシーポリシー" in i \
                                                   or "反社会的勢力" in i \
                                                       or "確認" in i \
                                                           and i is not None]) == 0:
 		                      SELECT_list14 = [i for i in SELECT_list1 if "個人情報" in i \
                                        or "同意" in i \
                                            or "プライバシーポリシー" in i \
                                                or "反社会的勢力" in i \
                                                    or "確認" in i \
                                                        and i is not None]
 		                      print(SELECT_list14)
 		                      radiobutton = driver.find_element_by_css_selector("[value='"+ SELECT_list14[0] + "']")
 		                      driver.execute_script("arguments[0].click();", radiobutton)
 		                      print(radiobutton.is_selected())
 		                      if radiobutton.is_selected() is True:
 		                         lastcol = len(list(ws3.row_values(k)))    
 		                         time.sleep(1) 		         		           
 		                         ws3.update_cell(k, lastcol+1, SELECT_list14[0])
 		                         print(radiobutton.is_selected())

                                   
 		          except:
 		            pass

#（種別）
 		          try:
 		                   if "種別" in str(soup.find_all("form")) \
                                or "項目" in str(soup.find_all("form")) \
                                    or "内容" in str(soup.find_all("form")) \
                                        or "件名" in str(soup.find_all("form")) \
                                            or "ジャンル" in str(soup.find_all("form")) \
                                                or "区分" in str(soup.find_all("form")) \
                                                    or "どのようなお問い合わせ" in str(soup.find_all("form")):
# 		           radiobutton = driver.find_elements_by_name(SELECT_list5[len(SELECT_list5)-1])[len(SELECT_list5)-1]
# 		           try:
 		                      if len ([i for i in SELECT_list1 if "other" in i]) > 0:
 		                          SELECT_list15 = [i for i in SELECT_list1 if "other" in i]
 		                          print(SELECT_list15)
 		                          radiobutton = driver.find_element_by_css_selector("[value='" + SELECT_list15[0] + "']")
 		                          driver.execute_script("arguments[0].click();", radiobutton)
 		                          print(radiobutton.is_selected())
 		                          if radiobutton.is_selected() is True: 		           
 		                             lastcol = len(list(ws3.row_values(k)))
 		                             time.sleep(1)
 		                             ws3.update_cell(k, lastcol+1, SELECT_list15[0])
 		                             print(radiobutton.is_selected())

# 		                  except NoSuchElementException:
 		                      elif len([i for i in SELECT_list1 if "その他" in i \
                               or "提案" in i]) > 0:
#                        and len([i for i in SELECT_list5 if "店舗" in i \
#                          or "本社" in i]) > 0:
 		                          SELECT_list15 = [i for i in SELECT_list15 if "その他" in i \
                                           or "提案" in i]
 		                          print(SELECT_list15)
 		                          radiobutton = driver.find_element_by_css_selector("[value='" + SELECT_list15[0] + "']")
 		                          driver.execute_script("arguments[0].click();", radiobutton)
 		                          print(radiobutton.is_selected())
 		                          if radiobutton.is_selected() is True:
 		                             lastcol = len(list(ws3.row_values(k)))    
 		                             time.sleep(1)
 		                             ws3.update_cell(k, lastcol+1, SELECT_list15[0])
 		                             print(radiobutton.is_selected())

#パターン追加（2022.01.04）
#<label><input id="contact[6]" name="contact" value="6" type="radio"><span>その他</span></label>                                      
 		                      else:
 		                          radiobutton = driver.find_element_by_id(SELECT_list2[len(SELECT_list2)-1])
 		                          driver.execute_script("arguments[0].click();", radiobutton)
 		                          print(radiobutton.is_selected())
 		                          if radiobutton.is_selected() is True:
 		                             lastcol = len(list(ws3.row_values(k)))    
 		                             time.sleep(1)
 		                             ws3.update_cell(k, lastcol+1, SELECT_list2[[len(SELECT_list2)-1]])
 		                             print(radiobutton.is_selected())

 		          except:
 		            pass


#id値有りの場合（パターン注意）
 		        elif len(SELECT_list3) > 0 \
                     and len(SELECT_list4) > 0:
 		          print(len(SELECT_list3))
 		          print(len(SELECT_list4))

#（種別）
 		          if len([i for i in items_1 if "種別" in i]) == 1:
 		            radiobutton = driver.find_element_by_id(SELECT_list3[len(SELECT_list3)-1])
 		            driver.execute_script("arguments[0].click();", radiobutton)
 		            print(radiobutton.is_selected())
 		            if radiobutton.is_selected() is True:
 		         		         lastcol = len(list(ws3.row_values(k)))    
 		         		         time.sleep(1) 		         		           
 		         		         ws3.update_cell(k, lastcol+1, SELECT_list3[len(SELECT_list3)-1])
 		         		         print(radiobutton.is_selected())

#（法人／個人）
 		        if len([i for i in items_1 if "法人" in i]) == 1 \
 		            and len(SELECT_list4) > 0:
 		            radiobutton = driver.find_element_by_id(SELECT_list4[0])
 		            driver.execute_script("arguments[0].click();", radiobutton)
 		            print(radiobutton.is_selected())
 		            if radiobutton.is_selected() is True:
 		         		         lastcol = len(list(ws3.row_values(k)))    
 		         		         time.sleep(1) 		         		           
 		         		         ws3.update_cell(k, lastcol+1, SELECT_list4[0])
 		         		         print(radiobutton.is_selected())


#会社名
 		        adid = MyProject1MyDialog4(self)
 		        try:
 		         if len([i for i in items_1 if "社名" in i \
                    or "企業" in i \
                        or "法人" in i \
                            or "団体名" in i \
                                or "会社" in i]) == 0 \
                      or len([i for i in list_1 if "社名" in i \
                        or "企業" in i \
                            or "法人" in i \
                                or "団体名" in i \
                                    or "会社" in i]) == 0 \
 		            and len([i for i in list_2 if "社名" in i \
                        or "企業" in i \
                            or "法人" in i \
                                or "団体名" in i \
                                    or "会社" in i]) == 0:
 		           lastcol = len(list(ws3.row_values(k)))
 		           time.sleep(1) 
 		           ws3.update_cell(k, lastcol+1, "会社名入力欄なし")

#（Googleフォーム）
 		         elif not len([i for i in list_2c if "exportInput" in i]) == 0:
 		          driver.find_elements_by_css_selector(".quantumWizTextinputPaperinputInput.exportInput")[1].send_keys(adid.m_textCtrl11.GetValue())
 		          lastcol = len(list(ws3.row_values(k)))
 		          time.sleep(3)
 		          ws3.update_cell(k, lastcol+1, "会社名")


#パターン追加（2021.12.22）
#id値でスクレイピング
 		         elif not len([i for i in items_1 if "社名" in i \
 		         		         		        or "企業" in i \
 		         		         		            or "法人" in i \
                                                           or "団体名" in i \
                                                               or "会社" in i]) == 0 \
                      or not len([i for i in list_1 if "社名" in i \
     		         		         		        or "企業" in i \
     		         		         		            or "法人" in i \
                                                               or "団体名" in i \
                                                                   or "会社" in i]) == 0:
 		           if len(list_2d) > 0 \
                       and len([i for i in list_2 if "facility" in i \
                                or "organization" in i \
                                    or "your-company" in i \
                                        or "company-name" in i \
                                            or "company" == i \
                                                or "contact_company" == i \
                                                    or "campany" in i \
                                                        or "your-corp" in i \
                                                            or "corporate" in i \
                                                                or "企業名" in i \
                                                                    or "社名" in i \
                                                                        or "text-978" == i \
                                                                            or "Company" in i \
                                                                                or "company3" == i \
                                                                                    or "form_fields[company]" in i \
                                                                                        or "text-819" == i \
                                                                                            or "deptname" in i \
                                                                                                or "your-come" in i \
                                                                                                    or "corpo" == i \
                                                                                                        or "company_name" in i \
                                                                                                            or "M_company" in i \
                                                                                                                or "text-68" in i \
                                                                                                                    or "element-1" in i \
                                                                                                                        or "co-name" in i \
                                                                                                                            or "org" == i \
                                                                                                                                or "text-co" in i \
                                                                                                                                    or "kaisha" == i \
                                                                                                                                        or "corp-name" == i \
                                                                                                                                            or "text-146" in i \
                                                                                                                                                or"company_namae" == i \
                                                                                                                                                    or "text-822" == i \
                                                                                                                                                        or "kaisha" == i \
                                                                                                                                                            or "comp" == i \
                                                                                                                                                                or "your-kaisya" == i \
                                                                                                                                                                    or "yourcompany" == i \
                                                                                                                                                                        or "法人" in i \
                                                                                                                                                                            or "corp" == i \
                                                                                                                                                                                or "companyName" == i \
                                                                                                                                                                                    or "companyname" == i \
                                                                                                                                                                                        or "text-001" == i \
                                                                                                                                                                                            or "com" == i \
                                                                                                                                                                                                or "guestCompany" == i]) == 0:
 		             Cell_list1 = [i for i in list_2d if "facility" in i \
                            or "organization" in i \
                                or "your-company" in i \
                                    or "company-name" in i \
                                        or "company" == i \
                                            or "contact_company" == i \
                                                or "campany" in i \
                                                    or "your-corp" in i \
                                                        or "corporate" in i \
                                                                or "企業名" in i \
                                                                    or "社名" in i \
                                                                        or "text-978" == i \
                                                                            or "Company" in i \
                                                                                or "company3" == i \
                                                                                    or "form_fields[company]" in i \
                                                                                        or "text-819" == i \
                                                                                            or "deptname" in i \
                                                                                                or "your-come" in i \
                                                                                                    or "corpo" == i \
                                                                                                        or "company_name" in i \
                                                                                                            or "M_company" in i \
                                                                                                                or "text-68" in i \
                                                                                                                    or "element-1" in i \
                                                                                                                        or "co-name" in i \
                                                                                                                            or "org" == i \
                                                                                                                                or "text-co" in i \
                                                                                                                                    or "kaisha" == i \
                                                                                                                                        or "corp-name" == i \
                                                                                                                                            or "text-146" in i \
                                                                                                                                                or"company_namae" == i \
                                                                                                                                                    or "text-822" == i \
                                                                                                                                                        or "kaisha" == i \
                                                                                                                                                            or "comp" == i \
                                                                                                                                                                or "your-kaisya" == i \
                                                                                                                                                                    or "yourcompany" == i \
                                                                                                                                                                        or "法人" in i \
                                                                                                                                                                            or "corp" == i \
                                                                                                                                                                                or "companyName" == i \
                                                                                                                                                                                    or "companyname" == i \
                                                                                                                                                                                        or "text-001" == i \
                                                                                                                                                                                            or "com" == i \
                                                                                                                                                                                                or "guestCompany" == i]
 		             print(Cell_list1)
 		             driver.find_element_by_id(Cell_list1[0]).send_keys(adid.m_textCtrl11.GetValue())
 		             lastcol = len(list(ws3.row_values(k)))
 		             time.sleep(1) 
 		             ws3.update_cell(k, lastcol+1, "会社名")


 		           elif len(list_2) > 0:
 		            try:
 		             Cell_list1 = [i for i in list_2 if "facility" in i \
                            or "organization" in i \
                                or "your-company" in i \
                                    or "company-name" in i \
                                        or "kaisha-name" in i \
                                            or "company" == i \
                                                or "contact_company" == i \
                                                    or "campany" in i \
                                                        or "your-corp" in i \
                                                            or "corporate" in i \
                                                                or "企業名" in i \
                                                                    or "社名" in i \
                                                                        or "text-978" == i \
                                                                            or "Company" in i \
                                                                                or "company3" == i \
                                                                                    or "form_fields[company]" in i \
                                                                                        or "text-819" == i \
                                                                                            or "deptname" in i \
                                                                                                or "your-come" in i \
                                                                                                    or "corpo" == i \
                                                                                                        or "company_name" in i \
                                                                                                            or "M_company" in i \
                                                                                                                or "text-68" in i \
                                                                                                                    or "element-1" in i \
                                                                                                                        or "co-name" in i \
                                                                                                                            or "org" == i \
                                                                                                                                or "text-co" in i \
                                                                                                                                    or "kaisha" == i \
                                                                                                                                        or "corp-name" == i \
                                                                                                                                            or "text-146" in i \
                                                                                                                                                or"company_namae" == i \
                                                                                                                                                    or "text-822" == i \
                                                                                                                                                        or "kaisha" == i \
                                                                                                                                                            or "comp" == i \
                                                                                                                                                                or "your-kaisya" == i \
                                                                                                                                                                    or "yourcompany" == i \
                                                                                                                                                                        or "法人" in i \
                                                                                                                                                                            or "corp" == i \
                                                                                                                                                                                or "companyName" == i \
                                                                                                                                                                                    or "companyname" == i \
                                                                                                                                                                                        or "text-001" == i \
                                                                                                                                                                                            or "com" == i \
                                                                                                                                                                                                or "guestCompany" == i]
 		             driver.find_element_by_name(Cell_list1[0]).send_keys(adid.m_textCtrl11.GetValue() + "　")
 		             lastcol = len(list(ws3.row_values(k)))
 		             time.sleep(1)
 		             ws3.update_cell(k, lastcol+1, "会社名")
 		             print(Cell_list1)

 		            except:
 		              pass
                  

 		         elif len([i for i in list_2 if "facility" in i \
                     or "organization" in i \
                         or "your-company" in i \
                             or "company-name" in i \
                                 or "company" == i \
                                     or "contact_company" == i \
                                         or "campany" in i \
                                             or "your-corp" in i \
                                                 or "corporate" in i \
                                                     or "name" in i \
                                                         or "企業名" in i \
                                                             or "社名" in i \
                                                                 or "text-978" == i \
                                                                     or "Company" in i \
                                                                         or "company3" == i \
                                                                             or "form_fields[company]" in i \
                                                                                 or "text-819" == i \
                                                                                     or "deptname" in i \
                                                                                         or "your-come" in i \
                                                                                             or "corpo" == i \
                                                                                                 or "company_name" in i \
                                                                                                     or "M_company" in i \
                                                                                                         or "text-68" in i \
                                                                                                             or "element-1" in i \
                                                                                                                 or "co-name" in i \
                                                                                                                     or "org" == i \
                                                                                                                         or "text-co" in i \
                                                                                                                             or "kaisha" == i \
                                                                                                                                 or "corp-name" == i \
                                                                                                                                     or "text-146" in i \
                                                                                                                                         or"company_namae" == i \
                                                                                                                                             or "text-822" == i \
                                                                                                                                                 or "kaisha" == i \
                                                                                                                                                     or "comp" == i \
                                                                                                                                                         or "your-kaisya" == i \
                                                                                                                                                             or "yourcompany" == i \
                                                                                                                                                                 or "法人" in i \
                                                                                                                                                                     or "corp" == i \
                                                                                                                                                                         or "companyName" == i \
                                                                                                                                                                             or "companyname" == i \
                                                                                                                                                                                 or "text-001" == i \
                                                                                                                                                                                     or "com" == i \
                                                                                                                                                                                         or "guestCompany" == i]) == 0:
 		           Cell_list1 = [i for i in list_2c if "facility" in i \
                            or "organization" in i \
                                or "your-company" in i \
                                    or "company-name" in i \
                                        or "company" == i \
                                            or "contact_company" == i \
                                                or "campany" in i \
                                                    or "your-corp" in i \
                                                        or "corporate" in i \
                                                            or "name" in i \
                                                                or "企業名" in i \
                                                                    or "社名" in i \
                                                                        or "text-978" == i \
                                                                            or "Company" in i \
                                                                                or "company3" == i \
                                                                                    or "form_fields[company]" in i \
                                                                                        or "text-819" == i \
                                                                                            or "deptname" in i \
                                                                                                or "your-come" in i \
                                                                                                    or "corpo" == i \
                                                                                                        or "company_name" in i \
                                                                                                            or "M_company" in i \
                                                                                                                or "text-68" in i \
                                                                                                                    or "element-1" in i \
                                                                                                                        or "co-name" in i \
                                                                                                                            or "org" == i \
                                                                                                                                or "text-co" in i \
                                                                                                                                    or "kaisha" == i \
                                                                                                                                        or "corp-name" == i \
                                                                                                                                            or "text-146" in i \
                                                                                                                                                or"company_namae" == i \
                                                                                                                                                    or "text-822" == i \
                                                                                                                                                        or "kaisha" == i \
                                                                                                                                                            or "comp" == i \
                                                                                                                                                                or "your-kaisya" == i \
                                                                                                                                                                    or "yourcompany" == i \
                                                                                                                                                                        or "法人" in i \
                                                                                                                                                                            or "corp" == i \
                                                                                                                                                                                or "companyName" == i \
                                                                                                                                                                                    or "companyname" == i \
                                                                                                                                                                                        or "text-001" == i \
                                                                                                                                                                                            or "com" == i \
                                                                                                                                                                                                or "guestCompany" == i]
 		           print(Cell_list1)
 		           driver.find_elements_by_class_name(Cell_list1[0])[1].send_keys(adid.m_textCtrl11.GetValue())
 		           lastcol = len(list(ws3.row_values(k)))
 		           time.sleep(1) 
 		           ws3.update_cell(k, lastcol+1, "会社名")



#リストインデックスに関するエラー回避                    
 		        except IndexError:
 		           lastcol = len(list(ws3.row_values(k))) 		                               
 		           ws3.update_cell(k, lastcol+1, "IndexError")
                    
#会社名フリガナ
 		        if len([i for i in list_1 if "ふりがな（カナ）" in i \
                   or "貴社名(ふりがな)" in i \
                       or "企業名フリガナ" in i \
                           or "会社名（フリガナ）" in i \
                               or "会社名(フリガナ)" in i \
                                   or "会社名フリガナ" in i]) == 0 \
                     and len([i for i in items_1 if "ふりがな（カナ）" in i \
                       or "貴社名(ふりがな)" in i \
                           or "企業名フリガナ" in i \
                               or "会社名（フリガナ）" in i \
                                   or "会社名(フリガナ)" in i \
                                       or "会社名フリガナ" in i]) == 0:
 		            pass
 		        elif len([i for i in list_1 if "ふりがな（カナ）" in i \
                     or "貴社名(ふりがな)" in i \
                         or "企業名フリガナ" in i \
                             or "会社名（フリガナ）" in i \
                                 or "会社名(フリガナ)" in i \
                                     or "会社名フリガナ" in i]) > 0 \
                     or len([i for i in items_1 if "ふりがな（カナ）" in i \
                       or "貴社名(ふりがな)" in i \
                           or "企業名フリガナ" in i \
                               or "会社名（フリガナ）" in i \
                                   or "会社名(フリガナ)" in i \
                                       or "会社名フリガナ" in i]) > 0:
 		          Cell_list2 = [i for i in list_2 if "企業名ふりがな（カナ）" in i \
                           or "貴社名(ふりがな)" in i \
                               or "企業フリガナ" in i \
                                   or "企業名フリガナ" in i \
                                       or "companyNameKana" == i \
                                           or "会社名（フリガナ）" in i \
                                               or "会社名(フリガナ)" in i \
                                                   or "会社名フリガナ" in i]
 		          print(Cell_list2)
#テキスト入力
 		          driver.find_element_by_name(Cell_list2[0]).clear()
 		          driver.find_element_by_name(Cell_list2[0]).send_keys(adid.m_textCtrl13.GetValue())                   
 		          lastcol = len(list(ws3.row_values(k))) 		          
 		          time.sleep(1) 		         		           
 		          ws3.update_cell(k, lastcol+1, "会社名カナ")


#フルネーム（氏名）
 		           
#（Googleフォーム）
 		        try:
 		         if not len([i for i in list_2c if "exportInput" in i]) == 0:
 		          driver.find_elements_by_css_selector(".quantumWizTextinputPaperinputInput.exportInput")[0].send_keys(adid.m_textCtrl15.GetValue())
 		          lastcol = len(list(ws3.row_values(k)))
 		          time.sleep(3)
 		          ws3.update_cell(k, lastcol+1, "氏名")

 		         elif not len([i for i in items_1 if "担当者" in i \
                         or "名前" in i \
                             or "氏名" in i \
                                 or "姓" in i \
                                     or "名" in i \
                                         or "Name" in i]) == 0 \
                      or not len([i for i in list_1 if "担当者" in i \
                            or "名前" in i \
                                or "氏名" in i \
                                    or "姓" in i \
                                        or "名" in i \
                                            or "Name" in i]) == 0:
#                          or not len([i for i in list_2 if "担当者" in i \
#                                 or "名前" in i \
#                                     or "氏名" in i]) == 0:
 		          print(len([i for i in list_1 if "担当者" in i \
                         or "名前" in i \
                             or "氏名" in i \
                                 or "姓" in i \
                                     or "名" in i \
                                         or "Name" in i]))
# 		          print(len([i for i in list_2 if "担当者" in i \
#                          or "名前" in i \
#                              or "氏名" in i]))
 		          print(len([i for i in items_1 if "担当者" in i \
                          or "名前" in i \
                              or "氏名" in i \
                                  or "姓" in i \
                                      or "名" in i \
                                          or "Name" in i]))

#フルネーム（姓＋名）
 		          if len([i for i in list_2 if "姓" == i \
                    or "firstName" == i \
                        or "first_name" == i \
                            or "name1" == i \
                                or "name-1" in i \
                                    or "name01" == i \
                                        or "FirstName" in i \
                                            or "firstname" in i \
                                                or "M_name[0]" == i \
                                                    or "名" == i \
                                                        or "lastName" == i \
                                                            or "name2" == i \
                                                                or "name-2" in i \
                                                                    or "name02" == i \
                                                                        or "LastName" in i \
                                                                            or "name3" in i \
                                                                                or "lastname" in i \
                                                                                    or "M_name[1]" == i \
                                                                                        or "family-name" == i \
                                                                                            or "first-name" == i \
                                                                                                or "name-sei" == i \
                                                                                                    or "name-mei" == i \
                                                                                                        or "name_sei" == i \
                                                                                                            or "name_mei" == i \
                                                                                                                or "your-name1" == i \
                                                                                                                    or "your-name2" == i]) > 0:
 		            Cell_list3 = [i for i in list_2 if "姓" == i \
                             or "firstName" == i \
                                 or "first_name" == i \
                                     or "name1" == i \
                                         or "name-1" in i \
                                             or "name01" == i \
                                                 or "FirstName" in i \
                                                     or "firstname" in i \
                                                         or "M_name[0]" == i \
                                                             or "名" == i \
                                                                 or "lastName" == i \
                                                                     or "name2" == i \
                                                                         or "name-2" in i \
                                                                             or "name02" == i \
                                                                                 or "LastName" in i \
                                                                                     or "name3" in i \
                                                                                         or "lastname" in i \
                                                                                             or "M_name[1]" == i \
                                                                                                 or "family-name" == i \
                                                                                                     or "first-name" == i \
                                                                                                         or "name-sei" == i \
                                                                                                             or "name-mei" == i \
                                                                                                                 or "name_sei" == i \
                                                                                                                     or "name_mei" == i \
                                                                                                                         or "your-name1" == i \
                                                                                                                             or "your-name2" == i]
 		            print(Cell_list3)
 		            elemName0 = driver.find_element_by_name(Cell_list3[0])
 		            elemName1 = driver.find_element_by_name(Cell_list3[1])
 		            try: 		         		        
 		         		        if len(Cell_list3) > 2:
 		         		          elemName2 = driver.find_element_by_name(Cell_list3[2])
 		         		          for j in range(1,len(Cell_list3)+1):
 		         		           if elemName0.is_displayed() is False \
 		         		         		        or elemName1.is_displayed() is False \
 		         		         		            or elemName2.is_displayed() is False:
 		         		         		        print(Cell_list3[j-1])
 		         		         		        if "1" in Cell_list3[j-1]:
 		         		         		         driver.find_element_by_name(Cell_list3[j-1]).send_keys(adid.m_textCtrl16.GetValue()
                                                                                         + adid.m_textCtrl17.GetValue())
 		         		         		         lastcol = len(list(ws3.row_values(k)))
 		         		         		         time.sleep(1) 		         		           
 		         		         		         ws3.update_cell(k, lastcol+1, "氏名")
 		         		         		        elif "2" in Cell_list3[j-1]:
 		         		         		         driver.find_element_by_name(Cell_list3[j-1]).send_keys(adid.m_textCtrl16.GetValue()
                                                                                         + adid.m_textCtrl17.GetValue())
 		         		         		         lastcol = len(list(ws3.row_values(k)))
 		         		         		         time.sleep(1) 		         		           
 		         		         		         ws3.update_cell(k, lastcol+1, "氏名")
 		         		         		        elif "3" in Cell_list3[j-1]:
 		         		         		         driver.find_element_by_name(Cell_list3[j-1]).send_keys(adid.m_textCtrl16.GetValue()
                                                                                         + adid.m_textCtrl17.GetValue())
 		         		         		         lastcol = len(list(ws3.row_values(k)))
 		         		         		         time.sleep(1) 		         		           
 		         		         		         ws3.update_cell(k, lastcol+1, "氏名")


 		         		        elif len(Cell_list3) == 2:
 		         		         	elemName0.send_keys(adid.m_textCtrl16.GetValue())
 		         		         	lastcol = len(list(ws3.row_values(k)))
 		         		         	time.sleep(1)           
 		         		         	ws3.update_cell(k, lastcol+1, "姓")
 		         		         	print(Cell_list3[0])
 		         		         	elemName1.send_keys(adid.m_textCtrl17.GetValue())
 		         		         	lastcol = len(list(ws3.row_values(k)))
 		         		         	time.sleep(1)           
 		         		         	ws3.update_cell(k, lastcol+1, "名")
 		         		         	print(Cell_list3[1])

#操作できない要素の回避
 		            except ElementNotInteractableException:
 		              pass

# 		         		        else:
# 		         		         		        driver.find_element_by_name(Cell_list3[j-1]).send_keys(ws2.cell(6, 2+j).value)
# 		         		         		        lastcol = len(list(ws3.row_values(k)))
# 		         		         		        time.sleep(1) 
# 		         		         		        ws3.update_cell(k, lastcol+1, ws2.cell(6, 2+j).value)
 		           
#フルネーム（通常パターン）

#パターン追加（2021.12.22）
#id値でスクレイピング
 		          elif not len([i for i in list_2d if r"user_name" in i \
                          or r"your-name" in i \
                              or "contact_name" in i \
                                  or "名前" in i \
                                      or "f4a6f2b" in i \
                                          or "担当者" in i \
                                              or "氏名" in i \
                                                  or "name" == i \
                                                      or "name1" == i \
                                                          or "text-978" == i \
                                                              or "firstname" == i \
                                                                  or "full_name" == i \
                                                                      or "customer_name" == i \
                                                                          or "namae" == i \
                                                                              or "[name]" in i \
                                                                                  or "NAME" == i \
                                                                                      or "kanname" in i \
                                                                                          or "test_name" in i \
                                                                                              or "nama-1" in i \
                                                                                                  or "ip_name" == i \
                                                                                                      or "element-2" in i \
                                                                                                          or "tantou" == i \
                                                                                                              or "author" == i \
                                                                                                                  or "yourname" == i \
                                                                                                                      or "names" == i \
                                                                                                                          or "name_0_1" == i \
                                                                                                                              or "guestName" == i \
                                                                                                                                  or "fullname" == i]) == 0:
 		           Cell_list3 = [i for i in list_2d if r"user_name" in i \
                            or r"your-name" in i \
                                or "contact_name" in i \
                                    or "名前" in i \
                                        or "f4a6f2b" in i \
                                            or "担当者" in i \
                                                or "氏名" in i \
                                                    or "name" == i \
                                                        or "name1" == i \
                                                            or "text-978" == i \
                                                                or "firstname" == i \
                                                                    or "full_name" == i \
                                                                        or "customer_name" == i \
                                                                            or "namae" == i \
                                                                                or "[name]" in i \
                                                                                    or "NAME" == i \
                                                                                        or "kanname" in i \
                                                                                            or "test_name" in i \
                                                                                                or "nama-1" in i \
                                                                                                    or "ip_name" == i \
                                                                                                        or "element-2" in i \
                                                                                                            or "tantou" == i \
                                                                                                                or "author" == i \
                                                                                                                    or "yourname" == i \
                                                                                                                        or "names" == i \
                                                                                                                            or "name_0_1" == i \
                                                                                                                                or "guestName" == i \
                                                                                                                                    or "fullname" == i]
 		           print(Cell_list3)
 		           driver.find_element_by_id(Cell_list3[0]).send_keys(adid.m_textCtrl15.GetValue())
 		           lastcol = len(list(ws3.row_values(k)))
 		           time.sleep(1) 
 		           ws3.update_cell(k, lastcol+1, "氏名")


 		          elif not len([i for i in list_2 if r"user_name" in i \
                          or r"your-name" in i \
                              or "contact_name" in i \
                                  or "名前" in i \
                                      or "f4a6f2b" in i \
                                          or "担当者" in i \
                                              or "氏名" in i \
                                                  or "name" == i \
                                                      or "name1" == i \
                                                          or "text-978" == i \
                                                              or "firstname" == i \
                                                                  or "full_name" == i \
                                                                      or "customer_name" == i \
                                                                          or "namae" == i \
                                                                              or "[name]" in i \
                                                                                  or "NAME" == i \
                                                                                      or "kanname" in i \
                                                                                          or "test_name" in i \
                                                                                              or "nama-1" in i \
                                                                                                  or "ip_name" == i \
                                                                                                      or "element-2" in i \
                                                                                                          or "tantou" == i \
                                                                                                              or "author" == i \
                                                                                                                  or "yourname" == i \
                                                                                                                      or "names" == i \
                                                                                                                          or "name_0_1" == i \
                                                                                                                              or "guestName" == i \
                                                                                                                                  or "fullname" == i]) == 0:
 		           Cell_list3 = [i for i in list_2 if r"user_name" in i \
                            or r"your-name" in i \
                                or "contact_name" in i \
                                    or "名前" in i \
                                        or "f4a6f2b" in i \
                                            or "担当者" in i \
                                                or "氏名" in i \
                                                    or "name" == i \
                                                        or "name1" == i \
                                                            or "text-978" == i \
                                                                or "firstname" == i \
                                                                    or "full_name" == i \
                                                                        or "customer_name" == i \
                                                                            or "namae" == i \
                                                                                or "[name]" in i \
                                                                                    or "NAME" == i \
                                                                                        or "kanname" in i \
                                                                                            or "test_name" in i \
                                                                                                or "nama-1" in i \
                                                                                                    or "ip_name" == i \
                                                                                                        or "element-2" in i \
                                                                                                            or "tantou" == i \
                                                                                                                or "author" == i \
                                                                                                                    or "yourname" == i \
                                                                                                                        or "names" == i \
                                                                                                                            or "name_0_1" == i \
                                                                                                                                or "guestName" == i \
                                                                                                                                    or "fullname" == i]
 		           print(Cell_list3)
 		           driver.find_element_by_name(Cell_list3[0]).send_keys(adid.m_textCtrl15.GetValue())
 		           lastcol = len(list(ws3.row_values(k)))
 		           time.sleep(1) 
 		           ws3.update_cell(k, lastcol+1, "氏名")

 		          elif len([i for i in list_2 if r"user_name" in i \
                      or r"your-name" in i \
                          or "contact_name" in i \
                              or "名前" in i \
                                  or "f4a6f2b" in i \
                                      or "担当者" in i \
                                          or "氏名" in i \
                                              or "name" == i \
                                                  or "name1" == i \
                                                      or "text-978" == i \
                                                          or "firstname" == i \
                                                              or "full_name" == i \
                                                                  or "customer_name" == i \
                                                                      or "namae" == i \
                                                                          or "[name]" in i \
                                                                              or "NAME" == i \
                                                                                  or "kanname" in i \
                                                                                      or "test_name" in i \
                                                                                          or "nama-1" in i \
                                                                                              or "ip_name" == i \
                                                                                                  or "element-2" in i \
                                                                                                      or "tantou" == i \
                                                                                                          or "author" == i \
                                                                                                              or "yourname" == i \
                                                                                                                  or "names" == i \
                                                                                                                      or "name_0_1" == i \
                                                                                                                          or "guestName" == i \
                                                                                                                              or "fullname" == i]) == 0:
 		           Cell_list3 = [i for i in list_2d if r"user_name" in i \
                            or r"your-name" in i \
                                or "contact_name" in i \
                                    or "名前" in i \
                                        or "f4a6f2b" in i \
                                            or "担当者" in i \
                                                or "氏名" in i \
                                                    or "name" == i \
                                                        or "name1" == i \
                                                            or "text-978" == i \
                                                                or "firstname" == i \
                                                                    or "full_name" == i \
                                                                        or "customer_name" == i \
                                                                            or "namae" == i \
                                                                                or "[name]" in i \
                                                                                    or "NAME" == i \
                                                                                        or "kanname" in i \
                                                                                            or "test_name" in i \
                                                                                                or "nama-1" in i \
                                                                                                    or "ip_name" == i \
                                                                                                        or "element-2" in i \
                                                                                                            or "tantou" == i \
                                                                                                                or "author" == i \
                                                                                                                    or "yourname" == i \
                                                                                                                        or "names" == i \
                                                                                                                            or "name_0_1" == i \
                                                                                                                                or "guestName" == i \
                                                                                                                                    or "fullname" == i]
 		           print(Cell_list3)
 		           driver.find_element_by_id(Cell_list3[0]).send_keys(adid.m_textCtrl15.GetValue())
 		           lastcol = len(list(ws3.row_values(k)))
 		           time.sleep(1) 
 		           ws3.update_cell(k, lastcol+1, "氏名")

 		          elif len([i for i in list_2d if r"user_name" in i \
                      or r"your-name" in i \
                          or "名前" in i \
                              or "contact_name" in i \
                                  or "f4a6f2b" in i \
                                      or "担当者" in i \
                                          or "氏名" in i \
                                              or "name" == i \
                                                  or "name1" == i \
                                                      or "text-978" == i \
                                                          or "firstname" == i \
                                                              or "full_name" == i \
                                                                  or "customer_name" == i \
                                                                      or "namae" == i \
                                                                          or "[name]" in i \
                                                                              or "NAME" == i \
                                                                                  or "kanname" in i \
                                                                                      or "test_name" in i \
                                                                                          or "nama-1" in i \
                                                                                              or "ip_name" == i \
                                                                                                  or "element-2" in i \
                                                                                                      or "tantou" == i \
                                                                                                          or "author" == i \
                                                                                                              or "yourname" == i \
                                                                                                                  or "names" == i \
                                                                                                                      or "name_0_1" == i \
                                                                                                                          or "guestName" == i \
                                                                                                                              or "fullname" == i]) == 0:
 		           Cell_list3 = [i for i in list_2c if r"user_name" in i \
                            or r"your-name" in i \
                                or "contact_name" in i \
                                    or "名前" in i \
                                        or "f4a6f2b" in i \
                                            or "担当者" in i \
                                                or "氏名" in i \
                                                    or "name" == i \
                                                        or "name1" == i \
                                                            or "text-978" == i \
                                                                or "firstname" == i \
                                                                    or "full_name" == i \
                                                                        or "customer_name" == i \
                                                                            or "namae" == i \
                                                                                or "[name]" in i \
                                                                                    or "NAME" == i \
                                                                                        or "kanname" in i \
                                                                                            or "test_name" in i \
                                                                                                or "nama-1" in i \
                                                                                                    or "ip_name" == i \
                                                                                                        or "element-2" in i \
                                                                                                            or "tantou" == i \
                                                                                                                or "author" == i \
                                                                                                                    or "yourname" == i \
                                                                                                                        or "names" == i \
                                                                                                                            or "name_0_1" == i \
                                                                                                                                or "guestName" == i \
                                                                                                                                    or "fullname" == i]
 		           print(Cell_list3)
 		           driver.find_elements_by_class_name(list_2c[0])[0].send_keys(adid.m_textCtrl15.GetValue())
 		           lastcol = len(list(ws3.row_values(k)))
 		           time.sleep(1)
 		           ws3.update_cell(k, lastcol+1, "氏名")

#リストインデックスに関するエラー回避                    
 		        except IndexError:
 		           lastcol = len(list(ws3.row_values(k)))                     
 		           ws3.update_cell(k, lastcol+1, "IndexError")


#フルネームふりがな
 		        if len([i for i in list_1 if "ふりがな" in i \
                   or "担当者様名(ふりがな)" in i \
                       or "氏名(かな)" in i \
                           or "名前（ふりがな）" in i \
                             or "担当者様名（ふりがな）" in i \
                               or "担当者名（ふりがな）" in i \
                                 or "担当者名(ふりがな)" in i \
                                     or "氏名（かな）" in i]) == 0 \
                     and len([i for i in items_1 if "ふりがな" in i \
                       or "担当者様名(ふりがな)" in i \
                           or "氏名(かな)" in i \
                               or "名前（ふりがな）" in i \
                                 or "担当者様名（ふりがな）" in i \
                                   or "担当者名（ふりがな）" in i \
                                     or "担当者名(ふりがな)" in i \
                                         or "氏名（かな）" in i]) == 0:
 		         pass
 		        elif not len([i for i in list_1 if "ふりがな" in i \
                         or "担当者様名(ふりがな)" in i \
                             or "氏名(かな)" in i \
                                 or "名前（ふりがな）" in i \
                                   or "担当者名(ふりがな)" in i \
                                     or "担当者様名（ふりがな）" in i \
                                       or "担当者名（ふりがな）" in i \
                                           or "氏名（かな）" in i]) == 0 \
                     or not len([i for i in items_1 if "ふりがな" in i \
                       or "担当者様名(ふりがな)" in i \
                           or "氏名(かな)" in i \
                               or "名前（ふりがな）" in i \
                                 or "担当者様名（ふりがな）" in i \
                                   or "担当者名（ふりがな）" in i \
                                     or "担当者名(ふりがな)" in i \
                                         or "氏名（かな）" in i]) == 0:
 		          if len([i for i in list_2 if "せい" == i \
                     or "めい" == i \
                         or "kana-sei" in i \
                             or "kana-mei" in i]) > 0:
 		           Cell_list5 = [i for i in list_2 if "せい" == i \
                            or "めい" == i \
                                or "kana-sei" in i \
                                    or "kana-mei" in i]
 		           print(Cell_list5)
# 		           for j in range(1,len(Cell_list5)+1):
# 		            print(Cell_list5[j-1])
 		           driver.find_element_by_name(Cell_list5[0]).send_keys(adid.m_textCtrl19.GetValue())
 		           lastcol = len(list(ws3.row_values(k)))
 		           time.sleep(1) 		         		           
 		           ws3.update_cell(k, lastcol+1, adid.m_textCtrl19.GetValue())
 		           driver.find_element_by_name(Cell_list5[1]).send_keys(adid.m_textCtrl20.GetValue())
 		           lastcol = len(list(ws3.row_values(k)))
 		           time.sleep(1) 		         		           
 		           ws3.update_cell(k, lastcol+1, adid.m_textCtrl20.GetValue())         
 		          elif len([i for i in list_2 if "your-kana" in i \
                       or "userKana" in i \
                           or "personal_kana_name" in i \
                               or "name_ruby" in i \
                                   or "ふりがな" == i \
                                       or "phonetic" in i \
                                           or "ご担当者様名(ふりがな)" in i \
                                               or "kana-name" in i \
                                                   or "your-furigana" in i \
                                                       or "kana" == i \
                                                           or "text-145" in i \
                                                               or "お名前（ふりがな）" in i \
                                                                   or "ふりがな(必須)" == i \
                                                                       or "your-name-kana" in i]) > 0:
 		           Cell_list5 = [i for i in list_2 if "your-kana" in i \
                            or "userKana" in i \
                                or "personal_kana_name" in i \
                                    or "name_ruby" in i \
                                        or "ふりがな" == i \
                                            or "phonetic" in i \
                                                or "ご担当者様名(ふりがな)" in i \
                                                    or "kana-name" in i \
                                                        or "your-furigana" in i \
                                                            or "kana" == i \
                                                                or "text-145" in i \
                                                                    or "お名前（ふりがな）" in i \
                                                                        or "ふりがな(必須)" == i \
                                                                            or "your-name-kana" in i]
 		           print(Cell_list5)
 		           driver.find_element_by_name(Cell_list5[0]).send_keys(adid.m_textCtrl18.GetValue())
 		           lastcol = len(list(ws3.row_values(k)))
 		           time.sleep(1) 		         		           
 		           ws3.update_cell(k, lastcol+1, "氏名ふりがな")


#フルネームカタカナ
 		        try:
 		         if not len([i for i in list_1 if "名前（フリガナ）" in i \
                        or "フリガナ" in i \
                            or "名前（カナ）" in i \
                                or "氏名（カナ）" in i \
                                    or "担当者名(フリガナ)" in i \
                                        or "担当者名（フリガナ）" in i]) == 0 \
                      or not len([i for i in items_1 if "名前（フリガナ）" in i \
                                  or "フリガナ" in i \
                                      or "名前（カナ）" in i \
                                          or "氏名（カナ）" in i \
                                              or "担当者名(フリガナ)" in i \
                                                  or "担当者名（フリガナ）" in i]) == 0:
 		            
#（セイ＋メイ）
 		          if len([i for i in list_2 if "セイ" == i \
                     or "メイ" == i \
                         or "firstKanaName" == i \
                             or "lastKanaName" == i \
                                 or "kana_first_name" in i \
                                     or "kana_last_name" in i \
                                         or "furigana" == i \
                                             or "your-frigana" in i \
                                                 or "frigana" == i \
                                                     or "M_furi[0]" == i \
                                                         or "M_furi[1]" == i \
                                                             or "family-name-furi" == i \
                                                                 or "first-name-furi" == i \
                                                                     or "rubysei" == i \
                                                                         or "rubymei" == i]) > 0:
 		           Cell_list5 = [i for i in list_2 if "セイ" == i \
                            or "メイ" == i \
                                or "firstKanaName" == i \
                                    or "lastKanaName" == i \
                                        or "kana_first_name" in i \
                                            or "kana_last_name" in i \
                                                or "furigana" == i \
                                                    or "your-frigana" in i \
                                                        or "frigana" == i \
                                                            or "M_furi[0]" == i \
                                                                or "M_furi[1]" == i \
                                                                    or "family-name-furi" == i \
                                                                        or "first-name-furi" == i \
                                                                            or "rubysei" == i \
                                                                                or "rubymei" == i]
 		           print(Cell_list5)
 		           print(len(Cell_list5))
 		           if len(Cell_list5) > 1:
 		             driver.find_element_by_name(Cell_list5[0]).send_keys(adid.m_textCtrl22.GetValue())
 		             lastcol = len(list(ws3.row_values(k)))
 		             time.sleep(1) 		         		           
 		             ws3.update_cell(k, lastcol+1, adid.m_textCtrl22.GetValue())
 		             driver.find_element_by_name(Cell_list5[1]).send_keys(adid.m_textCtrl23.GetValue())
 		             lastcol = len(list(ws3.row_values(k)))
 		             time.sleep(1) 		         		           
 		             ws3.update_cell(k, lastcol+1, adid.m_textCtrl23.GetValue())

 		           elif len(Cell_list5) == 1:
 		             driver.find_element_by_name(Cell_list5[0]).send_keys(adid.m_textCtrl22.GetValue())
 		             lastcol = len(list(ws3.row_values(k)))
 		             time.sleep(1) 		         		           
 		             ws3.update_cell(k, lastcol+1, adid.m_textCtrl22.GetValue())
 		             driver.find_element_by_name(Cell_list5[0]).send_keys("　" + adid.m_textCtrl23.GetValue())
 		             lastcol = len(list(ws3.row_values(k)))
 		             time.sleep(1) 		         		           
 		             ws3.update_cell(k, lastcol+1, adid.m_textCtrl23.GetValue())

                                        
#（セイメイ）
 		          elif len([i for i in list_2 if "your-kana" in i \
                       or "name_furi" in i \
                                       or "name1-kana" == i \
                                           or "furigana" == i \
                                               or "kana" == i \
                                                   or "NAME_KANA" == i \
                                                       or "furigana-name" == i \
                                                           or "furiname" in i \
                                                               or "nama-2" in i \
                                                                   or "ip_phonetic" == i \
                                                                       or "fname" == i \
                                                                           or "your-name-kana" in i \
                                                                               or "furi" == i \
                                                                                   or "namae2" in i \
                                                                                       or "fname_jpa" in i \
                                                                                           or "kana-name" == i \
                                                                                               or "your-name2" == i \
                                                                                                   or "sub" == i \
                                                                                                       or "name-kana" == i \
                                                                                                           or "name_kana" == i \
                                                                                                               or "nameKana" == i \
                                                                                                                   or "担当者名(フリガナ)" in i \
                                                                                                                       or "フリガナ" in i \
                                                                                                                           and "企業" not in i \
                                                                                                                               and "会社" not in i \
                                                                                                                                   or "input[kana]" == i \
                                                                                                                                       or "your-name-furigana" == i]) > 0:
 		           Cell_list5 = [i for i in list_2 if "your-kana" in i \
                            or "name_furi" in i \
                                            or "name1-kana" == i \
                                                or "furigana" == i \
                                                    or "kana" == i \
                                                        or "NAME_KANA" == i \
                                                            or "furigana-name" == i \
                                                                or "furiname" in i \
                                                                    or "nama-2" in i \
                                                                        or "ip_phonetic" == i \
                                                                            or "fname" == i \
                                                                                or "your-name-kana" in i \
                                                                                    or "furi" == i \
                                                                                        or "namae2" in i \
                                                                                            or "fname_jpa" in i \
                                                                                                or "kana-name" == i \
                                                                                                    or "your-name2" == i \
                                                                                                        or "sub" == i \
                                                                                                            or "name-kana" == i \
                                                                                                                or "name_kana" == i \
                                                                                                                    or "nameKana" == i \
                                                                                                                        or "担当者名(フリガナ)" in i \
                                                                                                                            or "フリガナ" in i \
                                                                                                                                and "企業" not in i \
                                                                                                                                    and "会社" not in i \
                                                                                                                                        or "input[kana]" == i \
                                                                                                                                            or "your-name-furigana" == i]
 		           print(Cell_list5)
 		           driver.find_element_by_name(Cell_list5[0]).clear()
 		           driver.find_element_by_name(Cell_list5[0]).send_keys(adid.m_textCtrl21.GetValue())
 		           lastcol = len(list(ws3.row_values(k)))
 		           time.sleep(1) 		         		           
 		           ws3.update_cell(k, lastcol+1, "氏名フリガナ")

#リストインデックスに関するエラー回避                    
 		        except IndexError:
 		           lastcol = len(list(ws3.row_values(k)))                     
 		           ws3.update_cell(k, lastcol+1, "IndexError")


#住所入力
 		        try:
                     
#「都道府県（ドロップダウン選択）」～「建物」がテキストに含まれる
 		         SELECT_list1 = []
 		         SELECT_list2 = []
 		         for element in soup.find_all("option"): 
 		           		          SELECT_list1.append(element.get("value"))
 		           		          SELECT_list2.append(element.getText())
 		         SELECT_list1 =[i for i in SELECT_list1 if i is not None]
 		         print(SELECT_list1)
 		         SELECT_list2 =[i for i in SELECT_list2 if i is not None]
 		         print(SELECT_list2)

 		         if not len([i for i in SELECT_list1 if "東京都" in i]) == 0 \
                              or len([i for i in SELECT_list2 if "都道府県" in i]) > 0:
 		             list_6 = []
 		             for element5 in soup.find_all("select"):
 		           		          list_6.append(element5.get("name"))
 		             list_6 =[i for i in list_6 if i is not None]
 		             print(list_6)
 		             list_7 = []
 		             for element5 in soup.find_all("select"):
 		           		          list_7.append(element5.get("id"))
 		             list_7 =[i for i in list_7 if i is not None]
 		             print(list_7)

 		             if len([i for i in items_1 if "都道府県" in i]) > 0 \
 		           		            or not len(list_6) == 0:
 		              list_6 = [i for i in list_6 if "pref" in i \
                           or "都道府県" in i \
                               or "address1" == i \
                                   or "area" in i \
                                       or "todouhuken" in i \
                                           or "todoufuken" in i \
                                               or "todofuken" in i \
                                                   or "state" in i]
 		           		             
 		              if not list_6 == []: 		              
 		           		          print(list_6[0])
 		           		          dropdown = driver.find_element_by_name(list_6[0])
 		           		          select = Select(dropdown)
 		           		          if len([i for i in SELECT_list1 if "13" in i]) > 0:
 		           		            SELECT_list3 = [i for i in SELECT_list1 if "13" in i]
 		           		            print(SELECT_list3)
 		           		            select.select_by_value(SELECT_list3[0])
 		           		            lastcol = len(list(ws3.row_values(k)))    
 		           		            time.sleep(1) 		           		             
 		           		            ws3.update_cell(k, lastcol+1, SELECT_list3[0])

 		           		          else:
 		           		            SELECT_list3 = [i for i in SELECT_list1 if adid.m_comboBox6.GetValue() in i]
# 		           		          SELECT_list3 = [i for i in SELECT_list1 if ws2.cell(5, 2).value in i]
 		           		            print(SELECT_list3)
 		           		            select.select_by_value(SELECT_list3[0])
 		           		            lastcol = len(list(ws3.row_values(k)))    
 		           		            time.sleep(1) 		           		             
 		           		            ws3.update_cell(k, lastcol+1, SELECT_list3[0])
 		           		          
#（郵便番号入力欄１個）
 		           		          if len([i for i in list_1 if "住所" in i]) > 0 \
 		           		            and len([i for i in list_2 if "郵便番号" in i \
                                     or "your-post" in i \
                                         or "zip" in i \
                                             or "code" in i \
                                                 or "postal" in i]) == 1:
 		           		            Cell_list6 = [i for i in list_2 if "郵便番号" in i \
                                          or "your-post" in i \
                                              or "zip" in i \
                                                  or "code" in i \
                                                      or "postal" in i]
 		           		            print(Cell_list6)
 		           		            driver.find_element_by_name(Cell_list6[0]).send_keys(adid.m_textCtrl28.GetValue() + adid.m_textCtrl29.GetValue())
 		           		            lastcol = len(list(ws3.row_values(k)))
 		           		            time.sleep(1)
 		           		            ws3.update_cell(k, lastcol+1, "郵便番号")

#（都道府県を除く住所）
 		           		            if len([i for i in items_1 if "建物" in i \
 		           		           		          or "ビル" in i \
 		           		           		              or "アパート" in i]) == 0 \
                                            or len([i for i in list_1 if "建物" in i \
     		           		           		          or "ビル" in i \
     		           		           		              or "アパート" in i]) == 0:
 		           		             Cell_list7 = [i for i in list_2 if "city" == i \
                                           or "address" == i \
                                               or "address2" in i \
                                                   or "住所" in i \
                                                       or "建物" in i \
                                                           or "address_city" in i \
                                                               or "address_number" in i \
                                                                   or "address_build" in i \
                                                                       or "市区町村" in i \
                                                                           or "番地" in i \
                                                                               or "jyusyo" in i \
                                                                                   or "jyusho" in i \
                                                                                       or "addr" == i \
                                                                                           or "jusho" == i \
                                                                                               or "市町村" in i \
                                                                                                   or "sumai" in i]
 		           		             print(Cell_list7)

 		           		             try:
                                             
#（市町村名・番地欄が別々）                                                             
 		           		              if len(Cell_list7) == 2:
#                                             and len(list_6) == 1 \
#                                                 or len(list_7) == 1:

 		           		           		          driver.find_element_by_name(Cell_list7[0]).clear()
 		           		           		          driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_textCtrl30.GetValue())
 		           		           		          lastcol = len(list(ws3.row_values(k)))
 		           		           		          time.sleep(1) 		           		             
 		           		           		          ws3.update_cell(k, lastcol+1, "市区町村")
 		           		           		          driver.find_element_by_name(Cell_list7[1]).send_keys(adid.m_textCtrl31.GetValue())
 		           		           		          lastcol = len(list(ws3.row_values(k)))
 		           		           		          time.sleep(1) 		           		             
 		           		           		          ws3.update_cell(k, lastcol+1, "番地")

# 		           		              elif len(Cell_list7) == 2 \
#                                             and len(list_6) == 0 \
#                                                 or len(list_7) == 0:                                                     
# 		           		           		          driver.find_element_by_name(Cell_list7[0]).clear()
# 		           		           		          driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_textCtrl30.GetValue())
# 		           		           		          driver.find_element_by_name(Cell_list7[1]).send_keys(adid.m_textCtrl31.GetValue())
                                             
#（市区町村＋番地）
 		           		              elif len(Cell_list7) == 1:
#                                             and len(list_6) == 1 \
#                                                 or len(list_7) == 1:
 		           		           		          driver.find_element_by_name(Cell_list7[0]).clear()
 		           		           		          driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                            + adid.m_textCtrl31.GetValue() \
                                                                                                + adid.m_textCtrl32.GetValue())
 		           		           		          lastcol = len(list(ws3.row_values(k)))
 		           		           		          time.sleep(1) 		           		             
 		           		           		          ws3.update_cell(k, lastcol+1, "市区町村番地")

# 		           		              elif len(Cell_list7) == 1 \
#                                             and len(list_6) == 0 \
#                                                 or len(list_7) == 0:
# 		           		           		          driver.find_element_by_name(Cell_list7[0]).clear()
# 		           		           		          driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_textCtrl30.GetValue() \
#                                                                                            + adid.m_textCtrl31.GetValue() \
#                                                                                                + adid.m_textCtrl32.GetValue())
#（建物名・号室）
# 		           		           		          driver.find_element_by_name(Cell_list7[1]).send_keys(adid.m_textCtrl32.GetValue())

 		           		              elif len(Cell_list7) == 3:
 		           		           		          driver.find_element_by_name(Cell_list7[0]).clear()
#（市町村名）
 		           		           		          driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_textCtrl30.GetValue())
 		           		           		          lastcol = len(list(ws3.row_values(k)))
 		           		           		          time.sleep(1) 		           		             
 		           		           		          ws3.update_cell(k, lastcol+1, "市区町村")

#（町域・番地）
 		           		           		          driver.find_element_by_name(Cell_list7[1]).send_keys(adid.m_textCtrl31.GetValue())
 		           		           		          lastcol = len(list(ws3.row_values(k)))
 		           		           		          time.sleep(1) 		           		             
 		           		           		          ws3.update_cell(k, lastcol+1, "番地")

#（建物名・号室）
 		           		           		          driver.find_element_by_name(Cell_list7[2]).send_keys(adid.m_textCtrl32.GetValue())
 		           		           		          lastcol = len(list(ws3.row_values(k)))
 		           		           		          time.sleep(1) 		           		             
 		           		           		          ws3.update_cell(k, lastcol+1, "建物名")

#操作できない要素の回避
 		           		             except ElementNotInteractableException:
 		           		               pass


 		           		          elif len([i for i in items_1 if "建物" in i \
 		           		           		          or "ビル" in i \
 		           		           		              or "アパート" in i \
                                                                 or "市町村" in i \
                                                                     or "市区町村" in i \
                                                                         or "番地" in i]) == 0 \
                                            or len([i for i in list_1 if "建物" in i \
    		           		           		          or "ビル" in i \
    		           		           		              or "アパート" in i \
                                                                    or "市町村" in i \
                                                                        or "市区町村" in i \
                                                                            or "番地" in i]) == 0:
 		           		             Cell_list7 = [i for i in list_2 if "address" == i \
                                           or "address2" in i \
                                               or "住所" in i \
                                                   and "必須" not in i \
                                                       or "建物" in i \
                                                           or "jusho" == i \
                                                               or "市町村" in i \
                                                                   or "市区町村" in i \
                                                                       and "必須" not in i \
                                                                           or "番地" in i \
                                                                               and "必須" not in i]
 		           		             print(Cell_list7)
 		           		             if len(Cell_list7) == 1:
 		           		           		          driver.find_element_by_name(Cell_list7[0]).clear()
 		           		           		          driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                            + adid.m_textCtrl31.GetValue() \
                                                                                                + adid.m_textCtrl32.GetValue())
 		           		             elif len(Cell_list7) == 2 \
                                             or len([i for i in Cell_list7 if "市町村" in i \
                                                                       or "市区町村" in i \
                                                                           and "必須" not in i \
                                                                               or "番地" in i \
                                                                                   and "必須" not in i]) == 2:
 		           		           		          driver.find_element_by_name(Cell_list7[0]).clear()        
#（市区町村名）
 		           		           		          driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_textCtrl30.GetValue())
#（丁目番地）
 		           		           		          driver.find_element_by_name(Cell_list7[1]).send_keys(adid.m_textCtrl31.GetValue())
                                                         
 		           		             else:
 		           		           		          driver.find_element_by_name(Cell_list7[0]).clear()
#（市町村名・番地）
 		           		           		          driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                            + adid.m_textCtrl31.GetValue())
#（建物名・号室）
 		           		           		          driver.find_element_by_name(Cell_list7[1]).send_keys(adid.m_textCtrl32.GetValue())


#パターン追加（2022.01.24）※郵便番号入力欄無し
 		           		          elif not len([i for i in items_1 if "建物" in i \
 		           		           		          or "ビル" in i \
 		           		           		              or "アパート" in i \
                                                                 or "市町村" in i \
                                                                     or "市区町村" in i \
                                                                         or "番地" in i]) == 0 \
                                            or not len([i for i in list_1 if "建物" in i \
    		           		           		          or "ビル" in i \
    		           		           		              or "アパート" in i \
                                                                    or "市町村" in i \
                                                                        or "市区町村" in i \
                                                                            or "番地" in i]) == 0:
 		           		             Cell_list7 = [i for i in list_2 if "address" == i \
                                           or "address2" in i \
                                               or "住所" in i \
                                                   and "必須" not in i \
                                                       or "建物" in i \
                                                           or "jusho" == i \
                                                               or "市町村" in i \
                                                                   or "市区町村" in i \
                                                                       and "必須" not in i \
                                                                           or "番地" in i \
                                                                               and "必須" not in i]
 		           		             print(Cell_list7)
 		           		             if len(Cell_list7) == 1:
 		           		           		          driver.find_element_by_name(Cell_list7[0]).clear()
 		           		           		          driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                            + adid.m_textCtrl31.GetValue() \
                                                                                                + adid.m_textCtrl32.GetValue())
 		           		             elif len(Cell_list7) == 2 \
                                             or len([i for i in Cell_list7 if "市町村" in i \
                                                                       or "市区町村" in i \
                                                                           and "必須" not in i \
                                                                               or "番地" in i \
                                                                                   and "必須" not in i]) == 2:
 		           		           		          driver.find_element_by_name(Cell_list7[0]).clear()        
#（市区町村名）
 		           		           		          driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_textCtrl30.GetValue())
#（丁目番地）
 		           		           		          driver.find_element_by_name(Cell_list7[1]).send_keys(adid.m_textCtrl31.GetValue())
                                                         
 		           		             else:
 		           		           		          driver.find_element_by_name(Cell_list7[0]).clear()
#（市町村名・番地）
 		           		           		          driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_textCtrl30.GetValue() \
                                                                                            + adid.m_textCtrl31.GetValue())
#（建物名・号室）
 		           		           		          driver.find_element_by_name(Cell_list7[1]).send_keys(adid.m_textCtrl32.GetValue())

#住所（郵便番号＋都道府県＋市区町村＋建物名）
# 		         elif len([i for i in list_1 if "郵便番号" in i \
#                      and "住所" in i \
#                          or "都道府県" in i \
#                              or "所在地" in i]) == 0 \
#                      or len([i for i in items_1 if "郵便番号" in i \
#                          and "住所" in i \
#                              or "都道府県" in i \
#                                  or "所在地" in i]) == 0 \
#                          and len([i for i in list_2 if "郵便番号" in i \
#                                   or "your-post" in i \
#                                       or "zip" in i \
#                                           or "code" in i \
#                                               or "postal" in i \
#                                                   or "address" in i \
#                                                       or "city" in i \
#                                                           or "jyusho" == i \
#                                                               or "jyusyo" == i \
#                                                                   or "M_address" == i \
#                                                                       or "addr" == i \
#                                                                           or "住所" in i \
#                                                                               or "jusho" == i \
#                                                                                   or "所在地" in i]) == 0 \
#                          and len([i for i in list_2d if "郵便番号" in i \
#                              or "your-post" in i \
#                                  or "zip" in i \
#                                      or "code" in i \
#                                          or "postal" in i \
#                                 or "address" in i \
#                                     or "city" in i \
#                                         or "jyusho" == i \
#                                             or "jyusyo" == i \
#                                                 or "M_address" == i \
#                                                     or "addr" == i \
#                                                         or "住所" in i \
#                                                             or "jusho" == i \
#                                                                 or "所在地" in i]) == 0:
# 		             lastcol = len(list(ws3.row_values(k)))
# 		             time.sleep(1) 
# 		             ws3.update_cell(k, lastcol+1, "住所入力欄なし")

#（郵便番号入力から開始）
 		         elif not len([i for i in list_1 if "郵便番号" in i \
                      and "住所" in i \
                          or "都道府県" in i \
                              or "所在地" in i]) == 0 \
                      or not len([i for i in items_1 if "郵便番号" in i \
                         and "住所" in i \
                             or "都道府県" in i \
                                 or "所在地" in i]) == 0 \
                      or len([i for i in list_2 if "郵便番号" in i \
                          or "your-post" in i \
                              or "zip" in i \
                                  or "code" in i \
                                      or "postal" in i]) > 0:
 		            Cell_list6 = [i for i in list_2 if "郵便番号" in i \
                             or "your-post" in i \
                                 or "zip" in i \
                                     or "code" in i \
                                         or "postal" in i]
 		            print(Cell_list6)
 		            print(len(Cell_list6))
 		            if len(Cell_list6) == 1:
 		             driver.find_element_by_name(Cell_list6[0]).send_keys(adid.m_textCtrl28.GetValue() + adid.m_textCtrl29.GetValue())
 		             lastcol = len(list(ws3.row_values(k)))
 		             time.sleep(1) 		           		             
 		             ws3.update_cell(k, lastcol+1, "郵便番号")

 		            elif len(Cell_list6) > 1:
# 		           		          for j in range(1,len(Cell_list6)+1):
 		           		           driver.find_element_by_name(Cell_list6[0]).send_keys(adid.m_textCtrl28.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_textCtrl28.GetValue())
 		           		           driver.find_element_by_name(Cell_list6[1]).send_keys(adid.m_textCtrl29.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_textCtrl29.GetValue())
 		           		           		           
 		            if len([i for i in items_1 if "住所" in i \
                         or "所在地" in i]) > 0 \
                         or len([i for i in list_1 if "住所" in i \
                             or "所在地" in i]) > 0 \
                             and len([i for i in list_2 if "address" in i \
                                 or "city" in i \
                                     or "jyusho" == i \
                                         or "jyusyo" == i \
                                             or "M_address" == i \
                                                 or "addr" == i \
                                                     or "住所" in i \
                                                         or "jusho" == i \
                                                             or "所在地" in i \
                                                                 or "都道府県" in i \
                                                                     or "市区町村" in i \
                                                                         or "番地" in i \
                                                                             or "建物" in i \
                                                                                 or "sumai" in i]) > 0:
 		             Cell_list6 = [i for i in list_2 if "address" in i \
                              or "city" in i \
                                  or "jyusho" == i \
                                      or "jyusyo" == i \
                                          or "M_address" == i \
                                              or "addr" == i \
                                                  or "住所" in i \
                                                      or "jusho" == i \
                                                          or "所在地" in i \
                                                              or "都道府県" in i \
                                                                  or "市区町村" in i \
                                                                      or "番地" in i \
                                                                          or "建物" in i \
                                                                              or "sumai" in i]
 		             print(Cell_list6)
 		             
#郵便番号以降の住所入力が連番（0～4）
 		             if len([i for i in Cell_list6 if "0" in i \
                        or "1" in i \
                            or "2" in i \
                                or "3" in i \
                                    or "4" in i]) > 0:
 		              Cell_list7 =[i for i in Cell_list6 if "1" in i \
                              or "2" in i \
                                  or "3" in i \
                                      or "4" in i]
 		              print(Cell_list7)
 		              if len([i for i in list_1 if "都道府県" in i]) == 0 \
                            and not len([i for i in list_1 if "建物名" in i]) == 0 \
                                or len([i for i in items_1 if "都道府県" in i]) == 0 \
                                    and not len([i for i in items_1 if "建物名" in i]) == 0 \
                                and len(Cell_list6) == 2:
 		           		           print(len(Cell_list6))
 		           		           driver.find_element_by_name(Cell_list6[0]).send_keys(adid.m_comboBox6.GetValue() \
                                                                                + adid.m_textCtrl30.GetValue() \
                                                                                    + adid.m_textCtrl31.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_comboBox6.GetValue() \
                                                                                + adid.m_textCtrl30.GetValue() \
                                                                                    + adid.m_textCtrl31.GetValue())
 		           		           driver.find_element_by_name(Cell_list6[1]).send_keys(adid.m_textCtrl32.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_textCtrl32.GetValue())                                       
 		              elif len([i for i in items_1 if "マンション" in i \
                         or "ビル" in i \
                             or "建物名" in i]) > 0 \
                           or len([i for i in list_1 if "マンション" in i \
                            or "ビル" in i \
                                or "建物名" in i]) > 0 \
                               and len(Cell_list7) > 3:
 		           		           print(Cell_list7)
 		           		           driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_comboBox6.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_comboBox6.GetValue())
 		           		           driver.find_element_by_name(Cell_list7[1]).send_keys(adid.m_textCtrl30.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_textCtrl30.GetValue())
 		           		           driver.find_element_by_name(Cell_list7[2]).send_keys(adid.m_textCtrl31.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_textCtrl31.GetValue())
 		           		           driver.find_element_by_name(Cell_list7[len(Cell_list7)+1]).send_keys(adid.m_textCtrl32.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_textCtrl32.GetValue())
 		              elif len([i for i in items_1 if "マンション" in i \
                         or "ビル" in i \
                             or "建物名" in i]) > 0 \
                           or len([i for i in list_1 if "マンション" in i \
                            or "ビル" in i \
                                or "建物名" in i]) > 0 \
                               and len(Cell_list7) == 2:
 		           		           driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_comboBox6.GetValue() \
                                                                                + adid.m_textCtrl30.GetValue() \
                                                                                    + adid.m_textCtrl31.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_comboBox6.GetValue() \
                                                                                + adid.m_textCtrl30.GetValue() \
                                                                                    + adid.m_textCtrl31.GetValue())
 		           		           driver.find_element_by_name(Cell_list7[1]).send_keys(adid.m_textCtrl32.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_textCtrl32.GetValue())
 		              else:
 		                print(list_14sc)
 		                if not len([i for i in list_14sc if "町名まで" in i \
                                   or "番地以下" in i]) == 0:
      		           		     driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_comboBox6.GetValue() \
                                                                                     + adid.m_textCtrl30.GetValue())
      		           		     lastcol = len(list(ws3.row_values(k)))
      		           		     time.sleep(1)
      		           		     ws3.update_cell(k, lastcol+1, adid.m_comboBox6.GetValue() \
                                                + adid.m_textCtrl30.GetValue())
      		           		     driver.find_element_by_name(Cell_list7[1]).send_keys(adid.m_textCtrl31.GetValue() \
                                                                                     + adid.m_textCtrl32.GetValue())
      		           		     lastcol = len(list(ws3.row_values(k)))
      		           		     time.sleep(1)
      		           		     ws3.update_cell(k, lastcol+1, adid.m_textCtrl31.GetValue() \
                                                + adid.m_textCtrl32.GetValue())

 		                else:
 		           		           driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_comboBox6.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_comboBox6.GetValue())
 		           		           driver.find_element_by_name(Cell_list7[1]).send_keys(adid.m_textCtrl30.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_textCtrl30.GetValue())
 		           		           driver.find_element_by_name(Cell_list7[2]).send_keys(adid.m_textCtrl31.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_textCtrl31.GetValue())


#郵便番号以降の住所入力が連番でない（値：都道府県・市区町村・建物名毎）

#（「都道府県」～「建物」の全てがテキストに含まれない）
 		             elif len([i for i in list_1 if "都道府県" in i \
                          or "市区町村" in i \
                              or "番組" in i \
                                  or "建物" in i]) == 0 \
                               or len([i for i in items_1 if "都道府県" in i \
                                   or "市区町村" in i \
                                       or "番組" in i \
                                           or "建物" in i]) == 0 \
                                   and len([i for i in Cell_list6 if "0" in i or "1" in i]) == 0 \
                                       and len([i for i in list_2 if "build" in i \
                                                or "address_name" in i \
                                                    or "ビル名" in i \
                                                        or "pref" in i \
                                                            or "area" in i \
                                                                or "todouhuken" in i \
                                                                    or "todoufuken" in i \
                                                                        or "todofuken" in i]) == 0:
 		              print(Cell_list6)
 		              Municipal = driver.find_element_by_name(Cell_list6[0])
 		              Municipal.clear()
 		              Municipal.send_keys(adid.m_comboBox6.GetValue() \
                                     + adid.m_textCtrl30.GetValue() \
                                         + adid.m_textCtrl31.GetValue() \
                                             + adid.m_textCtrl32.GetValue())
 		              lastcol = len(list(ws3.row_values(k)))
 		              time.sleep(1) 		           		             
 		              ws3.update_cell(k, lastcol+1, "住所")


 		             elif len([i for i in Cell_list6 if "0" in i or "1" in i]) == 0 \
                          and len([i for i in list_1 if "都道府県" in i]) > 0 \
                              or len([i for i in items_1 if "都道府県" in i]) > 0 \
                              and len([i for i in list_2 if "pref" in i \
                                       or "area" in i \
                                           or "todouhuken" in i \
                                               or "todoufuken" in i \
                                                   or "todofuken" in i \
                                                       or "都道府県" in i]) > 0:
 		              Cell_list5 = [i for i in list_2 if "pref" in i \
                               or "area" in i \
                                   or "todouhuken" in i \
                                       or "todoufuken" in i \
                                           or "todofuken" in i \
                                               or "都道府県" in i]
 		              print(Cell_list5)
 		              pref = driver.find_element_by_name(Cell_list5[0])
 		              pref.clear()
 		              pref.send_keys(adid.m_comboBox6.GetValue())
 		              lastcol = len(list(ws3.row_values(k)))
 		              time.sleep(1) 		           		             
 		              ws3.update_cell(k, lastcol+1, "都道府県")
 		              print(Cell_list6)
                       
 		              if len(Cell_list6) == 1:
 		                Municipal = driver.find_element_by_name(Cell_list6[0])
 		                Municipal.clear()
 		                Municipal.send_keys(adid.m_textCtrl30.GetValue() \
                                         + adid.m_textCtrl31.GetValue() \
                                             + adid.m_textCtrl32.GetValue())
 		                lastcol = len(list(ws3.row_values(k)))
 		                time.sleep(1) 		           		             
 		                ws3.update_cell(k, lastcol+1, "住所")

#都道府県名以外（市区町村＋番地＋建物）
 		              elif len(Cell_list6) == 4:
 		                Municipal = driver.find_element_by_name(Cell_list6[1])
 		                Municipal.clear()
 		                Municipal.send_keys(adid.m_textCtrl30.GetValue())
 		                lastcol = len(list(ws3.row_values(k)))
 		                time.sleep(1) 		           		             
 		                ws3.update_cell(k, lastcol+1, "市区町村")
 		                Address_name = driver.find_element_by_name(Cell_list6[2])
 		                Address_name.clear()
 		                Address_name.send_keys(adid.m_textCtrl31.GetValue())
 		                lastcol = len(list(ws3.row_values(k)))
 		                time.sleep(1) 		           		             
 		                ws3.update_cell(k, lastcol+1, "番地")
 		                Building = driver.find_element_by_name(Cell_list6[3])
 		                Building.clear()
 		                Building.send_keys(adid.m_textCtrl32.GetValue())
 		                lastcol = len(list(ws3.row_values(k)))
 		                time.sleep(1) 		           		             
 		                ws3.update_cell(k, lastcol+1, "建物")


#郵便番号以降の住所入力が連番でない（値：都道府県含む住所・建物名別）
 		             elif len([i for i in list_2 if "build" in i \
                          or "address_name" in i \
                              or "ビル名" in i]) > 0:
 		           		            driver.find_element_by_name(Cell_list6[0]).send_keys(adid.m_comboBox6.GetValue() \
                                     + adid.m_textCtrl30.GetValue() \
                                         + adid.m_textCtrl31.GetValue())
 		           		            lastcol = len(list(ws3.row_values(k)))
 		           		            time.sleep(1) 		           		             
 		           		            ws3.update_cell(k, lastcol+1, "住所")                                            
 		           		            Cell_list7 = [i for i in list_2 if "build" in i \
                                      or "address_name" in i \
                                          or "ビル名" in i]
 		           		            print(Cell_list7)
 		           		            driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_textCtrl32.GetValue())
 		           		            lastcol = len(list(ws3.row_values(k)))
 		           		            time.sleep(1) 		           		             
 		           		            ws3.update_cell(k, lastcol+1, "建物名")



#（都道府県＋市区町村）
 		             elif len([i for i in Cell_list6 if "0" in i or "1" in i]) == 0 \
                           and len([i for i in items_1 if "都道府県" in i]) > 0 \
                               and len([i for i in items_1 if "市区町村" in i \
                                        and "市区町村" in i]) > 0:
 		           		             Municipal = driver.find_element_by_name(Cell_list6[0])
 		           		             Municipal.clear()
 		           		             Municipal.send_keys(adid.m_textCtrl30.GetValue() + adid.m_textCtrl31.GetValue())
 		           		             lastcol = len(list(ws3.row_values(k)))
 		           		             time.sleep(1) 		           		             
 		           		             ws3.update_cell(k, lastcol+1, "市区町村")

#（都道府県＋市区町村＋建物）
 		           		             if len([i for i in Cell_list6 if "0" in i or "1" in i]) == 0 \
                                             and len([i for i in items_1 if "都道府県" in i]) > 0 \
                                                 and len([i for i in items_1 if "市区町村" in i \
                                                          and "市区町村" in i]) > 0 \
                                                     and len([i for i in items_1 if "ビル" in i \
                                                              or "建物" in i \
                                                                  or "マンション" in i]) > 0:
 		           		              Cell_list7 = [i for i in list_2 if "build" in i \
                                            or "address_name" in i]
 		           		              Building = driver.find_element_by_name(Cell_list7[0])
 		           		              Building.clear()   
 		           		              Building.send_keys(adid.m_textCtrl32.GetValue())
 		           		              lastcol = len(list(ws3.row_values(k)))
 		           		              time.sleep(1) 		           		             
 		           		              ws3.update_cell(k, lastcol+1, "建物名")
 		           		             
#（都道府県入力から開始）
 		         elif len([i for i in items_1 if "都道府県" in i \
                       or "住所" in i \
                           or "所在地" in i]) > 0 \
                      or len([i for i in list_1 if "都道府県" in i \
                           or "住所" in i \
                               or "所在地" in i]) > 0:
 		            Cell_list6 = [i for i in list_2 if "都道府県" in i \
                             or "your-address" in i \
                                 or "your-add" in i \
                                     or "jyusho" == i \
                                         or "jyusyo" == i \
                                             or "M_address" == i \
                                                 or "text-727" == i \
                                                     or "addr" == i \
                                                         or "住所" in i \
                                                             or "所在地" in i \
                                                                 or "address" in i \
                                                                     or "sumai" in i]
 		            Cell_list7 = [i for i in list_2d if "都道府県" in i \
                             or "your-address" in i \
                                 or "your-add" in i \
                                     or "jyusho" == i \
                                         or "jyusyo" == i \
                                             or "M_address" == i \
                                                 or "text-727" == i \
                                                     or "addr" == i \
                                                         or "住所" in i \
                                                             or "所在地" in i \
                                                                 or "address" in i \
                                                                     or "sumai" in i]
 		            print(Cell_list6)
 		            print(Cell_list7)
 		            if len(Cell_list6) > 0:
 		              if len([i for i in Cell_list6 if "0" in i or "1" in i]) > 0:
 		               Cell_list7 =[i for i in Cell_list6 if "1" in i \
                             or "2" in i \
                                 or "3" in i \
                                     or "4" in i]
 		               print(Cell_list7)
 		               if len(Cell_list7) == 2:
 		           		                driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_comboBox6.GetValue()
                                                                                   + adid.m_textCtrl30.GetValue())
 		           		                driver.find_element_by_name(Cell_list7[1]).send_keys(adid.m_textCtrl31.GetValue()
                                                                                   + adid.m_textCtrl32.GetValue())
 		           		                lastcol = len(list(ws3.row_values(k)))
 		           		                time.sleep(1) 		           		               
 		           		                ws3.update_cell(k, lastcol+1, "住所")
 		               elif len(Cell_list7) > 2:
 		           		           driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_comboBox6.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_comboBox6.GetValue())
 		           		           driver.find_element_by_name(Cell_list7[1]).send_keys(adid.m_textCtrl30.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_textCtrl30.GetValue())
 		           		           driver.find_element_by_name(Cell_list7[2]).send_keys(adid.m_textCtrl31.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_textCtrl31.GetValue())
 		           		           driver.find_element_by_name(Cell_list7[3]).send_keys(adid.m_textCtrl32.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_textCtrl32.GetValue())


 		              elif len([i for i in list_2 if "build" in i \
                         or "address_name" in i \
                             or "ビル名" in i]) > 0:
 		           		              driver.find_element_by_name(Cell_list6[0]).send_keys(adid.m_comboBox6.GetValue() \
                                     + adid.m_textCtrl30.GetValue() \
                                         + adid.m_textCtrl31.GetValue())
 		           		              lastcol = len(list(ws3.row_values(k)))
 		           		              time.sleep(1) 		           		               
 		           		              ws3.update_cell(k, lastcol+1, "住所")                                            
 		           		              Cell_list7 = [i for i in list_2 if "build" in i \
                                      or "address_name" in i \
                                          or "ビル名" in i]
 		           		              print(Cell_list7)
 		           		              driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_textCtrl32.GetValue())
 		           		              lastcol = len(list(ws3.row_values(k)))
 		           		              time.sleep(1) 		           		               
 		           		              ws3.update_cell(k, lastcol+1, "建物名")

 		              else:
 		           		              driver.find_element_by_name(Cell_list6[0]).send_keys(adid.m_comboBox6.GetValue() \
                                     + adid.m_textCtrl30.GetValue() \
                                         + adid.m_textCtrl31.GetValue() \
                                             + adid.m_textCtrl32.GetValue())
 		           		              lastcol = len(list(ws3.row_values(k)))
 		           		              time.sleep(1) 		           		               
 		           		              ws3.update_cell(k, lastcol+1, "住所")

#パターン追加（2021.12.22）
#id値でスクレイピング
 		            elif len(Cell_list7) > 0:
 		              if len([i for i in Cell_list7 if "0" in i or "1" in i]) > 0:
 		               Cell_list8 =[i for i in Cell_list7 if "1" in i \
                             or "2" in i \
                                 or "3" in i \
                                     or "4" in i]
 		               print(Cell_list8)
 		               if len(Cell_list8) == 2:
 		           		                driver.find_element_by_id(Cell_list8[0]).send_keys(adid.m_comboBox6.GetValue()
                                                                                   + adid.m_textCtrl30.GetValue())
 		           		                driver.find_element_by_id(Cell_list8[1]).send_keys(adid.m_textCtrl31.GetValue()
                                                                                   + adid.m_textCtrl32.GetValue())
 		           		                lastcol = len(list(ws3.row_values(k)))
 		           		                time.sleep(1) 		           		               
 		           		                ws3.update_cell(k, lastcol+1, "住所")
 		               elif len(Cell_list8) > 2:
 		           		           driver.find_element_by_id(Cell_list8[0]).send_keys(adid.m_comboBox6.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_comboBox6.GetValue())
 		           		           driver.find_element_by_id(Cell_list8[1]).send_keys(adid.m_textCtrl30.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_textCtrl30.GetValue())
 		           		           driver.find_element_by_id(Cell_list8[2]).send_keys(adid.m_textCtrl31.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_textCtrl31.GetValue())
 		           		           driver.find_element_by_id(Cell_list8[3]).send_keys(adid.m_textCtrl32.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1)
 		           		           ws3.update_cell(k, lastcol+1, adid.m_textCtrl32.GetValue())


 		              elif len([i for i in list_2 if "build" in i \
                         or "address_name" in i \
                             or "ビル名" in i]) > 0:
 		           		              driver.find_element_by_id(Cell_list6[0]).send_keys(adid.m_comboBox6.GetValue() \
                                     + adid.m_textCtrl30.GetValue() \
                                         + adid.m_textCtrl31.GetValue())
 		           		              lastcol = len(list(ws3.row_values(k)))
 		           		              time.sleep(1) 		           		               
 		           		              ws3.update_cell(k, lastcol+1, "住所")                                            
 		           		              Cell_list8 = [i for i in list_2 if "build" in i \
                                      or "address_name" in i \
                                          or "ビル名" in i]
 		           		              print(Cell_list8)
 		           		              driver.find_element_by_id(Cell_list8[0]).send_keys(adid.m_textCtrl32.GetValue())
 		           		              lastcol = len(list(ws3.row_values(k)))
 		           		              time.sleep(1) 		           		               
 		           		              ws3.update_cell(k, lastcol+1, "建物名")

 		              else:
 		           		              driver.find_element_by_id(Cell_list7[0]).send_keys(adid.m_comboBox6.GetValue() \
                                     + adid.m_textCtrl30.GetValue() \
                                         + adid.m_textCtrl31.GetValue() \
                                             + adid.m_textCtrl32.GetValue())
 		           		              lastcol = len(list(ws3.row_values(k)))
 		           		              time.sleep(1) 		           		               
 		           		              ws3.update_cell(k, lastcol+1, "住所")


#郵便番号～住所

#（郵便番号入力欄１個）
 		         elif len([i for i in list_1 if "住所" in i \
                      or "所在地" in i \
                          and "郵便番号" in i]) > 0 \
                      or len([i for i in items_1 if "住所" in i \
                          or "所在地" in i \
                              and "郵便番号" in i]) > 0 \
                          and len([i for i in list_2 if "郵便番号" in i \
                                or "your-post" in i \
                                    or "zip" in i \
                                        or "code" in i \
                                            or "postal" in i]) == 1:
 		              Cell_list6 = [i for i in list_2 if "郵便番号" in i \
                               or "your-post" in i \
                                   or "zip" in i \
                                       or "code" in i \
                                           or "postal" in i]
 		              print(Cell_list6)
 		              driver.find_element_by_name(Cell_list6[0]).send_keys(adid.m_textCtrl28.GetValue() + adid.m_textCtrl29.GetValue())
 		              lastcol = len(list(ws3.row_values(k)))
 		              time.sleep(1)
 		              ws3.update_cell(k, lastcol+1, "郵便番号")
 		              
 		              if len([i for i in list_1 if "住所" in i \
                           or "所在地" in i]) > 0 \
                           or len([i for i in items_1 if "住所" in i \
                               or "所在地" in i]) > 0 \
                               and len([i for i in list_2 if "address1" in i \
                                    or "adress1" in i \
                                        or "住所1" in i \
                                            or "jyusho1" in i \
                                                or "jyusyo1" in i]) > 0:
 		           		          Cell_list6 = [i for i in list_2 if "adr" in i \
                                        or "addr" in i \
                                            or "住所" in i \
                                                or "jyusho" in i \
                                                    or "jyusyo" in i]
 		           		          print(Cell_list6)
# 		           		          for j in range(1,len(Cell_list6)+1):
 		           		          driver.find_element_by_name(Cell_list6[0]).clear()
 		           		          driver.find_element_by_name(Cell_list6[0]).send_keys(adid.m_comboBox6.GetValue())
 		           		          lastcol = len(list(ws3.row_values(k)))
 		           		          time.sleep(1)
 		           		          ws3.update_cell(k, lastcol+1, adid.m_comboBox6.GetValue())
 		           		          driver.find_element_by_name(Cell_list6[1]).clear()
 		           		          driver.find_element_by_name(Cell_list6[1]).send_keys(adid.m_textCtrl30.GetValue())
 		           		          lastcol = len(list(ws3.row_values(k)))
 		           		          time.sleep(1)
 		           		          ws3.update_cell(k, lastcol+1, adid.m_textCtrl30.GetValue())
 		           		          driver.find_element_by_name(Cell_list6[2]).clear()                                       
 		           		          driver.find_element_by_name(Cell_list6[2]).send_keys(adid.m_textCtrl31.GetValue())
 		           		          lastcol = len(list(ws3.row_values(k)))
 		           		          time.sleep(1)
 		           		          ws3.update_cell(k, lastcol+1, adid.m_textCtrl31.GetValue())
 		           		          driver.find_element_by_name(Cell_list6[3]).clear()
 		           		          driver.find_element_by_name(Cell_list6[3]).send_keys(adid.m_textCtrl32.GetValue())
 		           		          lastcol = len(list(ws3.row_values(k)))
 		           		          time.sleep(1)
 		           		          ws3.update_cell(k, lastcol+1, adid.m_textCtrl32.GetValue())

 		              elif len([i for i in list_1 if "住所" in i \
                           or "所在地" in i]) > 0 \
                           or len([i for i in items_1 if "住所" in i \
                               or "所在地" in i]) > 0 \
                           and len([i for i in list_2 if "address" == i \
                                    or "addr" == i \
                                        or "adr" == i \
                                            or "住所" == i \
                                                or "jyusho" == i \
                                                    or "jyusyo" == i \
                                                        or "M_address" == i \
                                                            or "所在地" in i \
                                                                or "sumai" in i]) > 0:
 		           		          Cell_list6 = [i for i in list_2 if "address" == i \
                                        or "addr" == i \
                                            or "adr" == i \
                                                or "住所" == i \
                                                    or "jyusho" == i \
                                                        or "jyusyo" == i \
                                                            or "M_address" == i \
                                                                or "所在地" in i \
                                                                    or "sumai" in i]
 		           		          driver.find_element_by_name(Cell_list6[0]).clear()
 		           		          driver.find_element_by_name(Cell_list6[0]).send_keys(adid.m_comboBox6.GetValue() \
                                     + adid.m_textCtrl30.GetValue() \
                                         + adid.m_textCtrl31.GetValue() \
                                             + adid.m_textCtrl32.GetValue())
 		           		          lastcol = len(list(ws3.row_values(k)))
 		           		          time.sleep(1)
 		           		          ws3.update_cell(k, lastcol+1, "住所")
 		              

#郵便番号入力欄２個
 		         elif len([i for i in list_1 if "住所" in i \
                      or "所在地" in i]) > 0 \
                      or len([i for i in items_1 if "住所" in i \
                          or "所在地" in i]) > 0 \
                       or len([i for i in list_2 if "郵便番号" in i \
                                or "your-post" in i \
                                    or "zip" in i \
                                        or "code" in i \
                                            or "postal" in i \
                                                or "num1" in i \
                                                    or "num2" in i]) > 1:
 		              Cell_list6 = [i for i in list_2 if "郵便番号" in i \
                               or "your-post" in i \
                                   or "zip" in i \
                                       or "code" in i \
                                           or "postal" in i \
                                               or "num1" in i \
                                                   or "num2" in i]
 		              print(Cell_list6)
 		              driver.find_element_by_name(Cell_list6[0]).send_keys(adid.m_textCtrl28.GetValue())
 		              lastcol = len(list(ws3.row_values(k)))
 		              time.sleep(1)
 		              ws3.update_cell(k, lastcol+1, adid.m_textCtrl28.GetValue())
 		              driver.find_element_by_name(Cell_list6[1]).send_keys(adid.m_textCtrl29.GetValue())
 		              lastcol = len(list(ws3.row_values(k)))
 		              time.sleep(1)
 		              ws3.update_cell(k, lastcol+1, adid.m_textCtrl29.GetValue())

 		              if len([i for i in items_1 if "住所" in i]) > 0 \
                           or len([i for i in list_1 if "住所" in i \
                              or "所在地" in i]) > 0 \
                               and len([i for i in list_2 if "address1" in i \
                                    or "adress1" in i \
                                        or "住所1" in i \
                                            or "jyusho1" in i \
                                                or "jyusyo1" in i]) > 0:
 		           		          Cell_list6 = [i for i in list_2 if "adr" in i \
                                        or "addr" in i \
                                            or "住所" in i \
                                                or "jyusho" in i \
                                                    or "jyusyo1" in i]
 		           		          print(Cell_list6)
 		           		          driver.find_element_by_name(Cell_list6[0]).clear()
 		           		          driver.find_element_by_name(Cell_list6[0]).send_keys(adid.m_comboBox6.GetValue())
 		           		          lastcol = len(list(ws3.row_values(k)))
 		           		          time.sleep(1)
 		           		          ws3.update_cell(k, lastcol+1, adid.m_comboBox6.GetValue())
 		           		          driver.find_element_by_name(Cell_list6[1]).clear()
 		           		          driver.find_element_by_name(Cell_list6[1]).send_keys(adid.m_textCtrl30.GetValue())
 		           		          lastcol = len(list(ws3.row_values(k)))
 		           		          time.sleep(1)
 		           		          ws3.update_cell(k, lastcol+1, adid.m_textCtrl30.GetValue())
 		           		          driver.find_element_by_name(Cell_list6[2]).clear()                                       
 		           		          driver.find_element_by_name(Cell_list6[2]).send_keys(adid.m_textCtrl31.GetValue())
 		           		          lastcol = len(list(ws3.row_values(k)))
 		           		          time.sleep(1)
 		           		          ws3.update_cell(k, lastcol+1, adid.m_textCtrl31.GetValue())
 		           		          driver.find_element_by_name(Cell_list6[3]).clear()
 		           		          driver.find_element_by_name(Cell_list6[3]).send_keys(adid.m_textCtrl32.GetValue())
 		           		          lastcol = len(list(ws3.row_values(k)))
 		           		          time.sleep(1)
 		           		          ws3.update_cell(k, lastcol+1, adid.m_textCtrl32.GetValue())

 		              elif len([i for i in items_1 if "住所" in i \
                           or "所在地" in i]) > 0 \
                           or len([i for i in list_1 if "住所" in i \
                               or "所在地" in i]) > 0:
 		           		          Cell_list6 = [i for i in list_2 if "address" == i \
                                        or "addr" == i \
                                            or "住所" == i \
                                                or "jyusho" == i \
                                                    or "jyusyo" == i \
                                                        or "所在地" in i \
                                                            or "sumai" in i]
 		           		          driver.find_element_by_name(Cell_list6[0]).clear()
 		           		          driver.find_element_by_name(Cell_list6[0]).send_keys(adid.m_comboBox6.GetValue() \
                                     + adid.m_textCtrl30.GetValue() \
                                         + adid.m_textCtrl31.GetValue() \
                                             + adid.m_textCtrl32.GetValue())
 		           		          lastcol = len(list(ws3.row_values(k)))
 		           		          time.sleep(1)
 		           		          ws3.update_cell(k, lastcol+1, "住所")

 		              else:
 		           		          Municipal = driver.find_element_by_name(Cell_list6[0])
 		           		          Municipal.clear()   
 		           		          Municipal.send_keys(adid.m_textCtrl30.GetValue() + adid.m_textCtrl31.GetValue() + "　")
 		           		          lastcol = len(list(ws3.row_values(k)))
 		           		          time.sleep(1) 		           		             
 		           		          ws3.update_cell(k, lastcol+1, "市区町村")
 		           		          if len([i for i in items_1 if "建物" in i \
 		           		           		          or "ビル" in i]) > 0:
 		           		           Cell_list6 = [i for i in list_2 if "address_name" in i \
                                         or "住所" in i]
 		           		           print(Cell_list6)
 		           		           build = driver.find_element_by_name(Cell_list6[0])
 		           		           build.send_keys(adid.m_textCtrl32.GetValue())
 		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           time.sleep(1) 		           		             
 		           		           ws3.update_cell(k, lastcol+1, "建物名") 		             
 		             
#（郵便番号入力欄なし）
 		         elif len([i for i in list_1 if "住所" in i \
                       or "所在地" in i]) > 0 \
                      or len([i for i in items_1 if "住所" in i \
                          or "所在地" in i]) > 0 \
                       or len([i for i in list_2 if "住所" in i]) > 0 \
                           and len([i for i in list_1 if "郵便番号" in i]) == 0 \
                               and len([i for i in items_1 if "郵便番号" in i]) == 0:
 		              Cell_list6 = [i for i in list_2 if "address" == i \
                               or "addr" == i \
                                   or "住所" in i \
                                       or "所在地" in i \
                                           or "jyusho" in i \
                                               or "jyusyo" in i \
                                                   or "text-727" in i \
                                                       or "sumai" in i]
 		           		             
 		              if not Cell_list6 == []:
 		           		          print(Cell_list6)
 		           		          driver.find_element_by_name(Cell_list6[0]).send_keys(adid.m_comboBox6.GetValue() \
                                     + adid.m_textCtrl30.GetValue() \
                                         + adid.m_textCtrl31.GetValue() \
                                             + adid.m_textCtrl32.GetValue())
 		           		          lastcol = len(list(ws3.row_values(k)))
 		           		          time.sleep(1)
 		           		          ws3.update_cell(k, lastcol+1, "住所")


#（郵便番号入力欄のみ）
 		         elif len([i for i in list_1 if "住所" in i \
                       or "所在地" in i]) == 0 \
                      or len([i for i in items_1 if "住所" in i \
                          or "所在地" in i]) == 0 \
                       or len([i for i in list_2 if "住所" in i]) == 0 \
                           and len([i for i in list_1 if "郵便番号" in i]) > 0 \
                               or len([i for i in items_1 if "郵便番号" in i]) > 0 \
                                   and len([i for i in list_2 if "郵便番号" in i \
                                            or "your-post" in i \
                                                or "zip" in i \
                                                    or "code" in i \
                                                        or "postal" in i]) == 1:
 		              Cell_list6 = [i for i in list_2 if "郵便番号" in i \
                               or "your-post" in i \
                                   or "zip" in i \
                                       or "code" in i \
                                           and "mcode" not in i\
                                               or "postal" in i]
 		              print(Cell_list6)
 		              driver.find_element_by_name(Cell_list6[0]).send_keys(adid.m_textCtrl28.GetValue() + adid.m_textCtrl29.GetValue())
 		              lastcol = len(list(ws3.row_values(k)))
 		              time.sleep(1)
 		              ws3.update_cell(k, lastcol+1, "郵便番号")
                        
           
#（テキストに市町村、アパートが含まれない場合は都道府県のみ）
 		         elif len([i for i in items_1 if "都道府県" in i]) > 0:
 		            Cell_list6 = [i for i in list_2 if "pref" in i \
                             or "area" in i \
                                 or "todouhuken" in i \
                                     or "todoufuken" in i \
                                         or "todofuken" in i]
 		            print(Cell_list6)
 		            pref = driver.find_element_by_name(Cell_list6[0])
 		            pref.clear()
 		            pref.send_keys(adid.m_comboBox6.GetValue())
 		            lastcol = len(list(ws3.row_values(k)))
 		            time.sleep(1) 		           		             
 		            ws3.update_cell(k, lastcol+1, "都道府県")

 		            if len([i for i in items_1 if "市町村" in i]) > 0:
 		             Cell_list6 = [i for i in list_2 if "市町村" in i]
 		             print(Cell_list6)
 		             Municipal = driver.find_element_by_name(Cell_list6[0])
 		             Municipal.clear()   
 		             Municipal.send_keys(adid.m_textCtrl30.GetValue() + adid.m_textCtrl31.GetValue())
 		             lastcol = len(list(ws3.row_values(k)))
 		             time.sleep(1) 		           		             
 		             ws3.update_cell(k, lastcol+1, "市区町村")

 		             if len([i for i in items_1 if "アパート" in i]) > 0:
 		              Cell_list6 = [i for i in list_2 if "アパート" in i]
 		              print(Cell_list6)
 		              build = driver.find_element_by_name(Cell_list6[0])
 		              build.send_keys(adid.m_textCtrl32.GetValue())
 		              lastcol = len(list(ws3.row_values(k)))
 		              time.sleep(1) 		           		             
 		              ws3.update_cell(k, lastcol+1, "アパート") 		            


 		        except ElementNotInteractableException:
 		          pass
               
#リストインデックスに関するエラー回避                    
 		        except IndexError:
 		           lastcol = len(list(ws3.row_values(k)))                     
 		           ws3.update_cell(k, lastcol+1, "IndexError")


#電話番号

#（入力欄なしの場合は何もしない）
# 		        if len([i for i in list_1 if "電話" in i \
#                     or "TEL" in i]) == 0 \
#                     and len([i for i in list_2 if "電話" in i \
#                          or "TEL" in i \
#                              or "tel" in i \
#                                  or "Tel" in i \
#                                      or "phone" in i]) == 0:
# 		           		             print(len([i for i in list_1 if "電話" in i \
#                                        or "TEL" in i]))
# 		           		             print(len([i for i in list_2 if "電話" in i \
#                                        or "TEL" in i \
#                                            or "tel" in i \
#                                                or "Tel" in i \
#                                                    or "phone" in i]))
# 		           		             pass

 		        try:
                     
#（Googleフォーム）
 		         if not len([i for i in list_2c if "exportInput" in i]) == 0:
 		          element_gf = soup.find_all(class_="freebirdFormviewerComponentsQuestionBaseTitle exportItemTitle freebirdCustomFont")
 		          print(element_gf)
 		          if "電話" in str(element_gf):
 		            driver.find_elements_by_css_selector(".quantumWizTextinputPaperinputInput.exportInput")[2].send_keys(adid.m_textCtrl34.GetValue())
 		            lastcol = len(list(ws3.row_values(k)))
 		            time.sleep(1)
 		            ws3.update_cell(k, lastcol+1, "電話（市外局番）")
 		            driver.find_elements_by_css_selector(".quantumWizTextinputPaperinputInput.exportInput")[2].send_keys(adid.m_textCtrl35.GetValue())
 		            lastcol = len(list(ws3.row_values(k)))
 		            time.sleep(1)
 		            ws3.update_cell(k, lastcol+1, "電話（市内局番）")
 		            driver.find_elements_by_css_selector(".quantumWizTextinputPaperinputInput.exportInput")[2].send_keys(adid.m_textCtrl36.GetValue())
 		            lastcol = len(list(ws3.row_values(k)))
 		            time.sleep(1)
 		            ws3.update_cell(k, lastcol+1, "電話（加入者番号）")
                     

#（ハイフンなし市外局番別）
 		         elif not len([i for i in list_1 if "電話" in i \
                           or "TEL" in i \
                               or "連絡先" in i]) == 0 \
 		              and len([i for i in list_2 if "[0]" in i \
                          or "[1]" in i \
                              or "tel1" in i \
                                  or "tel_1" in i \
                                      or "phone_1" in i]) > 0:
 		             Cell_list7 = [i for i in list_2 if "tel" in i \
                              or "TEL" in i \
                                  or "Tel" in i \
                                      or "電話" in i \
                                          or "phone" in i \
                                              and "tic" not in i \
                                                  or "Phone" in i \
                                                      or "tp" in i \
                                                          and "mfp" not in i \
                                                              and "http" not in i \
                                                                  or "your-number" in i \
                                                                      or "element-4" in i \
                                                                          or "text-17" == i \
                                                                              or "denwa" in i]

 		             print(Cell_list7)
 		             driver.find_element_by_name(Cell_list7[0]) \
 		             .send_keys(adid.m_textCtrl34.GetValue())
 		             lastcol = len(list(ws3.row_values(k)))
 		             time.sleep(1)
 		             ws3.update_cell(k, lastcol+1, adid.m_textCtrl34.GetValue())
 		             driver.find_element_by_name(Cell_list7[1]) \
 		             .send_keys(adid.m_textCtrl35.GetValue())
 		             lastcol = len(list(ws3.row_values(k)))
 		             time.sleep(1)
 		             ws3.update_cell(k, lastcol+1, adid.m_textCtrl35.GetValue())
 		             driver.find_element_by_name(Cell_list7[2]) \
 		             .send_keys(adid.m_textCtrl36.GetValue())
 		             lastcol = len(list(ws3.row_values(k)))
 		             time.sleep(1)
 		             ws3.update_cell(k, lastcol+1, adid.m_textCtrl36.GetValue())
 		           		            
#（ハイフンなし）
 		         elif not len([i for i in items_1 if "電話" in i \
                           or "TEL" in i \
                               or "連絡先" in i \
                                   and "ハイフン不要" in i \
                                       or "ハイフンなし" in i]) == 0 \
                      or not len([i for i in list_1 if "電話" in i \
                               or "TEL" in i \
                                   or "連絡先" in i \
                                       and "ハイフン不要" in i \
                                           or "ハイフンなし" in i]) == 0:
 		             Cell_list7 = [i for i in list_2 if "tel" in i \
                              or "TEL" in i \
                                  or "Tel" in i \
                                      or "電話" in i \
                                              or "phone" in i \
                                                  and "tic" not in i \
                                                      or "Phone" in i \
                                                          or "tp" in i \
                                                              and "mfp" not in i \
                                                                  and "http" not in i \
                                                                      or "your-number" in i \
                                                                          or "element-4" in i \
                                                                              or "text-17" == i \
                                                                                  or "denwa" in i \
                                                                                      or "ＴＥＬ" in i]
 		             print(Cell_list7)
 		             driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_textCtrl34.GetValue() \
                                                                     + adid.m_textCtrl35.GetValue() \
                                                                         + adid.m_textCtrl36.GetValue())
 		             lastcol = len(list(ws3.row_values(k)))
 		             time.sleep(1) 
 		             ws3.update_cell(k, lastcol+1, "電話（ハイフンなし）")


#（ハイフン有り）                     
 		         elif not len([i for i in list_1 if "電話" in i \
                           or "TEL" in i \
                               or "連絡先" in i]) == 0 \
                      or not len([i for i in items_1 if "電話" in i \
                               or "TEL" in i \
                                   or "連絡先" in i]) == 0 \
                       and len([i for i in list_2 if "電話" in i \
                               or "TEL" in i \
                                   or "tel" in i \
                                       or "Tel" in i \
                                           or "phone" in i \
                                               and "tic" not in i \
                                                   or "Phone" in i \
                                                       or "tp" in i \
                                                           and "mfp" not in i \
                                                               and "http" not in i \
                                                                   or "your-number" in i \
                                                                       or "element-4" in i \
                                                                           or "text-17" == i \
                                                                               or "denwa" in i \
                                                                                   or "ＴＥＬ" in i]) > 0:
 		              Cell_list7 = [i for i in list_2 if "tel" in i \
                               or "TEL" in i \
                                   or "Tel" in i \
                                       or "電話" in i \
                                           or "phone" in i \
                                               and "tic" not in i \
                                                       or "Phone" in i \
                                                           or "tp" in i \
                                                               and "mfp" not in i \
                                                                   and "http" not in i \
                                                                       or "your-number" in i \
                                                                           or "element-4" in i \
                                                                               or "text-17" == i \
                                                                                   or "denwa" in i \
                                                                                       or "ＴＥＬ" in i]
 		              print(Cell_list7)
 		              if len(Cell_list7) > 1:
 		           		          try:
 		           		           elemName0 = driver.find_element_by_name(Cell_list7[0])
 		           		           elemName1 = driver.find_element_by_name(Cell_list7[1])
 		           		           elemName2 = driver.find_element_by_name(Cell_list7[2])
 		           		           if elemName0.is_displayed() is False \
                                           or elemName1.is_displayed() is False \
                                               or elemName2.is_displayed() is False:
 		           		           		          if "1" in Cell_list7[0]:
 		           		           		           print(Cell_list7[0])
 		           		           		           elemName0.send_keys(adid.m_textCtrl33.GetValue())
 		           		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           		           time.sleep(1) 		           		             
 		           		           		           ws3.update_cell(k, lastcol+1, "電話（ハイフンあり）")

 		           		           		          elif "2" in Cell_list7[1]:
 		           		           		           print(Cell_list7[1])
 		           		           		           elemName1.send_keys(adid.m_textCtrl33.GetValue())
 		           		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           		           time.sleep(1) 		           		             
 		           		           		           ws3.update_cell(k, lastcol+1, "電話（ハイフンあり）")

 		           		           		          elif "3" in Cell_list7[2]:
 		           		           		           print(Cell_list7[2])
 		           		           		           elemName2.send_keys(adid.m_textCtrl33.GetValue())
 		           		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           		           time.sleep(1) 		           		             
 		           		           		           ws3.update_cell(k, lastcol+1, "電話（ハイフンあり）")

 		           		           else:
 		           		           		          if "1" in Cell_list7[0] \
                                                             or "0" in Cell_list7[0]:
 		           		           		           print(Cell_list7[0])
 		           		           		           elemName0.send_keys(adid.m_textCtrl34.GetValue())
 		           		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           		           time.sleep(1) 		           		             
 		           		           		           ws3.update_cell(k, lastcol+1, "市外局番")

 		           		           		          if "2" in Cell_list7[1] \
                                                             or "1" in Cell_list7[1]:
 		           		           		           print(Cell_list7[1])
 		           		           		           elemName1.send_keys(adid.m_textCtrl35.GetValue())
 		           		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           		           time.sleep(1) 		           		             
 		           		           		           ws3.update_cell(k, lastcol+1, "市内局番")

 		           		           		          if "3" in Cell_list7[2] \
                                                             or "2" in Cell_list7[2]:
 		           		           		           print(Cell_list7[2])
 		           		           		           elemName2.send_keys(adid.m_textCtrl36.GetValue())
 		           		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           		           time.sleep(1) 		           		             
 		           		           		           ws3.update_cell(k, lastcol+1, "加入者番号")

 		           		          except:
 		           		            try:
 		           		              driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_textCtrl33.GetValue())
 		           		              lastcol = len(list(ws3.row_values(k)))
 		           		              time.sleep(1) 
 		           		              ws3.update_cell(k, lastcol+1, "電話（ハイフンあり）")
 		           		            except:                                            
 		           		              pass

 		              elif len(Cell_list7) == 1:
 		           		            driver.find_element_by_name(Cell_list7[0]).send_keys(adid.m_textCtrl33.GetValue())
 		           		            lastcol = len(list(ws3.row_values(k)))
 		           		            time.sleep(1) 
 		           		            ws3.update_cell(k, lastcol+1, "電話（ハイフンあり）")


#id値でスクレイピング
 		         elif len(list_2d) > 0:
 		           try:
 		            if len([i for i in list_2 if "tel" in i \
                       or "TEL" in i \
                           or "電話" in i \
                               or "phone" in i \
                                   and "tic" not in i \
                                       or "Phone" in i \
                                           or "tp" in i \
                                               and "mfp" not in i \
                                                   and "http" not in i \
                                                       or "your-number" in i \
                                                           or "denwa" in i \
                                                               or "ＴＥＬ" in i]) == 0:
 		              Cell_list7 = [i for i in list_2d if "tel" in i \
                               or "TEL" in i \
                                   or "Tel" in i \
                                       or "電話" in i \
                                           or "phone" in i \
                                               and "tic" not in i \
                                                  or "Phone" in i \
                                                       or "tp" in i \
                                                           and "mfp" not in i \
                                                               and "http" not in i \
                                                                   or "your-number" in i \
                                                                       or "denwa" in i \
                                                                           or "ＴＥＬ" in i]
 		              print(Cell_list7)
 		              driver.find_element_by_id(Cell_list7[0]).send_keys(adid.m_textCtrl33.GetValue())
 		              lastcol = len(list(ws3.row_values(k)))
 		              time.sleep(1) 
 		              ws3.update_cell(k, lastcol+1, "電話（ハイフンあり）")
                       
 		           except:
 		             pass
                   
 		         elif len(list_2c) > 0:
 		            try:
 		             if len([i for i in list_2d if "tel" in i \
                       or "TEL" in i \
                           or "Tel" in i \
                               or "電話" in i \
                                   or "phone" in i \
                                       and "tic" not in i \
                                           or "Phone" in i \
                                               or "tp" in i \
                                                   and "mfp" not in i \
                                                       and "http" not in i \
                                                           or "your-number" in i \
                                                               or "denwa" in i \
                                                                   or "ＴＥＬ" in i]) == 0:
 		              driver.find_elements_by_class_name(list_2c[0])[1].send_keys(adid.m_textCtrl33.GetValue())
 		              lastcol = len(list(ws3.row_values(k)))
 		              time.sleep(1) 
 		              ws3.update_cell(k, lastcol+1, "電話（ハイフンあり）")

 		            except WebDriverException:
 		              pass


#リストインデックスに関するエラー回避                    
 		        except IndexError:
 		           lastcol = len(list(ws3.row_values(k)))                     
 		           ws3.update_cell(k, lastcol+1, "IndexError")


#メールアドレス

 		        try:
#（Googleフォーム）
 		         if not len([i for i in list_2c if "exportInput" in i]) == 0:
 		             try:
# 		               if "biz" in adid.m_textCtrl37.GetValue():
 		                 driver.find_elements_by_css_selector(".quantumWizTextinputPaperinputInput.exportInput")[1].send_keys(adid.m_textCtrl37.GetValue())
 		                 lastcol = len(list(ws3.row_values(k)))
 		                 time.sleep(3)
 		                 ws3.update_cell(k, lastcol+1, "メールアドレス")
                          
#操作できない要素の回避
 		             except ElementNotInteractableException:
 		                  pass                          

#（タグテキストに含まれる）
 		         elif not len([i for i in list_1 if "メールアドレス" in i \
                           or "MAIL" in i \
                               or "mail" in i]) == 0 \
                      or not len([i for i in items_1 if "メールアドレス" in i \
                               or "MAIL" in i \
                                   or "mail" in i]) == 0:
 		            if not len([i for i in list_2 if "mail" in i \
                           or "メール" in i \
                               or "MAIL" in i \
                                   or "element-3" in i \
                                       or "Mail" in i]) == 0:
 		              
 		             Cell_list8 = [i for i in list_2 if "mail" in i \
                          and "mode" not in i \
                              or "メール" in i \
                                  and "控え" not in i \
                                      or "confirm" in i \
                                          and "mfp" not in i \
                                              and "mode" not in i \
                                                  or "MAIL" in i \
                                                      or "element-3" in i \
                                                          or "Mail" in i \
                                                              or "再入力" in i]
 		             print(Cell_list8)
 		             try:
# 		           		             if "biz" in adid.m_textCtrl37.GetValue():
 		           		              driver.find_element_by_name(Cell_list8[0]).send_keys(adid.m_textCtrl37.GetValue())
 		           		              print(Cell_list8[0])
 		           		              lastcol = len(list(ws3.row_values(k)))
 		           		              time.sleep(3)
 		           		              ws3.update_cell(k, lastcol+1, "メールアドレス")
 		           		              driver.find_element_by_name(Cell_list8[1]).send_keys(adid.m_textCtrl37.GetValue())
 		           		              print(Cell_list8[1])
 		           		              lastcol = len(list(ws3.row_values(k)))
 		           		              time.sleep(3)
 		           		              ws3.update_cell(k, lastcol+1, "メールアドレス")
 		           		              
#操作できない要素の回避
 		             except ElementNotInteractableException:
 		                  pass


 		            elif len([i for i in list_2 if "mail" in i \
                         or "メール" in i \
                             or "MAIL" in i]) == 0:
 		              Cell_list8 = [i for i in list_2d if "mail" in i \
                               or "メール" in i \
                                   or "MAIL" in i \
                                       or "Mail" in i]
 		              print(Cell_list8)
 		              try:
 		                if len(Cell_list8) == 1:
# 		                  if "biz" in adid.m_textCtrl37.GetValue():
 		                    driver.find_element_by_id(Cell_list8[0]).send_keys(adid.m_textCtrl37.GetValue())
 		                    print(Cell_list8[0])
 		                    lastcol = len(list(ws3.row_values(k)))
 		                    time.sleep(1) 
 		                    ws3.update_cell(k, lastcol+1, "メールアドレス")
                             
 		                elif len(Cell_list8) == 2:
# 		                  if "biz" in adid.m_textCtrl37.GetValue():
 		                    driver.find_element_by_id(Cell_list8[0]).send_keys(adid.m_textCtrl37.GetValue())
 		                    print(Cell_list8[0])                             
 		                    lastcol = len(list(ws3.row_values(k)))
 		                    time.sleep(1) 
 		                    ws3.update_cell(k, lastcol+1, "メールアドレス")
 		                    driver.find_element_by_id(Cell_list8[1]).send_keys(adid.m_textCtrl37.GetValue())
 		                    print(Cell_list8[1])                             
 		                    lastcol = len(list(ws3.row_values(k)))
 		                    time.sleep(1) 
 		                    ws3.update_cell(k, lastcol+1, "メールアドレス")

#操作できない要素の回避
 		              except ElementNotInteractableException:
 		                  pass                          

 		           		          
 		            elif len([i for i in list_2 if "mail" in i \
                         or "メール" in i \
                             or "MAIL" in i]) == 0:
 		              Cell_list8 = [i for i in list_2c if "mail" in i \
                               or "メール" in i \
                                   or "MAIL" in i \
                                       or "Mail" in i]
 		              print(Cell_list8)
 		              try:
# 		                if "biz" in adid.m_textCtrl37.GetValue():
 		                  driver.find_elements_by_class_name(Cell_list8[0])[2].send_keys(adid.m_textCtrl37.GetValue())
 		                  print(Cell_list8[0])
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  time.sleep(3)
 		                  ws3.update_cell(k, lastcol+1, "メールアドレス")

#操作できない要素の回避
 		              except ElementNotInteractableException:
 		                  pass                          


#（タグテキストに含まれない）
 		         elif len([i for i in list_1 if "メールアドレス" in i \
                       or "MAIL" in i \
                           or "mail" in i]) == 0 \
                  or len([i for i in items_1 if "メールアドレス" in i \
                           or "MAIL" in i \
                               or "mail" in i]) == 0:
 		            if not len([i for i in list_2 if "mail" in i \
                           or "メール" in i \
                               or "MAIL" in i \
                                   or "element-3" in i \
                                       or "Mail" in i]) == 0:
 		              
 		             Cell_list8 = [i for i in list_2 if "mail" in i \
                              or "メール" in i \
                                  or "MAIL" in i \
                                      or "element-3" in i \
                                          or "Mail" in i]
 		             print(Cell_list8)
 		             try:
# 		                if "biz" in adid.m_textCtrl37.GetValue():
 		                  driver.find_element_by_name(Cell_list8[0]).send_keys(adid.m_textCtrl37.GetValue())
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  time.sleep(1) 
 		                  ws3.update_cell(k, lastcol+1, "メールアドレス")
 		                  driver.find_element_by_name(Cell_list8[1]).send_keys(adid.m_textCtrl37.GetValue())
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  time.sleep(1) 
 		                  ws3.update_cell(k, lastcol+1, "メールアドレス")
                           
#操作できない要素の回避
 		             except ElementNotInteractableException:
 		                 pass
                           
 		              
 		            elif len([i for i in list_2 if "mail" in i \
                         or "メール" in i \
                             or "MAIL" in i]) == 0:
 		              Cell_list8 = [i for i in list_2c if "mail" in i \
                               or "メール" in i \
                                   or "MAIL" in i \
                                       or "Mail" in i]
# 		              for j in range(1,len(Cell_list8)+1):
 		              try:
# 		                if "biz" in adid.m_textCtrl37.GetValue():
 		                  driver.find_elements_by_class_name(Cell_list8[0])[2].send_keys(adid.m_textCtrl37.GetValue())
 		                  print(Cell_list8[0])
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  time.sleep(3)
 		                  ws3.update_cell(k, lastcol+1, "メールアドレス")

#操作できない要素の回避
 		              except ElementNotInteractableException:
 		                 pass

 		            elif len([i for i in list_2c if "mail" in i \
                         or "メール" in i \
                             or "MAIL" in i]) == 0:
 		              Cell_list8 = [i for i in list_2d if "mail" in i \
                               or "メール" in i \
                                   or "MAIL" in i \
                                       or "Mail" in i]
# 		              for j in range(1,len(Cell_list8)+1):
 		              try:
 		                if len(Cell_list8) == 1:
# 		                  if "biz" in adid.m_textCtrl37.GetValue():
 		                    driver.find_element_by_id(Cell_list8[0]).send_keys(adid.m_textCtrl37.GetValue())
 		                    print(Cell_list8[0])
 		                    lastcol = len(list(ws3.row_values(k)))
 		                    time.sleep(1) 
 		                    ws3.update_cell(k, lastcol+1, "メールアドレス")
                             
 		                elif len(Cell_list8) == 2:
# 		                  if "biz" in adid.m_textCtrl37.GetValue():
 		                    driver.find_element_by_id(Cell_list8[0]).send_keys(adid.m_textCtrl37.GetValue())
 		                    print(Cell_list8[0])                             
 		                    lastcol = len(list(ws3.row_values(k)))
 		                    time.sleep(1) 
 		                    ws3.update_cell(k, lastcol+1, "メールアドレス")
 		                    driver.find_element_by_id(Cell_list8[1]).send_keys(adid.m_textCtrl37.GetValue())
 		                    print(Cell_list8[1])                             
 		                    lastcol = len(list(ws3.row_values(k)))
 		                    time.sleep(1) 
 		                    ws3.update_cell(k, lastcol+1, "メールアドレス")

#操作できない要素の回避
 		              except ElementNotInteractableException:
 		                 pass

#リストインデックスに関するエラー回避                    
 		        except IndexError:
 		           lastcol = len(list(ws3.row_values(k)))                     
 		           ws3.update_cell(k, lastcol+1, "IndexError")


#業種
 		        try:
 		         if not len([i for i in items_1 if "業種" in i]) == 0:
 		            Cell_list8 = [i for i in list_2 if "industry" in i \
                             or "businesstype" in i \
                                 or "text-146" in i]
 		            print(Cell_list8)
 		            if not Cell_list8 == []:
 		             driver.find_element_by_name(Cell_list8[0]).send_keys(adid.m_comboBox61.GetValue())
 		             lastcol = len(list(ws3.row_values(k)))
 		             time.sleep(1)
 		             ws3.update_cell(k, lastcol+1, "業種")
 		           
#リストインデックスに関するエラー回避                    
 		        except IndexError:
 		           lastcol = len(list(ws3.row_values(k)))                     
 		           ws3.update_cell(k, lastcol+1, "IndexError")


#部署名
 		        try:
 		         if not len([i for i in list_1 if "部署" in i \
                         or "所属" in i]) == 0 \
                      or not len([i for i in items_1 if "部署" in i \
                             or "所属" in i]) == 0:
 		          print(len(list_2))
 		          print(len(list_2d))

 		          if len(list_2) > 0:
 		            if not len([i for i in list_2 if "department" in i \
                                    or "userDivision" in i \
                                        or "division" in i \
                                            or "div" == i \
                                                or "section" in i \
                                                    or "部署" in i \
                                                        or "unit" in i \
                                                            and "wpcf7_unit" not in i \
                                                                or "dept" in i \
                                                                    or "busyo" in i \
                                                                        or "busho" in i \
                                                                            or "co-post" in i \
                                                                                or "position" in i \
                                                                                    or "text-562" in i \
                                                                                        or "Section" in i \
                                                                                            or "text-003" == i]) == 0:
 		             Cell_list3 = [i for i in list_2 if "department" in i \
                                  or "userDivision" in i \
                                      or "division" in i \
                                          or "div" == i \
                                              or "section" in i \
                                                  or "部署" in i \
                                                      or "unit" in i \
                                                          and "wpcf7_unit" not in i \
                                                              or "dept" in i \
                                                                  or "busyo" in i \
                                                                      or "busho" in i \
                                                                          or "co-post" in i \
                                                                              or "position" in i \
                                                                                  or "text-562" in i \
                                                                                      or "Section" in i \
                                                                                          or "text-003" == i]
 		             print(Cell_list3)    
#テキスト入力
 		             try:
 		               driver.find_element_by_name(Cell_list3[0]).send_keys(adid.m_textCtrl24.GetValue())
 		               lastcol = len(list(ws3.row_values(k)))
 		               time.sleep(1) 		           		             
 		               ws3.update_cell(k, lastcol+1, "部署名")

#操作できない要素の回避
 		             except ElementNotInteractableException:
 		               pass

                     
#パターン追加（2021.12.22）
#id値でスクレイピング
 		          elif len(list_2d) > 0:
 		           if len([i for i in list_2 if "department" in i \
                              or "userDivision" in i \
                                  or "division" in i \
                                      or "div" == i \
                                          or "section" in i \
                                              or "部署" in i \
                                                  or "unit" in i \
                                                      and "wpcf7_unit" not in i \
                                                          or "dept" in i \
                                                              or "busyo" in i \
                                                                  or "busho" in i \
                                                                      or "co-post" in i \
                                                                          or "position" in i \
                                                                              or "text-562" in i \
                                                                                  or "Section" in i \
                                                                                      or "text-003" == i]) == 0:
 		             Cell_list3 = [i for i in list_2d if "department" in i \
                                  or "userDivision" in i \
                                      or "division" in i \
                                          or "div" == i \
                                              or "section" in i \
                                                  or "部署" in i \
                                                      or "unit" in i \
                                                          and "wpcf7_unit" not in i \
                                                              or "dept" in i \
                                                                  or "busyo" in i \
                                                                      or "busho" in i \
                                                                          or "co-post" in i \
                                                                              or "position" in i \
                                                                                  or "text-562" in i \
                                                                                      or "Section" in i \
                                                                                          or "text-003" == i]
 		             print(Cell_list3)    
#テキスト入力
 		             try:
 		               driver.find_element_by_id(Cell_list3[0]).send_keys(adid.m_textCtrl24.GetValue())
 		               lastcol = len(list(ws3.row_values(k)))
 		               time.sleep(1) 		           		             
 		               ws3.update_cell(k, lastcol+1, "部署名")

#操作できない要素の回避
 		             except ElementNotInteractableException:
 		               pass
                     


#リストインデックスに関するエラー回避                    
 		        except IndexError:
 		           lastcol = len(list(ws3.row_values(k)))                     
 		           ws3.update_cell(k, lastcol+1, "IndexError")


#役職
 		        try:
 		         if not len([i for i in items_1 if "役職" in i]) == 0 \
                      or not len([i for i in list_1 if "役職" in i]) == 0:
 		             Cell_list3 = [i for i in list_2 if "class" in i \
                              or "position" in i \
                                  or "役職" in i \
                                      and "部署" not in i \
                                          or "yakushoku" in i \
                                              or "text-171" in i \
                                                  or "yakusyoku" in i]
 		             print(Cell_list3)    
#テキスト入力 		           		            
 		             driver.find_element_by_name(Cell_list3[0]).send_keys(adid.m_textCtrl25.GetValue())
 		             lastcol = len(list(ws3.row_values(k)))
 		             time.sleep(1) 		           		             
 		             ws3.update_cell(k, lastcol+1, "役職")

#リストインデックスに関するエラー回避                    
 		        except IndexError:
 		           lastcol = len(list(ws3.row_values(k)))                     
 		           ws3.update_cell(k, lastcol+1, "IndexError")


#ホームページアドレス
 		        adid = MyProject1MyDialog5(self)
 		        try:
 		         if not len([i for i in items_1 if "URL" in i \
                         or "ウェブ" in i \
                             or "サイト" in i \
                                 or "ホームページ" in i \
                                     or "website" in i]) == 0 \
                      or not len([i for i in list_1 if "URL" in i \
                            or "ウェブ" in i \
                                or "サイト" in i \
                                    or "ホームページ" in i \
                                        or "website" in i]) == 0 \
 		           		             or not len([i for i in list_2 if "URL" in i \
                                         or "ウェブ" in i \
                                             or "サイト" in i \
                                                 or "ホームページ" in i \
                                                     or "site" in i]) == 0:

 		            Cell_list8 = [i for i in list_2 if "url" in i \
                             or "URL" in i \
                                 or "ウェブ" in i \
                                     or "site" in i]
 		            print(Cell_list8)
 		            if len(Cell_list8) == 1:
 		              elemName0 = driver.find_element_by_name(Cell_list8[0])
 		              try:
 		           		           if elemName0.is_displayed() is False:
 		           		            pass
 		           		           else:
 		           		            driver.find_element_by_name(Cell_list8[0]).send_keys(adid.m_textCtrl7.GetValue())
 		           		            lastcol = len(list(ws3.row_values(k)))
 		           		            time.sleep(1)
 		           		            ws3.update_cell(k, lastcol+1, "URL")

#操作できない要素の回避
 		              except ElementNotInteractableException:
 		                pass

#リストインデックスに関するエラー回避                    
 		        except IndexError:
 		           lastcol = len(list(ws3.row_values(k)))                     
 		           ws3.update_cell(k, lastcol+1, "IndexError")


#件名
 		        try:
 		         if len([i for i in items_1 if "サービス名" in i \
                     or "題名" in i \
                         or "キーワード" in i \
                             or "件名" in i \
                                 or "用件" in i]) > 0 \
                      or len([i for i in list_1 if "サービス名" in i \
                         or "題名" in i \
                             or "キーワード" in i \
                                 or "件名" in i \
                                     or "用件" in i]) > 0 \
                          and len([i for i in list_2 if "text_field" in i \
                                   or "subject" in i \
                                       or "サービス名" in i \
                                           or "題名" in i \
                                               or "キーワード" in i \
                                                   or "件名" in i \
                                                       or "daimei" in i \
                                                           or "title" in i \
                                                               and "request" not in i]) > 0:
 		             SELECT_list1 = [i for i in list_2 if "text_field" in i \
                                or "subject" in i \
                                    or "サービス名" in i \
                                        or "題名" in i \
                                            or "キーワード" in i \
                                                or "件名" in i \
                                                    or "daimei" in i \
                                                        or "title" in i \
                                                            and "request" not in i]
 		             print(SELECT_list1)
 		             if len(SELECT_list1) == 1:
 		              driver.find_element_by_name(SELECT_list1[0]).send_keys(adid.m_textCtrl6.GetValue())
 		              lastcol = len(list(ws3.row_values(k)))
 		              time.sleep(1) 		           		            
 		              ws3.update_cell(k, lastcol+1, "タイトル")
# 		             if len(SELECT_list1) > 1:
# 		              for j in range(1, len(SELECT_list1)+1):
# 		           		          driver.find_element_by_name(SELECT_list1[j-1]).send_keys(ws2.cell(1, 1+j).value)
# 		           		          lastcol = len(list(ws3.row_values(k)))
# 		           		          time.sleep(1) 		           		            
# 		           		          ws3.update_cell(k, lastcol+1, ws2.cell(1, 1+j).value)

 		         elif len([i for i in items_1 if "サービス名" in i \
                     or "題名" in i \
                         or "キーワード" in i \
                             or "件名" in i]) == 0 \
                      or len([i for i in list_1 if "サービス名" in i \
                         or "題名" in i \
                             or "キーワード" in i \
                                 or "件名" in i]) == 0 \
                          and len([i for i in list_2 if "text_field" in i \
                                   or "subject" in i \
                                       or "サービス名" in i \
                                           or "題名" in i \
                                               or "キーワード" in i \
                                                   or "件名" in i \
                                                       or "daimei" in i \
                                                           or "title" in i \
                                                               and "request" not in i]) == 0:
 		             SELECT_list1 = [i for i in list_2 if "issue_text" in i]
 		             print(SELECT_list1)
 		             if len(SELECT_list1) == 1:
 		              driver.find_element_by_name(SELECT_list1[0]).send_keys(adid.m_textCtrl6.GetValue())
 		              lastcol = len(list(ws3.row_values(k)))
 		              time.sleep(1) 		           		            
 		              ws3.update_cell(k, lastcol+1, "タイトル")


#リストインデックスに関するエラー回避                    
 		        except IndexError:
 		           lastcol = len(list(ws3.row_values(k)))                     
 		           ws3.update_cell(k, lastcol+1, "IndexError")


#textareaタグのname値を取得
 		        TEXTAREA_list1 = []
 		        TEXTAREA_list2 = []
 		        TEXTAREA_list3 = []
 		        MAXLEN = []
 		        element3 = soup.find_all("textarea")
 		        print(element3)

#パターン追加（2021.12.07）
#textareaタグのname値が"住所"になっている場合の対策
 		        list_4tn = []
                 
# 		        element4 = soup.find_all("textarea",attrs={"name":"ご住所"})
# 		        print(element4)

 		        if "住所" in str(element3) \
                     or "address" in str(element3):
 		          adid = MyProject1MyDialog4(self)
 		          for elem in element3:
 		            list_4tn.append(elem.get("name"))

 		          list_4tn = [i for i in list_4tn if i is not None]
 		          print(list_4tn)

 		          list_5tn = [i for i in list_4tn if "住所" in i \
                         or "address" in i]
 		          print(len(list_5tn))

 		          driver.find_element_by_name(list_5tn[0]).clear()
 		          driver.find_element_by_name(list_5tn[0]).send_keys(adid.m_comboBox6.GetValue() \
                                     + adid.m_textCtrl30.GetValue() \
                                         + adid.m_textCtrl31.GetValue() \
                                             + adid.m_textCtrl32.GetValue())
 		          lastcol = len(list(ws3.row_values(k)))
 		          time.sleep(1)
 		          ws3.update_cell(k, lastcol+1, "住所")

#textareaタグ内のname属性に"問合せ"を含む要素をリスト内包
 		          adid = MyProject1MyDialog5(self)
 		          list_5tn = [i for i in list_4tn if "問合せ" in i \
                         or "message" in i \
                             or "問い合わせ" in i]
 		          print(len(list_5tn))

 		          for elem in element3:
 		            MAXLEN.append(elem.get("maxlength"))
 		          MAXLEN = [i for i in MAXLEN if i is not None]
 		          print(MAXLEN)

#送信本文字数制限チェック
 		          if not MAXLEN == []:
 		           	   if int(MAXLEN[0]) < 2000 and not int(MAXLEN[0]) == 100:
 		           	      lastcol = len(list(ws3.row_values(k)))
 		           	      ws3.update_cell(k, lastcol+1, MAXLEN[0] + "文字以内に設定されています。")
 		           	   elif int(MAXLEN[0]) == 100:
 		           	      lastcol = len(list(ws3.row_values(k)))
 		           	      ws3.update_cell(k, lastcol+1, "本文字数制限なし")
 		          elif MAXLEN == []:
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  ws3.update_cell(k, lastcol+1, "本文字数制限なし")

#name値のみ存在
 		          if len(list_5tn) > 0 \
                         and not MAXLEN == []:
 		           	 if 1000 < int(MAXLEN[0]) < 2000:
 		           	   driver.find_element_by_name(list_5tn[0]).send_keys(adid.m_textCtrl9.GetValue())
 		           	   print(list_5tn[0])
 		           	   lastcol = len(list(ws3.row_values(k)))
 		           	   ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		           	 elif 500 < int(MAXLEN[0]) < 1000:
 		           	   driver.find_element_by_name(list_5tn[0]).send_keys(adid.m_textCtrl10.GetValue())
 		           	   print(list_5tn[0])
 		           	   lastcol = len(list(ws3.row_values(k)))
 		           	   ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		           	 elif int(MAXLEN[0]) <= 500 \
                          and not int(MAXLEN[0]) == 100:
 		           	   driver.find_element_by_name(list_5tn[0]).send_keys(adid.m_textCtrl11.GetValue())
 		           	   print(list_5tn[0])
 		           	   lastcol = len(list(ws3.row_values(k)))
 		           	   ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		           	 elif int(MAXLEN[0]) == 100:
 		           	   driver.find_element_by_name(list_5tn[0]).send_keys(adid.m_textCtrl8.GetValue())
 		           	   print(list_5tn[0])
 		           	   lastcol = len(list(ws3.row_values(k)))
 		           	   ws3.update_cell(k, lastcol+1, "通常本文投稿済み")

 		          elif len(list_5tn) > 0 \
                         and MAXLEN == []:
 		           	   driver.find_element_by_name(list_5tn[0]).send_keys(adid.m_textCtrl8.GetValue())
 		           	   print(list_5tn[0])
 		           	   lastcol = len(list(ws3.row_values(k)))
 		           	   ws3.update_cell(k, lastcol+1, "通常本文投稿済み")

# 		          elif len(list_5tn) > 0 \
#                         and int(MAXLEN[0]) == 100:
# 		           	   driver.find_element_by_name(list_5tn[0]).send_keys(adid.m_textCtrl8.GetValue())
# 		           	   print(list_5tn[0])
# 		           	   lastcol = len(list(ws3.row_values(k)))
# 		           	   ws3.update_cell(k, lastcol+1, "通常本文投稿済み")


#通常のtextareaタグに対する処理
 		        elif not "住所" in str(element3) \
                     or "address" in str(element3):
 		            
 		         for textarea in element3:
 		             TEXTAREA_list1.append(textarea.get("id"))
 		             TEXTAREA_list2.append(textarea.get("name"))
 		             TEXTAREA_list3.append(textarea.get("class"))
 		             MAXLEN.append(textarea.get("maxlength"))
 		         print(TEXTAREA_list1)
 		         print(TEXTAREA_list2)
 		         print(TEXTAREA_list3)
 		         print(len(TEXTAREA_list1))
 		         print(len(TEXTAREA_list2))
 		         print(len(TEXTAREA_list3))
 		         print(MAXLEN)

                                            
 		         TEXTAREA_list1 = [i for i in TEXTAREA_list1 if i is not None \
                                and "recaptcha" not in i]
 		         print(TEXTAREA_list1)
                      
 		         TEXTAREA_list2 = [i for i in TEXTAREA_list2 if i is not None \
                              and "recaptcha" not in i \
                                  and "wpcf7" not in i]
 		         print(TEXTAREA_list2)                        
     
 		         TEXTAREA_list3 = [i for i in TEXTAREA_list3 if i is not None \
                              and "recaptcha" not in i \
                                  and "wpcf7" not in i]
 		         print(TEXTAREA_list3)
                        
 		         MAXLEN = [i for i in MAXLEN if i is not None]
                  
 		         print(TEXTAREA_list1)
 		         print(TEXTAREA_list2)
 		         print(TEXTAREA_list3)
 		         print(len(TEXTAREA_list1))
 		         print(len(TEXTAREA_list2))
 		         print(len(TEXTAREA_list3))
 		         print(MAXLEN)
# 		            for elem3 in element3: 
# 		             items_1.append(name.get("placeholder"))
# 		             print(items_1)

#送信本文字数制限チェック
 		         if not MAXLEN == []:
 		           if int(MAXLEN[0]) < 2000 and not int(MAXLEN[0]) == 100:
 		              lastcol = len(list(ws3.row_values(k)))
 		              ws3.update_cell(k, lastcol+1, MAXLEN[0] + "文字以内に設定されています。")
 		           elif int(MAXLEN[0]) == 100:
 		              lastcol = len(list(ws3.row_values(k)))
 		              ws3.update_cell(k, lastcol+1, "本文字数制限なし")
 		         elif MAXLEN == []:
 		              lastcol = len(list(ws3.row_values(k)))
 		              ws3.update_cell(k, lastcol+1, "本文字数制限なし")
 		              
                       
#（Googleフォーム）
 		         if not len([i for i in TEXTAREA_list3 if "exportTextarea" in i]) == 0:
 		           driver.find_elements_by_css_selector(".quantumWizTextinputPapertextareaInput.exportTextarea")[0].send_keys(adid.m_textCtrl8.GetValue())
 		           lastcol = len(list(ws3.row_values(k)))
 		           time.sleep(1)
 		           ws3.update_cell(k, lastcol+1, "通常本文投稿済み")

#id値が存在する場合
 		         elif len(TEXTAREA_list1) > 0 \
                       and len(TEXTAREA_list2) == 0 \
                           and len(TEXTAREA_list3) == 0 \
                               and not MAXLEN == []:
 		             if 1000 < int(MAXLEN[0]) < 2000:
 		               driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl9.GetValue())
 		               print(TEXTAREA_list1[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif 500 < int(MAXLEN[0]) < 1000:
 		               driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl10.GetValue())
 		               print(TEXTAREA_list1[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif int(MAXLEN[0]) <= 500 \
                          and not int(MAXLEN[0]) == 100:
 		               driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl11.GetValue())
 		               print(TEXTAREA_list1[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif int(MAXLEN[0]) == 100:
 		               driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl8.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")

 		         elif len(TEXTAREA_list1) > 0 \
                       and len(TEXTAREA_list2) == 0 \
                           and len(TEXTAREA_list3) == 0 \
                               and MAXLEN == []:
 		               driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl8.GetValue())
 		               print(TEXTAREA_list1[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")

# 		         elif len(TEXTAREA_list1) > 0 \
#                       and len(TEXTAREA_list2) == 0 \
#                           and len(TEXTAREA_list3) == 0 \
#                               and int(MAXLEN[0]) == 100:
# 		               driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl8.GetValue())
# 		               print(TEXTAREA_list1[0])
# 		               lastcol = len(list(ws3.row_values(k)))
# 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")


#name値のみ存在
 		         elif len(TEXTAREA_list1) == 0 \
                       and len(TEXTAREA_list2) > 0 \
                           and len(TEXTAREA_list3) == 0 \
                               and not MAXLEN == []:
 		             if 1000 < int(MAXLEN[0]) < 2000:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl9.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif 500 < int(MAXLEN[0]) < 1000:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl10.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif int(MAXLEN[0]) <= 500 \
                          and not int(MAXLEN[0]) == 100:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl11.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif int(MAXLEN[0]) == 100:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl8.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")

 		         elif len(TEXTAREA_list1) == 0 \
                       and len(TEXTAREA_list2) > 0 \
                           and len(TEXTAREA_list3) == 0 \
                               and MAXLEN == []:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl8.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")

# 		         elif len(TEXTAREA_list1) == 0 \
#                       and len(TEXTAREA_list2) > 0 \
#                           and len(TEXTAREA_list3) == 0 \
#                               and int(MAXLEN[0]) == 100:
# 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl8.GetValue())
# 		               print(TEXTAREA_list2[0])
# 		               lastcol = len(list(ws3.row_values(k)))
# 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")


#name値及びclass値が存在する場合
 		         elif len(TEXTAREA_list1) == 0 \
                       and len(TEXTAREA_list2) == 1 \
                           and len(TEXTAREA_list3) == 1 \
                               and not MAXLEN == []:
 		             if 1000 < int(MAXLEN[0]) < 2000:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl9.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif 500 < int(MAXLEN[0]) < 1000:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl10.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif int(MAXLEN[0]) <= 500 \
                          and not int(MAXLEN[0]) == 100:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl11.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif int(MAXLEN[0]) == 100:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl8.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")

 		         elif len(TEXTAREA_list1) == 0 \
                       and len(TEXTAREA_list2) == 1 \
                           and len(TEXTAREA_list3) == 1 \
                               and MAXLEN == []:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl8.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")


#textareaタグが複数存在する
 		         elif len(TEXTAREA_list1) == 0 \
                       and len(TEXTAREA_list2) > 1 \
                           and len(TEXTAREA_list3) > 1 \
                               and not MAXLEN == []:
 		             if 1000 < int(MAXLEN[0]) < 2000:
 		               driver.find_element_by_name(TEXTAREA_list2[len(TEXTAREA_list2)-1]).send_keys(adid.m_textCtrl9.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif 500 < int(MAXLEN[0]) < 1000:
 		               driver.find_element_by_name(TEXTAREA_list2[len(TEXTAREA_list2)-1]).send_keys(adid.m_textCtrl10.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif int(MAXLEN[0]) <= 500 \
                          and not int(MAXLEN[0]) == 100:
 		               driver.find_element_by_name(TEXTAREA_list2[len(TEXTAREA_list2)-1]).send_keys(adid.m_textCtrl11.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif int(MAXLEN[0]) == 100:
 		               driver.find_element_by_name(TEXTAREA_list2[len(TEXTAREA_list2)-1]).send_keys(adid.m_textCtrl8.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")

 		         elif len(TEXTAREA_list1) == 0 \
                       and len(TEXTAREA_list2) > 1 \
                           and len(TEXTAREA_list3) > 1 \
                               and MAXLEN == []:
 		               driver.find_element_by_name(TEXTAREA_list2[len(TEXTAREA_list2)-1]).send_keys(adid.m_textCtrl8.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")


# 		         elif len(TEXTAREA_list1) == 0 \
#                       and len(TEXTAREA_list2) > 0 \
#                           and len(TEXTAREA_list3) > 0 \
#                               and int(MAXLEN[0]) == 100:
# 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl8.GetValue())
# 		               print(TEXTAREA_list2[0])
# 		               lastcol = len(list(ws3.row_values(k)))
# 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")


#id値及びclass値の両方が存在
 		         elif len(TEXTAREA_list1) > 0 \
                       and len(TEXTAREA_list2) == 0 \
                           and len(TEXTAREA_list3) > 0 \
                               and not MAXLEN == []:
 		             if 1000 < int(MAXLEN[0]) < 2000:
 		               driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl9.GetValue())
 		               print(TEXTAREA_list1[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif 500 < int(MAXLEN[0]) < 1000:
 		               driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl10.GetValue())
 		               print(TEXTAREA_list1[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif int(MAXLEN[0]) <= 500 \
                          and not int(MAXLEN[0]) == 100:
 		               driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl11.GetValue())
 		               print(TEXTAREA_list1[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif int(MAXLEN[0]) == 100:
 		               driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl8.GetValue())
 		               print(TEXTAREA_list1[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")

 		         elif len(TEXTAREA_list1) > 0 \
                       and len(TEXTAREA_list2) == 0 \
                           and len(TEXTAREA_list3) > 0 \
                               and MAXLEN == []:
 		               driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl8.GetValue())
 		               print(TEXTAREA_list1[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")

# 		         elif len(TEXTAREA_list1) > 0 \
#                       and len(TEXTAREA_list2) == 0 \
#                           and len(TEXTAREA_list3) > 0 \
#                               and int(MAXLEN[0]) == 100:
# 		               driver.find_element_by_id(TEXTAREA_list1[0]).send_keys(adid.m_textCtrl8.GetValue())
# 		               print(TEXTAREA_list1[0])
# 		               lastcol = len(list(ws3.row_values(k)))
# 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")


#id値及びname値が存在しない場合
 		         elif len(TEXTAREA_list1) == 0 \
                       and len(TEXTAREA_list2) == 0 \
                           and len(TEXTAREA_list3) > 0 \
                               and not MAXLEN == []:
 		             if 1000 < int(MAXLEN[0]) < 2000:
 		               driver.find_element_by_class_name(TEXTAREA_list3[0]).send_keys(adid.m_textCtrl9.GetValue())
 		               print(TEXTAREA_list3[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif 500 < int(MAXLEN[0]) < 1000:
 		               driver.find_element_by_class_name(TEXTAREA_list3[0]).send_keys(adid.m_textCtrl10.GetValue())
 		               print(TEXTAREA_list3[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif int(MAXLEN[0]) <= 500 \
                          and not int(MAXLEN[0]) == 100:
 		               driver.find_element_by_class_name(TEXTAREA_list3[0]).send_keys(adid.m_textCtrl11.GetValue())
 		               print(TEXTAREA_list3[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif int(MAXLEN[0]) == 100:
 		               driver.find_element_by_class_name(TEXTAREA_list3[0]).send_keys(adid.m_textCtrl8.GetValue())
 		               print(TEXTAREA_list3[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")

 		         elif len(TEXTAREA_list1) == 0 \
                       and len(TEXTAREA_list2) == 0 \
                           and len(TEXTAREA_list3) > 0 \
                               and MAXLEN == []:
 		               driver.find_element_by_class_name(TEXTAREA_list3[0]).send_keys(adid.m_textCtrl8.GetValue())
 		               print(TEXTAREA_list3[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")

# 		         elif len(TEXTAREA_list1) == 0 \
#                       and len(TEXTAREA_list2) == 0 \
#                           and len(TEXTAREA_list3) > 0 \
#                               and int(MAXLEN[0]) == 100:
# 		               driver.find_element_by_class_name(TEXTAREA_list3[0]).send_keys(adid.m_textCtrl8.GetValue())
# 		               print(TEXTAREA_list3[0])
# 		               lastcol = len(list(ws3.row_values(k)))
# 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")


#id値及びname値の両方が存在
 		         elif len(TEXTAREA_list1) > 0 \
                       and len(TEXTAREA_list2) > 0 \
                           and len(TEXTAREA_list3) == 0:
 		           		          print(TEXTAREA_list2[0])
 		           		          elemName0 = driver.find_element_by_name(TEXTAREA_list2[0]) 		           		          
 		           		          if len(TEXTAREA_list2) > 1:
 		           		           elemName1 = driver.find_element_by_name(TEXTAREA_list2[1])
 		           		           elemName2 = driver.find_element_by_name(TEXTAREA_list2[2])
 		           		           try:
 		           		            if elemName0.is_displayed() is False \
 		           		           		          or elemName1.is_displayed() is False \
 		           		           		              or elemName2.is_displayed() is False:
 		           		           		          print(TEXTAREA_list2[0])
 		           		           		          print(TEXTAREA_list2[1])
 		           		           		          print(TEXTAREA_list2[2])                                                         
 		           		           		          if "1" in TEXTAREA_list2[0]:
 		           		           		           driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl8.GetValue())
 		           		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           		           time.sleep(1) 		           		             
 		           		           		           ws3.update_cell(k, lastcol+1, "本文投稿済み")

 		           		           		          elif "2" in TEXTAREA_list2[1]:
 		           		           		           driver.find_element_by_name(TEXTAREA_list2[1]).send_keys(adid.m_textCtrl8.GetValue())
 		           		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           		           time.sleep(1) 		           		             
 		           		           		           ws3.update_cell(k, lastcol+1, "本文投稿済み")

 		           		           		          elif "3" in TEXTAREA_list2[2]:
 		           		           		           driver.find_element_by_name(TEXTAREA_list2[2]).send_keys(adid.m_textCtrl8.GetValue())
 		           		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           		           time.sleep(1) 		           		             
 		           		           		           ws3.update_cell(k, lastcol+1, "本文投稿済み")
 		           		           		           
#操作できない要素の回避
 		           		           except ElementNotInteractableException:
 		           		             pass
 		           		           		           
 		           		          else:
 		           		            driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl8.GetValue())
 		           		            lastcol = len(list(ws3.row_values(k)))
 		           		            time.sleep(1) 
 		           		            ws3.update_cell(k, lastcol+1, "本文投稿済み")

#全て存在
 		         elif len(TEXTAREA_list1) > 0 \
                       and len(TEXTAREA_list2) > 0 \
                           and len(TEXTAREA_list3) > 0 \
                               and not MAXLEN == []:
 		             if 1000 < int(MAXLEN[0]) < 2000:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl9.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

#パターン追加（2021.12.26）
#<textarea name="data[Contact][message]" maxlength="1000" cols="30" rows="6" id="ContactMessage" required="required"></textarea>
 		             elif 500 < int(MAXLEN[0]) < 1000 \
                          or int(MAXLEN[0]) == 1000:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl10.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif int(MAXLEN[0]) <= 500 \
                          and not int(MAXLEN[0]) == 100:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl11.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "本文" + MAXLEN[0] + "文字以内で投稿しました。")

 		             elif int(MAXLEN[0]) == 100:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl8.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")

 		         elif len(TEXTAREA_list1) > 0 \
                       and len(TEXTAREA_list2) > 0 \
                           and len(TEXTAREA_list3) > 0 \
                               and MAXLEN == []:
 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl8.GetValue())
 		               print(TEXTAREA_list2[0])
 		               lastcol = len(list(ws3.row_values(k)))
 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")

# 		         elif len(TEXTAREA_list1) > 0 \
#                       and len(TEXTAREA_list2) > 0 \
#                           and len(TEXTAREA_list3) > 0 \
#                               and int(MAXLEN[0]) == 100:
# 		               driver.find_element_by_name(TEXTAREA_list2[0]).send_keys(adid.m_textCtrl8.GetValue())
# 		               print(TEXTAREA_list2[0])
# 		               lastcol = len(list(ws3.row_values(k)))
# 		               ws3.update_cell(k, lastcol+1, "通常本文投稿済み")


#（お問い合わせ内容）
#プルダウンメニュー
 		        list_6 = []
 		        for element5 in soup.find_all("select"):
 		            list_6.append(element5.get("name"))
 		        list_6 =[i for i in list_6 if i is not None]
 		        print(list_6)
 		        list_7 = []
 		        for element5 in soup.find_all("select"):
 		            list_7.append(element5.get("id"))
 		        list_7 =[i for i in list_7 if i is not None]
 		        print(list_7)

 		        SELECT_list1 = []
 		        for element in soup.find_all("option"): 
 		             SELECT_list1.append(element.get("value"))
 		        SELECT_list1 =[i for i in SELECT_list1 if i is not None]
 		        print(SELECT_list1)

 		        if SELECT_list1 == []:
 		          for element in soup.find_all("option"): 
 		             SELECT_list1.append(element.get("value"))
 		          SELECT_list1 =[i for i in SELECT_list1 if i is not None]
 		          print(SELECT_list1)
 		        else:
 		          pass

 		        SELECT_list2 = [i for i in SELECT_list1 if "お問い合わせ" == i \
                              or "その他" in i \
                                  or "営業" in i \
                                      or "宣伝" in i \
                                          or "メール" in i]
 		        print(SELECT_list2)                     


#optionタグ内のvalue値が1個もない
#selectタグ内のname値が0個でない
#selectタグ内のid値が1個もない 		             
 		        if len(SELECT_list1) == 0 \
                     and not SELECT_list2 == [] \
                         and not len(list_6) == 0 \
                             and len(list_7) == 0:
 		              list_6 = [i for i in list_6 if "product" in i \
                           or "koumoku" in i \
                               or "custom" in i \
                                   or "collection" in i \
                                       or "menu" in i \
                                           or "subject" in i \
                                               or "toiawase" in i \
                                                   or "contact" in i \
                                                       or "inquiry" in i \
                                                           or "type" in i \
                                                               or "kind" in i \
                                                                   or "項目" in i \
                                                                       or "question" in i \
                                                                           or "category" in i \
                                                                               or "state" in i \
                                                                                   or "service" in i \
                                                                                       or "item" in i]
 		              if len([i for i in items_1 if "連絡方法" in i]) > 0:
 		           		          if not list_6 == []: 		           		             
 		           		           dropdown = driver.find_element_by_name(list_6[0])
 		           		           print(list_6[0])
 		           		           select = Select(dropdown)
 		           		           select.select_by_value(SELECT_list2[len(SELECT_list2)-1])
 		           		           lastcol = len(list(ws3.row_values(k)))    
 		           		           time.sleep(1) 		           		             
 		           		           ws3.update_cell(k, lastcol+1, SELECT_list2[len(SELECT_list2)-1])
 		              else:
 		           		          if not list_6 == []: 		           		             
 		           		           dropdown = driver.find_element_by_name(list_6[0])
 		           		           print(list_6[0])
 		           		           select = Select(dropdown)
 		           		           
#選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
 		           		           select.select_by_index(len(select.options)-1)
 		           		           
#select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
#len()を使うことで選択肢の数を求めて最終選択肢を指定。
 		           		           lastcol = len(list(ws3.row_values(k)))    
 		           		           time.sleep(1) 		           		             
 		           		           ws3.update_cell(k, lastcol+1, len(select.options)-1)
# 		              pass

#optionタグ内のvalue値が0個以上
#selectタグ内のname値が0個でない
#selectタグ内のid値が1個もない
 		        elif len(SELECT_list1) > 0 \
                     and not SELECT_list2 == [] \
                         and not len(list_6) == 0 \
                             and len(list_7) == 0:

 		           list_6 = [i for i in list_6 if "product" in i \
                           or "koumoku" in i \
                               or "custom" in i \
                                   or "collection" in i \
                                       or "menu" in i \
                                           or "subject" in i \
                                               or "toiawase" in i \
                                                   or "contact" in i \
                                                       or "inquiry" in i \
                                                           or "type" in i \
                                                               or "kind" in i \
                                                                   or "項目" in i \
                                                                       or "element" in i \
                                                                           or "question" in i \
                                                                               or "category" in i \
                                                                                   or "state" in i \
                                                                                       or "service" in i \
                                                                                           or "item" in i]
                         
 		           print(len(SELECT_list2))
 		           print(len(list_6))
# 		           print(len(list_7))
 		           if len(SELECT_list2) > 0:
 		              if len([i for i in items_1 if "連絡方法" in i]) > 0:
#                                  pass
 		           		          if not list_6 == []: 		           		             
 		           		           dropdown = driver.find_element_by_name(list_6[0])
 		           		           print(list_6[0])
 		           		           select = Select(dropdown)
 		           		           select.select_by_value(SELECT_list2[len(SELECT_list2)-1])
 		           		           lastcol = len(list(ws3.row_values(k)))    
 		           		           time.sleep(1) 		           		             
 		           		           ws3.update_cell(k, lastcol+1, SELECT_list2[len(SELECT_list2)-1])
 		              else:
 		           		          if not list_6 == []: 		           		             
 		           		           dropdown = driver.find_element_by_name(list_6[0])
 		           		           print(list_6[0])
 		           		           select = Select(dropdown)

#選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
 		           		           select.select_by_index(len(select.options)-1)
 		           		           
#select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
#len()を使うことで選択肢の数を求めて最終選択肢を指定。
 		           		           lastcol = len(list(ws3.row_values(k)))    
 		           		           time.sleep(1) 		           		             
 		           		           ws3.update_cell(k, lastcol+1, len(select.options)-1)
                                       
# 		           		           select.select_by_value(SELECT_list2[len(SELECT_list2)-1])
# 		           		           lastcol = len(list(ws3.row_values(k)))    
# 		           		           time.sleep(1) 		           		             
# 		           		           ws3.update_cell(k, lastcol+1, SELECT_list2[len(SELECT_list2)-1])

#optionタグ内のvalue値が0個以上
#selectタグ内のname値が1個もない
#selectタグ内のid値が0個でない
 		        elif len(SELECT_list1) > 0 \
                     and not SELECT_list2 == [] \
                         and len(list_6) == 0 \
                             and not len(list_7) == 0:
 		             list_7 = [i for i in list_7 if "product" in i \
                          or "koumoku" in i \
                              or "custom" in i \
                                  or "collection" in i \
                                      or "menu" in i \
                                          or "subject" in i \
                                              or "toiawase" in i \
                                                  or "contact" in i \
                                                      or "inquiry" in i \
                                                          or "type" in i \
                                                              or "kind" in i \
                                                                  or "項目" in i \
                                                                      or "element" in i \
                                                                          or "question" in i \
                                                                              or "category" in i \
                                                                                  or "state" in i \
                                                                                      or "service" in i \
                                                                                          or "item" in i]
 		             print(len(SELECT_list2))
# 		             print(len(list_6))
 		             print(len(list_7))
 		             if len(SELECT_list2) > 0:
 		               if len([i for i in items_1 if "連絡方法" in i]) > 0:
#                                  pass
 		           		          if not list_7 == []:
 		           		           dropdown = driver.find_element_by_id(list_7[0])
 		           		           print(list_7[0])
 		           		           select = Select(dropdown)
 		           		           select.select_by_value(SELECT_list2[len(SELECT_list2)-1])
 		           		           lastcol = len(list(ws3.row_values(k)))    
 		           		           time.sleep(1) 		           		             
 		           		           ws3.update_cell(k, lastcol+1, SELECT_list2[len(SELECT_list2)-1])

 		               else:
 		                 if not list_7 == []:
 		                   dropdown = driver.find_element_by_id(list_7[0])
 		                   print(list_7[0])
 		                   select = Select(dropdown)
 		                   select.select_by_value(SELECT_list2[len(SELECT_list2)-1])
 		                   lastcol = len(list(ws3.row_values(k)))    
 		                   time.sleep(1) 		           		             
 		                   ws3.update_cell(k, lastcol+1, SELECT_list2[len(SELECT_list2)-1])


#optionタグ内のvalue値が0個以上
#selectタグ内のname値が0個でない
#selectタグ内のid値が0個でない
 		        elif len(SELECT_list1) > 0 \
                     and not SELECT_list2 == [] \
                         and not len(list_6) == 0 \
                             and not len(list_7) == 0:
 		             print(len(SELECT_list2))
 		             print(len(list_6))
 		             print(len(list_7))
 		             if len(SELECT_list2) > 0:
 		               if len([i for i in items_1 if "連絡方法" in i]) > 0:
#                                  pass
 		           		          if not list_7 == []:
 		           		           dropdown = driver.find_element_by_id(list_7[0])
 		           		           print(list_7[0])
 		           		           select = Select(dropdown)
 		           		           select.select_by_value(SELECT_list2[len(SELECT_list2)-1])
 		           		           lastcol = len(list(ws3.row_values(k)))    
 		           		           time.sleep(1) 		           		             
 		           		           ws3.update_cell(k, lastcol+1, SELECT_list2[len(SELECT_list2)-1])

 		               else:
 		                 if not list_7 == []:
 		                   dropdown = driver.find_element_by_id(list_7[0])
 		                   print(list_7[0])
 		                   select = Select(dropdown)
#選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
# 		                   select.select_by_index(len(select.options)-1)
 		           		           
#select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
#len()を使うことで選択肢の数を求めて最終選択肢を指定。
# 		                   lastcol = len(list(ws3.row_values(k)))    
# 		                   time.sleep(1) 		           		             
# 		                   ws3.update_cell(k, lastcol+1, len(select.options)-1)
                            
 		                   select.select_by_value(SELECT_list2[len(SELECT_list2)-1])
 		                   lastcol = len(list(ws3.row_values(k)))    
 		                   time.sleep(1) 		           		             
 		                   ws3.update_cell(k, lastcol+1, SELECT_list2[len(SELECT_list2)-1])


#連絡可能時間
 		        elif len(SELECT_list1) > 0 \
                     and not SELECT_list2 == [] \
                         and not len([i for i in list_6 if "time" in i]) == 0 \
                             and len(list_7) == 0:
 		              list_6 = [i for i in list_6 if "time" in i]
 		              dropdown = driver.find_element_by_name(list_6[0])
 		              print(list_6[0])
 		              select = Select(dropdown)
 		           		           
#選択肢の数が決まっておらず、最後の選択肢を選択したい場合は次のようにする。
 		              select.select_by_index(len(select.options)-1)
 		           		           
#select.optionsでは、selectタグ内のすべての選択肢（option）が返ってくる。
#len()を使うことで選択肢の数を求めて最終選択肢を指定。
 		              lastcol = len(list(ws3.row_values(k)))
 		              time.sleep(1)
 		              ws3.update_cell(k, lastcol+1, len(select.options)-1)

                       
 		        else:
 		             lastcol = len(list(ws3.row_values(k)))
 		             ws3.update_cell(k, lastcol+1, "ドロップボックスなし（又は未選択）")

#プルダウンメニュー
# 		           list_6 = []
# 		           for element5 in soup.find_all("select"):
# 		            list_6.append(element5.get("name"))
# 		           list_6 =[i for i in list_6 if i is not None]
# 		           print(list_6)
# 		           list_7 = []
# 		           for element5 in soup.find_all("select"):
# 		            list_7.append(element5.get("id"))
# 		           list_7 =[i for i in list_7 if i is not None]
# 		           print(list_7)

 		           		             
#（連絡方法）・・・必要になったら後日検討
# 		           SELECT_list2 = [] 		            
# 		           SELECT_list2 = [i for i in SELECT_list1 if "メール" in i]
# 		           print(SELECT_list2)
 		            
# 		           if len(list_6) > 0:
# 		             for j in range(1, len(SELECT_list2)+1):
# 		              time.sleep(1) 		           		          
# 		             ws4.update_cell(Cell_12.row, Cell_12.col+1, SELECT_list2[j-1])
# 		              dropdown = driver.find_element_by_name(list_6[0])
# 		              print(list_6[0])
# 		             dropdown.click()
# 		              select = Select(dropdown)
# 		              select.select_by_value(SELECT_list2[j-1])

#（アンケート）
 		        if "知りましたか" in str(soup.find_all("form")) \
                        or "お知りに" in str(soup.find_all("form")):
 		            SELECT_list2 = [i for i in SELECT_list1 if "ネット" in i]
 		            print(SELECT_list2)
 		            
 		            if len(list_6) == 1:
 		             for j in range(1, len(SELECT_list2)+1):
 		              time.sleep(1) 		           		          
# 		             ws4.update_cell(Cell_12.row, Cell_12.col+1, SELECT_list2[j-1])
 		              dropdown = driver.find_element_by_name(list_6[0])
 		              print(list_6[0])
# 		             dropdown.click()
 		              select = Select(dropdown)
 		              select.select_by_value(SELECT_list2[j-1])
 		              
 		            if len(list_6) > 1:
 		             for j in range(1, len(SELECT_list2)+1):
 		              time.sleep(1) 		           		          
# 		             ws4.update_cell(Cell_12.row, Cell_12.col+1, SELECT_list2[j-1])
 		              dropdown = driver.find_element_by_name(list_6[1])
 		              print(list_6[1])
# 		             dropdown.click()
 		              select = Select(dropdown)
 		              select.select_by_value(SELECT_list2[j-1]) 		              

#後で対応項目追加予定
# 		           elif len([i for i in list_2 if "知りましたか" in i \
# 		           		           		           		           		           or "お知りに" in i]) > 0:
# 		           		            Cell_list9 = [i for i in list_2 if "知りましたか" in i \
# 		           		           		           		           		           or "お知りに" in i]
# 		           		            print(Cell_list9)
# 		           		            driver.find_element_by_name(Cell_list9[0]).send_keys(ws2.cell(1, 3).value)
# 		           		            lastcol = len(list(ws3.row_values(k)))
# 		           		            time.sleep(1) 		           		             
# 		           		            ws3.update_cell(k, lastcol+1, ws2.cell(1, 3).value)


#チェックボックス
 		        element6 = soup.find_all("input",type="checkbox")
 		        print(element6)
 		        list_6 = []
 		            
#name
 		        SELECT_list3 = []
 		        for elem1 in element6:
 		             SELECT_list3.append(elem1.get("name"))

#リストにNoneが含まれていると「TypeError: argument of type 'NoneType' is not iterable」
#が発生するので、リスト内包表記で処理
 		        SELECT_list3 = [i for i in SELECT_list3 if i is not None]
 		        print(SELECT_list3)

#id
 		        SELECT_list4 = []
 		        for elem2 in element6: 
 		             SELECT_list4.append(elem2.get("id"))
 		             
 		        SELECT_list4 = [i for i in SELECT_list4 if i is not None]
 		        print(SELECT_list4)

#value
 		        SELECT_list5 = []
 		        for elem1 in element6: 
 		             SELECT_list5.append(elem1.get("value"))

 		        SELECT_list5 = [i for i in SELECT_list5 if i is not None]
 		        print(SELECT_list5)

#data-name
 		        SELECT_list6 = []
 		        for elem1 in element6: 
 		            SELECT_list6.append(elem1.get("data-name"))

#リストにNoneが含まれていると「TypeError: argument of type 'NoneType' is not iterable」
#が発生するので、リスト内包表記で処理
 		        SELECT_list6 = [i for i in SELECT_list6 if i is not None]
 		        print(SELECT_list6)


#（個人情報取り扱いに関する同意）
 		        if "個人情報" in str(soup.find_all("form")) \
                       or "同意" in str(soup.find_all("form")) \
                           or "プライバシーポリシー" in str(soup.find_all("form")) \
                               and not len([i for i in SELECT_list5 if "個人情報" in i \
                                            or "同意" in i \
                                                or "プライバシーポリシー" in i \
                                                    or "反社会的勢力" in i \
                                                        or "確認" in i \
                                                            and i is not None]) == 0:
 		            print("個人情報取り扱いに関するチェックボタン")
                     
#name、idの両方が存在する場合
 		            if len(SELECT_list3) == 1 \
                         and len(SELECT_list4) == 1 \
                             and len(SELECT_list5) == 0:
 		              checkbox = driver.find_element_by_name(SELECT_list3[0])
 		              if checkbox.is_selected() is not True:
 		           		          driver.execute_script("arguments[0].click();", checkbox) 		           		             
 		           		          lastcol = len(list(ws3.row_values(k)))
 		           		          time.sleep(1) 		           		             
 		           		          ws3.update_cell(k, lastcol+1, SELECT_list3[0])
 		           		          print(checkbox.is_selected())
 		           		          if checkbox.is_selected() is not True:
 		           		             checkbox = driver.find_element_by_id(SELECT_list4[0])
 		           		             driver.execute_script("arguments[0].click();", checkbox) 		           		             
 		           		             lastcol = len(list(ws3.row_values(k)))
 		           		             time.sleep(1) 		           		             
 		           		             ws3.update_cell(k, lastcol+1, SELECT_list4[0])
 		           		             print(checkbox.is_selected())
# 		              else:
# 		           		          checkbox = driver.find_element_by_name(SELECT_list3[0])
# 		           		          driver.execute_script("arguments[0].click();", checkbox)
# 		           		          print(checkbox.is_selected())
# 		           		          lastcol = len(list(ws3.row_values(k)))
# 		           		          time.sleep(1) 		           		             
# 		           		          ws3.update_cell(k, lastcol+1, SELECT_list3[0])

 		            elif len(SELECT_list3) == 2 \
                         and len(SELECT_list4) == 2 \
                             and len(SELECT_list5) == 0:
 		              checkbox = driver.find_element_by_id(SELECT_list4[0])
 		              if checkbox.is_selected() is not True:
 		           		          driver.execute_script("arguments[0].click();", checkbox) 		           		             
 		           		          lastcol = len(list(ws3.row_values(k)))
 		           		          time.sleep(1) 		           		             
 		           		          ws3.update_cell(k, lastcol+1, SELECT_list4[0])
 		           		          print(checkbox.is_selected()) 		           		          

 		            elif len(SELECT_list3) > 1 \
                         and len(SELECT_list4) > 1 \
                             and len(SELECT_list5) == 0:
 		              checkbox = driver.find_element_by_id(SELECT_list4[len(SELECT_list4)-1])
 		              driver.execute_script("arguments[0].click();", checkbox)
 		              print(checkbox.is_selected()) 		              
 		              lastcol = len(list(ws3.row_values(k)))    
 		              time.sleep(1) 		           		             
 		              ws3.update_cell(k, lastcol+1, SELECT_list4[len(SELECT_list4)-1]) 		              
# 		              break
#nameのみ存在
 		            elif len(SELECT_list3) == 1 \
                         and len(SELECT_list4) == 0 \
                             and len(SELECT_list5) == 0:
 		              checkbox = driver.find_element_by_name(SELECT_list3[0])
 		              if checkbox.is_selected() is not True:
 		           		          driver.execute_script("arguments[0].click();", checkbox)
 		           		          print(checkbox.is_selected()) 		              
 		           		          lastcol = len(list(ws3.row_values(k)))    
 		           		          time.sleep(1) 		           		             
 		           		          ws3.update_cell(k, lastcol+1, SELECT_list3[0])
 		            elif len(SELECT_list3) > 1 \
                         and len(SELECT_list4) == 0 \
                             and len([i for i in SELECT_list5 if "個人情報" in i \
                                          or "同意" in i \
                                              or "プライバシーポリシー" in i \
                                                  and i is not None]) == 0:
 		              checkbox = driver.find_element_by_name(SELECT_list3[len(SELECT_list3)-1])
 		              if checkbox.is_selected() is not True:
 		           		          driver.execute_script("arguments[0].click();", checkbox)
 		           		          print(checkbox.is_selected()) 		           		           		             
 		           		          lastcol = len(list(ws3.row_values(k)))    
 		           		          time.sleep(1) 		           		             
 		           		          ws3.update_cell(k, lastcol+1, SELECT_list3[len(SELECT_list3)-1])
# 		              break
 		            elif not len([i for i in SELECT_list3 if "accept" in i \
                                          and i is not None]) == 0 \
                                              and len(SELECT_list4) == 0 \
                                                  and len(SELECT_list5) == 0:
 		              checkbox = driver.find_element_by_name(SELECT_list3[len(SELECT_list3)-1])
 		              if checkbox.is_selected() is not True:
 		           		          driver.execute_script("arguments[0].click();", checkbox)
 		           		          print(checkbox.is_selected()) 		           		           		             
 		           		          lastcol = len(list(ws3.row_values(k)))    
 		           		          time.sleep(1) 		           		             
 		           		          ws3.update_cell(k, lastcol+1, SELECT_list3[len(SELECT_list3)-1])


#idのみ存在する場合
 		            elif len(SELECT_list3) == 0 \
                         and len(SELECT_list4) == 1 \
                             and len(SELECT_list5) == 0:
 		              checkbox = driver.find_element_by_id(SELECT_list4[0])
 		              if checkbox.is_selected() is not True:
 		           		          driver.execute_script("arguments[0].click();", checkbox)
 		           		          print(checkbox.is_selected()) 		              
# 		              if checkbox.is_selected() is True:
 		           		          lastcol = len(list(ws3.row_values(k)))
 		           		          time.sleep(1) 		           		             
 		           		          ws3.update_cell(k, lastcol+1, SELECT_list4[0])
 		           		          
#valueのみ存在する場合
 		            elif len(SELECT_list3) == 0 \
                         and len(SELECT_list4) == 0 \
                             and len(SELECT_list5) == 1:
 		              checkbox = driver.find_element_by_css_selector("[value='1']")
 		              if checkbox.is_selected() is not True:
 		           		          driver.execute_script("arguments[0].click();", checkbox)
 		           		          print(checkbox.is_selected()) 		              
# 		              if checkbox.is_selected() is True:
 		           		          lastcol = len(list(ws3.row_values(k)))
 		           		          time.sleep(1) 		           		             
 		           		          ws3.update_cell(k, lastcol+1, SELECT_list5[0])

#name及びvalue（SELECT_list5）の両方存在
 		            elif len(SELECT_list3) == 1 \
                         and len(SELECT_list4) == 0 \
                             and len(SELECT_list5) == 1:
 		              checkbox = driver.find_element_by_name(SELECT_list3[0])
 		              if checkbox.is_selected() is not True:
 		           		          driver.execute_script("arguments[0].click();", checkbox)
 		           		          print(checkbox.is_selected()) 		              
 		           		          lastcol = len(list(ws3.row_values(k)))    
 		           		          time.sleep(1) 		           		             
 		           		          ws3.update_cell(k, lastcol+1, SELECT_list3[0])
 		            elif len(SELECT_list3) > 1 \
                         and len(SELECT_list4) == 0 \
                             and not len([i for i in SELECT_list5 if "個人情報" in i \
                                          or "同意" in i \
                                              or "プライバシーポリシー" in i \
                                                  or "反社会的勢力" in i \
                                                      or "確認" in i \
                                                          and i is not None]) == 0:
 		              if len(SELECT_list3) == 3:
 		                for i in range(len(SELECT_list3)+1):
 		                  checkbox = driver.find_element_by_name(SELECT_list3[i-1])
 		                  if checkbox.is_selected() is not True:
       		           		          driver.execute_script("arguments[0].click();", checkbox)
       		           		          print(checkbox.is_selected()) 		           		           		             
       		           		          lastcol = len(list(ws3.row_values(k)))    
       		           		          time.sleep(1) 		           		             
       		           		          ws3.update_cell(k, lastcol+1, SELECT_list3[i-1])
 		              else:
 		                checkbox = driver.find_element_by_name(SELECT_list3[len(SELECT_list3)-1])
 		                print(checkbox.is_selected())
 		                if checkbox.is_selected() is not True:
 		           		          driver.execute_script("arguments[0].click();", checkbox)
 		           		          print(checkbox.is_selected())
 		           		          lastcol = len(list(ws3.row_values(k)))    
 		           		          time.sleep(1) 		           		             
 		           		          ws3.update_cell(k, lastcol+1, SELECT_list3[len(SELECT_list3)-1])
 		                elif checkbox.is_selected() is True \
                             and not len([i for i in SELECT_list5 if "個人情報" in i \
                                          or "同意" in i \
                                              or "プライバシーポリシー" in i \
                                                  or "反社会的勢力" in i \
                                                      or "確認" in i \
                                                          and i is not None]) == 0:
 		                  SELECT_list5 = [i for i in SELECT_list5 if "個人情報" in i \
                                        or "同意" in i \
                                            or "プライバシーポリシー" in i \
                                                or "反社会的勢力" in i \
                                                    or "確認" in i \
                                                        and i is not None]
 		                  print(SELECT_list5)
 		                  checkbox = driver.find_element_by_css_selector("[value='"+ SELECT_list5[0] + "']")
 		                  driver.execute_script("arguments[0].click();", checkbox)
 		                  print(checkbox.is_selected()) 		           		           		             
 		                  lastcol = len(list(ws3.row_values(k)))    
 		                  time.sleep(1) 		           		             
 		                  ws3.update_cell(k, lastcol+1, SELECT_list5[0])     
# 		              break

#name及びvalue（SELECT_list5）且つid（SELECT_list4）の全て存在
 		            elif len(SELECT_list3) == 1 \
                         and len(SELECT_list4) == 1 \
                             and len(SELECT_list5) == 1:
 		              checkbox = driver.find_element_by_name(SELECT_list3[0])
 		              if checkbox.is_selected() is not True:
 		           		          driver.execute_script("arguments[0].click();", checkbox)
 		           		          print(checkbox.is_selected()) 		              
 		           		          lastcol = len(list(ws3.row_values(k)))    
 		           		          time.sleep(1) 		           		             
 		           		          ws3.update_cell(k, lastcol+1, SELECT_list3[0])
 		            elif len(SELECT_list3) > 1 \
                         and len(SELECT_list4) > 1 \
                             and not len([i for i in SELECT_list5 if "個人情報" in i \
                                          or "同意" in i \
                                              or "プライバシーポリシー" in i \
                                                  or "反社会的勢力" in i \
                                                      or "確認" in i \
                                                          and i is not None]) == 0:
 		              if len(SELECT_list3) == 3:
 		                for i in range(len(SELECT_list3)+1):
 		                  checkbox = driver.find_element_by_name(SELECT_list3[i-1])
 		                  if checkbox.is_selected() is not True:
       		           		          driver.execute_script("arguments[0].click();", checkbox)
       		           		          print(checkbox.is_selected()) 		           		           		             
       		           		          lastcol = len(list(ws3.row_values(k)))    
       		           		          time.sleep(1) 		           		             
       		           		          ws3.update_cell(k, lastcol+1, SELECT_list3[i-1])
 		              else:
 		                checkbox = driver.find_element_by_name(SELECT_list3[len(SELECT_list3)-1])
 		                print(checkbox.is_selected())
 		                if checkbox.is_selected() is not True:
 		           		          driver.execute_script("arguments[0].click();", checkbox)
 		           		          print(checkbox.is_selected())
 		           		          lastcol = len(list(ws3.row_values(k)))    
 		           		          time.sleep(1) 		           		             
 		           		          ws3.update_cell(k, lastcol+1, SELECT_list3[len(SELECT_list3)-1])
 		                elif checkbox.is_selected() is True \
                             and not len([i for i in SELECT_list5 if "個人情報" in i \
                                          or "同意" in i \
                                              or "プライバシーポリシー" in i \
                                                  or "反社会的勢力" in i \
                                                      or "確認" in i \
                                                          and i is not None]) == 0:
 		                  SELECT_list5 = [i for i in SELECT_list5 if "個人情報" in i \
                                        or "同意" in i \
                                            or "プライバシーポリシー" in i \
                                                or "反社会的勢力" in i \
                                                    or "確認" in i \
                                                        and i is not None]
 		                  print(SELECT_list5)
 		                  checkbox = driver.find_element_by_css_selector("[value='"+ SELECT_list5[0] + "']")
 		                  driver.execute_script("arguments[0].click();", checkbox)
 		                  print(checkbox.is_selected()) 		           		           		             
 		                  lastcol = len(list(ws3.row_values(k)))    
 		                  time.sleep(1) 		           		             
 		                  ws3.update_cell(k, lastcol+1, SELECT_list5[0])


#その他
 		            elif not len([i for i in SELECT_list3 if "accept" in i \
                                          and i is not None]) == 0:
 		              checkbox = driver.find_element_by_name(SELECT_list3[len(SELECT_list3)-1])
 		              if checkbox.is_selected() is not True:
 		           		          driver.execute_script("arguments[0].click();", checkbox)
 		           		          print(checkbox.is_selected()) 		           		           		             
 		           		          lastcol = len(list(ws3.row_values(k)))    
 		           		          time.sleep(1) 		           		             
 		           		          ws3.update_cell(k, lastcol+1, SELECT_list3[len(SELECT_list3)-1])

                 
#お問い合わせの内容、項目選択

#（指定のキーワードが含まれない）
 		        if len([i for i in list_1 if "内容" in i \
                     or "件名" in i \
                         or "項目" in i \
                             or "種別" in i \
                                 or "ジャンル" in i \
                                     or "用件" in i]) == 0:
 		           pass

#（指定のキーワードが含まれる）
 		        elif not len([i for i in list_1 if "内容" in i \
                           or "件名" in i \
                               or "項目" in i \
                                   or "種別" in i \
                                       or "ジャンル" in i \
                                           or "用件" in i]) == 0:
 		           		          
#両リスト（SELECT_list3及びSELECT_list4）の要素が1個以上存在する場合において、
#更にリスト内包表記で処理

#リストにNoneが含まれていると「TypeError: argument of type 'NoneType' is not iterable」
#が発生するのでリスト内包表記で処理。
#（※SELECT_list5にNoneしか無い場合もある為「TypeError: argument of type 'NoneType' is not iterable」を回避）

#選択肢：その他又はお問い合わせ
 		           		          if len([i for i in SELECT_list5 if "その他" in i \
                                  or "お問い合わせ" in i]) > 0 \
                                    or len([i for i in SELECT_list6 if "その他" in i \
                                         or "お問い合わせ" in i]) > 0:
 		           		            SELECT_list5 = [i for i in SELECT_list5 if "その他" in i \
                                            or "お問い合わせ" in i \
                                                and i is not None]
 		           		            print(SELECT_list5)
 		           		            SELECT_list6 = [i for i in SELECT_list6 if "その他" in i \
                                            or "お問い合わせ" in i \
                                                and i is not None]
 		           		            print(SELECT_list6)


#data-name且つid要素が存在する
 		           		            if len(SELECT_list6) > 0 \
                                            and len(SELECT_list4) > 0 \
                                                and len(SELECT_list5) == 0 \
                                                    and len(SELECT_list3) == 0:
 		           		              print(len(SELECT_list6))
 		           		              print(len(SELECT_list4))
 		           		              checkbox = driver.find_element_by_id(SELECT_list6[len(SELECT_list6)-1])
 		           		              if checkbox.is_selected() is not True:
 		           		                driver.execute_script("arguments[0].click();", checkbox)
 		           		                print(checkbox.is_selected()) 		           		          
 		           		                if checkbox.is_selected() is True: 		           		           
 		           		           		           lastcol = len(list(ws3.row_values(k)))    
 		           		           		           time.sleep(1) 		           		             
 		           		           		           ws3.update_cell(k, lastcol+1, SELECT_list6[len(SELECT_list6)-1])
 		           		           		           print(checkbox.is_selected())

#後で要チェック
#id，value，name要素が存在する
 		           		            elif len(SELECT_list6) == 0 \
                                            and len(SELECT_list4) > 0 \
                                                and len(SELECT_list5) > 0 \
                                                    and len(SELECT_list3) > 0:

 		           		              print(len(SELECT_list4))
 		           		              print(len(SELECT_list5))
 		           		              print(len(SELECT_list3))

 		           		              try:
 		           		                checkbox = driver.find_element_by_css_selector("[" + "value=" + SELECT_list5[0] +"]")
 		           		                if checkbox.is_selected() is not True:                                            
 		           		                  driver.execute_script("arguments[0].click();", checkbox)
 		           		                  print(checkbox.is_selected()) 		           		          
 		           		                  if checkbox.is_selected() is True: 		           		           
 		           		           		           lastcol = len(list(ws3.row_values(k)))    
 		           		           		           time.sleep(1) 		           		             
 		           		           		           ws3.update_cell(k, lastcol+1, SELECT_list5[len(SELECT_list5)-1])
 		           		           		           print(checkbox.is_selected())
 		           		              except:
 		           		                pass
                                          
#valueのみしか存在しない
 		           		            elif len(SELECT_list6) == 0 \
                                            and len(SELECT_list4) == 0 \
                                                and len(SELECT_list5) > 0 \
                                                    and len(SELECT_list3) == 0:
 		           		             print(len(SELECT_list6))
 		           		             print(len(SELECT_list4))
 		           		             print(len(SELECT_list5))
 		           		             print(len(SELECT_list3))

 		           		             try:
 		           		               checkbox = driver.find_element_by_css_selector("[" + "value=" + SELECT_list5[0] +"]")
 		           		               if checkbox.is_selected() is not True:
 		           		                    driver.execute_script("arguments[0].click();", checkbox)
 		           		                    print(checkbox.is_selected())
 		           		                    if checkbox.is_selected() is True:
 		           		           		          lastcol = len(list(ws3.row_values(k)))    
 		           		           		          time.sleep(1) 		           		             
 		           		           		          ws3.update_cell(k, lastcol+1, SELECT_list5[len(SELECT_list5)-1])
 		           		           		          print(checkbox.is_selected())                                                         
 		           		             except:
 		           		               pass

#id且つvalueの両方存在
 		           		            elif len(SELECT_list6) == 0 \
                                            and len(SELECT_list4) > 0 \
                                                and len(SELECT_list5) > 0 \
                                                    and len(SELECT_list3) == 0:
 		           		              print(len(SELECT_list6))
 		           		              print(len(SELECT_list4))
 		           		              print(len(SELECT_list5))
 		           		              print(len(SELECT_list3))

 		           		              checkbox = driver.find_element_by_id(SELECT_list4[len(SELECT_list4)-1])
 		           		              if checkbox.is_selected() is not True:
 		           		                    driver.execute_script("arguments[0].click();", checkbox)
 		           		                    print(checkbox.is_selected())
 		           		                    if checkbox.is_selected() is True:
 		           		           		           lastcol = len(list(ws3.row_values(k)))    
 		           		           		           time.sleep(1) 		           		             
 		           		           		           ws3.update_cell(k, lastcol+1, SELECT_list4[len(SELECT_list4)-1])
 		           		           		           print(checkbox.is_selected())

#value且つnameの両方存在
 		           		            elif len(SELECT_list6) == 0 \
                                            and len(SELECT_list4) == 0 \
                                                and len(SELECT_list5) > 0 \
                                                    and len(SELECT_list3) > 0:
 		           		              print(len(SELECT_list6))
 		           		              print(len(SELECT_list4))
 		           		              print(len(SELECT_list5))
 		           		              print(len(SELECT_list3))

#一旦チェックボックスを外す
 		           		              if "その他" in SELECT_list5[0]:
 		           		                  try:                                                
 		           		           		           checkbox1 = driver.find_element_by_css_selector("[" + "value=" + SELECT_list5[0] +"]")
 		           		           		           print(checkbox1.is_selected())
                                                            
#選択状態にある場合
 		           		           		           lastcol = len(list(ws3.row_values(k)))
 		           		           		           cell_list2 = ws3.range(k, 7, k, lastcol)
 		           		           		           print(cell_list2)
 		           		           		           if checkbox1.is_selected() is True \
                                                              and "その他" in cell_list2:
 		           		           		             pass

#選択状態にない場合
 		           		           		           elif checkbox1.is_selected() is False \
                                                              and not "その他" in cell_list2:
 		           		           		             checkbox = driver.find_element_by_css_selector("[" + "value=" + SELECT_list5[0] +"]")
 		           		           		             driver.execute_script("arguments[0].click();", checkbox)
 		           		           		             print(checkbox.is_selected())
 		           		           		             if checkbox.is_selected() is True:
 		           		           		           		          lastcol = len(list(ws3.row_values(k)))    
 		           		           		           		          time.sleep(1) 		           		             
 		           		           		           		          ws3.update_cell(k, lastcol+1, "その他（再選択）")
 		           		                  except:
 		           		                    pass

#一旦チェックボックスを外す
# 		           		           		           checkbox2 = driver.find_element_by_name(SELECT_list7[len(SELECT_list7)-1])

#選択状態にある場合
# 		           		           		           if checkbox2.is_selected() is True:
# 		           		           		             driver.execute_script("arguments[0].click();", checkbox2) 		           		           

#選択状態にない場合
# 		           		           		           elif checkbox2.is_selected() is False:
# 		           		           		             checkbox = driver.find_elements_by_css_selector("[value='その他']")[1]
# 		           		           		             driver.execute_script("arguments[0].click();", checkbox)
# 		           		           		             print(checkbox.is_selected()) 		           		          
# 		           		           		             if checkbox.is_selected() is True: 		           		           
# 		           		           		           		          lastcol = len(list(ws3.row_values(k)))    
# 		           		           		           		          time.sleep(1) 		           		             
# 		           		           		           		          ws3.update_cell(k, lastcol+1, "その他2")

 		           		              elif "お問い合わせ" in SELECT_list5[0]:
 		           		                try:
 		           		                  checkbox = driver.find_elements_by_css_selector("[" + "value=" + SELECT_list5[0] +"]")[0]
 		           		                  if checkbox.is_selected() is not True:
 		           		                    driver.execute_script("arguments[0].click();", checkbox)
 		           		                    print(checkbox.is_selected())
 		           		                    if checkbox.is_selected() is True:
 		           		                      lastcol = len(list(ws3.row_values(k)))    
 		           		                      time.sleep(1) 		           		             
 		           		                      ws3.update_cell(k, lastcol+1, SELECT_list5[0])
 		           		                except:
 		           		                  pass
                                          

#どちらの回答方法を希望するか？
 		        if "返信方法" in str(soup.find_all("form")) \
                       or "連絡方法" in str(soup.find_all("form")):
 		              SELECT_list3 = [i for i in SELECT_list3 if "メール" in i \
                                 or "mail" in i \
                                     and i is not None]
 		              SELECT_list4 = [i for i in SELECT_list4 if "メール" in i \
                                 or "mail" in i \
                                     and i is not None]
# 		              SELECT_list5 = [i for i in SELECT_list5 if "メール" in i \
# 		           		           		           		           		          or "mail" in i \
# 		           		           		           		           		              and i is not None] 		           		             

#spanタグの指定要素のみ取得
 		              element9 = soup.find_all("span",class_="mwform-checkbox-field-text")
 		              print(element9)
 		              list_9sc = []

#各属性値 		         		           
 		              for elem in element9:
 		                list_9sc.append(elem.getText())

#class値
 		              list_9sc = [i for i in list_9sc if i is not None]
 		              print(list_9sc)

 		              
#両リスト（SELECT_list3及びSELECT_list4）の要素が1個以上存在する場合において、
#更にリスト内包表記で処理
 		              try:
 		                if len(SELECT_list6) > 0 \
                             and len(SELECT_list4) > 0 \
                                 and len(SELECT_list5) == 0:
 		           		          print(len(SELECT_list6))
 		           		          print(len(SELECT_list4))
 		           		          checkbox = driver.find_element_by_id(SELECT_list4[len(SELECT_list6)-2])
 		           		          if checkbox.is_selected() is not True:
 		           		            driver.execute_script("arguments[0].click();", checkbox)
 		           		            if checkbox.is_selected() is True:
 		           		              lastcol = len(list(ws3.row_values(k)))    
 		           		              time.sleep(1) 		           		             
 		           		              ws3.update_cell(k, lastcol+1, SELECT_list4[len(SELECT_list6)-2])
 		           		              print(checkbox.is_selected())
# 		           		          elif checkbox.is_selected() is False:

#（idのみ）
 		                elif len(SELECT_list6) == 0 \
                             and len(SELECT_list4) > 0 \
                                 and len(SELECT_list5) == 0 \
                                     and len(SELECT_list3) == 0:
 		           		          print(len(SELECT_list4))
 		           		          checkbox = driver.find_element_by_id(SELECT_list4[len(SELECT_list4)-1])
 		           		          if checkbox.is_selected() is not True:
 		           		            driver.execute_script("arguments[0].click();", checkbox)
 		           		            if checkbox.is_selected() is True:                                      
 		           		              lastcol = len(list(ws3.row_values(k)))
 		           		              time.sleep(1) 		           		             
 		           		              ws3.update_cell(k, lastcol+1, SELECT_list4[len(SELECT_list4)-1])
 		           		              print(checkbox.is_selected())

#（valueのみ）
 		                elif len(SELECT_list6) == 0 \
                             and len(SELECT_list4) == 0 \
                                 and len(SELECT_list5) > 0 \
                                     and len(SELECT_list3) == 0:
 		           		          print(len(SELECT_list5))
# 		           		          try:
 		           		          if len([i for i in SELECT_list5 if "メール" in i]) > 0:
 		           		              SELECT_list5 = [i for i in SELECT_list5 if "メール" in i]
 		           		              checkbox = driver.find_element_by_css_selector("[value='" + SELECT_list5[0] + "']")
 		           		              if checkbox.is_selected() is not True:
 		           		                driver.execute_script("arguments[0].click();", checkbox)
 		           		                print(checkbox.is_selected())
 		           		                if checkbox.is_selected() is True:
 		           		                  lastcol = len(list(ws3.row_values(k)))    
 		           		                  time.sleep(1) 		           		             
 		           		                  ws3.update_cell(k, lastcol+1, SELECT_list5[0])
# 		           		          except:
                                          
 		           		          elif len([i for i in SELECT_list5 if "mail" in i]) > 0:
 		           		              SELECT_list5 = [i for i in SELECT_list5 if "mail" in i]
 		           		              checkbox = driver.find_element_by_css_selector("[value='" + SELECT_list5[0] + "']")
 		           		              if checkbox.is_selected() is not True:
 		           		                driver.execute_script("arguments[0].click();", checkbox)
 		           		                print(checkbox.is_selected())
 		           		                if checkbox.is_selected() is True:
 		           		                  lastcol = len(list(ws3.row_values(k)))    
 		           		                  time.sleep(1) 		           		             
 		           		                  ws3.update_cell(k, lastcol+1, SELECT_list5[0])
                                       
#（id・value・nameが全て存在）
# 		              elif len(SELECT_list3) == 0 \
#                           and len(SELECT_list4) > 0 \
#                               and len(SELECT_list5) > 0 \
#                                   and len(SELECT_list7) > 0:
# 		           		              print(len(SELECT_list4))
# 		           		              print(len(SELECT_list5))
# 		           		              print(len(SELECT_list7))

# 		           		              try:
 		                elif len([i for i in list_9sc if "メール" in i]) > 0 \
                             and len(list_9sc) == 2:

#複数要素から任意の番数を指定する際、
#「find_element_by」では「TypeError: 'WebElement' object is not subscriptable」となるので要注意！！
 		           		                  checkbox = driver.find_elements_by_name(SELECT_list3[len(SELECT_list3)-1])[len(SELECT_list3)-1]
 		           		                  if checkbox.is_selected() is not True:                                              
 		           		                    driver.execute_script("arguments[0].click();", checkbox)
 		           		                    if checkbox.is_selected() is True:
 		           		                      lastcol = len(list(ws3.row_values(k)))    
 		           		                      time.sleep(1) 		           		             
 		           		                      ws3.update_cell(k, lastcol+1, SELECT_list3[len(SELECT_list3)-1])
 		           		                      print(checkbox.is_selected())
# 		           		              except:
 		              except:
 		                pass
 		             
#（メール配信）
 		        if "希望しない" in str(soup.find_all("form")):
 		           		           		            
 		            SELECT_list3 = []
 		            for elem1 in element6: 
 		             SELECT_list3.append(elem1.get("name"))

#リストにNoneが含まれていると「TypeError: argument of type 'NoneType' is not iterable」
#が発生するので、リスト内包表記で処理
 		            SELECT_list3 = [i for i in SELECT_list3 if i is not None]
 		            print(SELECT_list3)
 		            
 		            SELECT_list4 = []
 		            for elem2 in element6: 
 		             SELECT_list4.append(elem2.get("id"))
 		             
#リストにNoneが含まれていると「TypeError: argument of type 'NoneType' is not iterable」
#が発生するので、リスト内包表記で処理
 		            SELECT_list4 = [i for i in SELECT_list4 if i is not None]
 		            print(SELECT_list4)
# 		            for i in range(1, len(SELECT_list3)+1):
 		           		           
#name、idの両方が存在する場合
 		            try:
 		              if len(SELECT_list3) == 1 \
                           and len(SELECT_list4) == 1:
 		                checkbox = driver.find_element_by_id(SELECT_list4[0])
 		                driver.execute_script("arguments[0].click();", checkbox)
 		                if checkbox.is_selected() is True:
 		           		          lastcol = len(list(ws3.row_values(k)))
 		           		          time.sleep(1) 		           		             
 		           		          ws3.update_cell(k, lastcol+1, SELECT_list4[0])
 		                else:
 		           		          checkbox = driver.find_element_by_name(SELECT_list3[0])
 		           		          driver.execute_script("arguments[0].click();", checkbox)
 		           		          print(checkbox.is_selected())
 		           		          lastcol = len(list(ws3.row_values(k)))
 		           		          time.sleep(1) 		           		             
 		           		          ws3.update_cell(k, lastcol+1, SELECT_list3[0])

 		              elif len(SELECT_list3) > 1 \
                           and len(SELECT_list4) > 1:
 		                checkbox = driver.find_element_by_id(SELECT_list4[len(SELECT_list4)-1])
 		                driver.execute_script("arguments[0].click();", checkbox)
 		                lastcol = len(list(ws3.row_values(k)))    
 		                time.sleep(1) 		           		             
 		                ws3.update_cell(k, lastcol+1, "希望しない") 		              
# 		              break
#nameのみ存在
 		              elif len(SELECT_list3) == 1 \
                           and len(SELECT_list4) == 0:
 		                checkbox = driver.find_element_by_name(SELECT_list3[0])
 		                driver.execute_script("arguments[0].click();", checkbox)
 		                lastcol = len(list(ws3.row_values(k)))    
 		                time.sleep(1) 		           		             
 		                ws3.update_cell(k, lastcol+1, "希望しない")
 		              elif len(SELECT_list3) > 1 \
                           and len(SELECT_list4) == 0:
 		                checkbox = driver.find_element_by_name(SELECT_list3[len(SELECT_list3)-1])
 		                driver.execute_script("arguments[0].click();", checkbox)
 		                lastcol = len(list(ws3.row_values(k)))    
 		                time.sleep(1) 		           		             
 		                ws3.update_cell(k, lastcol+1, "希望しない")
# 		              break
 		           		           
 		            except:
 		              pass

#（スパムメール防止のためのチェックボックス）
 		        try:
 		          if not len([i for i in list_2c if "spam" in i \
                       or "accept" in i]) == 0:
 		           		           checkbox = driver.find_element_by_css_selector("[value='1']")
 		           		           driver.execute_script("arguments[0].click();", checkbox)
# 		           		           print(checkbox.is_selected())
# 		           		           lastcol = len(list(ws3.row_values(k)))    
# 		           		           time.sleep(1) 		           		             
# 		           		           ws3.update_cell(k, lastcol+1, "スパムメール防止チェック済")


#（チェックボックス：上記の内容で送信する）
 		          elif not len([i for i in list_2 if "kiyaku" in i \
                         or "use_label_element[]" in i \
                             or "accept" in i \
                                 or "kakunin" in i \
                                     or "送信確認" in i]) == 0:
 		            Checkboxlist = [i for i in list_2 if "kiyaku" in i \
                             or "use_label_element[]" in i \
                                 or "accept" in i \
                                     or "kakunin" in i \
                                         or "送信確認" in i \
                                             and i is not None]
 		            checkbox = driver.find_element_by_name(Checkboxlist[0])
 		            if checkbox.is_selected() is not True:
 		              checkbox.click()
 		              print(checkbox.is_selected()) 		              
# 		            if checkbox.is_selected() is True:
 		              lastcol = len(list(ws3.row_values(k)))
 		              time.sleep(1)
 		              ws3.update_cell(k, lastcol+1, Checkboxlist[0])

 		        except:
 		          pass


#パターン追加(2021.12.26)
#お問い合わせ内容の控えを送る
 		        try:
 		          if not len([i for i in list_1 if "メール受信" in i]) == 0 \
                       and not len([i for i in SELECT_list5 if "送信" in i]) == 0:
# 		          Checkboxlist = [i for i in list_2 if "copy" in i \
#                             or "mail" in i \
#                                         and i is not None]
 		            print(SELECT_list5[0])
 		            checkbox = driver.find_element_by_css_selector("[value=" + SELECT_list5[0] + "]")
 		            if checkbox.is_selected() is False:
 		              driver.execute_script("arguments[0].click();", checkbox)
 		              print(checkbox.is_selected()) 		              
# 		            if checkbox.is_selected() is True:
 		              lastcol = len(list(ws3.row_values(k)))
 		              time.sleep(1)
 		              ws3.update_cell(k, lastcol+1, SELECT_list5[0])

 		        except:
 		          pass


#送信実行

#パターン追加（2021.12.03）                       
#（buttonタグのclass値に指定キーワードが含まれる）
 		        if "フォーム要素あり" in ws3.cell(k, 7).value \
                     and not len([i for i in list_4bc if "_1fbEI" in i \
                         or "m-btn" in i]) == 0:
 		             print([i for i in list_4bc if "_1fbEI" in i \
                       or "m-btn" in i])
                       
 		             try:
#送信ボタン押下
#<button aria-disabled="false" data-testid="buttonElement" class="_1fbEI"><span class="_1Qjd7">Sign Up!</span></button>
 		           		          if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		            driver.find_element_by_class_name("_1fbEI").click()
# 		           		            time.sleep(3)
 		           		            html = driver.page_source
 		           		            soup = BeautifulSoup(html, 'html.parser')

#送信されたかどうかのテキスト取得
#<div id="comp-juhyx0qr" class="_1Q9if" data-testid="richTextElement"><p class="font_9" style="font-size:15px">Thanks for submitting!</p></div>
 		           		            lastcol = len(list(ws3.row_values(k)))
 		           		            cell_list2 = ws3.range(k, 7, k, lastcol)
 		           		            print(cell_list2)

 		           		            for result in soup.select("._1Q9if"):
 		           		           	  if "メッセージを受信しました" in result.getText() \
                                               or "Thanks for" in result.getText() \
                                                   or "送信しました" in result.getText() \
                                                       and "投稿" in cell_list2 \
                                                           and "メールアドレス" in cell_list2 \
                                                               and "氏名" in cell_list2 \
                                                                   or "姓" in cell_list2 \
                                                                       and not "完了" in ws3.cell(k, 7).value:
 		           		           	    ws3.update_cell(k, 8, "メッセージを送信しました")
 		           		           	    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		           		           	    print(soup.select("._1Q9if"))
                                               
#「メールアドレス」「氏名」「本文」のどれかが入力履歴に無い場合、
#アプリ側でエラー検知
 		           		           	  elif not "メールアドレス" in cell_list2:
 		           		           	    ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		           		           	    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		           		           	  elif not "投稿" in cell_list2:
 		           		           		                   ws3.update_cell(k, 8, "本文が入力されていません")
 		           		           		                   format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		           		           	  elif not "氏名" in cell_list2 \
                                                 or not "姓" in cell_list2:
 		           		           		                   ws3.update_cell(k, 8, "氏名が入力されていません")
 		           		           		                   format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		             except:
 		               try:
                                
#パターン追加（2021.12.10）
#class値に半角スペースが複数含まれている場合
 		           		          if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		            try:                                            
 		           		              if len(list_4bc) == 4:
 		           		                  list_4bc = "." + list_4bc[0] \
                                                  + "." + list_4bc[1]  \
                                                      + "." + list_4bc[2] \
                                                          + "." + list_4bc[3]
 		           		              print(list_4bc)
 		           		              elem = driver.find_element_by_css_selector(list_4bc)
 		           		              driver.execute_script("arguments[0].click();", elem)                                          

#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		           		              alert = driver.switch_to.alert
 		           		              Content = re.sub("[\n]", "", alert.text, 6)
 		           		              Content = re.sub("[\s]", "", Content, 50)     
 		           		              ws3.update_cell(k, 7, Content)
 		           		              print(Content)
 		           		              format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		           		            except NoAlertPresentException:
 		           		              time.sleep(3)
 		           		              html = driver.page_source
 		           		              soup = BeautifulSoup(html, 'html.parser')
                            
#エラーメッセージ
#<span class="txt_alert">こちらは必須項目です。</span>
 		           		              for result in soup.find_all(class_=re.compile("attention")):
 		           		                Content = re.sub("[\n]", "", result.getText(), 4)
 		           		                ws3.update_cell(k, 7, Content)
 		           		              format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		           		              print(soup.find_all(class_=re.compile("attention")))

#画像認証有無の確認
 		           		              if "captcha" in str(soup.find_all("form")):
 		           		                ws3.update_cell(k, 7, "CAPTCHA")
 		           		                ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))
 		           		                format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)
 		           		              else:
 		           		                list_4bc = []
 		           		                element11 = soup.find_all("button")
 		           		                if "submit" in str(element11):
 		           		                  print(element11)
 		           		                  elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                  driver.execute_script("arguments[0].click();", elem) 		           		                
 		           		                  time.sleep(3)
 		           		                  ws3.update_cell(k, 7, driver.title)
 		           		                  print(driver.title)
 		           		                  if "エラー" in ws3.cell(k, 7).value:
 		           		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		           		                  else:
 		           		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
                                            
 		               except:
 		                 pass



#（name値に指定キーワードが含まれない、且つtype値に指定キーワードが含まれる）

#パターン追加（2021.12.10）
#（spanタグのclass値に指定キーワードが含まれる）
 		        elif len([i for i in list_2 if "submit" in i]) == 0 \
                       or len([i for i in list_2t if "submit" in i \
                               or "button" in i \
                                   or "image" in i]) > 0 \
                           or not len([i for i in list_12sc if "appsMaterialWizButtonPaperbuttonLabel" in i]) == 0:
#                           or len([i for i in list_3t if "button" in i]) > 0:
 		             print(list_2t)
 		             print(len(list_2t))
 		             print([i for i in list_12sc if "appsMaterialWizButtonPaperbuttonLabel" in i])                      
                      
#対象物が画面の外にあると、
#「ElementClickInterceptedException: element click intercepted: Element is not clickable at point」
#になってしまうので以下の方法で回避
# 		           		          driver.execute_script("window.scrollTo(0, 200);")

#リスト（変数）の初期化
 		             list_12io = []
 		             list_13ia = []
 		             list_14ia = []
 		             list_15iv = []
 		             list_16iv = []
 		             list_17ao = []
 		             list_18c = []
 		             list_10ia = []
 		             list_11ia = []
 		             list_19in = []
 		             list_20ah = []
 		             list_21it = []
 		             list_22bt = []
 		             list_23bt = []
 		             list_24it = []
 		             list_25iv = []
                      

#パターン追加（2022.01.24）
#<img src="/images/bt_confirmation.jpg" alt="確認画面へ">
#送信ボタン（imgタグの指定要素のみ取得）
 		             element11 = soup.find_all("img",alt=re.compile("確認"))
 		             print(element11)

#パターン追加（2021.12.28）
#ボタンが２つ存在（リセットボタンあり）
#<li><input type="button" value="" id="button_mfp_reset" onclick="mfp_reset(this.form)" onkeypress="mfp_reset(this.form)" onmouseover="mfp_bt(this,1)" onmouseout="mfp_bt(this,0)" style="background-position: 0px 0px;"></li>
#<li><input type="button" value="" id="button_mfp_goconfirm" onclick="sendMail(this.form)" onkeypress="sendMail(this.form)" onmouseover="mfp_bt(this,1)" onmouseout="mfp_bt(this,0)" style="background-position: 0px 0px;"></li>
 		             element12 = soup.find_all("input",onclick=re.compile("send"))
 		             print(element12)
                                                         
#パターン追加（2021.01.02）
#<input type="image" class="submit transi" value="" name="Submit" src="./images/btn_input.png" alt="入力確認画面へ">
 		             element13 = soup.find_all("input",alt=re.compile("確認"))
 		             print(element13)

 		             element14 = soup.find_all("input",alt=re.compile("送信"))
 		             print(element14)

#パターン追加（2022.01.01）
#<input type="submit" name="submitConfirm" value="確認する">                                               

 		             element15 = soup.find_all("input",value=re.compile("確認"))
 		             print(element15)

#<input type="submit" value="送信" style="cursor: pointer; margin: 0pt; text-align: center;margin-bottom:10px;">
 		             element16 = soup.find_all("input",value=re.compile("送信"))
 		             print(element16)

#パターン追加（2022.01.24）
#<input class="formButton" onclick="resetForm();" type="button" value="リセット"/>, <input class="formButton" onclick="nextForm();" type="button" value="  次へ  "/>
 		             element25 = soup.find_all("input",value=re.compile("次へ"))
 		             print(element25)


#パターン追加（2022.01.21）
#<a href="#" onclick="frmcheck();" class="btn_check">確認画面へ</a>
#送信ボタン（aタグの指定要素のみ取得）
 		             element17 = soup.find_all("a",onclick=re.compile("check"))
 		             print(element17)

#パターン追加（2022.01.21）
#<input type="submit" value="送 信" class="wpcf7-form-control has-spinner wpcf7-submit" id="submit">
 		             element18 = soup.find_all("span",class_=re.compile("wpcf7"))
 		             print(element18)
                      
#パターン追加（2022.01.22）
#<img src="/img/inquiry/submit_bt.gif" width="40" height="28" border="0" alt="送信">                    
#送信ボタン（imgタグの指定要素のみ取得）
 		             element10 = soup.find_all("img",alt=re.compile("送信"))
 		             print(element10)

#パターン追加（2022.01.22）
#<input type="image" src="https://technicalws.sakura.ne.jp/wp-content/uploads/2013/11/btn_check.gif" name="send-to-confirm" alt="">
 		             element19 = soup.find_all("input",type=re.compile("image"))
 		             print(element19)

#パターン追加（2022.01.22）
#<a href="javascript:chk_privacy();">入力内容を確認する</a>
#送信ボタン（aタグの指定要素のみ取得）
 		             element20 = soup.find_all("a",href=re.compile("chk"))
 		             print(element20)

#パターン追加（2022.01.22）
#<input type="submit" value="" class="next">
 		             element21 = soup.find_all("input",type=re.compile("submit"))
 		             print(element21)

#パターン追加（2022.01.23）
#<button type="submit" class="pure-button pure-button-primary">同意して確認画面へ</button>
 		             element22 = soup.find_all("button",type=re.compile("submit"))
 		             print(element22)

#パターン追加（2022.01.24）
#<button type="button" id="check_btn">確認画面に進む</button>
 		             element23 = soup.find_all("button",type=re.compile("button"))
 		             print(element23)

#パターン追加（2022.01.24）
#
 		             element24 = soup.find_all("input",type=re.compile("button"))
 		             print(element24)
                      

#各変数のリスト化
 		             for olk in element12:
 		               list_12io.append(olk.get("onclick"))
 		             print(list_12io)

 		             for alt in element13:
 		               list_13ia.append(alt.get("alt"))
 		             print(list_13ia)

 		             for alt in element14:
 		               list_14ia.append(alt.get("alt"))
 		             print(list_14ia)
                                                           
 		             for val in element15:
 		               list_15iv.append(val.get("value"))
 		             print(list_15iv)

 		             for val in element16:
 		               list_16iv.append(val.get("value"))
 		             print(list_16iv)

 		             for val in element25:
 		               list_25iv.append(val.get("value"))
 		             print(list_25iv)
                      
 		             for olk in element17:
 		               list_17ao.append(olk.get("onclick"))
 		             print(list_17ao)

 		             for class_ in element18:
 		               list_18c.append(class_.get("class"))
 		             print(list_18c)

 		             for alt in element10:
 		               list_10ia.append(alt.get("alt"))
 		             print(list_10ia)

 		             for alt in element11:
 		               list_11ia.append(alt.get("alt"))
 		             print(list_11ia)

 		             for name in element19:
 		               list_19in.append(name.get("name"))
 		             print(list_19in)
 		             print(len(list_19in))

 		             for href in element20:
 		               list_20ah.append(href.get("href"))
 		             print(list_20ah)

 		             for type_ in element21:
 		               list_21it.append(type_.get("type"))
 		             print(list_21it)

 		             for type_ in element22:
 		               list_22bt.append(type_.get("type"))
 		             print(list_22bt)

 		             for type_ in element23:
 		               list_23bt.append(type_.get("type"))
 		             print(list_23bt)

 		             for type_ in element24:
 		               list_24it.append(type_.get("type"))
 		             print(list_24it)

                      
# 		             try:

#確認画面遷移後に送信（その０）
 		             if len(list_18c) > 0:

#WordPressの「Contact Form7」プラグインを使用（その１）
# 		                               except NoSuchElementException:
 		               try:
 		                                   elem = driver.find_element_by_css_selector('.wpcf7-form-control.wpcf7-submit')
 		                                   driver.execute_script("arguments[0].click();", elem)
 		                                   time.sleep(3)
 		                                   html = driver.page_source
 		                                   soup = BeautifulSoup(html, 'html.parser')

#エラーメッセージ
# 		                                   for result in soup.select("#response"):
# 		                                     Content = re.sub("[\n]", "", result.getText(), 4)
# 		                                   ws3.update_cell(k, 7, Content)
# 		                                   if "失敗" in ws3.cell(k, 7).value:
# 		                                     format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                                   else:
# 		                                     format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                                   print(soup.select("#response"))

 		                                   for result in soup.select(".wpcf7-not-valid-tip"):
 		                                     Content = re.sub("[\n]", "", result.getText(), 4)
 		                                   ws3.update_cell(k, 7, Content)
 		                                   format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                                   print(soup.select(".wpcf7-not-valid-tip"))

#結果出力
 		                                   for result in soup.select(".wpcf7-response-output"):
 		                                     Content = re.sub("[\n]", "", result.getText(), 4)
 		                                   print(soup.select(".wpcf7-response-output"))                                            
 		                                   ws3.update_cell(k, 8, Content)                                                          
 		                                   if Content == "":
 		                                     ws3.update_cell(k, 8, "送信に失敗しました。")
 		                                     format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                                   else:
 		                                     if "入力内容に" in ws3.cell(k, 8).value:
 		                                       format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                                     else:
 		                                       format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		           		              

#WordPressの「Contact Form7」プラグインを使用（その２）
#画面遷移なしで入力内容確認                                          
 		               except:
 		                 try:
 		                                     elem = driver.find_element_by_css_selector('.wpcf7-form-control.wpcf7-confirm')
 		                                     driver.execute_script("arguments[0].click();", elem)
 		                                     time.sleep(3)
 		                                     html = driver.page_source
 		                                     soup = BeautifulSoup(html, 'html.parser')
 		           		           		           
#エラーメッセージ
# 		                                     for result in soup.select("#response"):
# 		                                       Content = re.sub("[\n]", "", result.getText(), 4)
# 		                                     ws3.update_cell(k, 7, Content)
# 		                                     if "失敗" in ws3.cell(k, 7).value:
# 		                                       format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                                     else:
# 		                                       format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                                     print(soup.select("#response"))
                                            
 		                                     for result in soup.select(".wpcf7-not-valid-tip"):
 		                                       Content = re.sub("[\n]", "", result.getText(), 4)
 		                                     ws3.update_cell(k, 7, Content)
 		                                     format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                                     print(soup.select(".wpcf7-not-valid-tip"))
                                          
#結果出力
 		                                     for result in soup.select(".wpcf7-response-output"):
 		                                       Content = re.sub("[\n]", "", result.getText(), 4)
 		                                     print(Content)
 		                                     ws3.update_cell(k, 8, Content)
 		                                     if "入力内容に" in ws3.cell(k, 8).value:
 		                                       format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                                     else:
 		                                       elem = driver.find_element_by_css_selector('.wpcf7-form-control.wpcf7-submit')
 		                                       driver.execute_script("arguments[0].click();", elem)
 		                                       time.sleep(3)
 		                                       soup = BeautifulSoup(html, 'html.parser')
 		                                       for result in soup.select(".wpcf7-response-output"):
 		                                         Content = re.sub("[\n]", "", result.getText(), 4)
 		                                       format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                                       ws3.update_cell(k, 8, Content)                                                                
 		                                       print(Content)
                                              

#WordPressの「Contact Form7」プラグインを使用（その３）
 		                 except:
 		                   try:
 		                                                if "フォーム要素あり" in ws3.cell(k, 7).value:
 		                                                  elem = driver.find_element_by_css_selector("input[type='image']")
 		                                                  driver.execute_script("arguments[0].click();", elem)
 		                                                  time.sleep(3)
 		                                                  html = driver.page_source
 		                                                  soup = BeautifulSoup(html, 'html.parser')
 		           		           		           
#エラーメッセージ
# 		                                                  for result in soup.select("#response"):
# 		                                                    Content = re.sub("[\n]", "", result.getText(), 4)
# 		                                                  ws3.update_cell(k, 7, Content)
# 		                                                  if "失敗" in ws3.cell(k, 7).value:
# 		                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                                                  else:
# 		                                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                                                  print(soup.select("#response"))

 		                                                  for result in soup.select(".wpcf7-not-valid-tip"):
 		                                                    Content = re.sub("[\n]", "", result.getText(), 4)
 		                                                  ws3.update_cell(k, 7, Content)
 		                                                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                                                  print(soup.select(".wpcf7-not-valid-tip"))

#結果出力
 		                                                  for result in soup.select(".wpcf7-response-output"):
 		                                                    Content = re.sub("[\n]", "", result.getText(), 4)
 		                                                  print(soup.select(".wpcf7-response-output"))
 		                                                  ws3.update_cell(k, 8, Content)                                                              
 		                                                  if Content == "":
 		                                             		    ws3.update_cell(k, 8, "送信に失敗しました。")
 		                                             		    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                                                  else:
 		                                                      if "入力内容に" in ws3.cell(k, 8).value:
 		                                                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                                                      else:
 		                                                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

 		                   except:
 		                                    ws3.update_cell(k, 8, "送信ボタン押下不可")                                                        
 		                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

                                

#確認画面遷移後に送信（その１）
 		             elif len(list_12io) > 0:                           
 		                try:
 		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		                  print(list_12io)
 		                  elem = driver.find_element_by_css_selector(list_12io)
 		                  driver.execute_script("arguments[0].click();", elem)

#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  cell_list2 = ws3.range(k, 9, k, lastcol)
 		                  print(cell_list2)
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知
 		                  if not "メールアドレス" in cell_list2:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not "氏名" in cell_list2 \
                                                                or not "姓" in cell_list2:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not "投稿" in cell_list2:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

                                                                  
 		                  elif "メールアドレス" in cell_list2 \
                               and "氏名" in cell_list2 \
                                   or "姓" in cell_list2 \
                                       and "投稿" in cell_list2 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print(list_12ia)
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")                                                        
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                      

#確認画面遷移後に送信（その２）
 		             elif len(list_13ia) > 0:                           
 		                try:
 		                  list_13ia = "input[alt='" + list_13ia[0] + "']"
 		                  print(list_13ia)
 		                  elem = driver.find_element_by_css_selector(list_13ia)
 		                  driver.execute_script("arguments[0].click();", elem)
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                  ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                  ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  cell_list2 = ws3.range(k, 9, k, lastcol)
 		                  print(cell_list2)
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知
 		                  if not "メールアドレス" in cell_list2:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not "氏名" in cell_list2 \
                                                                or not "姓" in cell_list2:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not "投稿" in cell_list2:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

                                                                  
 		                  elif "メールアドレス" in cell_list2 \
                               and "氏名" in cell_list2 \
                                   or "姓" in cell_list2 \
                                       and "投稿" in cell_list2 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                          Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

 		                    for result in soup.select("#response"):
 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                    if "失敗" in ws3.cell(k, 7).value:
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                    else:
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.select("#response"))
                             

 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:

#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print(list_12ia)
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")                                                        
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

                                          
#確認画面遷移後に送信（その３）
 		             elif len(list_14ia) > 0:
 		                try:
 		                  list_14ia = "input[alt='" + list_14ia[0] + "']"
 		                  print(list_14ia)
 		                  elem = driver.find_element_by_css_selector(list_14ia)
 		                  driver.execute_script("arguments[0].click();", elem)
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                  ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                  ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  cell_list2 = ws3.range(k, 9, k, lastcol)
 		                  print(cell_list2)
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知
 		                  if not "メールアドレス" in cell_list2:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not "氏名" in cell_list2 \
                                                                or not "姓" in cell_list2:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not "投稿" in cell_list2:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

                                                                  
 		                  elif "メールアドレス" in cell_list2 \
                               and "氏名" in cell_list2 \
                                   or "姓" in cell_list2 \
                                       and "投稿" in cell_list2 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                          Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

 		                    for result in soup.select("#response"):
 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                    if "失敗" in ws3.cell(k, 7).value:
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                    else:
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.select("#response"))
                             

 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                     
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print(list_12ia)
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")                                                        
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その４）
 		             elif len(list_15iv) > 0:
 		                try:                          
 		                  list_15iv = "input[value='" + list_15iv[0] + "']"
 		                  print(list_15iv)
 		                  elem = driver.find_element_by_css_selector(list_15iv)
 		                  driver.execute_script("arguments[0].click();", elem)

#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                                                                                        
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  cell_list2 = ws3.range(k, 9, k, lastcol)
 		                  print(cell_list2)
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知
 		                  if not "メールアドレス" in cell_list2:
 		                      ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                      try:
 		                        driver.get(ws3.cell(k+1, 6).value)
               
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                        alert = driver.switch_to.alert
 		                        alert.accept()
 		                      except NoAlertPresentException:
 		                        pass

 		                  elif not "氏名" in cell_list2 \
                               or not "姓" in cell_list2:
 		                      ws3.update_cell(k, 8, "氏名が入力されていません")
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                      try:
 		                        driver.get(ws3.cell(k+1, 6).value)
               
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                        alert = driver.switch_to.alert
 		                        alert.accept()
 		                      except NoAlertPresentException:
 		                        pass
                                                                  
 		                  elif not "投稿" in cell_list2:
 		                      ws3.update_cell(k, 8, "本文が入力されていません")
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                      try:
 		                        driver.get(ws3.cell(k+1, 6).value)
               
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                        alert = driver.switch_to.alert
 		                        alert.accept()
 		                      except NoAlertPresentException:
 		                        pass
                                                                  
 		                  elif "メールアドレス" in cell_list2 \
                               and "氏名" in cell_list2 \
                                   or "姓" in cell_list2 \
                                       and "投稿" in cell_list2 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print(list_12ia)
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")                                                        
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その４）
 		             elif len(list_25iv) > 0:
 		                try:                          
 		                  list_25iv = "input[value='" + list_25iv[0] + "']"
 		                  print(list_25iv)
 		                  elem = driver.find_element_by_css_selector(list_25iv)
 		                  driver.execute_script("arguments[0].click();", elem)

#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                                                                                        
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  cell_list2 = ws3.range(k, 9, k, lastcol)
 		                  print(cell_list2)
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知
 		                  if not "メールアドレス" in cell_list2:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not "氏名" in cell_list2 \
                                                                or not "姓" in cell_list2:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not "投稿" in cell_list2:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

                                                                  
 		                  elif "メールアドレス" in cell_list2 \
                               and "氏名" in cell_list2 \
                                   or "姓" in cell_list2 \
                                       and "投稿" in cell_list2 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print(list_12ia)
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")                                                        
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その５）
 		             elif len(list_16iv) > 0:
 		                try:                          
 		                  list_16iv = "input[value='" + list_16iv[0] + "']"
 		                  print(list_16iv)
 		                  elem = driver.find_element_by_css_selector(list_16iv)
 		                  driver.execute_script("arguments[0].click();", elem)

#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:                           
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                                                                                        
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  cell_list2 = ws3.range(k, 9, k, lastcol)
 		                  print(cell_list2)
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知
 		                  if not "メールアドレス" in cell_list2:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not "氏名" in cell_list2 \
                                                                or not "姓" in cell_list2:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not "投稿" in cell_list2:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

                                                                  
 		                  elif "メールアドレス" in cell_list2 \
                               and "氏名" in cell_list2 \
                                   or "姓" in cell_list2 \
                                       and "投稿" in cell_list2 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                          Content = re.sub("[\n]", "", Content.getText(), 4)
 		                          ws3.update_cell(k, 7, Content)
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print(list_12ia)
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")                                                        
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その６）
 		             elif len(list_17ao) > 0:                           
 		                try:                          
 		                  list_17ao = "a[onclick^='" + list_17ao[0] + "']"
 		                  print(list_17ao)
 		                  elem = driver.find_element_by_css_selector(list_17ao)
 		                  driver.execute_script("arguments[0].click();", elem)
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  cell_list2 = ws3.range(k, 9, k, lastcol)
 		                  print(cell_list2)
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知
 		                  if not "メールアドレス" in cell_list2:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not "氏名" in cell_list2 \
                                                                or not "姓" in cell_list2:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not "投稿" in cell_list2:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

                                                                  
 		                  elif "メールアドレス" in cell_list2 \
                               and "氏名" in cell_list2 \
                                   or "姓" in cell_list2 \
                                       and "投稿" in cell_list2 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                          Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print(list_12ia)
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")                                                        
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#Googleフォームから送信（その７）
 		             elif len(list_12sc) > 0:
 		                  list_12sc = "." + list_12sc[0] \
                                                  + "." + list_12sc[1]  \
                                                      + "." + list_12sc[2]
 		                  print(list_12sc)
 		                  elem = driver.find_element_by_css_selector(list_12sc)
 		                  driver.execute_script("arguments[0].click();", elem)
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                                                                                        
#エラーメッセージ
#<span class="freebirdFormviewerComponentsQuestionBaseErrorText">この質問は必須です</span>
 		                  try:
 		                    for Content in soup.find_all("span",class_=re.compile("Err")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                    print(soup.find_all(class_=re.compile("Err")))

#入力履歴（セル）全てをリスト化
 		                    lastcol = len(list(ws3.row_values(k)))
 		                    cell_list2 = ws3.range(k, 9, k, lastcol)
 		                    print(cell_list2)
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知
 		                    if not "メールアドレス" in cell_list2:
 		                      ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                      try:
 		                        driver.get(ws3.cell(k+1, 6).value)
               
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                        alert = driver.switch_to.alert
 		                        alert.accept()
                                 
 		                      except InvalidArgumentException:
 		                        pass

 		                      except NoAlertPresentException:
 		                        pass

 		                    elif not "氏名" in cell_list2 \
                                 or not "姓" in cell_list2:
 		                      ws3.update_cell(k, 8, "氏名が入力されていません")
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                      try:
 		                        driver.get(ws3.cell(k+1, 6).value)
               
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                        alert = driver.switch_to.alert
 		                        alert.accept()
 		                      except NoAlertPresentException:
 		                        pass
                                                                  
 		                    elif not "投稿" in cell_list2:
 		                      ws3.update_cell(k, 8, "本文が入力されていません")
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                      try:
 		                        driver.get(ws3.cell(k+1, 6).value)
               
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                        alert = driver.switch_to.alert
 		                        alert.accept()
 		                      except NoAlertPresentException:
 		                        pass                                 
                             
#エラーが無い場合「UnboundLocalError:local variable 'Err' referenced before assignment」と表示されてしまうので回避
 		                  except UnboundLocalError:
 		                    lastcol = len(list(ws3.row_values(k)))
 		                    cell_list2 = ws3.range(k, 9, k, lastcol)
 		                    print(cell_list2)
                                                                                                 
# 		                    if "メールアドレス" in cell_list2 \
#                                 and "氏名" in cell_list2 \
#                                     or "姓" in cell_list2 \
#                                         and "投稿" in cell_list2 \
#                                             and not "完了" in ws3.cell(k, 7).value:
                                               
#送信完了画面
 		                    if "フォーム要素あり" in ws3.cell(k, 7).value:
 		                      for result in soup.find_all(class_=re.compile("ResponseConfirmationMessage")):
 		                        Content = re.sub("[\n]", "", result.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                           
 		                      print(soup.find_all(class_=re.compile("ResponseConfirmationMessage")))


#確認画面遷移後に送信（その８）
 		             elif len(list_10ia) > 0:
 		                try:
 		                  list_10ia = "img[alt='" + list_10ia[0] + "']"
 		                  print(list_10ia)
 		                  elem = driver.find_element_by_css_selector(list_10ia)
 		                  driver.execute_script("arguments[0].click();", elem)

#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                                                                                        
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  cell_list2 = ws3.range(k, 9, k, lastcol)
 		                  print(cell_list2)
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知
 		                  if not "メールアドレス" in cell_list2:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not "氏名" in cell_list2 \
                                                                or not "姓" in cell_list2:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not "投稿" in cell_list2:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

                                                                  
 		                  elif "メールアドレス" in cell_list2 \
                               and "氏名" in cell_list2 \
                                   or "姓" in cell_list2 \
                                       and "投稿" in cell_list2 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                          Content = re.sub("[\n]", "", Content.getText(), 4)
 		                          ws3.update_cell(k, 7, Content)
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print(list_12ia)
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")                                                        
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その９）
 		             elif len(list_11ia) > 0:
 		                try:
 		                  list_11ia = "img[alt='" + list_11ia[0] + "']"
 		                  print(list_11ia)
 		                  elem = driver.find_element_by_css_selector(list_11ia)
 		                  driver.execute_script("arguments[0].click();", elem)

#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                                                                                        
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  cell_list2 = ws3.range(k, 9, k, lastcol)
 		                  print(cell_list2)
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知
 		                  if not "メールアドレス" in cell_list2:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not "氏名" in cell_list2 \
                                                                or not "姓" in cell_list2:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not "投稿" in cell_list2:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

                                                                  
 		                  elif "メールアドレス" in cell_list2 \
                               and "氏名" in cell_list2 \
                                   or "姓" in cell_list2 \
                                       and "投稿" in cell_list2 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                          Content = re.sub("[\n]", "", Content.getText(), 4)
 		                          ws3.update_cell(k, 7, Content)
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print(list_12ia)
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")                                                        
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その９）
 		             elif len([i for i in list_19in if "confirm" in i \
                              or "image" in i]) > 0:                           
 		                try:                          
 		                  list_19in = list_19in[0]
 		                  print(list_19in)
 		                  driver.find_element_by_name(list_19in).click()
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  cell_list2 = ws3.range(k, 9, k, lastcol)
 		                  print(cell_list2)
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知
 		                  if not "メールアドレス" in cell_list2:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not "氏名" in cell_list2 \
                                                                or not "姓" in cell_list2:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not "投稿" in cell_list2:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

                                                                  
 		                  elif "メールアドレス" in cell_list2 \
                               and "氏名" in cell_list2 \
                                   or "姓" in cell_list2 \
                                       and "投稿" in cell_list2 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                      Content = re.sub("[\n]", "", Content.getText(), 4)
 		                      ws3.update_cell(k, 7, Content)
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

# 		                    for result in soup.select("#response"):
# 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
# 		                    ws3.update_cell(k, 7, Content)
# 		                    if "失敗" in ws3.cell(k, 7).value:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                    else:
# 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
# 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print(list_12ia)
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


# 		                        elem = driver.find_element_by_css_selector("[type='submit']")
# 		                        driver.execute_script("arguments[0].click();", elem)
# 		                        time.sleep(3)
# 		                        if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                          ws3.update_cell(k, 7, driver.title)
# 		                          print(driver.title)
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                        else:
# 		                          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")                                                        
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その１０）
 		             elif len(list_20ah) > 0:                           
 		                try:
 		                  list_20ah = "a[href^='" + list_20ah[0] + "']"
 		                  print(list_20ah)
 		                  elem = driver.find_element_by_css_selector(list_20ah)
 		                  driver.execute_script("arguments[0].click();", elem)
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:                           
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                            
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  cell_list2 = ws3.range(k, 9, k, lastcol)
 		                  print(cell_list2)
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知
 		                  if not "メールアドレス" in cell_list2:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not "氏名" in cell_list2 \
                                                                or not "姓" in cell_list2:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not "投稿" in cell_list2:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

                                                                  
 		                  elif "メールアドレス" in cell_list2 \
                               and "氏名" in cell_list2 \
                                   or "姓" in cell_list2 \
                                       and "投稿" in cell_list2 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                          Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print(list_12ia)
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")                                                        
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その１１）
 		             elif len(list_21it) > 0:                           
 		                try:
 		                  list_21it = "input[type='" + list_21it[0] + "']"
 		                  print(list_21it)
 		                  elem = driver.find_element_by_css_selector(list_21it)
 		                  driver.execute_script("arguments[0].click();", elem)
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:                           
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                                                                                        
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                  ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                  ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  cell_list2 = ws3.range(k, 9, k, lastcol)
 		                  print(cell_list2)
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知
 		                  if not "メールアドレス" in cell_list2:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not "氏名" in cell_list2 \
                                                                or not "姓" in cell_list2:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not "投稿" in cell_list2:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

                                                                  
 		                  elif "メールアドレス" in cell_list2 \
                               and "氏名" in cell_list2 \
                                   or "姓" in cell_list2 \
                                       and "投稿" in cell_list2 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                          Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

 		                    for result in soup.select("#response"):
 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                    if "失敗" in ws3.cell(k, 7).value:
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                    else:
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print(list_12ia)
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")                                                        
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その１２）
 		             elif len(list_22bt) > 0:
 		                try:
 		                  list_22bt = "button[type='" + list_22bt[0] + "']"
 		                  print(list_22bt)
 		                  elem = driver.find_element_by_css_selector(list_22bt)
 		                  driver.execute_script("arguments[0].click();", elem)
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                                                                                        
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                  ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                  ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  cell_list2 = ws3.range(k, 9, k, lastcol)
 		                  print(cell_list2)
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知
 		                  if not "メールアドレス" in cell_list2:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not "氏名" in cell_list2 \
                                                                or not "姓" in cell_list2:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not "投稿" in cell_list2:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

                                                                  
 		                  elif "メールアドレス" in cell_list2 \
                               and "氏名" in cell_list2 \
                                   or "姓" in cell_list2 \
                                       and "投稿" in cell_list2 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                          Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

 		                    for result in soup.select("#response"):
 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                    if "失敗" in ws3.cell(k, 7).value:
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                    else:
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print(list_12ia)
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")                                                        
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)



#確認画面遷移後に送信（その１３）
 		             elif len(list_23bt) > 0:
 		                try:
 		                  list_23bt = "button[type='" + list_23bt[0] + "']"
 		                  print(list_23bt)
 		                  elem = driver.find_element_by_css_selector(list_23bt)
 		                  driver.execute_script("arguments[0].click();", elem)
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                                                                                        
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                  ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                  ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  cell_list2 = ws3.range(k, 9, k, lastcol)
 		                  print(cell_list2)
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知
 		                  if not "メールアドレス" in cell_list2:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not "氏名" in cell_list2 \
                                                                or not "姓" in cell_list2:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not "投稿" in cell_list2:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

                                                                  
 		                  elif "メールアドレス" in cell_list2 \
                               and "氏名" in cell_list2 \
                                   or "姓" in cell_list2 \
                                       and "投稿" in cell_list2 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                          Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

 		                    for result in soup.select("#response"):
 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                    if "失敗" in ws3.cell(k, 7).value:
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                    else:
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print(list_12ia)
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")                                                        
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#確認画面遷移後に送信（その１４）
 		             elif len(list_24it) > 0:
 		                try:
 		                  list_24it = "input[type='" + list_24it[0] + "']"
 		                  print(list_24it)
 		                  elem = driver.find_element_by_css_selector(list_24it)
 		                  driver.execute_script("arguments[0].click();", elem)
                           
#表示されたアラートポップアップ（アラートモーダル）をSeleniumで操作できるようにするため、alertオブジェクトを取得。
 		                  alert = driver.switch_to.alert
 		                  Content = re.sub("[\n]", "", alert.text, 6)
 		                  Content = re.sub("[\s]", "", Content, 50)     
 		                  ws3.update_cell(k, 7, Content)
 		                  print(Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  alert.accept()
 		                except NoAlertPresentException:
 		                  time.sleep(3)
 		                  html = driver.page_source
 		                  soup = BeautifulSoup(html, 'html.parser')
                                                                                                                        
#エラーメッセージ
 		                  for result in soup.find_all(id=re.compile("attention")):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.find_all(id=re.compile("attention")))

 		                  for Content in soup.find_all(class_=re.compile("red")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("red")))

 		                  for Content in soup.find_all(class_=re.compile("err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("err")))

 		                  for Content in soup.find_all(class_=re.compile("Err")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("Err")))
                                                            
 		                  for Content in soup.find_all(class_=re.compile("emesg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("emesg")))

 		                  for Content in soup.find_all("p",style=re.compile("#f00")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("p",style=re.compile("#f00")))

 		                  for Content in soup.find_all(class_=re.compile("alert")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alert")))

 		                  for Content in soup.find_all(class_=re.compile("style1")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("style")))

 		                  for Content in soup.find_all(class_=re.compile("alart")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("alart")))

 		                  for result in soup.select(".vali"):
 		                   	Content = re.sub("[\n]", "", result.getText(), 4)
 		                   	ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                           
 		                  print(soup.select(".vali"))
                           
# 		                  for error in soup.select("input[id^=error]"):
# 		                    error = re.sub("[\n]", "", error.getText(), 4)
# 		                  ws3.update_cell(k, 7, error)
# 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                  print(soup.select(".error"))
                           
#パターン追加（2021.12.26）
#<div class="mfp_err" id="errormsg_ご担当者名(フリガナ)" style="display: block;">ご担当者名(フリガナ)が入力されていません。</div>
 		                  for Content in soup.find_all("div",style=re.compile("block")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                  ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all("div",style=re.compile("block")))
                                                          
#パターン追加（2021.12.28）
#<li class="msg">前画面に戻って正しく入力してください。</li>
 		                  for Content in soup.find_all(class_=re.compile("msg")):
 		                    Content = re.sub("[\n]", "", Content.getText(), 4)
 		                  ws3.update_cell(k, 7, Content)
 		                  format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                  print(soup.find_all(class_=re.compile("msg")))


#確認画面遷移後に送信ボタン押下
 		                  lastcol = len(list(ws3.row_values(k)))
 		                  cell_list2 = ws3.range(k, 9, k, lastcol)
 		                  print(cell_list2)
                                                            
#「メールアドレス」又は「氏名」が入力履歴に無い場合、
#アプリ側でエラー検知
 		                  if not "メールアドレス" in cell_list2:
 		                        ws3.update_cell(k, 8, "メールアドレスが入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

 		                  elif not "氏名" in cell_list2 \
                                                                or not "姓" in cell_list2:
 		                        ws3.update_cell(k, 8, "氏名が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
                                                                  
 		                  elif not "投稿" in cell_list2:
 		                        ws3.update_cell(k, 8, "本文が入力されていません")
 		                        format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)

                                                                  
 		                  elif "メールアドレス" in cell_list2 \
                               and "氏名" in cell_list2 \
                                   or "姓" in cell_list2 \
                                       and "投稿" in cell_list2 \
                                           and not "完了" in ws3.cell(k, 7).value:
                                               
#パターン追加（2021.12.22）
#<div id="contactFormSent" class="formSent alert alert-success">
#<p style="text-align: center;">問い合わせの送信が完了しました。 <br>確認でき次第、担当者よりご連絡させていただきますので、 しばらくお待ちください。</p></div>
 		                    for Content in soup.find_all(class_=re.compile("success")):
 		                          Content = re.sub("[\n]", "", Content.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.find_all(class_=re.compile("success")))

 		                    for result in soup.select("#response"):
 		           		          Content = re.sub("[\n]", "", result.getText(), 4)
 		                    ws3.update_cell(k, 7, Content)
 		                    if "失敗" in ws3.cell(k, 7).value:
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
 		                    else:
 		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)
 		                    print(soup.select("#response"))


 		                    if not "完了" in ws3.cell(k, 7).value \
                                 or "フォーム要素あり" in ws3.cell(k, 7).value:
                                                                      
#以下に確認画面からの送信パターンを追加していく
 		                       list_12io = []
 		                       list_11ao = []                          
 		                       list_11bo = []
 		                       list_11ac = []
 		                       list_11bi = []
 		                       list_12ia = []
 		                       list_12iv = []
 		                       list_13iv = []


#①inputタグ内のonclick値を使用
 		                       element12 = soup.find_all("input",onclick=re.compile("send"))
 		                       print(element12)

#<input type="image" value="SEND" src="images/mfp_send.gif" onclick="sending();">の場合は
#list_12io = [i for i in list_12io if "sending" in i and i is not None]
                          
#パターン追加（2022.01.01追加）
#<a class="c-btn01 -black" href="javascript:void(0);" onclick="$('#submit_btn').click();return false;">送信</a>
 		                       element13 = soup.find_all("a",onclick=re.compile("submit"))
 		                       print(element13)
                          
#②buttonタグ内のonclick値を使用

#パターン追加（2021.12.25）
#<button id="mfp_button_send" class="mfp_element_button" onclick="mfp.sendmail()">送信する</button>
#<button id="mfp_button_send" onclick="mfp.sendmail()">送信する</button>
 		                       element14 = soup.find_all("button",onclick=re.compile("send"))
 		                       print(element14)

#③aタグ内のclass値を使用
 		                       element15 = soup.find_all("a",class_=re.compile("post"))
 		                       print(element15)
                      
#④buttonタグ内のid値を使用
 		                       element16 = soup.find_all("button",id=re.compile("check"))
 		                       print(element16)

#⑤inputタグ内のalt値を使用

#2021.12.21パターン追加
#<input type="image" src="/contact/img/btn_soshin.png" alt="入力内容を送信" class="firstChild lastChild empty">                                                            
 		                       element17 = soup.find_all("input",alt=re.compile("送信"))
 		                       print(element17)

#⑥inputタグ内のvalue値を取得

#2021.12.22パターン追加
#<input id="submit-button" type="button" value="送信">
 		                       element18 = soup.find_all("input",value=re.compile("送信"))
 		                       print(element18)

#2022.01.04パターン追加
#<input class="btn btn-primary btn-lg" type="submit" name="btnSend" value="この内容で申し込む">
 		                       element19 = soup.find_all("input",value=re.compile("この内容で"))
 		                       print(element19)


 		                       for olk in element12:
 		                         list_12io.append(olk.get("onclick"))

 		                       for olk in element13:
 		                         list_11ao.append(olk.get("onclick"))

 		                       for olk in element14:
 		                         list_11bo.append(olk.get("onclick"))
                                                            
 		                       for class_ in element15:
 		                         list_11ac.append(class_.get("class"))

 		                       for id_ in element16:
 		                         list_11bi.append(id_.get("id"))
                                                            
 		                       for alt in element17:
 		                         list_12ia.append(alt.get("alt"))

 		                       for val in element18:
 		                         list_12iv.append(val.get("value"))

 		                       for val in element19:
 		                         list_13iv.append(val.get("value"))


 		                       try:
 		                         if "フォーム要素あり" in ws3.cell(k, 7).value:
                            
 		                           if len(list_12io) > 0:
 		           		                  list_12io = "input[onclick^='" + list_12io[0] + "']"
 		           		                  print(list_12io)
 		           		                  elem = driver.find_element_by_css_selector(list_12io)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  print(driver.title)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ao) > 0:
 		           		                  list_11ao = "a[onclick^='" + list_11ao[0] + "']"
 		           		                  print(list_11ao)
 		           		                  elem = driver.find_element_by_css_selector(list_11ao)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bo) > 0:
 		           		                  list_11bo = "button[onclick^='" + list_11bo[0] + "']"
 		           		                  print(list_11bo)
 		           		                  elem = driver.find_element_by_css_selector(list_11bo)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11ac) > 0:
 		           		                  print(list_11ac)
 		           		                  driver.find_element_by_class_name(list_11ac[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_11bi) > 0:
 		           		                  print(list_11bi)
 		           		                  driver.find_element_by_id(list_11bi[0]).click()
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12ia) > 0:
 		           		                  list_12ia = "input[alt='" + list_12ia[0] + "']"
 		           		                  print(list_12ia)
 		           		                  elem = driver.find_element_by_css_selector(list_12ia)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_12iv) > 0:
 		           		                  list_12iv = "input[value='" + list_12iv[0] + "']"
 		           		                  print(list_12iv)
 		           		                  elem = driver.find_element_by_css_selector(list_12iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

 		                           elif len(list_13iv) > 0:
 		           		                  list_13iv = "input[value='" + list_13iv[0] + "']"
 		           		                  print(list_13iv)
 		           		                  elem = driver.find_element_by_css_selector(list_13iv)
 		           		                  driver.execute_script("arguments[0].click();", elem)
 		           		                  time.sleep(3)
 		           		                  if "エラー" in driver.title \
                                                  or "SPAM BLOCK" in driver.title \
                                                      or "404 Not Found" in driver.title:
 		           		                      ws3.update_cell(k, 7, driver.title)
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                  else:
 		           		                      ws3.update_cell(k, 7, driver.title)                                          
 		           		                      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)                                                            

#⑦buttonタグ内のtype値を取得

#パターン追加（2021.12.30）
#<p class="-w-form-btn -w-font_title2"><button type="submit">送信</button></p>
 		                       except:
 		                         try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("button[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑧inputタグ内のtype値（submit）を取得
 		                         except:
 		                           try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("input[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#パターン追加（2022.01.07）
#⑨単純にtype値（submit）を取得
 		                           except:
 		                             try:
 		           		                     if "フォーム要素あり" in ws3.cell(k, 7).value:
 		           		                       elem = driver.find_element_by_css_selector("[type='submit']")
 		           		                       driver.execute_script("arguments[0].click();", elem)
 		           		                       time.sleep(3)
 		           		                       print(driver.title)
 		           		                       if "エラー" in driver.title \
                                                       or "SPAM BLOCK" in driver.title \
                                                           or "404 Not Found" in driver.title:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		           		                       else:
 		           		                         ws3.update_cell(k, 7, driver.title)
 		           		                         format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)


#どのパターンにも該当しない
 		                             except:
 		                               print(driver.title)
 		                               if "エラー" in driver.title \
                                               or "SPAM BLOCK" in driver.title \
                                                   or "404 Not Found" in driver.title:
 		                                 ws3.update_cell(k, 8, driver.title)
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
 		                               else:
 		                                 ws3.update_cell(k, 8, "送信ボタン押下不可")                                                        
 		                                 format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)


#上記リスト変数の条件に該当しない場合
# 		             else:
# 		             except:
# 		               try:
# 		                 try:

# 		                           elem = driver.find_element_by_css_selector("[type='submit']")
# 		                           driver.execute_script("arguments[0].click();", elem)
# 		                           time.sleep(3)
# 		                           if "エラー" in ws3.cell(k, 7).value \
#                                                                      or "必須" in ws3.cell(k, 7).value \
#                                                                          or "ください" in ws3.cell(k, 7).value \
#                                                                              or  "正しくありません" in ws3.cell(k, 7).value \
#                                                                                  or  "不備" in ws3.cell(k, 7).value \
#                                                                                      or "未入力" in ws3.cell(k, 7).value \
#                                                                      or "SPAM BLOCK" in driver.title \
#                                                                          or "404 Not Found" in driver.title:
# 		                             ws3.update_cell(k, 7, driver.title)
# 		                             print(driver.title)
# 		                             format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)
# 		                           else:
# 		                             format_cell_range(ws3, f'A{k}:Z{k}', data_fmt5)

#どのパターンにも該当しない
# 		                                except:
# 		                                  print(driver.title)
# 		                                  if "エラー" in driver.title \
#                                               or "SPAM BLOCK" in driver.title \
#                                                   or "404 Not Found" in driver.title:
# 		                                    ws3.update_cell(k, 8, driver.title)
# 		                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)                                                          
# 		                                  else:
# 		                                    ws3.update_cell(k, 8, "送信ボタン押下不可")                                                        
# 		                                    format_cell_range(ws3, f'A{k}:Z{k}', data_fmt4)




 		      else:
 		          ws3.update_cell(k, 7, "フォーム要素取得不可")
 		          format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)
 		          ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))


#エラーメッセージ表示
 		   except UnexpectedAlertPresentException as e:
 		      print("error:", e)
 		      driver.switch_to.alert.accept()


#エラーメッセージ表示
 		   except gspread.exceptions.APIError as e:
 		      print("error:", e)
 		      wx.MessageBox(f'{e}', u'Spreadsheet API error', wx.ICON_ERROR)
 		      break
           
 		      dlg.Destroy()

#chromeドライバーの終了（この処理をお忘れなく！！）
 		      driver.quit()

 		   except:
 		      ws3.update_cell(k, 7, "unknown error!!")
 		      format_cell_range(ws3, f'A{k}:Z{k}', data_fmt2)
 		      ws3.update_cell(k, 9, dt_now.strftime('%Y年%m月%d日 %H時%M分'))

# except:
#  ws3.update_cell(k, 9, "無限ページロードによりスキップしました。")
#   elif ws3.cell(k, 8).value == r"-":
#    ws3.cell(k, 9).value == "フォーム要素なし"

 		   update = True
 		   rate += 1/((row4+1)-row3)*100
 		   (update, skip) = dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
 		   if not update:
 		     wx.MessageBox(u'Posting to the inquiry form and automatic transmission have been cancelled.', 
                      u'This process cannot be continued! !!', wx.ICON_ERROR)
 		     break
           
		  dlg.Destroy()

#chromeドライバーの終了（この処理をお忘れなく！！）
		  driver.quit()

# calculate elapsed time
		  elapsed_time = int(time.time() - start)

# convert second to hour, minute and seconds
		  elapsed_hour = elapsed_time // 3600
		  elapsed_minute = (elapsed_time % 3600) // 60
		  elapsed_second = (elapsed_time % 3600 % 60)

# print as 00:00:00
		  print("所要時間：" + str(elapsed_hour).zfill(2) + "h" \
 		           + str(elapsed_minute).zfill(2) + "m" + str(elapsed_second).zfill(2) + "s")

#MyDialogの各設定値をMyFrame5に受け渡し
		  adid = MyProject1MyFrame5(self)
		  adid.grid.CreateGrid(10000, 4)
		  adid.grid.ClearGrid()
		  adid.grid.SetColLabelValue(0, "法人名称")
		  adid.grid.SetColLabelValue(1, "結果・エラー情報等（１）")
		  adid.grid.SetColLabelValue(2, "結果・エラー情報等（２）")
		  adid.grid.SetColLabelValue(3, "投稿日時")
          
		  dlg = wx.ProgressDialog(
            title="リスト取得中",
            message="0/100",
            maximum=100,
            style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )         
         
# ダイアログ表示
		  dlg.Show()
		  rate = 0

#ヘッダー表示は一旦廃止
#         cell_list1 = ws3.range(1, 1, row4, 1)

#法人名称～ホームページＵＲＬまで表示
		  cell_list2 = ws3.range(row3, 2, row4, 2)
#		  cell_list3 = ws3.range(1, 3, row4, 3)
#		  cell_list4 = ws3.range(1, 4, row4, 4)
#		  cell_list5 = ws3.range(1, 5, row4, 5)
#		  cell_list6 = ws3.range(1, 6, row4, 6)
		  cell_list7 = ws3.range(row3, 7, row4, 7)
		  cell_list8 = ws3.range(row3, 8, row4, 8)
		  cell_list9 = ws3.range(row3, 9, row4, 9)
         
		  i = 0
		  for row in range(row4+1-row3):
#		    adid.grid.SetCellValue(row, 0, cell_list1[i].value)
		    adid.grid.SetCellValue(row, 0, cell_list2[i].value)
#		    adid.grid.SetCellValue(row, 1, cell_list3[i].value)
#		    adid.grid.SetCellValue(row, 2, cell_list4[i].value)
#		    adid.grid.SetCellValue(row, 3, cell_list5[i].value)
#		    adid.grid.SetCellValue(row, 1, cell_list6[i].value)
		    adid.grid.SetCellValue(row, 1, cell_list7[i].value)
		    adid.grid.SetCellValue(row, 2, cell_list8[i].value)
		    adid.grid.SetCellValue(row, 3, cell_list9[i].value)

		    i += 1
		    rate += 1/(row4+1)*100
            # 値の更新
		    dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
           
		  dlg.Destroy()
		  adid.grid.AutoSize()
		  adid.Show()


	def graph_start(self, event):
	    row3 = self.row11.GetValue()
	    row4 = self.row21.GetValue()
        
#ラジオボタンが１個も選択されていない
	    if self.m_radioBtn1.GetValue() is False \
            and self.m_radioBtn2.GetValue() is False \
                and self.m_radioBtn3.GetValue() is False:
	      wx.MessageBox(u'No check items have been selected!!', u'Extraction error', wx.ICON_ERROR)
          
	    elif self.m_comboBox11.GetValue() == '選択して下さい':
	     self.m_comboBox11.SetBackgroundColour("#f56cbe")
	     wx.MessageBox(u'Please select the Worksheet title!!', u'Setting value error', wx.ICON_ERROR)
	    elif row3 == 0 and row4 == 0:
	     self.row11.SetBackgroundColour('#f56cbe')
	     self.row21.SetBackgroundColour('#f56cbe')
	     self.m_comboBox11.SetBackgroundColour("#FFFFFF")
	     wx.MessageBox(u'Please set the range!!', u'Setting value error', wx.ICON_ERROR)
	    elif row4 - row3 > 10000:
	     self.row11.SetBackgroundColour('#f56cbe')
	     self.row21.SetBackgroundColour('#f56cbe')
	     self.m_comboBox11.SetBackgroundColour("#FFFFFF")
	     wx.MessageBox(u'The value exceeds the configurable range!!', u'Setting value error', wx.ICON_ERROR)
	    elif row4 - row3 < 0:
	     self.row11.SetBackgroundColour('#f56cbe')
	     self.row21.SetBackgroundColour('#f56cbe')
	     self.m_comboBox11.SetBackgroundColour("#FFFFFF")
	     wx.MessageBox(u'Illegal range!!', u'Setting value error', wx.ICON_ERROR)
	    elif self.m_comboBox11.GetValue() == '選択して下さい' \
            and row3 == 0 \
                and row4 == 0:
	     self.row3.SetBackgroundColour('#f56cbe')
	     self.row4.SetBackgroundColour('#f56cbe')
	     self.m_comboBox11.SetBackgroundColour("#f56cbe")
	     wx.MessageBox(u'Please select the Worksheet title and Illegal range!!', u'Setting value error', wx.ICON_ERROR) 

#件数の可視化          
	    elif self.m_radioBtn1.GetValue() is True:
	      adid = MyProject1MyDialog3(self)
	      credentials = ServiceAccountCredentials.from_json_keyfile_name(adid.m_textCtrl11.GetValue(), scope)
	      gc = gspread.authorize(credentials)                   
	      wb = gc.open_by_key(adid.m_comboBox6.GetValue())            
	      ws3 = wb.worksheet(self.m_comboBox11.GetValue())
	      self.row11.SetBackgroundColour('#FFFFFF')
	      self.row21.SetBackgroundColour('#FFFFFF')
	      self.m_comboBox11.SetBackgroundColour("#FFFFFF")
	      #import wx.lib
	      #import wx.lib.plot as plot
#	      import matplotlib
#	      matplotlib.use('WXAgg')
	      import matplotlib.pyplot as mlp

	      import pandas as pd
	      #import seaborn as sns

	      dlg = wx.ProgressDialog(
            title="データ処理中",
            message="0/100",
            maximum=100,
            style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )
         
# ダイアログ表示
	      dlg.Show()
	      rate = 0

          
	      date = []
	      cell_list_X = ws3.range(row3, 9, row4, 9)
#	      print(cell_list_X)

	      i = 0
	      j = 0
	      for i in range(len(cell_list_X)):
	        print(cell_list_X[i].value)           
            
#時刻を消して日付だけにしたいとき
#https://qiita.com/daijiro_maeyama/items/8a62fbb0741e5bad8568
	        dt_str, new_time = cell_list_X[i].value.split()
            
#空リスト「date」に上記の式で区切った文字列を追加
	        date.append(dt_str)
            
	        j += 1
	        rate += 1/(row4)*100
            # 値の更新
	        dlg.Update(value=rate, newmsg="%d/100" % rate + "%")

	      print(date)

#listをDataFrameに変換する          
#https://qiita.com/fault/items/6d5d69d4a0c257ed39df
	      df = pd.DataFrame({'Date':date})
	      print(df)
          
#value_counts()・・・DataFrameの特定の「列」に入っている「ユニークな要素」の「出現回数」を抽出することができる関数
#棒グラフで時系列順に表示する（Index順にソートしてからプロット）
#https://teratail.com/questions/265731
	      val = df["Date"].value_counts().sort_index()
	      print(val)

#グラフウィンドウのタイトル
	      mlp.figure("Number of executions")

#X軸ラベル設定
	      mlp.xlabel("件数", fontname="Yu Gothic")
          
#X軸目盛ラベルの文字を「游ゴシック」
	      mlp.xticks(fontname="Yu Gothic")
          
#Y軸ラベル設定（非表示）
	      mlp.ylabel("", fontname="Yu Gothic")
          
#Y軸目盛ラベルの文字を「游ゴシック」
	      mlp.yticks(fontname="Yu Gothic")
          
#グラフの種類を「横棒グラフ」に設定
	      val.plot(kind='barh')

	      dlg.Destroy()          

#プロットしたグラフを表示  
	      mlp.show()
          

#送信完了数
	    elif self.m_radioBtn2.GetValue() is True:
	      adid = MyProject1MyDialog3(self)
	      credentials = ServiceAccountCredentials.from_json_keyfile_name(adid.m_textCtrl11.GetValue(), scope)
	      gc = gspread.authorize(credentials)                   
	      wb = gc.open_by_key(adid.m_comboBox6.GetValue())            
	      ws3 = wb.worksheet(self.m_comboBox11.GetValue())
	      self.row11.SetBackgroundColour('#FFFFFF')
	      self.row21.SetBackgroundColour('#FFFFFF')
	      self.m_comboBox11.SetBackgroundColour("#FFFFFF")
	      import matplotlib.pyplot as mlp

	      import pandas as pd
#	      import seaborn as sns

	      dlg = wx.ProgressDialog(
            title="データ処理中",
            message="0/100",
            maximum=100,
            style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )
         
# ダイアログ表示
	      dlg.Show()
	      rate = 0

          
	      data1 = []
	      cell_list_1 = ws3.range(row3, 9, row4, 9)
#	      print(cell_list_1)

	      i = 0
	      j = 0
	      for i in range(len(cell_list_1)):
#	        print(cell_list_1[i].value)
            
#時刻を消して日付だけにしたいとき
#https://qiita.com/daijiro_maeyama/items/8a62fbb0741e5bad8568
	        dt_str, new_time = cell_list_1[i].value.split()
            
#空リスト「data1」に上記の式で区切った文字列を追加
	        data1.append(dt_str)

	        j += 1
	        rate += 1/(row4)*100
            # 値の更新
	        dlg.Update(value=rate, newmsg="%d/100" % rate + "%")

	      print(data1)

#7列目（文字列のみ）
	      data2 = []
	      cell_list_2 = ws3.range(row3, 7, row4, 7)
#	      print(cell_list_2)

	      rate = 0
	      i = 0
	      j = 0
	      for i in range(len(cell_list_2)):
#	        print(cell_list_2[i].value)
	        data2.append(cell_list_2[i].value)
            
	        j += 1
	        rate += 1/(row4)*100
            # 値の更新
	        dlg.Update(value=rate, newmsg="%d/100" % rate + "%")

	      print(data2)
#listをDataFrameに変換する          
#https://qiita.com/fault/items/6d5d69d4a0c257ed39df
	      df1 = pd.DataFrame(list(zip(data1,data2)), columns = ['Date','Result'])
	      print(df1)

#           Date                        Result
#0   2021年12月22日                サービスに関する専用フォーム
#1   2021年12月22日   x この項目 "メールアドレス" は入力が必須です。
#2   2021年12月22日                 入力にエラーがあります。
#3   2021年12月22日                    フォーム要素取得不可
#4   2021年12月22日                    フォーム要素取得不可
#..          ...                           ...
#79  2021年12月24日                     送信完了しました。
#80  2021年12月24日  お問い合わせを送信いたしました。ありがとうございました。
#81  2021年12月24日                     送信完了しました。
#82  2021年12月24日                          送信完了
#83  2021年12月24日                          完了画面
          
#value_counts()・・・DataFrameの特定の「列」に入っている「ユニークな要素」の「出現回数」を抽出することができる関数
#棒グラフで時系列順に表示する（Index順にソートしてからプロット）
#https://teratail.com/questions/265731
	      val1 = df1["Date"].value_counts().sort_index()
	      print(val1)

#[84 rows x 2 columns]
#2021年12月21日    18
#2021年12月22日    22
#2021年12月23日    26
#2021年12月24日    18
#Name: Date, dtype: int64

	      val2 = df1["Result"].value_counts().sort_index()
	      print(val2)

#	      df_str = df[['Date','Result']]
#	      print(df_str)          

# x この項目 "メールアドレス" は入力が必須です。
#                                 1
#* 必須項目です* メールアドレスが正しくありません
#                                   1
#Email *
#             1
#TYPE2ERRORメールアドレスが正しくありません。
#                              1
#Thank you for your message. It has been sent.
#             1
#【Email】は必須入力項目です。
#                         1
#【Email】は必須項目です。
#                       1
#あなたのメッセージは送信されました。ありがとうございました。
#                                           6
#ありがとうございます。メッセージは送信されました。
#                                     15
#ありがとうございます。メッセージは送信されました。なお、自動返信メールが届かない場合は、メールア
#ドレス誤記の可能性がございますので、ご確認をお願いいたします。                              1   
#お問い合わせありがとうございました。
#                               1
#お問い合わせを送信いたしました。ありがとうございました。
#                                         2
#お問い合わせメッセージを送信しました。
#                                1
#お問い合わせ頂きまして、誠に有難うございます。内容を確認後、早急にご返信させて頂きます。 もし数 
#日中に返事が無い場合は、正しく受信できなかった可能性がありますので、恐れ入りますが再度のご連絡を
#お願い致します。     1
#サービスに関する専用フォーム
#                           4
#フォーム要素取得不可
#                       5
#メッセージは送信されました。ありがとうございました。
#                                       1
#メールアドレスが入力されていません
#                              3
#メール送信終了｜エムアンドシーシステム（株）
#                                   1
#入力にエラーがあります。
#                         1
#営業お断り！！
#                    1
#完了画面
#                 1
#必須項目に入力してください。
#                           5
#必須項目に記入もれがあります。
#                            4
#資料請求専用フォーム
#                       6
#送信できませんでした。入力に不備があります。
#                                   1
#送信完了
#                 4
#送信完了 株式会社ナガツカ
#                         1
#送信完了しました。
#                     11
#送信完了｜お問い合わせ
#                        1

#Result全体より指定キーワードにて抽出
#論理積（かつ）: &演算子
#論理和（または）: |演算子
#否定（でない）: ~演算子
#https://note.nkmk.me/python-pandas-count-condition/
	      df2 = df1[df1['Result'].str.contains("送信されました") \
                | df1['Result'].str.contains("完了") \
                    | df1['Result'].str.contains("終了") \
                        | df1['Result'].str.contains("送信いたしました") \
                            | df1['Result'].str.contains("送信しました") \
                                | df1['Result'].str.contains("ございま") \
                                    | df1['Result'].str.contains("Thank")]
	      print(df2)

#           Date                                             Result
#36  2021年12月21日                          ありがとうございます。メッセージは送信されました。  
#37  2021年12月21日                          ありがとうございます。メッセージは送信されました。  
#38  2021年12月21日                                               送信完了
#39  2021年12月21日                                          送信完了しました。
#40  2021年12月21日                       お問い合わせを送信いたしました。ありがとうございました 
#。
#42  2021年12月21日                                          送信完了しました。
#43  2021年12月21日                          ありがとうございます。メッセージは送信されました。  
#44  2021年12月21日                                          送信完了しました。
#45  2021年12月21日                                               送信完了
#46  2021年12月21日                     あなたのメッセージは送信されました。ありがとうございまし 
#た。
#47  2021年12月21日                                お問い合わせメッセージを送信しました。        
#48  2021年12月21日                                          送信完了しました。
#49  2021年12月21日                         メッセージは送信されました。ありがとうございました。 
#50  2021年12月21日                     あなたのメッセージは送信されました。ありがとうございまし 
#た。
#51  2021年12月21日                                      送信完了 株式会社ナガツカ
#52  2021年12月21日                                          送信完了しました。
#53  2021年12月21日                                        送信完了｜お問い合わせ
#54  2021年12月22日                                          送信完了しました。
#55  2021年12月22日                                          送信完了しました。
#56  2021年12月22日                          ありがとうございます。メッセージは送信されました。  
#57  2021年12月22日                             メール送信終了｜エムアンドシーシステム（株）     
#58  2021年12月22日                          ありがとうございます。メッセージは送信されました。  
#59  2021年12月22日                     あなたのメッセージは送信されました。ありがとうございまし 
#た。
#60  2021年12月22日                     あなたのメッセージは送信されました。ありがとうございまし 
#た。
#61  2021年12月23日                                          送信完了しました。
#62  2021年12月23日                          ありがとうございます。メッセージは送信されました。  
#63  2021年12月23日                                               送信完了
#64  2021年12月23日  お問い合わせ頂きまして、誠に有難うございます。内容を確認後、早急にご返信させ
#て頂きます。 も...
#65  2021年12月23日                          ありがとうございます。メッセージは送信されました。  
#66  2021年12月23日                          ありがとうございます。メッセージは送信されました。  
#67  2021年12月23日                     あなたのメッセージは送信されました。ありがとうございまし 
#た。
#68  2021年12月23日                                 お問い合わせありがとうございました。
#69  2021年12月23日                          ありがとうございます。メッセージは送信されました。  
#70  2021年12月23日                          ありがとうございます。メッセージは送信されました。  
#71  2021年12月23日                          ありがとうございます。メッセージは送信されました。  
#72  2021年12月23日                          ありがとうございます。メッセージは送信されました。  
#73  2021年12月23日  ありがとうございます。メッセージは送信されました。なお、自動返信メールが届か
#ない場合は、メー...
#74  2021年12月23日                     あなたのメッセージは送信されました。ありがとうございまし 
#た。
#75  2021年12月23日                          ありがとうございます。メッセージは送信されました。  
#76  2021年12月23日                          ありがとうございます。メッセージは送信されました。  
#77  2021年12月24日                                          送信完了しました。
#78  2021年12月24日                          ありがとうございます。メッセージは送信されました。  
#79  2021年12月24日                                          送信完了しました。
#80  2021年12月24日                       お問い合わせを送信いたしました。ありがとうございました 
#。
#81  2021年12月24日                                          送信完了しました。
#82  2021年12月24日                                               送信完了
#83  2021年12月24日                                               完了画面
          
#	      val3 = df[df['Result'].str.contains("送信されました")].value_counts().sort_index()
#	      print(df[df['Result'].str.contains("送信されました")].value_counts().sort_index())

	      val3 = df2["Date"].value_counts().sort_index()
	      print(val3)

#2021年12月21日    17
#2021年12月22日     7
#2021年12月23日    16
#2021年12月24日     7
#Name: Date, dtype: int64

#日付別件数

#listをDataFrameに変換する          
#https://qiita.com/fault/items/6d5d69d4a0c257ed39df
#	      df3 = pd.DataFrame({'Date':data1})
#	      print(df3)
          
#value_counts()・・・DataFrameの特定の「列」に入っている「ユニークな要素」の「出現回数」を抽出することができる関数
#棒グラフで時系列順に表示する（Index順にソートしてからプロット）
#https://teratail.com/questions/265731
#	      val4 = df3["Date"].value_counts().sort_index()
#	      print(val4)


#グラフウィンドウのタイトル
	      mlp.figure("Number of executions")

#X軸ラベル設定
	      mlp.xlabel("件数", fontname="Yu Gothic")
          
#X軸目盛ラベルの文字を「游ゴシック」
	      mlp.xticks(fontname="Yu Gothic")
          
#Y軸ラベル設定（非表示）
	      mlp.ylabel("", fontname="Yu Gothic")
          
#Y軸目盛ラベルの文字を「游ゴシック」
	      mlp.yticks(fontname="Yu Gothic")
          
#グラフの種類を「横棒グラフ」に設定
	      val3.plot(kind='barh', color='cornflowerblue')
          
	      dlg.Destroy()
  
#プロットしたグラフを表示  
	      mlp.show()


#エラー内訳を可視化
	    elif self.m_radioBtn3.GetValue() is True:
	      adid = MyProject1MyDialog3(self)
	      credentials = ServiceAccountCredentials.from_json_keyfile_name(adid.m_textCtrl11.GetValue(), scope)
	      gc = gspread.authorize(credentials)                   
	      wb = gc.open_by_key(adid.m_comboBox6.GetValue())            
	      ws3 = wb.worksheet(self.m_comboBox11.GetValue())
	      self.row11.SetBackgroundColour('#FFFFFF')
	      self.row21.SetBackgroundColour('#FFFFFF')
	      self.m_comboBox11.SetBackgroundColour("#FFFFFF")
	      #import wx.lib
	      #import wx.lib.plot as plot
	      import matplotlib.pyplot as mlp
	      import pandas as pd
	      from matplotlib import rcParams
	      #import seaborn as sns

#スクリプトの最初でフォント変更の宣言
#https://qiita.com/yniji/items/3fac25c2ffa316990d0c
	      rcParams['font.family'] = 'sans-serif'
	      rcParams['font.sans-serif'] = ['Yu Gothic']

	      dlg = wx.ProgressDialog(
            title="データ処理中",
            message="0/100",
            maximum=100,
            style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )

# ダイアログ表示
	      dlg.Show()
	      rate = 0

	      data = []
	      cell_list_X = ws3.range(row3, 7, row4, 7)
#	      print(cell_list_X)

	      i = 0
	      j = 0
	      for i in range(len(cell_list_X)):
#	        print(cell_list_X[i].value)
	        data.append(cell_list_X[i].value)
            
	        j += 1
	        rate += 1/(row4)*100
            # 値の更新
	        dlg.Update(value=rate, newmsg="%d/100" % rate + "%")

	      print(data)

#listをDataFrameに変換する          
#https://qiita.com/fault/items/6d5d69d4a0c257ed39df
	      df1 = pd.DataFrame({'Result':data})
	      print(df1)

#Result全体より指定キーワードにて抽出
#論理積（かつ）: &演算子
#論理和（または）: |演算子
#否定（でない）: ~演算子
#https://note.nkmk.me/python-pandas-count-condition/
	      df2 = df1[~(df1['Result'].str.contains("送信されました")) \
                & ~(df1['Result'].str.contains("完了")) \
                    & ~(df1['Result'].str.contains("終了")) \
                        & ~(df1['Result'].str.contains("送信いたしました")) \
                            & ~(df1['Result'].str.contains("送信しました")) \
                                & ~(df1['Result'].str.contains("ございま")) \
                                    & ~(df1['Result'].str.contains("Thank")) \
                                        & df1['Result'].str.contains("専用") \
                                            | df1['Result'].str.contains("必須") \
                                                    | df1['Result'].str.contains("要素") \
                                                        | df1['Result'].str.contains("メールアドレス") \
                                                            | df1['Result'].str.contains("エラー") \
                                                                | df1['Result'].str.contains("正しくありません") \
                                                                    | df1['Result'].str.contains("不備") \
                                                                        | df1['Result'].str.contains("営業") \
                                                                            | df1['Result'].str.contains("Email") \
                                                                                    | df1['Result'].str.contains("入力") \
                                                                                        | df1['Result'].str.contains("問題") \
                                                                                            | df1['Result'].str.contains("不可") \
                                                                                                | df1['Result'].str.contains("rror") \
                                                                                                    | df1['Result'].str.contains("記入") \
                                                                                                        | df1['Result'].str.contains("失敗") \
                                                                                                            | df1['Result'].str.contains("URL") \
                                                                                                                | df1['Result'].str.contains("RROR")]
	      print(df2)

          
#value_counts()・・・DataFrameの特定の「列」に入っている「ユニークな要素」の「出現回数」を抽出することができる関数
#棒グラフで時系列順に表示する（Index順にソートしてからプロット）
#https://teratail.com/questions/265731
	      val = df2["Result"].value_counts()
	      print(val)

#グラフウィンドウのタイトル
	      mlp.figure("Breakdown of errors")

#プロットの色変更
	      cmap=mlp.get_cmap("Set3") 
          
#Qualitativeの種類（参考）
#	      ['Pastel1', 'Pastel2', 'Paired', 'Accent',
#        'Dark2', 'Set1', 'Set2', 'Set3',
#        'tab10', 'tab20', 'tab20b', 'tab20c']
 
	      colors = [cmap(i) for i in range(len(val))]

#円グラフを描画するための引数設定
	      mlp.pie(val, 
               autopct='%.d%%',
               pctdistance=0.8,
               counterclock=False,
               startangle=90,
               textprops={"fontsize": 15,'weight': "bold"},
               wedgeprops={'width': 0.5, 'linewidth': 1, 'edgecolor':"white"},
               colors=colors, 
               radius=1.2)

#ラベルテキストのサイズ設定
#	      mlp.rcParams['font.size'] = 15

#凡例の表示
#微調整は「loc='lower left'」「bbox_to_anchor=(0.9,0.5)」等を引数に設定
#参考サイト（https://www.yutaka-note.com/entry/matplotlib_legend#loc%E3%81%A7%E7%B0%A1%E5%8D%98%E4%BD%8D%E7%BD%AE%E8%AA%BF%E6%95%B4）
	      mlp.legend(val.index, fancybox=True, loc='upper left', bbox_to_anchor=(0.9,0.5))

	      dlg.Destroy()
          
#プロットしたグラフを表示          
	      mlp.show()


          
class MyProject1MyDialog( app.MyDialog ):
    def __init__(self, parent):
        app.MyDialog.__init__(self, parent)
        self.parent = parent

#        mainBox.Add( hbox1, 1, wx.EXPAND, 5 )
#        self.m_panel6 = wx.Panel( self.main_panel, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        
        self.m_panel6.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer5 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel6, wx.ID_ANY, u"Please set the value." ), wx.VERTICAL )

        self.m_panel5 = wx.Panel( sbSizer5.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        bSizer16 = wx.BoxSizer( wx.VERTICAL )

        gSizer5 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel17 = wx.Panel( self.m_panel5, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        self.m_panel17.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer15 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel17, wx.ID_ANY, u"Check the page list." ), wx.VERTICAL )

#        m_comboBox1Choices = []
#        self.m_comboBox1 = wx.ComboBox( sbSizer15.GetStaticBox(), wx.ID_ANY, u"Combo!", wx.DefaultPosition, wx.DefaultSize, m_comboBox1Choices, wx.CB_DROPDOWN )

        adid = MyProject1MyDialog3(self)
                
#秘密鍵（JSONファイル）のファイル名を入力
        credentials = ServiceAccountCredentials.from_json_keyfile_name(adid.m_textCtrl11.GetValue(), scope)

#OAuth2の資格情報を使用してGoogle APIにログインします。
        gc = gspread.authorize(credentials)

#存在するワークシートの情報を全て取得
        wb = gc.open_by_key(adid.m_comboBox6.GetValue())
        worksheets = wb.worksheets()
        
#現在のワークシートのタイトルをリストへ格納
        m_comboBox1Choices = [worksheet.title for worksheet in worksheets]
#        print(m_comboBox1Choices)
        self.m_comboBox1 = wx.ComboBox( sbSizer15.GetStaticBox(), wx.ID_ANY, u"選択して下さい", wx.DefaultPosition, wx.Size( 100,-1 ), m_comboBox1Choices, wx.CB_DROPDOWN )
        
        sbSizer15.Add( self.m_comboBox1, 0, wx.ALL, 5 )
        
#（ページ一覧：スプレッドシート参照不要によりドロップボックスを無効）        
        self.m_comboBox1.Enable(False)

        self.dbtn2 = wx.Button( sbSizer15.GetStaticBox(), wx.ID_ANY, u"View index", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.dbtn2.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer15.Add( self.dbtn2, 0, wx.ALL, 5 )


        self.m_panel17.SetSizer( sbSizer15 )
        self.m_panel17.Layout()
        sbSizer15.Fit( self.m_panel17 )
        gSizer5.Add( self.m_panel17, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel23 = wx.Panel( self.m_panel5, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )

        sbSizer18 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel23, wx.ID_ANY, u"Header list" ), wx.VERTICAL )

        sbSizer18.SetMinSize( wx.Size( 20,-1 ) )
        gSizer6 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_staticText5 = wx.StaticText( sbSizer18.GetStaticBox(), wx.ID_ANY, u"start", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.m_staticText5.Wrap( -1 )

        self.m_staticText5.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        gSizer6.Add( self.m_staticText5, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )

        self.row1 = wx.SpinCtrl( sbSizer18.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), wx.SP_ARROW_KEYS, 0, 500, 0 )
        gSizer6.Add( self.row1, 0, wx.ALL, 5 )

        self.m_staticText6 = wx.StaticText( sbSizer18.GetStaticBox(), wx.ID_ANY, u"last", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.m_staticText6.Wrap( -1 )

        gSizer6.Add( self.m_staticText6, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )

        self.row2 = wx.SpinCtrl( sbSizer18.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), wx.SP_ARROW_KEYS, 0, 500, 0 )
        gSizer6.Add( self.row2, 0, wx.ALL, 5 )

        m_comboBox3Choices = [worksheet.title for worksheet in worksheets]
        self.m_comboBox3 = wx.ComboBox( sbSizer18.GetStaticBox(), wx.ID_ANY, u"選択して下さい", wx.DefaultPosition, wx.Size( 100,-1 ), m_comboBox3Choices, 0 )
        gSizer6.Add( self.m_comboBox3, 0, wx.ALL, 5 )

        self.btn3 = wx.Button( sbSizer18.GetStaticBox(), wx.ID_ANY, u"Get", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.btn3.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        gSizer6.Add( self.btn3, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )


        sbSizer18.Add( gSizer6, 1, wx.EXPAND, 5 )


        self.m_panel23.SetSizer( sbSizer18 )
        self.m_panel23.Layout()
        sbSizer18.Fit( self.m_panel23 )
        gSizer5.Add( self.m_panel23, 1, wx.EXPAND |wx.ALL, 5 )


        bSizer16.Add( gSizer5, 1, wx.EXPAND, 5 )


        self.m_panel5.SetSizer( bSizer16 )
        self.m_panel5.Layout()
        bSizer16.Fit( self.m_panel5 )
        sbSizer5.Add( self.m_panel5, 1, wx.EXPAND |wx.ALL, 5 )


        self.m_panel6.SetSizer( sbSizer5 )
        self.m_panel6.Layout()
        sbSizer5.Fit( self.m_panel6 )
#        hbox1.Add( self.m_panel6, 1, wx.EXPAND |wx.ALL, 5 )


#        mainBox.Add( hbox1, 1, wx.EXPAND, 5 )

#        hbox4 = wx.BoxSizer( wx.VERTICAL )

#        self.m_panel15 = wx.Panel( self.main_panel, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        self.m_panel15.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer12 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel15, wx.ID_ANY, u"Please set the value." ), wx.VERTICAL )

        self.m_panel14 = wx.Panel( sbSizer12.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        bSizer161 = wx.BoxSizer( wx.VERTICAL )

        gSizer51 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel151 = wx.Panel( self.m_panel14, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer151 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel151, wx.ID_ANY, u"Confirmation of result." ), wx.VERTICAL )

#現在のワークシートのタイトルをリストへ格納
        m_comboBox11Choices = [worksheet.title for worksheet in worksheets]
#        print(m_comboBox11Choices)
        self.m_comboBox11 = wx.ComboBox( sbSizer151.GetStaticBox(), wx.ID_ANY, u"選択して下さい", wx.DefaultPosition, wx.Size( 100,-1 ), m_comboBox11Choices, wx.CB_DROPDOWN )
        sbSizer151.Add( self.m_comboBox11, 0, wx.ALL, 5 )

        self.dbtn21 = wx.Button( sbSizer151.GetStaticBox(), wx.ID_ANY, u"Confirm", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.dbtn21.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer151.Add( self.dbtn21, 0, wx.ALL, 5 )


        self.m_panel151.SetSizer( sbSizer151 )
        self.m_panel151.Layout()
        sbSizer151.Fit( self.m_panel151 )
        gSizer51.Add( self.m_panel151, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel16 = wx.Panel( self.m_panel14, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer16 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel16, wx.ID_ANY, u"Get detailed information." ), wx.VERTICAL )

        gSizer61 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_staticText51 = wx.StaticText( sbSizer16.GetStaticBox(), wx.ID_ANY, u"start", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.m_staticText51.Wrap( -1 )

        self.m_staticText51.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        gSizer61.Add( self.m_staticText51, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )

        self.row3 = wx.SpinCtrl( sbSizer16.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), wx.SP_ARROW_KEYS, 0, 10000, 0 )
        gSizer61.Add( self.row3, 0, wx.ALL, 5 )

        self.m_staticText61 = wx.StaticText( sbSizer16.GetStaticBox(), wx.ID_ANY, u"last", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.m_staticText61.Wrap( -1 )

        gSizer61.Add( self.m_staticText61, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )

        self.row4 = wx.SpinCtrl( sbSizer16.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), wx.SP_ARROW_KEYS, 0, 10000, 0 )
        gSizer61.Add( self.row4, 0, wx.ALL, 5 )

#現在のワークシートのタイトルをリストへ格納
        m_comboBox31Choices = [worksheet.title for worksheet in worksheets]
#        print(m_comboBox31Choices)
        self.m_comboBox31 = wx.ComboBox( sbSizer16.GetStaticBox(), wx.ID_ANY, u"選択して下さい", wx.DefaultPosition, wx.Size( 100,-1 ), m_comboBox31Choices, 0 )
        gSizer61.Add( self.m_comboBox31, 0, wx.ALL, 5 )

        self.btn4 = wx.Button( sbSizer16.GetStaticBox(), wx.ID_ANY, u"Get", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.btn4.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        gSizer61.Add( self.btn4, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )


        sbSizer16.Add( gSizer61, 1, wx.EXPAND, 5 )


        self.m_panel16.SetSizer( sbSizer16 )
        self.m_panel16.Layout()
        sbSizer16.Fit( self.m_panel16 )
        gSizer51.Add( self.m_panel16, 1, wx.EXPAND |wx.ALL, 5 )


        bSizer161.Add( gSizer51, 1, wx.EXPAND, 5 )


        self.m_panel14.SetSizer( bSizer161 )
        self.m_panel14.Layout()
        bSizer161.Fit( self.m_panel14 )
        sbSizer12.Add( self.m_panel14, 1, wx.EXPAND |wx.ALL, 5 )


        self.m_panel15.SetSizer( sbSizer12 )
        self.m_panel15.Layout()
        sbSizer12.Fit( self.m_panel15 )


#存在するワークシートの情報を全て取得
#        wb = gc.open_by_key(key)
#        worksheets = wb.worksheets()
        
#現在のワークシートのタイトルをリストへ格納
#        m_comboBox1Choices = [worksheet.title for worksheet in worksheets]
#        print(m_comboBox1Choices)
#        self.m_comboBox1 = wx.ComboBox( sbSizer15.GetStaticBox(), wx.ID_ANY, u"選択して下さい", wx.DefaultPosition, wx.DefaultSize, m_comboBox1Choices, wx.CB_DROPDOWN )

#Connect Events
        self.Bind( wx.EVT_CLOSE, self.quit_button )
        self.btn3.Bind( wx.EVT_BUTTON, self.header )
        self.btn4.Bind( wx.EVT_BUTTON, self.Get_details )
        self.dbtn2.Bind( wx.EVT_BUTTON, self.page_list )
        self.dbtn21.Bind( wx.EVT_BUTTON, self.list_view )


    def header( self, event ):
        adid = MyProject1MyDialog3(self)
        credentials = ServiceAccountCredentials.from_json_keyfile_name(adid.m_textCtrl11.GetValue(), scope)
        gc = gspread.authorize(credentials)                   
        row1 = self.row1.GetValue()
        row2 = self.row2.GetValue()
#        print(row1)
#        print(row2)        

#        if self.m_comboBox1.GetValue() == '選択して下さい' \
#            or self.m_comboBox3.GetValue() == '選択して下さい':
#         self.m_comboBox1.SetBackgroundColour("#ff0000")
#         self.m_comboBox3.SetBackgroundColour("#ff0000")         
#         wx.MessageBox(u'Please select the Worksheet title!!', u'Setting value error', wx.ICON_ERROR)
#        elif not 'page' in self.m_comboBox1.GetValue() \
#            or not 'リスト' in self.m_comboBox3.GetValue():
#         self.m_comboBox1.SetBackgroundColour("#ff0000")
#         self.m_comboBox3.SetBackgroundColour("#ff0000")         
#         wx.MessageBox(u'Not a valid sheet name.!!', u'Setting value error', wx.ICON_ERROR)            
        if row1 == 0 or row2 == 0:
         self.row1.SetBackgroundColour('#f56cbe')
         self.row2.SetBackgroundColour('#f56cbe')
#         self.m_comboBox1.SetBackgroundColour("#FFFFFF")
         self.m_comboBox3.SetBackgroundColour("#FFFFFF")         
         wx.MessageBox(u'Please set the range!!', u'Setting value error', wx.ICON_ERROR)
        elif row2 - row1 > 391:
         self.row1.SetBackgroundColour('#f56cbe')
         self.row2.SetBackgroundColour('#f56cbe')
#         self.m_comboBox1.SetBackgroundColour("#FFFFFF")
         self.m_comboBox3.SetBackgroundColour("#FFFFFF")         
         wx.MessageBox(u'The value exceeds the configurable range!!', u'Setting value error', wx.ICON_ERROR)
        elif row2 - row1 < 0:
         self.row1.SetBackgroundColour('#f56cbe')
         self.row2.SetBackgroundColour('#f56cbe')
#         self.m_comboBox1.SetBackgroundColour("#FFFFFF")
         self.m_comboBox3.SetBackgroundColour("#FFFFFF")         
         wx.MessageBox(u'Illegal range!!', u'Setting value error', wx.ICON_ERROR)
        elif self.m_comboBox3.GetValue() == '選択して下さい':
         self.m_comboBox3.SetBackgroundColour("#f56cbe")      
         wx.MessageBox(u'Please select the Worksheet title!!', u'Setting value error', wx.ICON_ERROR)
#        elif self.m_comboBox3.GetValue() == '完成例':
#         self.m_comboBox3.SetBackgroundColour("#f56cbe")
#         wx.MessageBox(u'Not a valid sheet name.!!', u'Setting value error', wx.ICON_ERROR)
        elif self.m_comboBox3.GetValue() == '選択して下さい' \
            and row1 == 0 \
                and row2 == 0:
         self.row1.SetBackgroundColour('#f56cbe')
         self.row2.SetBackgroundColour('#f56cbe')
         self.m_comboBox3.SetBackgroundColour("#f56cbe")
         wx.MessageBox(u'Please select the Worksheet title and Illegal range!!', u'Setting value error', wx.ICON_ERROR)         
         
		# Set cell values.
        else:
         from selenium import webdriver
         from selenium.webdriver.chrome.options import Options

#例外処理用のlibraryをimport
         from selenium.common.exceptions import NoSuchElementException
         from selenium.common.exceptions import WebDriverException
         from selenium.common.exceptions import TimeoutException
         from selenium.common.exceptions import SessionNotCreatedException

#Selectモジュールをインポート
		 #from selenium.webdriver.support.select import Select

#オプションの作成
         option = Options()

#起動オプション
# ヘッドレスモードを有効にする（次の行をコメントアウトすると画面が表示される）。
         option.add_argument('--headless')

#「unknown error: net::ERR_CONNECTION_CLOSED」の回避用
         option.add_argument('--disable-dev-shm-usage')

# ChromeのWebDriverオブジェクトを作成する。
         try:
           driver = webdriver.Chrome(adid.m_textCtrl111.GetValue(),options=option)
           driver.set_page_load_timeout(60)
           wb = gc.open_by_key(adid.m_comboBox6.GetValue())
#         print(self.m_textCtrl3.GetValue())
#         ws2 = wb.worksheet(self.m_comboBox1.GetValue())
#         print(self.m_comboBox1.GetValue())
           ws3 = wb.worksheet(self.m_comboBox3.GetStringSelection())
#         print(self.m_comboBox3.GetStringSelection())
           self.row1.SetBackgroundColour('#FFFFFF')
           self.row2.SetBackgroundColour('#FFFFFF')
#         self.m_comboBox1.SetBackgroundColour("#FFFFFF")
           self.m_comboBox3.SetBackgroundColour("#FFFFFF")

#Chromeドライバーのバージョンがブラウザのバージョンと合わない場合のエラーメッセージ
         except SessionNotCreatedException as e:
           print("error:", e)
           wx.MessageBox(f'{e}', u'driver error', wx.ICON_ERROR)

         else:
          answer = wx.MessageBox(u'All the data on the selected sheet will be cleared, is that okay?', u'Verification', wx.YES_NO | wx.ICON_EXCLAMATION)
          if answer == wx.NO:
             pass
          elif answer == wx.YES:
           ws3.clear()            
           dlg = wx.ProgressDialog(
             title="ヘッダー取得中",
             message="0/100",
             maximum=100,
             style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME | wx.PD_CAN_ABORT )         
         
# ダイアログ表示
           dlg.Show()
           rate = 0

#所要時間計測開始
           start = time.time()

#全国のホームページ制作会社一覧
           for j in tqdm(range(row1, row2+1)):
             driver.get("https://imitsu.jp/ct-hp-design/search/?pn=" + str(j))
#           driver.get(ws2.cell(j,1).value)
             time.sleep(8)
     
             html = driver.page_source
#     print(html)
             soup = BeautifulSoup(html, 'html.parser')

#「〇～○件を表示」・・・「NoSuchElementException:」が表示される為、コメントアウト
#           KEN1 = driver.find_element_by_xpath('//*[@id="top"]/div[3]').text
#     HEN1 = KEN1.replace('件','')
#           print(KEN1)

             service_urls = []
             for service_url in soup.select('.imc-color-a.imc-color-a--u'):
               print(service_url.get('href'))
               service_urls.append(service_url.get('href'))

#後で「https://imitsu.jp」と連結させること！！
#           time.sleep(5)
              
#ws1の行数を取得
             lastrow1 = len(ws3.col_values(1))
#           print(lastrow1)       
           
             if lastrow1 == 0:
                 cell_list2 = ws3.range(1, 1, str(len(service_urls)), 1)
                 time.sleep(5)
#スプレッドシートに入力
                 for v2,c2 in zip(service_urls,cell_list2):
                   c2.value = v2
                 ws3.update_cells(cell_list2)
            
             elif lastrow1 > 0:
                 cell_list2 = ws3.range(lastrow1+1, 1, lastrow1+1+len(service_urls), 1)
                 time.sleep(5)
                 for v2,c2 in zip(service_urls,cell_list2):
                   c2.value = v2
                 ws3.update_cells(cell_list2)
            
        # ループ処理
#          for a in range(rate, 100):
#          while rate < 100:
            # 0.5秒待つ
#            time.sleep(0.5)
             update = True
             rate += 1/((row2+1)-row1)*100
             (update, skip) = dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
             if not update:
               wx.MessageBox(u'Header acquisition has been canceled.', 
                      u'This process cannot be continued! !!', wx.ICON_ERROR)
               break
           
           dlg.Destroy()

#chromeドライバーの終了
           driver.quit()      

# calculate elapsed time
           elapsed_time = int(time.time() - start)

# convert second to hour, minute and seconds
           elapsed_hour = elapsed_time // 3600
           elapsed_minute = (elapsed_time % 3600) // 60
           elapsed_second = (elapsed_time % 3600 % 60)

# print as 00:00:00
           print("所要時間：" + str(elapsed_hour).zfill(2) + "h" \
      + str(elapsed_minute).zfill(2) + "m" + str(elapsed_second).zfill(2) + "s")        


    def Get_details( self, event ):
        adid = MyProject1MyDialog3(self)
        credentials = ServiceAccountCredentials.from_json_keyfile_name(adid.m_textCtrl11.GetValue(), scope)
        gc = gspread.authorize(credentials)
        row3 = self.row3.GetValue()
        row4 = self.row4.GetValue()
#        print(row3)
#        print(row4)                

        if self.m_comboBox31.GetValue() == '選択して下さい':
         self.m_comboBox31.SetBackgroundColour("#f56cbe")      
         wx.MessageBox(u'Please select the Worksheet title!!', u'Setting value error', wx.ICON_ERROR)
#        elif self.m_comboBox31.GetValue() == '完成例':
#         self.m_comboBox31.SetBackgroundColour("#f56cbe")         
#         wx.MessageBox(u'Not a valid sheet name.!!', u'Setting value error', wx.ICON_ERROR)            
        elif row3 == 0 or row4 == 0:
         self.row3.SetBackgroundColour('#f56cbe')
         self.row4.SetBackgroundColour('#f56cbe')
         self.m_comboBox31.SetBackgroundColour("#FFFFFF")        
         wx.MessageBox(u'Please set the range!!', u'Setting value error', wx.ICON_ERROR)
        elif row4 - row3 > 10000:
         self.row3.SetBackgroundColour('#f56cbe')
         self.row4.SetBackgroundColour('#f56cbe')
         self.m_comboBox31.SetBackgroundColour("#FFFFFF")        
         wx.MessageBox(u'The value exceeds the configurable range!!', u'Setting value error', wx.ICON_ERROR)
        elif row4 - row3 < 0:
         self.row3.SetBackgroundColour('#f56cbe')
         self.row4.SetBackgroundColour('#f56cbe')
         self.m_comboBox31.SetBackgroundColour("#FFFFFF")        
         wx.MessageBox(u'Illegal range!!', u'Setting value error', wx.ICON_ERROR)
        elif self.m_comboBox31.GetValue() == '選択して下さい' \
            and row3 == 0 \
                and row4 == 0:
         self.row1.SetBackgroundColour('#f56cbe')
         self.row2.SetBackgroundColour('#f56cbe')
         self.m_comboBox31.SetBackgroundColour("#f56cbe")
         wx.MessageBox(u'Please select the Worksheet title and Illegal range!!', u'Setting value error', wx.ICON_ERROR)                  
         
		# Set cell values.
        else:
         from selenium import webdriver
         from selenium.webdriver.chrome.options import Options

#例外処理用のlibraryをimport
         from selenium.common.exceptions import NoSuchElementException
         from selenium.common.exceptions import WebDriverException
         from selenium.common.exceptions import TimeoutException
         from selenium.common.exceptions import SessionNotCreatedException

#Selectモジュールをインポート
		 #from selenium.webdriver.support.select import Select

#オプションの作成
         option = Options()

#起動オプション
# ヘッドレスモードを有効にする（次の行をコメントアウトすると画面が表示される）。
         option.add_argument('--headless')

#「unknown error: net::ERR_CONNECTION_CLOSED」の回避用
         option.add_argument('--disable-dev-shm-usage')

# ChromeのWebDriverオブジェクトを作成する。
         try:
           driver = webdriver.Chrome(adid.m_textCtrl111.GetValue(),options=option)
           driver.set_page_load_timeout(60)
           wb = gc.open_by_key(adid.m_comboBox6.GetValue())
#         print(self.m_textCtrl3.GetValue())
           ws3 = wb.worksheet(self.m_comboBox31.GetStringSelection())
#         print(self.m_comboBox3.GetStringSelection())
           self.row3.SetBackgroundColour('#FFFFFF')
           self.row4.SetBackgroundColour('#FFFFFF')
           self.m_comboBox31.SetBackgroundColour("#FFFFFF")        

#Chromeドライバーのバージョンがブラウザのバージョンと合わない場合のエラーメッセージ
         except SessionNotCreatedException as e:
           print("error:", e)
           wx.MessageBox(f'{e}', u'driver error', wx.ICON_ERROR)

        # Set cell values.
#         ws3.clear()
         else:
          dlg = wx.ProgressDialog(
            title="会社概要取得中",
            message="0/100",
            maximum=100,
            style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME | wx.PD_CAN_ABORT )         
         
# ダイアログ表示
          dlg.Show()
          rate = 0

#所要時間計測開始
          start = time.time()

#会社概要
#ws1の行数を取得
          lastrow1 = len(ws3.col_values(1))
          print(lastrow1)
          
          try:
           for k in tqdm(range(row3, row4+1)):
              if 'https://imitsu.jp' in ws3.cell(k, 1).value:
              #try:
               driver.get(ws3.cell(k, 1).value)
#               time.sleep(5)
               ws3.update_cell(k, 1, driver.current_url)

#エラーによる中断で取り直す場合、一旦ヘッダ以外の取得データをクリアして初期化
               lastcol = len(list(ws3.row_values(k)))
               cell_list2 = ws3.range(k, 2, k, lastcol)
               print(cell_list2)
               for cell in cell_list2:
                 cell.value = ""
#             time.sleep(1)
               ws3.update_cells(cell_list2)

#通常のデータ取得
              elif not 'https://imitsu.jp' in ws3.cell(k, 1).value:
               driver.get('https://imitsu.jp' + ws3.cell(k, 1).value)
#               time.sleep(5)
               ws3.update_cell(k, 1, driver.current_url)

              html = driver.page_source
              soup = BeautifulSoup(html, 'html.parser')
#               print(soup)

#エラー発生時に回避（①～⑤は実施されない）
#              except WebDriverException:
#               break

#①各詳細データ

#１列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(1) > dd"):
               print(Content.getText())
       
#       if "会社名" in Content:           
#       Contents.append(Content.getText())
               time.sleep(3)       
#     for i in range(1,len(Contents)):
               lastcol = len(list(ws3.row_values(k)))                  
#       ws3.update_cell(k, lastcol+1, Contents[i-1])
               Content1 = re.sub("[\n]", "", Content.getText(), 4)
               ws3.update_cell(k, lastcol+1, Content1)

              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(1) > dd"):
               print(Content.getText())
       
#       if "会社名" in Content:           
#       Contents.append(Content.getText())
               time.sleep(3)       
#     for i in range(1,len(Contents)):
               lastcol = len(list(ws3.row_values(k)))                  
#       ws3.update_cell(k, lastcol+1, Contents[i-1])
               Content1 = re.sub("[\n]", "", Content.getText(), 4)
               ws3.update_cell(k, lastcol+1, Content1)

              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(1) > dd"):
               print(Content.getText())
       
#       if "会社名" in Content:           
#       Contents.append(Content.getText())
               time.sleep(3)       
#     for i in range(1,len(Contents)):
               lastcol = len(list(ws3.row_values(k)))                  
#       ws3.update_cell(k, lastcol+1, Contents[i-1])
               Content1 = re.sub("[\n]", "", Content.getText(), 4)
               ws3.update_cell(k, lastcol+1, Content1)


#（テキストパターン１）
#２列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(2) > dt"):
               print(Content.getText())
       
               if "設立年" in Content.getText():
                pass
               elif "資本金" in Content.getText():
                pass    
               elif "従業員" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(2) > dd"):
                 print(Content.getText())
                 time.sleep(3)
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)

               elif "会社URL" in Content.getText():
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, "-")                   
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, "-")                   

                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(2) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content4)

#３列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(3) > dt"):
               print(Content.getText())

               if "設立年" in Content.getText():
                pass
               elif "従業員" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(3) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(3) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content3 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content3)
                  
               elif "会社URL" in Content.getText():
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, "-")                                              
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(3) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content4)

#４列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(4) > dt"):
               print(Content.getText())

               if "従業員" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(4) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(4) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content3 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content3)
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(4) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
#                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, 5, Content4)

#５列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(5) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(5) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(5) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content3 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content3)
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(5) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
#                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, 5, Content4)

#６列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(6) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(6) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(6) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content3 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content3)
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(6) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
#                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, 5, Content4)

#７列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(7) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(7) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(7) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content3 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content3)
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(7) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content4)

#８列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(8) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(8) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(8) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content3 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content3)
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(8) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content4)

                
#（テキストパターン２）
#２列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(2) > dt"):
               print(Content.getText())
       
               if "設立年" in Content.getText():
                pass
               elif "資本金" in Content.getText():
                pass    
               elif "従業員" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(2) > dd"):
                 print(Content.getText())
                 time.sleep(3)
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)

               elif "会社URL" in Content.getText():
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, "-")                   
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, "-")                   

                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(2) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content4)

#３列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(3) > dt"):
               print(Content.getText())

               if "設立年" in Content.getText():
                pass
               elif "従業員" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(3) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(3) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content3 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content3)
                  
               elif "会社URL" in Content.getText():
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, "-")                                              
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(3) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content4)

#４列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(4) > dt"):
               print(Content.getText())

               if "従業員" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(4) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(4) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content3 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content3)
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(4) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
#                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, 5, Content4)

#５列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(5) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(5) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(5) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content3 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content3)
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(5) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
#                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, 5, Content4)

#６列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(6) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(6) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(6) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content3 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content3)
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(6) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
#                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, 5, Content4)

#７列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(7) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(7) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(7) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content3 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content3)
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(7) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content4)

#８列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(8) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(8) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(8) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content3 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content3)
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(8) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content4)


#（テキストパターン３）
#２列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(2) > dt"):
               print(Content.getText())
       
               if "設立年" in Content.getText():
                pass
               elif "資本金" in Content.getText():
                pass    
               elif "従業員" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(2) > dd"):
                 print(Content.getText())
                 time.sleep(3)
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)

               elif "会社URL" in Content.getText():
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, "-")                   
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, "-")                   

                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(2) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content4)

#３列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(3) > dt"):
               print(Content.getText())

               if "設立年" in Content.getText():
                pass
               elif "従業員" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(3) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(3) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content3 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content3)
                  
               elif "会社URL" in Content.getText():
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, "-")                                              
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(3) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content4)

#４列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(4) > dt"):
               print(Content.getText())

               if "従業員" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(4) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(4) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content3 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content3)
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(4) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
#                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, 5, Content4)

#５列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(5) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(5) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(5) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content3 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content3)
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(5) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
#                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, 5, Content4)

#６列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(6) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(6) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(6) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content3 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content3)
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(6) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
#                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, 5, Content4)

#７列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(7) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(7) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(7) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content3 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content3)
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(7) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content4)

#８列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(8) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(8) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 Content2 = re.sub("[\n]", "", Content.getText(), 4)
                 Content2 = re.sub("[\s]", "", Content2, 34)
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, Content2)
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(8) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content3 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content3)
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(8) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  Content4 = re.sub("[\n]", "", Content.getText(), 4)
                  ws3.update_cell(k, lastcol+1, Content4)


#Progressbar
              update = True
              rate += 1/((row4+1)-row3)*100
              (update, skip) = dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
              if not update:
                wx.MessageBox(u'Canceled the acquisition of the company profile.', 
                      u'This process cannot be continued! !!', wx.ICON_ERROR)
                break
              
#              rate += 1/((row4+1)-row3)*100
            # 値の更新
#              dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
           
           dlg.Destroy()

#chromeドライバーの終了
           driver.quit()      

# calculate elapsed time
           elapsed_time = int(time.time() - start)

# convert second to hour, minute and seconds
           elapsed_hour = elapsed_time // 3600
           elapsed_minute = (elapsed_time % 3600) // 60
           elapsed_second = (elapsed_time % 3600 % 60)

# print as 00:00:00
           print("所要時間：" + str(elapsed_hour).zfill(2) + "h" \
      + str(elapsed_minute).zfill(2) + "m" + str(elapsed_second).zfill(2) + "s")

#エラーメッセージ表示（サブクラスの例外）
          except ConnectionError as e:
            print("error:", e)
            wx.MessageBox(f'{e}', u'Setting value error', wx.ICON_ERROR)
            driver.quit()
            dlg.Destroy()

#エラーメッセージ表示（スーパークラスの例外）
          except gspread.exceptions.APIError as e:
            print("error:", e)
            wx.MessageBox(f'{e}', u'Setting value error', wx.ICON_ERROR)
            driver.quit()
            dlg.Destroy()
           

    def quit_button( self, event ):
		# TODO: Implement quit_button
#        self.parent.tableShow()
	    self.Destroy()

    def page_list( self, event ):

#MyDialogの各設定値をMyFrame4に受け渡し
          adid = MyProject1MyFrame4(self)
          adid.grid.ClearGrid()
#          i = 0
          lastrow = 391
          dlg = wx.ProgressDialog(
            title="リスト取得中",
            message="0/100",
            maximum=100,
            style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )         
         
# ダイアログ表示
          dlg.Show()
          rate = 0
          
          for row in range(lastrow+1):
            adid.grid.SetCellValue(row, 0, "https://imitsu.jp/ct-hp-design/search/?pn=" + str(row+1))
#            print("https://imitsu.jp/ct-hp-design/search/?pn=" + str(row+1))
#            print(cell_list1[i].value)
#            adid.grid.SetCellValue(row, 0, cell_list1[i].value)
#            i += 1
            rate += 1/(lastrow+1)*100
            # 値の更新
            dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
 
          adid.grid.AutoSize()
          adid.Show()
          dlg.Destroy()
          
    def list_view( self, event ):
        adid = MyProject1MyDialog3(self)
        credentials = ServiceAccountCredentials.from_json_keyfile_name(adid.m_textCtrl11.GetValue(), scope)
        gc = gspread.authorize(credentials)                   

        if self.m_comboBox11.GetValue() == '選択して下さい':
         self.m_comboBox11.SetBackgroundColour("#ff0000")
         wx.MessageBox(u'Please select the Worksheet title!!', u'Setting value error', wx.ICON_ERROR)
#        elif self.m_comboBox11.GetValue() == '完成例':
#         self.m_comboBox11.SetBackgroundColour("#FFFFFF")
#         wx.MessageBox(u'The selected sheet name is not valid.!!', u'Setting value error', wx.ICON_ERROR)
		# Set cell values.
        else:
         wb = gc.open_by_key(adid.m_comboBox6.GetValue())
         ws3 = wb.worksheet(self.m_comboBox11.GetValue())
         lastrow = len(ws3.col_values(1))         
         self.m_comboBox11.SetBackgroundColour("#FFFFFF")
         
#MyDialogの各設定値をMyFrame5に受け渡し
         adid = MyProject1MyFrame5(self)
#         adid.InitializeComponents(self.m_textCtrl3.GetValue())
#         adid.InitializeComponents(self.m_comboBox11.GetValue())
         adid.grid.ClearGrid()
#         self.m_gauge2.SetValue( 0 )         
#         self.m_gauge2.SetRange(row2-row1) 
         dlg = wx.ProgressDialog(
            title="リスト取得中",
            message="0/100",
            maximum=100,
            style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )         
         
# ダイアログ表示
         dlg.Show()
         rate = 0

         cell_list1 = ws3.range(1, 1, lastrow, 1)
         cell_list2 = ws3.range(1, 2, lastrow, 2)
         cell_list3 = ws3.range(1, 3, lastrow, 3)
         cell_list4 = ws3.range(1, 4, lastrow, 4)
         cell_list5 = ws3.range(1, 5, lastrow, 5)
         cell_list6 = ws3.range(1, 6, lastrow, 6)         
#		i = 0
#		for row in range(row1, row2):
         i = 0
         for row in range(lastrow):
            adid.grid.SetCellValue(row, 0, cell_list1[i].value)
            adid.grid.SetCellValue(row, 1, cell_list2[i].value)
            adid.grid.SetCellValue(row, 2, cell_list3[i].value)
            adid.grid.SetCellValue(row, 3, cell_list4[i].value)
            adid.grid.SetCellValue(row, 4, cell_list5[i].value)
            adid.grid.SetCellValue(row, 5, cell_list6[i].value)
#            print(cell_list1[i].value)
#            print(cell_list2[i].value)
#            print(cell_list3[i].value)
#            print(cell_list4[i].value)
#            print(cell_list5[i].value)
#            print(cell_list6[i].value)
            i += 1
            rate += 1/(lastrow+1)*100
            # 値の更新
            dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
           
         dlg.Destroy()
            
#            count = self.m_gauge2.GetValue() + 1
#            if count > row2-row1:
#             count = 0
#            else:
#             self.m_gauge2.SetValue(count)
#		    row1 += 1
         adid.grid.AutoSize()
         adid.Show()


class MyProject1MyDialog3( app.MyDialog3 ):
    def __init__(self, parent):
        app.MyDialog3.__init__(self, parent)
        self.parent = parent
 
        hbox4 = wx.BoxSizer( wx.VERTICAL )

        self.m_panel22 = wx.Panel( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        self.m_panel22.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer151 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel22, wx.ID_ANY, u"Required information" ), wx.VERTICAL )

        self.m_panel161 = wx.Panel( sbSizer151.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        self.m_panel161.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer141 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel161, wx.ID_ANY, u"Google API service account verification key" ), wx.VERTICAL )

        self.m_textCtrl11 = wx.TextCtrl( sbSizer141.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        
# ドロップ対象の設定
        self.m_textCtrl11.SetDropTarget(FileDropTarget1(self))
        
#ツールチップ（補足情報を載せる小さいウィンドウ）を表示
        self.m_textCtrl11.SetToolTip("Please drag and drop the JSON file into this text box.")
        
        sbSizer141.Add( self.m_textCtrl11, 0, wx.ALL, 5 )


        self.m_panel161.SetSizer( sbSizer141 )
        self.m_panel161.Layout()
        sbSizer141.Fit( self.m_panel161 )
        sbSizer151.Add( self.m_panel161, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel16 = wx.Panel( sbSizer151.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        self.m_panel16.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer14 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel16, wx.ID_ANY, u"Google spreadsheet key" ), wx.VERTICAL )

        m_comboBox6Choices = ['1BazsXmS9dW8oAOmvjMNVabvvw1dYAgW9SR-qbyAylEU']
        self.m_comboBox6 = wx.ComboBox( sbSizer14.GetStaticBox(), wx.ID_ANY, u"選択して下さい", wx.DefaultPosition, wx.Size( 400,-1 ), m_comboBox6Choices, 0 )

#ツールチップ（補足情報を載せる小さいウィンドウ）を表示
        self.m_comboBox6.SetToolTip("Please specify the key of the spreadsheet that is set to be shared.")

#コンボボックスの項目が選択されたときに処理するイベントをtext_event()メソッドに関連付けるバインダーを設定
#        self.m_comboBox6.Bind(wx.EVT_COMBOBOX, self.text_event)

        sbSizer14.Add( self.m_comboBox6, 0, wx.ALL, 5 )


        self.m_panel16.SetSizer( sbSizer14 )
        self.m_panel16.Layout()
        sbSizer14.Fit( self.m_panel16 )
        sbSizer151.Add( self.m_panel16, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel162 = wx.Panel( sbSizer151.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        self.m_panel162.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer142 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel162, wx.ID_ANY, u"Web driver file for Google Chrome" ), wx.VERTICAL )

        self.m_textCtrl111 = wx.TextCtrl( sbSizer142.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
 
# ドロップ対象の設定
        self.m_textCtrl111.SetDropTarget(FileDropTarget2(self))
        
#ツールチップ（補足情報を載せる小さいウィンドウ）を表示
        self.m_textCtrl111.SetToolTip("Please drag and drop the webdriver file into this text box.")
    
        sbSizer142.Add( self.m_textCtrl111, 0, wx.ALL, 5 )


        self.m_panel162.SetSizer( sbSizer142 )
        self.m_panel162.Layout()
        sbSizer142.Fit( self.m_panel162 )
        sbSizer151.Add( self.m_panel162, 1, wx.EXPAND |wx.ALL, 5 )


        self.m_panel22.SetSizer( sbSizer151 )
        self.m_panel22.Layout()
        sbSizer151.Fit( self.m_panel22 )
        hbox4.Add( self.m_panel22, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel27 = wx.Panel( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        self.m_panel27.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer17 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel27, wx.ID_ANY, u"Your account information" ), wx.VERTICAL )

        self.m_panel20 = wx.Panel( sbSizer17.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        self.m_panel20.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer15 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel20, wx.ID_ANY, u"Username" ), wx.VERTICAL )

        self.m_textCtrl4 = wx.TextCtrl( sbSizer15.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 200,-1 ), 0 )
        sbSizer15.Add( self.m_textCtrl4, 0, wx.ALL, 5 )


        self.m_panel20.SetSizer( sbSizer15 )
        self.m_panel20.Layout()
        sbSizer15.Fit( self.m_panel20 )
        sbSizer17.Add( self.m_panel20, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel21 = wx.Panel( sbSizer17.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        self.m_panel21.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer16 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel21, wx.ID_ANY, u"Password" ), wx.VERTICAL )

        self.m_textCtrl5 = wx.TextCtrl( sbSizer16.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 200,-1 ), wx.TE_PASSWORD )
        sbSizer16.Add( self.m_textCtrl5, 0, wx.ALL, 5 )


        self.m_panel21.SetSizer( sbSizer16 )
        self.m_panel21.Layout()
        sbSizer16.Fit( self.m_panel21 )
        sbSizer17.Add( self.m_panel21, 1, wx.EXPAND |wx.ALL, 5 )

#ログイン時に自動で入力しておくかどうかのチェックボックス
        self.m_checkBox1 = wx.CheckBox( sbSizer17.GetStaticBox(), wx.ID_ANY, u"Automatically entered at login.", wx.DefaultPosition, wx.DefaultSize, 0 )
        sbSizer17.Add( self.m_checkBox1, 0, wx.ALL, 5 )

        self.m_panel27.SetSizer( sbSizer17 )
        self.m_panel27.Layout()
        sbSizer17.Fit( self.m_panel27 )
        hbox4.Add( self.m_panel27, 1, wx.EXPAND |wx.ALL, 5 )

        self.btn11 = wx.Button( self, wx.ID_ANY, u"Save", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.btn11.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        hbox4.Add( self.btn11, 0, wx.ALL, 5 )


        self.SetSizer( hbox4 )
        self.Layout()

        self.Centre( wx.BOTH )

# Connect Events
        self.btn11.Bind( wx.EVT_BUTTON, self.write )
        self.Bind( wx.EVT_CLOSE, self.quit_button )


#設定情報（json）読み込み
#文字コードをUTF-8に変換しないとエラーが発生するため注意！！
        with codecs.open('setting.json','r',encoding='utf-8') as f:
#「JSONDecodeError: Invalid control character at」が返さないようにする。
#strictがfalse（デフォルトはTrue）の場合、制御文字を文字列に含めることができます。
#ここで言う制御文字とは、'\t'（タブ）、'\n'、'\r'、'\0'を含む0-31の範囲のコードを持つ文字のことです。
            j = json.load(f,strict=False)
#            print(j)
            f.close()
            self.m_textCtrl11.SetValue(j['verificationkey'])
            self.m_comboBox6.SetValue(j['spreadsheetkey'])
            self.m_textCtrl111.SetValue(j['webdriver'])
            self.m_textCtrl4.SetValue(j['user'])
            self.m_textCtrl5.SetValue(j['password'])
            self.m_checkBox1.SetValue(j['remember'])

#設定情報（json）書き出し
    def write(self, event):
            if self.m_comboBox6.GetValue() == '' \
                    or not 'json' in self.m_textCtrl11.GetValue() \
                        or not 'chromedriver.exe' in self.m_textCtrl111.GetValue():
              self.m_comboBox6.SetBackgroundColour('#f56cbe')
              self.m_textCtrl11.SetBackgroundColour('#f56cbe')          
#	      self.m_textCtrl111.SetForegroundColour('#f56cbe')
              wx.MessageBox(u'The key is incorrect or does not exist!!', u'Setting value error', wx.ICON_ERROR)
            elif not 'chromedriver.exe' in self.m_textCtrl111.GetValue():
              self.m_textCtrl111.SetBackgroundColour('#f56cbe')
              wx.MessageBox(u'The web driver file is not set or the file path does not pass!!', u'Setting value error', wx.ICON_ERROR)
            elif self.m_textCtrl4.GetValue() == "" \
                or self.m_textCtrl5.GetValue() == "":
              self.m_textCtrl4.SetBackgroundColour('#f56cbe')
              self.m_textCtrl5.SetBackgroundColour('#f56cbe')
              wx.MessageBox(u'No user name or password has been entered!!', u'Setting value error', wx.ICON_ERROR)
            else:
              self.m_comboBox6.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl11.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl111.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl4.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl5.SetBackgroundColour('#FFFFFF')

#文字コードをUTF-8に変換しないとエラー発生がするため注意！！
              with open('setting.json','w',encoding='utf-8') as f:
                w_data = {}
                w_data['verificationkey'] = self.m_textCtrl11.GetValue()
                w_data['spreadsheetkey'] = self.m_comboBox6.GetValue()
                w_data['webdriver'] = self.m_textCtrl111.GetValue()
                w_data['user'] = self.m_textCtrl4.GetValue()
                w_data['password'] = self.m_textCtrl5.GetValue()
                w_data['remember'] = self.m_checkBox1.GetValue()
                json.dump(w_data, f, ensure_ascii=False, indent=1, sort_keys=True, separators=(',', ': '))
                print('WRITE:')
 #               print(w_data)
                self.Destroy()
        
    def quit_button( self, event ):
		# TODO: Implement quit_button
        self.Destroy()

#Profile
class MyProject1MyDialog4( app.MyDialog4 ):
    def __init__(self, parent):
        app.MyDialog4.__init__(self, parent)
        self.parent = parent

        hbox4 = wx.BoxSizer( wx.VERTICAL )

#Corporate_infomation
        self.m_notebook1 = wx.Notebook( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, 0 )
        self.m_notebook1.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        self.m_panel46 = wx.Panel( self.m_notebook1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer50 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel46, wx.ID_ANY, u"Corporate infomation" ), wx.VERTICAL )

        gSizer72 = wx.GridSizer( 0, 2, 0, 0 )

        gSizer73 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel47 = wx.Panel( sbSizer50.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        self.m_panel47.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer51 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel47, wx.ID_ANY, u"Company name" ), wx.VERTICAL )

        self.m_textCtrl11 = wx.TextCtrl( sbSizer51.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer51.Add( self.m_textCtrl11, 0, wx.ALL, 5 )


        self.m_panel47.SetSizer( sbSizer51 )
        self.m_panel47.Layout()
        sbSizer51.Fit( self.m_panel47 )
        gSizer73.Add( self.m_panel47, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel48 = wx.Panel( sbSizer50.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer52 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel48, wx.ID_ANY, u"Hiragana" ), wx.VERTICAL )

        self.m_textCtrl12 = wx.TextCtrl( sbSizer52.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer52.Add( self.m_textCtrl12, 0, wx.ALL, 5 )


        self.m_panel48.SetSizer( sbSizer52 )
        self.m_panel48.Layout()
        sbSizer52.Fit( self.m_panel48 )
        gSizer73.Add( self.m_panel48, 1, wx.EXPAND |wx.ALL, 5 )


        gSizer72.Add( gSizer73, 1, wx.EXPAND, 5 )

        gSizer74 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel49 = wx.Panel( sbSizer50.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer53 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel49, wx.ID_ANY, u"Katakana" ), wx.VERTICAL )

        self.m_textCtrl13 = wx.TextCtrl( sbSizer53.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer53.Add( self.m_textCtrl13, 0, wx.ALL, 5 )


        self.m_panel49.SetSizer( sbSizer53 )
        self.m_panel49.Layout()
        sbSizer53.Fit( self.m_panel49 )
        gSizer74.Add( self.m_panel49, 1, wx.EXPAND |wx.ALL, 5 )


        gSizer72.Add( gSizer74, 1, wx.EXPAND, 5 )


        sbSizer50.Add( gSizer72, 1, wx.EXPAND, 5 )

        gSizer75 = wx.GridSizer( 0, 2, 0, 0 )

        gSizer76 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel50 = wx.Panel( sbSizer50.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer54 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel50, wx.ID_ANY, u"Industry" ), wx.VERTICAL )

#業種をリストへ格納
        m_comboBox61Choices = ('IT・通信・インターネット',
                               'マスコミ・メディア',
                               '新聞・雑誌・出版',
                               '広告・イベント・プロモーション',
                               '芸能・エンターテイメント',
                               'ゲーム・アニメ・玩具',
                               '恋愛・出会い・占い',
                               '婚活・ブライダル',
                               '動物・ペット',
                               '生花・園芸・造園',
                               '美術・工芸・音楽',
                               'スポーツ・フィットネス',
                               '自動車・バイク',
                               '旅行・観光・グルメ',
                               'ホテル・旅館・民泊',
                               'メーカー',
                               '商社',
                               '流通・運輸・交通',
                               '工業・製造',
                               '卸売・小売',
                               'ファッション・アパレル',
                               '家具・インテリア',
                               '食品・飲料・たばこ',
                               '医療・医薬',
                               '介護・福祉',
                               '家事代行',
                               '葬祭',
                               '金融・保険',
                               '住宅・不動産',
                               '建築・工務店',
                               '店舗（飲食店・居酒屋など）',
                               '美容室・サロン',
                               '資格・習い事',
                               '保育園・幼稚園',
                               '塾・予備校',
                               '大学・学校',
                               '学術・研究',
                               'リサーチ・調査',
                               'コンサルティング・シンクタンク',
                               '士業（個人事務所）',
                               '人材紹介・人材派遣',
                               '翻訳・通訳',
                               'エネルギー（電気・ガス・水道など）',
                               '農林・水産・鉱業',
                               '清掃・設備・警備',
                               '公益・非営利団体',
                               '官公庁・自治体',
                               '政治',
                               '宗教')
#        print(m_comboBox61Choices)
        self.m_comboBox61 = wx.ComboBox( sbSizer54.GetStaticBox(), wx.ID_ANY, u"選択して下さい", wx.DefaultPosition, wx.Size( 400,-1 ), m_comboBox61Choices, 0 )
        sbSizer54.Add( self.m_comboBox61, 0, wx.ALL, 5 )


        self.m_panel50.SetSizer( sbSizer54 )
        self.m_panel50.Layout()
        sbSizer54.Fit( self.m_panel50 )
        gSizer76.Add( self.m_panel50, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel51 = wx.Panel( sbSizer50.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer55 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel51, wx.ID_ANY, u"Business content" ), wx.VERTICAL )

        self.m_textCtrl14 = wx.TextCtrl( sbSizer55.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer55.Add( self.m_textCtrl14, 0, wx.ALL, 5 )


        self.m_panel51.SetSizer( sbSizer55 )
        self.m_panel51.Layout()
        sbSizer55.Fit( self.m_panel51 )
        gSizer76.Add( self.m_panel51, 1, wx.EXPAND |wx.ALL, 5 )


        gSizer75.Add( gSizer76, 1, wx.EXPAND, 5 )

        gSizer77 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel52 = wx.Panel( sbSizer50.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        gSizer77.Add( self.m_panel52, 1, wx.EXPAND |wx.ALL, 5 )


        gSizer75.Add( gSizer77, 1, wx.EXPAND, 5 )


        sbSizer50.Add( gSizer75, 1, wx.EXPAND, 5 )


        self.m_panel46.SetSizer( sbSizer50 )
        self.m_panel46.Layout()
        sbSizer50.Fit( self.m_panel46 )
        self.m_notebook1.AddPage( self.m_panel46, u"Corporate_infomation", False )
        
#Sender        
        self.m_panel531 = wx.Panel( self.m_notebook1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer56 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel531, wx.ID_ANY, u"Sender" ), wx.VERTICAL )

        gSizer78 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel53 = wx.Panel( sbSizer56.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer57 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel53, wx.ID_ANY, u"Kanji full" ), wx.VERTICAL )

        self.m_textCtrl15 = wx.TextCtrl( sbSizer57.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer57.Add( self.m_textCtrl15, 0, wx.ALL, 5 )


        self.m_panel53.SetSizer( sbSizer57 )
        self.m_panel53.Layout()
        sbSizer57.Fit( self.m_panel53 )
        gSizer78.Add( self.m_panel53, 1, wx.EXPAND |wx.ALL, 5 )

        gSizer79 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel54 = wx.Panel( sbSizer56.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer58 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel54, wx.ID_ANY, u"Sei" ), wx.VERTICAL )

        self.m_textCtrl16 = wx.TextCtrl( sbSizer58.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer58.Add( self.m_textCtrl16, 0, wx.ALL, 5 )


        self.m_panel54.SetSizer( sbSizer58 )
        self.m_panel54.Layout()
        sbSizer58.Fit( self.m_panel54 )
        gSizer79.Add( self.m_panel54, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel55 = wx.Panel( sbSizer56.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer59 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel55, wx.ID_ANY, u"Mei" ), wx.VERTICAL )

        self.m_textCtrl17 = wx.TextCtrl( sbSizer59.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer59.Add( self.m_textCtrl17, 0, wx.ALL, 5 )


        self.m_panel55.SetSizer( sbSizer59 )
        self.m_panel55.Layout()
        sbSizer59.Fit( self.m_panel55 )
        gSizer79.Add( self.m_panel55, 1, wx.EXPAND |wx.ALL, 5 )


        gSizer78.Add( gSizer79, 1, wx.EXPAND, 5 )


        sbSizer56.Add( gSizer78, 1, wx.EXPAND, 5 )

        gSizer80 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel56 = wx.Panel( sbSizer56.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer60 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel56, wx.ID_ANY, u"Hiragana full" ), wx.VERTICAL )

        self.m_textCtrl18 = wx.TextCtrl( sbSizer60.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer60.Add( self.m_textCtrl18, 0, wx.ALL, 5 )


        self.m_panel56.SetSizer( sbSizer60 )
        self.m_panel56.Layout()
        sbSizer60.Fit( self.m_panel56 )
        gSizer80.Add( self.m_panel56, 1, wx.EXPAND |wx.ALL, 5 )

        gSizer81 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel57 = wx.Panel( sbSizer56.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer61 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel57, wx.ID_ANY, u"Sei" ), wx.VERTICAL )

        self.m_textCtrl19 = wx.TextCtrl( sbSizer61.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer61.Add( self.m_textCtrl19, 0, wx.ALL, 5 )


        self.m_panel57.SetSizer( sbSizer61 )
        self.m_panel57.Layout()
        sbSizer61.Fit( self.m_panel57 )
        gSizer81.Add( self.m_panel57, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel58 = wx.Panel( sbSizer56.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer62 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel58, wx.ID_ANY, u"Mei" ), wx.VERTICAL )

        self.m_textCtrl20 = wx.TextCtrl( sbSizer62.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer62.Add( self.m_textCtrl20, 0, wx.ALL, 5 )


        self.m_panel58.SetSizer( sbSizer62 )
        self.m_panel58.Layout()
        sbSizer62.Fit( self.m_panel58 )
        gSizer81.Add( self.m_panel58, 1, wx.EXPAND |wx.ALL, 5 )


        gSizer80.Add( gSizer81, 1, wx.EXPAND, 5 )


        sbSizer56.Add( gSizer80, 1, wx.EXPAND, 5 )

        gSizer82 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel59 = wx.Panel( sbSizer56.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer63 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel59, wx.ID_ANY, u"Katakana full" ), wx.VERTICAL )

        self.m_textCtrl21 = wx.TextCtrl( sbSizer63.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer63.Add( self.m_textCtrl21, 0, wx.ALL, 5 )


        self.m_panel59.SetSizer( sbSizer63 )
        self.m_panel59.Layout()
        sbSizer63.Fit( self.m_panel59 )
        gSizer82.Add( self.m_panel59, 1, wx.EXPAND |wx.ALL, 5 )

        gSizer83 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel60 = wx.Panel( sbSizer56.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer64 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel60, wx.ID_ANY, u"Sei" ), wx.VERTICAL )

        self.m_textCtrl22 = wx.TextCtrl( sbSizer64.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer64.Add( self.m_textCtrl22, 0, wx.ALL, 5 )


        self.m_panel60.SetSizer( sbSizer64 )
        self.m_panel60.Layout()
        sbSizer64.Fit( self.m_panel60 )
        gSizer83.Add( self.m_panel60, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel61 = wx.Panel( sbSizer56.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer65 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel61, wx.ID_ANY, u"Mei" ), wx.VERTICAL )

        self.m_textCtrl23 = wx.TextCtrl( sbSizer65.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer65.Add( self.m_textCtrl23, 0, wx.ALL, 5 )


        self.m_panel61.SetSizer( sbSizer65 )
        self.m_panel61.Layout()
        sbSizer65.Fit( self.m_panel61 )
        gSizer83.Add( self.m_panel61, 1, wx.EXPAND |wx.ALL, 5 )


        gSizer82.Add( gSizer83, 1, wx.EXPAND, 5 )


        sbSizer56.Add( gSizer82, 1, wx.EXPAND, 5 )

        gSizer84 = wx.GridSizer( 0, 2, 0, 0 )

        gSizer85 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel62 = wx.Panel( sbSizer56.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer66 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel62, wx.ID_ANY, u"Department name" ), wx.VERTICAL )

        self.m_textCtrl24 = wx.TextCtrl( sbSizer66.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 200,-1 ), 0 )
        sbSizer66.Add( self.m_textCtrl24, 0, wx.ALL, 5 )


        self.m_panel62.SetSizer( sbSizer66 )
        self.m_panel62.Layout()
        sbSizer66.Fit( self.m_panel62 )
        gSizer85.Add( self.m_panel62, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel63 = wx.Panel( sbSizer56.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer67 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel63, wx.ID_ANY, u"Official position" ), wx.VERTICAL )

        self.m_textCtrl25 = wx.TextCtrl( sbSizer67.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 200,-1 ), 0 )
        sbSizer67.Add( self.m_textCtrl25, 0, wx.ALL, 5 )


        self.m_panel63.SetSizer( sbSizer67 )
        self.m_panel63.Layout()
        sbSizer67.Fit( self.m_panel63 )
        gSizer85.Add( self.m_panel63, 1, wx.EXPAND |wx.ALL, 5 )


        gSizer84.Add( gSizer85, 1, wx.EXPAND, 5 )

        gSizer86 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel64 = wx.Panel( sbSizer56.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer68 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel64, wx.ID_ANY, u"Age" ), wx.VERTICAL )

        self.m_textCtrl26 = wx.TextCtrl( sbSizer68.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 200,-1 ), 0 )
        sbSizer68.Add( self.m_textCtrl26, 0, wx.ALL, 5 )


        self.m_panel64.SetSizer( sbSizer68 )
        self.m_panel64.Layout()
        sbSizer68.Fit( self.m_panel64 )
        gSizer86.Add( self.m_panel64, 1, wx.EXPAND |wx.ALL, 5 )


        gSizer84.Add( gSizer86, 1, wx.EXPAND, 5 )


        sbSizer56.Add( gSizer84, 1, wx.EXPAND, 5 )


        self.m_panel531.SetSizer( sbSizer56 )
        self.m_panel531.Layout()
        sbSizer56.Fit( self.m_panel531 )
        self.m_notebook1.AddPage( self.m_panel531, u"Sender", True )

#Location
        self.m_panel65 = wx.Panel( self.m_notebook1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer69 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel65, wx.ID_ANY, u"Location" ), wx.VERTICAL )

        self.m_panel66 = wx.Panel( sbSizer69.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        gSizer87 = wx.GridSizer( 0, 2, 0, 0 )

        sbSizer70 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel66, wx.ID_ANY, u"Postcode" ), wx.VERTICAL )

        gSizer88 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel67 = wx.Panel( sbSizer70.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer71 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel67, wx.ID_ANY, u"Hyphen included" ), wx.VERTICAL )

        self.m_textCtrl27 = wx.TextCtrl( sbSizer71.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer71.Add( self.m_textCtrl27, 0, wx.ALL, 5 )


        self.m_panel67.SetSizer( sbSizer71 )
        self.m_panel67.Layout()
        sbSizer71.Fit( self.m_panel67 )
        gSizer88.Add( self.m_panel67, 1, wx.EXPAND |wx.ALL, 5 )

        gSizer89 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel68 = wx.Panel( sbSizer70.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer72 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel68, wx.ID_ANY, u"Num1" ), wx.VERTICAL )

        self.m_textCtrl28 = wx.TextCtrl( sbSizer72.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer72.Add( self.m_textCtrl28, 0, wx.ALL, 5 )


        self.m_panel68.SetSizer( sbSizer72 )
        self.m_panel68.Layout()
        sbSizer72.Fit( self.m_panel68 )
        gSizer89.Add( self.m_panel68, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel69 = wx.Panel( sbSizer70.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer73 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel69, wx.ID_ANY, u"Num2" ), wx.VERTICAL )

        self.m_textCtrl29 = wx.TextCtrl( sbSizer73.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer73.Add( self.m_textCtrl29, 0, wx.ALL, 5 )


        self.m_panel69.SetSizer( sbSizer73 )
        self.m_panel69.Layout()
        sbSizer73.Fit( self.m_panel69 )
        gSizer89.Add( self.m_panel69, 1, wx.EXPAND |wx.ALL, 5 )


        gSizer88.Add( gSizer89, 1, wx.EXPAND, 5 )


        sbSizer70.Add( gSizer88, 1, wx.EXPAND, 5 )


        gSizer87.Add( sbSizer70, 1, wx.EXPAND, 5 )


        self.m_panel66.SetSizer( gSizer87 )
        self.m_panel66.Layout()
        gSizer87.Fit( self.m_panel66 )
        sbSizer69.Add( self.m_panel66, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel70 = wx.Panel( sbSizer69.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer74 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel70, wx.ID_ANY, u"Detail" ), wx.VERTICAL )

        gSizer90 = wx.GridSizer( 0, 2, 0, 0 )

        gSizer91 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel71 = wx.Panel( sbSizer74.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer75 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel71, wx.ID_ANY, u"Prefecture" ), wx.VERTICAL )

#都道府県をリストへ格納
        m_comboBox6Choices = ('北海道',
                               '青森県',
                               '岩手県',
                               '宮城県',
                               '秋田県',
                               '山形県',
                               '福島県',
                               '茨城県',
                               '栃木県',
                               '群馬県',
                               '埼玉県',
                               '千葉県',
                               '東京都',
                               '神奈川県',
                               '新潟県',
                               '富山県',
                               '石川県',
                               '福井県',
                               '山梨県',
                               '長野県',
                               '岐阜県',
                               '静岡県',
                               '愛知県',
                               '三重県',
                               '滋賀県',
                               '京都府',
                               '大阪府',
                               '兵庫県',
                               '奈良県',
                               '和歌山県',
                               '鳥取県',
                               '島根県',
                               '岡山県',
                               '広島県',
                               '山口県',
                               '徳島県',
                               '香川県',
                               '愛媛県',
                               '高知県',
                               '福岡県',
                               '佐賀県',
                               '長崎県',
                               '熊本県',
                               '大分県',
                               '宮崎県',
                               '鹿児島県',
                               '沖縄県')
#        print(m_comboBox6Choices)
        self.m_comboBox6 = wx.ComboBox( sbSizer75.GetStaticBox(), wx.ID_ANY, u"選択して下さい", wx.DefaultPosition, wx.Size( 400,-1 ), m_comboBox6Choices, 0 )
        sbSizer75.Add( self.m_comboBox6, 0, wx.ALL, 5 )


        self.m_panel71.SetSizer( sbSizer75 )
        self.m_panel71.Layout()
        sbSizer75.Fit( self.m_panel71 )
        gSizer91.Add( self.m_panel71, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel72 = wx.Panel( sbSizer74.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer76 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel72, wx.ID_ANY, u"Municipalities" ), wx.VERTICAL )

        self.m_textCtrl30 = wx.TextCtrl( sbSizer76.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 200,-1 ), 0 )
        sbSizer76.Add( self.m_textCtrl30, 0, wx.ALL, 5 )


        self.m_panel72.SetSizer( sbSizer76 )
        self.m_panel72.Layout()
        sbSizer76.Fit( self.m_panel72 )
        gSizer91.Add( self.m_panel72, 1, wx.EXPAND |wx.ALL, 5 )


        gSizer90.Add( gSizer91, 1, wx.EXPAND, 5 )

        gSizer92 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel73 = wx.Panel( sbSizer74.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer77 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel73, wx.ID_ANY, u"address" ), wx.VERTICAL )

        self.m_textCtrl31 = wx.TextCtrl( sbSizer77.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 200,-1 ), 0 )
        sbSizer77.Add( self.m_textCtrl31, 0, wx.ALL, 5 )


        self.m_panel73.SetSizer( sbSizer77 )
        self.m_panel73.Layout()
        sbSizer77.Fit( self.m_panel73 )
        gSizer92.Add( self.m_panel73, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel74 = wx.Panel( sbSizer74.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer78 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel74, wx.ID_ANY, u"Building" ), wx.VERTICAL )

        self.m_textCtrl32 = wx.TextCtrl( sbSizer78.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 200,-1 ), 0 )
        sbSizer78.Add( self.m_textCtrl32, 0, wx.ALL, 5 )


        self.m_panel74.SetSizer( sbSizer78 )
        self.m_panel74.Layout()
        sbSizer78.Fit( self.m_panel74 )
        gSizer92.Add( self.m_panel74, 1, wx.EXPAND |wx.ALL, 5 )


        gSizer90.Add( gSizer92, 1, wx.EXPAND, 5 )


        sbSizer74.Add( gSizer90, 1, wx.EXPAND, 5 )


        self.m_panel70.SetSizer( sbSizer74 )
        self.m_panel70.Layout()
        sbSizer74.Fit( self.m_panel70 )
        sbSizer69.Add( self.m_panel70, 1, wx.EXPAND |wx.ALL, 5 )


        self.m_panel65.SetSizer( sbSizer69 )
        self.m_panel65.Layout()
        sbSizer69.Fit( self.m_panel65 )        
        self.m_notebook1.AddPage( self.m_panel65, u"Location", False )
        
#Contact        
        self.m_panel75 = wx.Panel( self.m_notebook1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        self.m_panel75.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer79 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel75, wx.ID_ANY, u"Contact" ), wx.VERTICAL )

        self.m_panel76 = wx.Panel( sbSizer79.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer80 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel76, wx.ID_ANY, u"Tel number" ), wx.VERTICAL )

        gSizer93 = wx.GridSizer( 0, 2, 0, 0 )

        gSizer94 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel77 = wx.Panel( sbSizer80.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer81 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel77, wx.ID_ANY, u"Hyphen included" ), wx.VERTICAL )

        self.m_textCtrl33 = wx.TextCtrl( sbSizer81.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer81.Add( self.m_textCtrl33, 0, wx.ALL, 5 )


        self.m_panel77.SetSizer( sbSizer81 )
        self.m_panel77.Layout()
        sbSizer81.Fit( self.m_panel77 )
        gSizer94.Add( self.m_panel77, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel78 = wx.Panel( sbSizer80.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer82 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel78, wx.ID_ANY, u"Num1" ), wx.VERTICAL )

        self.m_textCtrl34 = wx.TextCtrl( sbSizer82.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer82.Add( self.m_textCtrl34, 0, wx.ALL, 5 )


        self.m_panel78.SetSizer( sbSizer82 )
        self.m_panel78.Layout()
        sbSizer82.Fit( self.m_panel78 )
        gSizer94.Add( self.m_panel78, 1, wx.EXPAND |wx.ALL, 5 )


        gSizer93.Add( gSizer94, 1, wx.EXPAND, 5 )

        gSizer95 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel79 = wx.Panel( sbSizer80.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer83 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel79, wx.ID_ANY, u"Num2" ), wx.VERTICAL )

        self.m_textCtrl35 = wx.TextCtrl( sbSizer83.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer83.Add( self.m_textCtrl35, 0, wx.ALL, 5 )


        self.m_panel79.SetSizer( sbSizer83 )
        self.m_panel79.Layout()
        sbSizer83.Fit( self.m_panel79 )
        gSizer95.Add( self.m_panel79, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel80 = wx.Panel( sbSizer80.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer84 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel80, wx.ID_ANY, u"Num3" ), wx.VERTICAL )

        self.m_textCtrl36 = wx.TextCtrl( sbSizer84.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer84.Add( self.m_textCtrl36, 0, wx.ALL, 5 )


        self.m_panel80.SetSizer( sbSizer84 )
        self.m_panel80.Layout()
        sbSizer84.Fit( self.m_panel80 )
        gSizer95.Add( self.m_panel80, 1, wx.EXPAND |wx.ALL, 5 )


        gSizer93.Add( gSizer95, 1, wx.EXPAND, 5 )


        sbSizer80.Add( gSizer93, 1, wx.EXPAND, 5 )


        self.m_panel76.SetSizer( sbSizer80 )
        self.m_panel76.Layout()
        sbSizer80.Fit( self.m_panel76 )
        sbSizer79.Add( self.m_panel76, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel81 = wx.Panel( sbSizer79.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer85 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel81, wx.ID_ANY, u"Email address" ), wx.VERTICAL )

        gSizer96 = wx.GridSizer( 0, 2, 0, 0 )

        gSizer97 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel82 = wx.Panel( sbSizer85.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer86 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel82, wx.ID_ANY, u"At mark included" ), wx.VERTICAL )

        self.m_textCtrl37 = wx.TextCtrl( sbSizer86.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer86.Add( self.m_textCtrl37, 0, wx.ALL, 5 )


        self.m_panel82.SetSizer( sbSizer86 )
        self.m_panel82.Layout()
        sbSizer86.Fit( self.m_panel82 )
        gSizer97.Add( self.m_panel82, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel83 = wx.Panel( sbSizer85.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer87 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel83, wx.ID_ANY, u"Account name" ), wx.VERTICAL )

        self.m_textCtrl38 = wx.TextCtrl( sbSizer87.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer87.Add( self.m_textCtrl38, 0, wx.ALL, 5 )


        self.m_panel83.SetSizer( sbSizer87 )
        self.m_panel83.Layout()
        sbSizer87.Fit( self.m_panel83 )
        gSizer97.Add( self.m_panel83, 1, wx.EXPAND |wx.ALL, 5 )


        gSizer96.Add( gSizer97, 1, wx.EXPAND, 5 )

        gSizer98 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel84 = wx.Panel( sbSizer85.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        sbSizer88 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel84, wx.ID_ANY, u"Domain name" ), wx.VERTICAL )

        self.m_textCtrl39 = wx.TextCtrl( sbSizer88.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        sbSizer88.Add( self.m_textCtrl39, 0, wx.ALL, 5 )


        self.m_panel84.SetSizer( sbSizer88 )
        self.m_panel84.Layout()
        sbSizer88.Fit( self.m_panel84 )
        gSizer98.Add( self.m_panel84, 1, wx.EXPAND |wx.ALL, 5 )


        gSizer96.Add( gSizer98, 1, wx.EXPAND, 5 )


        sbSizer85.Add( gSizer96, 1, wx.EXPAND, 5 )


        self.m_panel81.SetSizer( sbSizer85 )
        self.m_panel81.Layout()
        sbSizer85.Fit( self.m_panel81 )
        sbSizer79.Add( self.m_panel81, 1, wx.EXPAND |wx.ALL, 5 )


        self.m_panel75.SetSizer( sbSizer79 )
        self.m_panel75.Layout()
        sbSizer79.Fit( self.m_panel75 )
        self.m_notebook1.AddPage( self.m_panel75, u"Contact", True )

        hbox4.Add( self.m_notebook1, 1, wx.EXPAND |wx.ALL, 5 )

        self.btn11 = wx.Button( self, wx.ID_ANY, u"Save", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.btn11.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        hbox4.Add( self.btn11, 0, wx.ALL, 5 )


        self.SetSizer( hbox4 )
        self.Layout()

        self.Centre( wx.BOTH )

# Connect Events
        self.btn11.Bind( wx.EVT_BUTTON, self.write )
        self.Bind( wx.EVT_CLOSE, self.quit_button )

#設定情報（json）読み込み
#文字コードをUTF-8に変換しないとエラーが発生するため注意！！
        with codecs.open('profile.json','r',encoding='utf-8') as f:
            j = json.load(f,strict=False)
#            print(j)
            f.close()
            self.m_textCtrl11.SetValue(j['companyname'])
            self.m_textCtrl12.SetValue(j['companyhiragana'])
            self.m_textCtrl13.SetValue(j['companykatakana'])
            self.m_comboBox61.SetValue(j['industry'])
            self.m_textCtrl14.SetValue(j['businesscontent'])
            self.m_textCtrl15.SetValue(j['kanjifull'])
            self.m_textCtrl16.SetValue(j['kanjisei'])
            self.m_textCtrl17.SetValue(j['kanjimei'])
            self.m_textCtrl18.SetValue(j['hiraganafull'])
            self.m_textCtrl19.SetValue(j['hiraganasei'])
            self.m_textCtrl20.SetValue(j['hiraganamei'])
            self.m_textCtrl21.SetValue(j['katakanafull'])
            self.m_textCtrl22.SetValue(j['katakanasei'])
            self.m_textCtrl23.SetValue(j['katakanamei'])
            self.m_textCtrl24.SetValue(j['department'])
            self.m_textCtrl25.SetValue(j['position'])
            self.m_textCtrl26.SetValue(j['age'])
            self.m_textCtrl27.SetValue(j['postcodefull'])
            self.m_textCtrl28.SetValue(j['postcode1'])
            self.m_textCtrl29.SetValue(j['postcode2'])
            self.m_comboBox6.SetValue(j['prefecture'])
            self.m_textCtrl30.SetValue(j['municipalities'])
            self.m_textCtrl31.SetValue(j['address'])
            self.m_textCtrl32.SetValue(j['building'])
            self.m_textCtrl33.SetValue(j['telnumberfull'])
            self.m_textCtrl34.SetValue(j['tel1'])
            self.m_textCtrl35.SetValue(j['tel2'])
            self.m_textCtrl36.SetValue(j['tel3'])
            self.m_textCtrl37.SetValue(j['email'])
            self.m_textCtrl38.SetValue(j['account'])
            self.m_textCtrl39.SetValue(j['domain'])

#設定情報（json）書き出し
    def write(self, event):
            if self.m_comboBox6.GetValue() == '選択して下さい' \
                or self.m_textCtrl11.GetValue() == '' \
                    or self.m_textCtrl12.GetValue() == '' \
                        or self.m_textCtrl13.GetValue() == '' \
                            or self.m_textCtrl14.GetValue() == '' \
                                or self.m_textCtrl15.GetValue() == '' \
                                    or self.m_textCtrl16.GetValue() == '' \
                                        or self.m_textCtrl17.GetValue() == '' \
                                            or self.m_textCtrl18.GetValue() == '' \
                                                or self.m_textCtrl19.GetValue() == '' \
                                                    or self.m_textCtrl20.GetValue() == '' \
                                                        or self.m_textCtrl21.GetValue() == '' \
                                                            or self.m_textCtrl22.GetValue() == '' \
                                                                or self.m_textCtrl23.GetValue() == '' \
                                                                    or self.m_textCtrl24.GetValue() == '' \
                                                                        or self.m_textCtrl25.GetValue() == '' \
                                                                            or self.m_textCtrl26.GetValue() == '' \
                                                                                or self.m_textCtrl27.GetValue() == '' \
                                                                                    or self.m_textCtrl28.GetValue() == '' \
                                                                                        or self.m_textCtrl29.GetValue() == '' \
                                                                                            or self.m_textCtrl30.GetValue() == '' \
                                                                                                or self.m_textCtrl31.GetValue() == '' \
                                                                                                    or self.m_textCtrl32.GetValue() == '' \
                                                                                                        or self.m_textCtrl33.GetValue() == '' \
                                                                                                            or self.m_textCtrl34.GetValue() == '' \
                                                                                                                or self.m_textCtrl35.GetValue() == '' \
                                                                                                                    or self.m_textCtrl36.GetValue() == '' \
                                                                                                                        or self.m_textCtrl37.GetValue() == '' \
                                                                                                                            or self.m_textCtrl38.GetValue() == '' \
                                                                                                                                or self.m_textCtrl39.GetValue() == '' \
                                                                                                                                    or self.m_comboBox61.GetValue() == '選択して下さい':
              self.m_comboBox6.SetBackgroundColour('#f56cbe')
              self.m_comboBox61.SetBackgroundColour('#f56cbe')
              self.m_textCtrl11.SetBackgroundColour('#f56cbe')
              self.m_textCtrl12.SetBackgroundColour('#f56cbe')
              self.m_textCtrl13.SetBackgroundColour('#f56cbe')
              self.m_textCtrl14.SetBackgroundColour('#f56cbe')
              self.m_textCtrl15.SetBackgroundColour('#f56cbe')
              self.m_textCtrl16.SetBackgroundColour('#f56cbe')
              self.m_textCtrl17.SetBackgroundColour('#f56cbe')
              self.m_textCtrl18.SetBackgroundColour('#f56cbe')
              self.m_textCtrl19.SetBackgroundColour('#f56cbe')
              self.m_textCtrl20.SetBackgroundColour('#f56cbe')
              self.m_textCtrl21.SetBackgroundColour('#f56cbe')
              self.m_textCtrl22.SetBackgroundColour('#f56cbe')
              self.m_textCtrl23.SetBackgroundColour('#f56cbe')
              self.m_textCtrl24.SetBackgroundColour('#f56cbe')
              self.m_textCtrl25.SetBackgroundColour('#f56cbe')
              self.m_textCtrl26.SetBackgroundColour('#f56cbe')
              self.m_textCtrl27.SetBackgroundColour('#f56cbe')
              self.m_textCtrl28.SetBackgroundColour('#f56cbe')
              self.m_textCtrl29.SetBackgroundColour('#f56cbe')
              self.m_textCtrl30.SetBackgroundColour('#f56cbe')
              self.m_textCtrl31.SetBackgroundColour('#f56cbe')
              self.m_textCtrl32.SetBackgroundColour('#f56cbe')
              self.m_textCtrl33.SetBackgroundColour('#f56cbe')
              self.m_textCtrl34.SetBackgroundColour('#f56cbe')
              self.m_textCtrl35.SetBackgroundColour('#f56cbe')
              self.m_textCtrl36.SetBackgroundColour('#f56cbe')
              self.m_textCtrl37.SetBackgroundColour('#f56cbe')
              self.m_textCtrl38.SetBackgroundColour('#f56cbe')
              self.m_textCtrl39.SetBackgroundColour('#f56cbe')
              wx.MessageBox(u'There are unselected or blank areas!!', u'Setting value error', wx.ICON_ERROR)
            else:
              self.m_comboBox6.SetBackgroundColour('#FFFFFF')
              self.m_comboBox61.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl11.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl12.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl13.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl14.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl15.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl16.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl17.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl18.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl19.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl20.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl21.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl22.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl23.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl24.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl25.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl26.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl27.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl28.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl29.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl30.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl31.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl32.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl33.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl34.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl35.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl36.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl37.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl38.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl39.SetBackgroundColour('#FFFFFF')

#文字コードをUTF-8に変換しないとエラー発生がするため注意！！
              with open('profile.json','w',encoding='utf-8') as f:
                w_data = {}
                w_data['prefecture'] = self.m_comboBox6.GetValue()
                w_data['industry'] = self.m_comboBox61.GetValue()
                w_data['companyname'] = self.m_textCtrl11.GetValue()
                w_data['companyhiragana'] = self.m_textCtrl12.GetValue()
                w_data['companykatakana'] = self.m_textCtrl13.GetValue()
                w_data['businesscontent'] = self.m_textCtrl14.GetValue()
                w_data['kanjifull'] = self.m_textCtrl15.GetValue()
                w_data['kanjisei'] = self.m_textCtrl16.GetValue()
                w_data['kanjimei'] = self.m_textCtrl17.GetValue()
                w_data['hiraganafull'] = self.m_textCtrl18.GetValue()
                w_data['hiraganasei'] = self.m_textCtrl19.GetValue()
                w_data['hiraganamei'] = self.m_textCtrl20.GetValue()
                w_data['katakanafull'] = self.m_textCtrl21.GetValue()
                w_data['katakanasei'] = self.m_textCtrl22.GetValue()
                w_data['katakanamei'] = self.m_textCtrl23.GetValue()
                w_data['department'] = self.m_textCtrl24.GetValue()
                w_data['position'] = self.m_textCtrl25.GetValue()
                w_data['age'] = self.m_textCtrl26.GetValue()
                w_data['postcodefull'] = self.m_textCtrl27.GetValue()
                w_data['postcode1'] = self.m_textCtrl28.GetValue()
                w_data['postcode2'] = self.m_textCtrl29.GetValue()
                w_data['municipalities'] = self.m_textCtrl30.GetValue()
                w_data['address'] = self.m_textCtrl31.GetValue()
                w_data['building'] = self.m_textCtrl32.GetValue()
                w_data['telnumberfull'] = self.m_textCtrl33.GetValue()
                w_data['tel1'] = self.m_textCtrl34.GetValue()
                w_data['tel2'] = self.m_textCtrl35.GetValue()
                w_data['tel3'] = self.m_textCtrl36.GetValue()
                w_data['email'] = self.m_textCtrl37.GetValue()
                w_data['account'] = self.m_textCtrl38.GetValue()
                w_data['domain'] = self.m_textCtrl39.GetValue()

                json.dump(w_data, f, ensure_ascii=False, indent=1, sort_keys=True, separators=(',', ': '))
                print('WRITE:')
 #               print(w_data)
                self.Destroy()

# TODO: Implement quit_button
    def quit_button( self, event ):
        self.Destroy()

#Email_body_creation        
class MyProject1MyDialog5( app.MyDialog5 ):
    def __init__(self, parent):
        app.MyDialog5.__init__(self, parent)
        self.parent = parent

        hbox4 = wx.BoxSizer( wx.VERTICAL )

        self.m_panel22 = wx.Panel( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        self.m_panel22.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer17 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel22, wx.ID_ANY, u"Tittle" ), wx.VERTICAL )

        self.m_textCtrl6 = wx.TextCtrl( sbSizer17.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        self.m_textCtrl6.SetMaxLength(100)
        sbSizer17.Add( self.m_textCtrl6, 0, wx.ALL, 5 )


        self.m_panel22.SetSizer( sbSizer17 )
        self.m_panel22.Layout()
        sbSizer17.Fit( self.m_panel22 )
        hbox4.Add( self.m_panel22, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel23 = wx.Panel( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        self.m_panel23.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer18 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel23, wx.ID_ANY, u"Url" ), wx.VERTICAL )

        self.m_textCtrl7 = wx.TextCtrl( sbSizer18.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
        self.m_textCtrl7.SetMaxLength(100)
        sbSizer18.Add( self.m_textCtrl7, 0, wx.ALL, 5 )


        self.m_panel23.SetSizer( sbSizer18 )
        self.m_panel23.Layout()
        sbSizer18.Fit( self.m_panel23 )
        hbox4.Add( self.m_panel23, 1, wx.EXPAND |wx.ALL, 5 )


#オプション非対応（本文url有り・無しバージョン）の場合は以降変更不要
        gSizer89 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel24 = wx.Panel( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        self.m_panel24.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer19 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel24, wx.ID_ANY, u"Normal transmission" ), wx.VERTICAL )

        self.m_textCtrl8 = wx.TextCtrl( sbSizer19.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,200 ), wx.TE_MULTILINE )
#        self.m_textCtrl8.SetMaxLength(2000)
        sbSizer19.Add( self.m_textCtrl8, 0, wx.ALL, 5 )


        self.m_panel24.SetSizer( sbSizer19 )
        self.m_panel24.Layout()
        sbSizer19.Fit( self.m_panel24 )
        gSizer89.Add( self.m_panel24, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel25 = wx.Panel( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        self.m_panel25.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer20 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel25, wx.ID_ANY, u"Within 1000 characters" ), wx.VERTICAL )

        self.m_textCtrl9 = wx.TextCtrl( sbSizer20.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,200 ), wx.TE_MULTILINE )
        self.m_textCtrl9.SetMaxLength(1000)
        sbSizer20.Add( self.m_textCtrl9, 0, wx.ALL, 5 )


        self.m_panel25.SetSizer( sbSizer20 )
        self.m_panel25.Layout()
        sbSizer20.Fit( self.m_panel25 )
        gSizer89.Add( self.m_panel25, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel241 = wx.Panel( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        self.m_panel241.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer191 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel241, wx.ID_ANY, u"Within 500 characters" ), wx.VERTICAL )

        self.m_textCtrl10 = wx.TextCtrl( sbSizer191.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,200 ), wx.TE_MULTILINE )
        self.m_textCtrl10.SetMaxLength(500)
        sbSizer191.Add( self.m_textCtrl10, 0, wx.ALL, 5 )


        self.m_panel241.SetSizer( sbSizer191 )
        self.m_panel241.Layout()
        sbSizer191.Fit( self.m_panel241 )
        gSizer89.Add( self.m_panel241, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel242 = wx.Panel( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        self.m_panel242.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer192 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel242, wx.ID_ANY, u"Within 400 characters" ), wx.VERTICAL )

        self.m_textCtrl11 = wx.TextCtrl( sbSizer192.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,200 ), wx.TE_MULTILINE )
        self.m_textCtrl11.SetMaxLength(400)
#        self.m_textCtrl11.Disable()
        sbSizer192.Add( self.m_textCtrl11, 0, wx.ALL, 5 )


        self.m_panel242.SetSizer( sbSizer192 )
        self.m_panel242.Layout()
        sbSizer192.Fit( self.m_panel242 )
        gSizer89.Add( self.m_panel242, 1, wx.EXPAND |wx.ALL, 5 )


        hbox4.Add( gSizer89, 1, wx.EXPAND, 5 )

        self.btn11 = wx.Button( self, wx.ID_ANY, u"Save", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.btn11.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        hbox4.Add( self.btn11, 0, wx.ALL, 5 )


        self.SetSizer( hbox4 )
        self.Layout()

        self.Centre( wx.BOTH )

# Connect Events
        self.btn11.Bind( wx.EVT_BUTTON, self.write )
        self.Bind( wx.EVT_CLOSE, self.quit_button )


#Email_body_creation【オプション対応コーディング】
#class MyProject1MyDialog6( app.MyDialog6 ):
#    def __init__(self, parent):
#        app.MyDialog6.__init__(self, parent)
#        self.parent = parent

#        hbox4 = wx.BoxSizer( wx.VERTICAL )

#        self.m_panel22 = wx.Panel( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
#        self.m_panel22.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

#        sbSizer17 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel22, wx.ID_ANY, u"Tittle" ), wx.VERTICAL )

#        self.m_textCtrl6 = wx.TextCtrl( sbSizer17.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
#        self.m_textCtrl6.SetMaxLength(100)
#        sbSizer17.Add( self.m_textCtrl6, 0, wx.ALL, 5 )


#        self.m_panel22.SetSizer( sbSizer17 )
#        self.m_panel22.Layout()
#        sbSizer17.Fit( self.m_panel22 )
#        hbox4.Add( self.m_panel22, 1, wx.EXPAND |wx.ALL, 5 )

#        self.m_panel23 = wx.Panel( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
#        self.m_panel23.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

#        sbSizer18 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel23, wx.ID_ANY, u"Url" ), wx.VERTICAL )

#        self.m_textCtrl7 = wx.TextCtrl( sbSizer18.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
#        self.m_textCtrl7.SetMaxLength(100)
#        sbSizer18.Add( self.m_textCtrl7, 0, wx.ALL, 5 )


#        self.m_panel23.SetSizer( sbSizer18 )
#        self.m_panel23.Layout()
#        sbSizer18.Fit( self.m_panel23 )
#        hbox4.Add( self.m_panel23, 1, wx.EXPAND |wx.ALL, 5 )


#以降、オプション非対応コーディングと異なるので注意！！
#        self.m_notebook2 = wx.Notebook( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, 0 )
#        self.m_notebook2.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

#        self.m_panel85 = wx.Panel( self.m_notebook2, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
#        gSizer89 = wx.GridSizer( 0, 2, 0, 0 )

#        self.m_panel24 = wx.Panel( self.m_panel85, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
#        self.m_panel24.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

#        sbSizer19 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel24, wx.ID_ANY, u"Normal transmission" ), wx.VERTICAL )

#        self.m_textCtrl8 = wx.TextCtrl( sbSizer19.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,200 ), wx.TE_MULTILINE )
#        self.m_textCtrl8.SetMaxLength( 2000 )
#        sbSizer19.Add( self.m_textCtrl8, 0, wx.ALL, 5 )


#        self.m_panel24.SetSizer( sbSizer19 )
#        self.m_panel24.Layout()
#        sbSizer19.Fit( self.m_panel24 )
#        gSizer89.Add( self.m_panel24, 1, wx.EXPAND |wx.ALL, 5 )

#        self.m_panel25 = wx.Panel( self.m_panel85, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
#        self.m_panel25.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

#        sbSizer20 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel25, wx.ID_ANY, u"Within 1000 characters" ), wx.VERTICAL )

#        self.m_textCtrl9 = wx.TextCtrl( sbSizer20.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,200 ), wx.TE_MULTILINE )
#        self.m_textCtrl9.SetMaxLength( 1000 )
#        sbSizer20.Add( self.m_textCtrl9, 0, wx.ALL, 5 )


#        self.m_panel25.SetSizer( sbSizer20 )
#        self.m_panel25.Layout()
#        sbSizer20.Fit( self.m_panel25 )
#        gSizer89.Add( self.m_panel25, 1, wx.EXPAND |wx.ALL, 5 )

#        self.m_panel26 = wx.Panel( self.m_panel85, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
#        self.m_panel26.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

#        sbSizer21 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel26, wx.ID_ANY, u"Within 500 characters" ), wx.VERTICAL )

#        self.m_textCtrl10 = wx.TextCtrl( sbSizer21.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,200 ), wx.TE_MULTILINE )
#        self.m_textCtrl10.SetMaxLength( 500 )
#        sbSizer21.Add( self.m_textCtrl10, 0, wx.ALL, 5 )


#        self.m_panel26.SetSizer( sbSizer21 )
#        self.m_panel26.Layout()
#        sbSizer21.Fit( self.m_panel26 )
#        gSizer89.Add( self.m_panel26, 1, wx.EXPAND |wx.ALL, 5 )

#        self.m_panel27 = wx.Panel( self.m_panel85, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
#        self.m_panel27.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

#        sbSizer22 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel27, wx.ID_ANY, u"Within 400 characters" ), wx.VERTICAL )

#        self.m_textCtrl11 = wx.TextCtrl( sbSizer22.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,200 ), wx.TE_MULTILINE )
#        self.m_textCtrl11.SetMaxLength( 300 )
#        sbSizer22.Add( self.m_textCtrl11, 0, wx.ALL, 5 )


#        self.m_panel27.SetSizer( sbSizer22 )
#        self.m_panel27.Layout()
#        sbSizer22.Fit( self.m_panel27 )
#        gSizer89.Add( self.m_panel27, 1, wx.EXPAND |wx.ALL, 5 )


#        self.m_panel85.SetSizer( gSizer89 )
#        self.m_panel85.Layout()
#        gSizer89.Fit( self.m_panel85 )
#        self.m_notebook2.AddPage( self.m_panel85, u"Including url", False )
#        self.m_panel86 = wx.Panel( self.m_notebook2, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
#        gSizer90 = wx.GridSizer( 0, 2, 0, 0 )

#        self.m_panel28 = wx.Panel( self.m_panel86, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
#        self.m_panel28.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

#        sbSizer23 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel28, wx.ID_ANY, u"Normal transmission" ), wx.VERTICAL )

#        self.m_textCtrl12 = wx.TextCtrl( sbSizer23.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,200 ), wx.TE_MULTILINE )
#        self.m_textCtrl12.SetMaxLength( 2000 )
#        sbSizer23.Add( self.m_textCtrl12, 0, wx.ALL, 5 )


#        self.m_panel28.SetSizer( sbSizer23 )
#        self.m_panel28.Layout()
#        sbSizer23.Fit( self.m_panel28 )
#        gSizer90.Add( self.m_panel28, 1, wx.EXPAND |wx.ALL, 5 )

#        self.m_panel29 = wx.Panel( self.m_panel86, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
#        self.m_panel29.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

#        sbSizer24 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel29, wx.ID_ANY, u"Within 1000 characters" ), wx.VERTICAL )

#        self.m_textCtrl13 = wx.TextCtrl( sbSizer24.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,200 ), wx.TE_MULTILINE )
#        self.m_textCtrl13.SetMaxLength( 1000 )
#        sbSizer24.Add( self.m_textCtrl13, 0, wx.ALL, 5 )


#        self.m_panel29.SetSizer( sbSizer24 )
#        self.m_panel29.Layout()
#        sbSizer24.Fit( self.m_panel29 )
#        gSizer90.Add( self.m_panel29, 1, wx.EXPAND |wx.ALL, 5 )

#        self.m_panel30 = wx.Panel( self.m_panel86, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
#        self.m_panel30.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

#        sbSizer25 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel30, wx.ID_ANY, u"Within 500 characters" ), wx.VERTICAL )

#        self.m_textCtrl14 = wx.TextCtrl( sbSizer25.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,200 ), wx.TE_MULTILINE )
#        self.m_textCtrl14.SetMaxLength( 500 )
#        sbSizer25.Add( self.m_textCtrl14, 0, wx.ALL, 5 )


#        self.m_panel30.SetSizer( sbSizer25 )
#        self.m_panel30.Layout()
#        sbSizer25.Fit( self.m_panel30 )
#        gSizer90.Add( self.m_panel30, 1, wx.EXPAND |wx.ALL, 5 )

#        self.m_panel31 = wx.Panel( self.m_panel86, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
#        self.m_panel31.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

#        sbSizer26 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel31, wx.ID_ANY, u"Within 400 characters" ), wx.VERTICAL )

#        self.m_textCtrl15 = wx.TextCtrl( sbSizer26.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,200 ), wx.TE_MULTILINE )
#        self.m_textCtrl15.SetMaxLength( 300 )
#        sbSizer26.Add( self.m_textCtrl15, 0, wx.ALL, 5 )


#        self.m_panel31.SetSizer( sbSizer26 )
#        self.m_panel31.Layout()
#        sbSizer26.Fit( self.m_panel31 )
#        gSizer90.Add( self.m_panel31, 1, wx.EXPAND |wx.ALL, 5 )


#        self.m_panel86.SetSizer( gSizer90 )
#        self.m_panel86.Layout()
#        gSizer90.Fit( self.m_panel86 )
#        self.m_notebook2.AddPage( self.m_panel86, u"Not including", True )

#        hbox4.Add( self.m_notebook2, 1, wx.EXPAND |wx.ALL, 5 )

#        self.btn11 = wx.Button( self, wx.ID_ANY, u"Save", wx.DefaultPosition, wx.DefaultSize, 0 )
#        self.btn11.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

#        hbox4.Add( self.btn11, 0, wx.ALL, 5 )


#        self.SetSizer( hbox4 )
#        self.Layout()

#        self.Centre( wx.BOTH )

# Connect Events
#        self.btn11.Bind( wx.EVT_BUTTON, self.create_button )
#        self.Bind( wx.EVT_CLOSE, self.quit_button )


#設定情報（json）読み込み
#文字コードをUTF-8に変換しないとエラーが発生するため注意！！
        with codecs.open('textarea.json','r',encoding='utf-8') as f:
            j = json.load(f,strict=False)
#            print(j)
            f.close()
            self.m_textCtrl6.SetValue(j['title'])
            self.m_textCtrl7.SetValue(j['url'])
            self.m_textCtrl8.SetValue(j['body1'])
            self.m_textCtrl9.SetValue(j['body2'])
            self.m_textCtrl10.SetValue(j['body3'])
            self.m_textCtrl11.SetValue(j['body4'])
#            self.m_textCtrl12.SetValue(j['body5'])
#            self.m_textCtrl13.SetValue(j['body6'])
#            self.m_textCtrl14.SetValue(j['body7'])
#            self.m_textCtrl15.SetValue(j['body8'])

#設定情報（json）書き出し
    def write(self, event):
            if self.m_textCtrl6.GetValue() == '' \
                    or self.m_textCtrl7.GetValue() == '' \
                        or self.m_textCtrl8.GetValue() == '' \
                            or self.m_textCtrl9.GetValue() == '' \
                                or self.m_textCtrl10.GetValue() == '' \
                                    or self.m_textCtrl11.GetValue() == '':
#以降はオプション対応コーディング                                        
#                                        or self.m_textCtrl12.GetValue() == '' \
#                                            or self.m_textCtrl13.GetValue() == '' \
#                                                or self.m_textCtrl14.GetValue() == '' \
#                                                    or self.m_textCtrl15.GetValue() == '':
              self.m_textCtrl6.SetBackgroundColour('#f56cbe')
              self.m_textCtrl7.SetBackgroundColour('#f56cbe')
              self.m_textCtrl8.SetBackgroundColour('#f56cbe')
              self.m_textCtrl9.SetBackgroundColour('#f56cbe')
              self.m_textCtrl10.SetBackgroundColour('#f56cbe')
              self.m_textCtrl11.SetBackgroundColour('#f56cbe')

#以降はオプション対応コーディング
#              self.m_textCtrl12.SetBackgroundColour('#f56cbe')
#              self.m_textCtrl13.SetBackgroundColour('#f56cbe')
#              self.m_textCtrl14.SetBackgroundColour('#f56cbe')
#              self.m_textCtrl15.SetBackgroundColour('#f56cbe')
              wx.MessageBox(u'There are unselected or blank areas!!', u'Setting value error', wx.ICON_ERROR)
#            elif "http" in self.m_textCtrl12.GetValue() \
#                or "http" in self.m_textCtrl13.GetValue() \
#                    or "http" in self.m_textCtrl14.GetValue() \
#                        or "http" in self.m_textCtrl15.GetValue():
#              self.m_textCtrl12.SetBackgroundColour('#f56cbe')
#              self.m_textCtrl13.SetBackgroundColour('#f56cbe')
#              self.m_textCtrl14.SetBackgroundColour('#f56cbe')
#              self.m_textCtrl15.SetBackgroundColour('#f56cbe')
#              wx.MessageBox(u'You cannot include the url in the body of the transmission!!', u'Setting value error', wx.ICON_ERROR)
#            elif not "http" in self.m_textCtrl8.GetValue() \
#                or not "http" in self.m_textCtrl9.GetValue() \
#                    or not "http" in self.m_textCtrl10.GetValue() \
#                        or not "http" in self.m_textCtrl11.GetValue():
#              self.m_textCtrl8.SetBackgroundColour('#f56cbe')
#              self.m_textCtrl9.SetBackgroundColour('#f56cbe')
#              self.m_textCtrl10.SetBackgroundColour('#f56cbe')
#              self.m_textCtrl11.SetBackgroundColour('#f56cbe')
#              wx.MessageBox(u'Please include the url in the body!!', u'Setting value error', wx.ICON_ERROR)
            else:
              self.m_textCtrl6.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl7.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl8.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl9.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl10.SetBackgroundColour('#FFFFFF')
              self.m_textCtrl11.SetBackgroundColour('#FFFFFF')
              wx.MessageBox(u'If you include the url in the body of the email, it may be considered as a spam email.', u'Please note that.', wx.ICON_INFORMATION)

#文字コードをUTF-8に変換しないとエラー発生がするため注意！！
              with open('textarea.json','w',encoding='utf-8') as f:
                w_data = {}
                w_data['title'] = self.m_textCtrl6.GetValue()
                w_data['url'] = self.m_textCtrl7.GetValue()
                w_data['body1'] = self.m_textCtrl8.GetValue()
                w_data['body2'] = self.m_textCtrl9.GetValue()
                w_data['body3'] = self.m_textCtrl10.GetValue()
                w_data['body4'] = self.m_textCtrl11.GetValue()

                json.dump(w_data, f, ensure_ascii=False, indent=1, sort_keys=True, separators=(',', ': '))
                print('WRITE:')
 #               print(w_data)
                self.Destroy()

# TODO: Implement quit_button
    def quit_button( self, event ):
        self.Destroy()


class MyProject1MyDialog7( app.MyDialog7 ):
	def __init__( self, parent ):
		app.MyDialog7.__init__( self, parent )


#page_index                     
class MyProject1MyFrame4( app.MyFrame4 ):
	def __init__( self, parent ):
		app.MyFrame4.__init__( self, parent )
		self.InitializeComponents()

	def InitializeComponents(self):
#		wb = gc.open_by_key(key)
#		ws2 = wb.worksheet(title)
#		lastrow = len(ws2.col_values(1))
		self.grid = wx.grid.Grid( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, 0 )        
#		grid = wx.grid.Grid(self)
		self.grid.CreateGrid(1000, 1)

		# Set column labels.
		self.grid.SetColLabelValue(0, "ページURL")
        
		main_sizer = wx.BoxSizer(wx.VERTICAL)
		main_sizer.Add(self.grid, 0, wx.EXPAND)
#		main_sizer.Add(bsizer, 1, wx.EXPAND | wx.TOP, 5)
		self.SetSizer(main_sizer)
        
		self.tableShow()
        
	def tableShow(self):
		self.grid.AutoSize()


class MyProject1MyFrame5( app.MyFrame5 ):
	def __init__( self, parent ):
		app.MyFrame5.__init__( self, parent )
		self.InitializeComponents()

	def InitializeComponents(self):
#		wb = gc.open_by_key(key)
#		ws3 = wb.worksheet(title)        
#		lastrow = len(ws3.col_values(1))        
		self.grid = wx.grid.Grid( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, 0 )        
#		grid = wx.grid.Grid(self)
#		self.grid.CreateGrid(10000, 8)
		self.grid.EnableEditing( False )
		self.grid.EnableDragGridSize( True )

		# Set column labels.
#		self.grid.SetColLabelValue(0, "リスト元リンク")
#		self.grid.SetColLabelValue(1, "法人名称")
#		self.grid.SetColLabelValue(2, "住所")
#		self.grid.SetColLabelValue(3, "電話番号")
#		self.grid.SetColLabelValue(4, "ホームページ")
#		self.grid.SetColLabelValue(5, "お問い合わせページ")
#		self.grid.SetColLabelValue(6, "結果・エラー情報等（１）")
#		self.grid.SetColLabelValue(7, "結果・エラー情報等（２）")
#		self.grid.SetColLabelValue(8, "投稿日時")
        
        
		main_sizer = wx.BoxSizer(wx.VERTICAL)
		main_sizer.Add(self.grid, 0, wx.EXPAND)
#		main_sizer.Add(bsizer, 1, wx.EXPAND | wx.TOP, 5)
		self.SetSizer(main_sizer)
        
		self.tableShow()
        
	def tableShow(self):
		self.grid.AutoSize()


