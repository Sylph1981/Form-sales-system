"""Subclass of MyFrame2, which is generated by wxFormBuilder."""

import wx
import app
import wx.xrc
import wx.grid
import wx.adv
#import sqlite3
import gspread
import time
import re
from bs4 import BeautifulSoup
from tqdm import tqdm
from selenium import webdriver
from selenium.webdriver.chrome.options import Options

#例外処理用のlibraryをimport
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import WebDriverException

#Selectモジュールをインポート
#from selenium.webdriver.support.select import Select

#オプションの作成
option = Options()

#起動オプション
# ヘッドレスモードを有効にする（次の行をコメントアウトすると画面が表示される）。
option.add_argument('--headless')

#「unknown error: net::ERR_CONNECTION_CLOSED」の回避用
option.add_argument('--disable-dev-shm-usage')

# ChromeのWebDriverオブジェクトを作成する。
driver = webdriver.Chrome("C:/Users/iorin/OneDrive/ドキュメント/Python Scripts/chromedriver.exe",options=option)

#ServiceAccountCredentials：Googleの各サービスへアクセスできるservice変数を生成します。
from oauth2client.service_account import ServiceAccountCredentials

#2つのAPIを記述しないとリフレッシュトークンを3600秒毎に発行し続けなければならない
scope = ['https://spreadsheets.google.com/feeds','https://www.googleapis.com/auth/drive']

# 秘密鍵（JSONファイル）のファイル名を入力
credentials = ServiceAccountCredentials.from_json_keyfile_name('inquiry-form-automatic-posting-6e2409a1cc4a.json', scope)

#OAuth2の資格情報を使用してGoogle APIにログインします。
gc = gspread.authorize(credentials)

#「キー」で取得
SPREADSHEET_KEY = '1BazsXmS9dW8oAOmvjMNVabvvw1dYAgW9SR-qbyAylEU'
SPREADSHEET_KEY2 = '1FrygfVLHP8fMZh8HdBYboZtkg4fCH8lcDUsbQ58Hbqs'

wb = gc.open_by_key(SPREADSHEET_KEY)
wb2 = gc.open_by_key(SPREADSHEET_KEY2)
ws1 = wb.worksheet('sheet1')
ws2 = wb2.worksheet('imc-pager__item')
ws3 = wb.worksheet('ターゲットリスト')

#pyファイル「dbSqliteClass」の関数「db_sqlite」を参照
#from dbSqliteClass import db_sqlite

#データベース読み込み
#__res = None
#DB_NAME = '【JUNO】食品衛生470.accdb'
 
#def get_resources():
#    global __res
#    if __res is None:
#        __init_resources()
#    return __res
 
#def __init_resources():
#    global __res
#    __res = wx.xrc.XmlResource()
#    __res.Load('test.xrc')


# Implementing MyFrame2
class MyProject1MyFrame2( app.MyFrame2 ):
	def __init__( self, parent ):
		app.MyFrame2.__init__( self, parent )
#		get_resources().LoadFrame(self, parent, 'MyProject1MyFrame2')
 
		self.Bind(wx.EVT_CLOSE, self.quit_button)
 
		self.btn1 = wx.xrc.XRCCTRL(self, 'btn1')
#		self.btn1.Bind(wx.EVT_BUTTON, self.create_button)
		self.btn2 = wx.xrc.XRCCTRL(self, 'btn2')
#		self.btn2.Bind(wx.EVT_BUTTON, self.quit_button)
		self.btn3 = wx.xrc.XRCCTRL(self, 'btn3')

 
#SetValue of SpinCtrl
#		bSizer19 = wx.BoxSizer( wx.VERTICAL )

#		self.m_panel6 = wx.Panel( self.main_panel, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
#		self.m_panel6.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

#		self.m_panel16 = wx.Panel( self.main_panel, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
		self.m_panel16.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

		sbSizer14 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel16, wx.ID_ANY, u"Please enter the spreadsheet key." ), wx.VERTICAL )

		self.m_textCtrl1 = wx.TextCtrl( sbSizer14.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 400,-1 ), 0 )
		self.m_textCtrl1.Bind(wx.EVT_TEXT, self.text_event)
		sbSizer14.Add( self.m_textCtrl1, 0, wx.ALL, 5 )


		self.m_panel16.SetSizer( sbSizer14 )
		self.m_panel16.Layout()
		sbSizer14.Fit( self.m_panel16 )

#		bSizer19.Add( self.m_panel6, 1, wx.EXPAND |wx.ALL, 5 )

        
#		self.m_panel6.Layout()
#		bsizer.Fit( self.m_panel6 )

#Progressbar
		self.m_panel4.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )
		sbSizer2 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel4, wx.ID_ANY, u"Progress" ), wx.VERTICAL )

		self.m_gauge2 = wx.Gauge( sbSizer2.GetStaticBox(), wx.ID_ANY, 100, wx.DefaultPosition, (500, -1), wx.GA_HORIZONTAL )
		self.m_gauge2.SetValue( 0 )
		self.Bind(wx.EVT_BUTTON, self.select_sql)
		sbSizer2.Add( self.m_gauge2, 0, wx.ALL, 5 )

		self.m_panel4.SetSizer( sbSizer2 )
		self.m_panel4.Layout()
		sbSizer2.Fit( self.m_panel4 )


#	def tableShow(self):
        # Set cell values.
#		conn = sqlite3.connect(DB_NAME)
        
#		c = conn.cursor()
#レコード取得SQL文
#テーブル「sheet1」内の「法人名称」「サイトURL」「住所」を選択
#		sql = ('select 法人名称, サイトURL, 住所 from sheet1')

#	def tableShow(self):
#		result = ws1.get_all_values()
#		print(result)
#fetchallで結果リストを取得する        
#		acc = c.execute(sql).fetchall()
#		lastrow = len(ws1.col_values(1))
#		i = 2
#		for row in range(5):
#		  try:
#		 self.gridTable.SetCellValue(row, 0, ws1.cell(i, 2).value)
#		 self.gridTable.SetCellValue(row, 1, ws1.cell(i, 3).value)
#		    am = f"{acc[i]['amount']:,}"
#		 self.gridTable.SetCellValue(row, 2, ws1.cell(i, 7).value)
#		  except:
#		 print(ws1.cell(i, 2).value)
#		 print(ws1.cell(i, 3).value)
#		 print(ws1.cell(i, 7).value)
#		 i += 1
#		self.gridTable.AutoSize()

	def text_event(self, event):
	   if not self.m_textCtrl1.GetValue() == '1BazsXmS9dW8oAOmvjMNVabvvw1dYAgW9SR-qbyAylEU':
	      self.m_textCtrl1.SetBackgroundColour('#ff0000')
#	      self.m_textCtrl1.SetForegroundColour('#f56cbe')
	      wx.MessageBox(u'Invalid sheet key!!', u'Setting value error', wx.ICON_ERROR)
#	      self.m_textCtrl1.Clear()
	   else:
	      self.m_textCtrl1.SetBackgroundColour('#FFFFFF')
	      sbSizer5 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel6, wx.ID_ANY, u"Please set the value." ), wx.VERTICAL )

	      self.m_panel5 = wx.Panel( sbSizer5.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
	      bSizer16 = wx.BoxSizer( wx.VERTICAL )

	      gSizer5 = wx.GridSizer( 0, 2, 0, 0 )
        
	      self.m_panel17 = wx.Panel( self.m_panel5, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
	      self.m_panel17.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

	      sbSizer15 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel17, wx.ID_ANY, u"Worksheet title" ), wx.VERTICAL )

#存在するワークシートの情報を全て取得
	      wb = gc.open_by_key(self.m_textCtrl1.GetValue())
	      worksheets = wb.worksheets()
        
#現在のワークシートのタイトルをリストへ格納
	      m_comboBox1Choices = [worksheet.title for worksheet in worksheets]
	      print(m_comboBox1Choices)
	      self.m_comboBox1 = wx.ComboBox( sbSizer15.GetStaticBox(), wx.ID_ANY, u"選択して下さい", wx.DefaultPosition, wx.DefaultSize, m_comboBox1Choices, wx.CB_DROPDOWN )
        
	      sbSizer15.Add( self.m_comboBox1, 0, wx.ALL, 5 )

	      self.m_panel17.SetSizer( sbSizer15 )
	      self.m_panel17.Layout()
	      sbSizer15.Fit( self.m_panel17 )
	      gSizer5.Add( self.m_panel17, 1, wx.EXPAND |wx.ALL, 5 )

	      gSizer6 = wx.GridSizer( 0, 2, 0, 0 )

	      self.m_staticText5 = wx.StaticText( self.m_panel5, wx.ID_ANY, u"start", wx.DefaultPosition, wx.DefaultSize, 0 )
	      self.m_staticText5.Wrap( -1 )
	      self.m_staticText5.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

	      gSizer6.Add( self.m_staticText5, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )

	      self.row1 = wx.SpinCtrl( self.m_panel5, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, wx.SP_ARROW_KEYS, 0, 1000, 0 )
	      gSizer6.Add( self.row1, 0, wx.ALL, 5 )

	      self.m_staticText6 = wx.StaticText( self.m_panel5, wx.ID_ANY, u"last", wx.DefaultPosition, wx.DefaultSize, 0 )
	      self.m_staticText6.Wrap( -1 )
	      self.m_staticText6.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

	      gSizer6.Add( self.m_staticText6, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )

	      self.row2 = wx.SpinCtrl( self.m_panel5, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, wx.SP_ARROW_KEYS, 0, 1000, 0 )
	      gSizer6.Add( self.row2, 0, wx.ALL, 5 )


	      gSizer5.Add( gSizer6, 1, wx.EXPAND, 5 )


	      bSizer16.Add( gSizer5, 1, wx.EXPAND, 5 )


	      self.m_panel5.SetSizer( bSizer16 )
	      self.m_panel5.Layout()
	      bSizer16.Fit( self.m_panel5 )
	      sbSizer5.Add( self.m_panel5, 1, wx.EXPAND |wx.ALL, 5 )

	      bSizer15 = wx.BoxSizer( wx.VERTICAL )

	      self.btn3 = wx.Button( sbSizer5.GetStaticBox(), wx.ID_ANY, u"Check", wx.DefaultPosition, wx.DefaultSize, 0 )
	      self.btn3.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

	      bSizer15.Add( self.btn3, 0, wx.ALL, 5 )


	      sbSizer5.Add( bSizer15, 1, wx.EXPAND, 5 )


	      self.m_panel6.SetSizer( sbSizer5 )
	      self.m_panel6.Layout()
	      sbSizer5.Fit( self.m_panel6 )


#存在するワークシートの情報を全て取得
#		worksheets = wb.worksheets()
        
#現在のワークシートのタイトルをリストへ格納
#		m_comboBox1Choices = [worksheet.title for worksheet in worksheets]
#		print(m_comboBox1Choices)        
#		self.m_comboBox1 = wx.ComboBox( sbSizer15.GetStaticBox(), wx.ID_ANY, u"選択して下さい", wx.DefaultPosition, wx.DefaultSize, m_comboBox1Choices, wx.CB_DROPDOWN )
#		sbSizer15.Add( self.m_comboBox1, 0, wx.ALL, 5 )

#		self.m_panel17.SetSizer( sbSizer15 )
#		self.m_panel17.Layout()
#		sbSizer15.Fit( self.m_panel17 )
#		gSizer5.Add( self.m_panel17, 1, wx.EXPAND |wx.ALL, 5 )

	# Handlers for MyFrame2 events.
	def create_button( self, event ):
		# TODO: Implement create_button
	   if self.m_textCtrl1.GetValue() == '':
	      self.m_textCtrl1.SetBackgroundColour('#ff0000')
#	      self.m_textCtrl1.SetForegroundColour('#f56cbe')
	      wx.MessageBox(u'Please enter the sheet key!!', u'Setting value error', wx.ICON_ERROR)
	   else:
	    self.m_textCtrl1.SetBackgroundColour('#FFFFFF')
	    adid = MyProject1MyDialog(self)
        
#MyFrame2のテキストボックスに入力した値をMyDialogに受け渡し        
	    adid.import_sheet_title(self.m_textCtrl1.GetValue())
#		adid.select_sql(self.m_textCtrl1.GetValue())
#		adid.page_list(self.m_textCtrl1.GetValue())
	    adid.ShowModal()
	    adid.Destroy()
	def quit_button( self, event ):
		# TODO: Implement quit_button
		self.Destroy()
        
	def select_sql( self, event ):
		# TODO: Implement select_sql
		row1 = self.row1.GetValue()
		row2 = self.row2.GetValue()

		if self.m_comboBox1.GetValue() == '選択して下さい':
		 self.m_comboBox1.SetBackgroundColour("#ff0000")
		 wx.MessageBox(u'Please select the Worksheet title!!', u'Setting value error', wx.ICON_ERROR)
		elif row1 == 0 and row2 == 0:
		 self.row1.SetBackgroundColour('#ff0000')
		 self.row2.SetBackgroundColour('#ff0000')
		 self.m_comboBox1.SetBackgroundColour("#FFFFFF")
		 wx.MessageBox(u'Please set the range!!', u'Setting value error', wx.ICON_ERROR)
		elif row2 - row1 > 1000:
		 self.row1.SetBackgroundColour('#ff0000')
		 self.row2.SetBackgroundColour('#ff0000')
		 self.m_comboBox1.SetBackgroundColour("#FFFFFF")
		 wx.MessageBox(u'The value exceeds the configurable range!!', u'Setting value error', wx.ICON_ERROR)
		elif row2 - row1 < 0:
		 self.row1.SetBackgroundColour('#ff0000')
		 self.row2.SetBackgroundColour('#ff0000')
		 self.m_comboBox1.SetBackgroundColour("#FFFFFF")
		 wx.MessageBox(u'Illegal range!!', u'Setting value error', wx.ICON_ERROR)
		# Set cell values.
		else:
		 ws3 = wb.worksheet(self.m_comboBox1.GetValue())
		 self.row1.SetBackgroundColour('#FFFFFF')
		 self.row2.SetBackgroundColour('#FFFFFF')
		 self.m_comboBox1.SetBackgroundColour("#FFFFFF")
		 adid = MyProject1MyFrame5(self)
		 adid.grid.ClearGrid()
		 self.m_gauge2.SetValue( 0 )         
		 self.m_gauge2.SetRange(row2-row1)         
#		c = db_sqlite(DB_NAME)
        
#レコード取得SQL文
#テーブル「sheet1」内の「法人名称」「サイトURL」「住所」を選択
#		sql = (
#		    'select 法人名称, サイトURL, 住所 from'
#		    ' sheet1 as a'
#		)
#fetchallで結果リストを取得する        
#		acc = c.db_execute_place(sql, (row1, row2)).fetchall()
		 cell_list1 = ws3.range(row1, 2, row2, 2)
		 cell_list2 = ws3.range(row1, 3, row2, 3)
		 cell_list3 = ws3.range(row1, 4, row2, 4)
		 cell_list4 = ws3.range(row1, 5, row2, 5)
#		i = 0
#		for row in range(row1, row2):
		 i = 0
		 for row in range(row2-row1):           
		    print(cell_list1[i].value)
		    print(cell_list2[i].value)
		    print(cell_list3[i].value)
		    adid.grid.SetCellValue(row, 0, cell_list1[i].value)
		    adid.grid.SetCellValue(row, 1, cell_list2[i].value)
		    adid.grid.SetCellValue(row, 2, cell_list3[i].value)
		    adid.grid.SetCellValue(row, 3, cell_list4[i].value)
#		    self.gridTable.SetCellValue(i, 1, ws1.cell(row1, 3).value)
#		    am = f"{acc[i]['amount']:,}"
#		    self.gridTable.SetCellValue(i, 2, ws1.cell(row1, 7).value)
#		    print(ws1.cell(row1, 2).value)
#		    print(ws1.cell(row1, 3).value)
#		    print(ws1.cell(row1, 7).value)
		    i += 1
		    count = self.m_gauge2.GetValue() + 1
		    if count > row2-row1:
		     count = 0
		    else:
		     self.m_gauge2.SetValue(count)            
#		    row1 += 1
		 adid.grid.AutoSize()
		 adid.Show()

class MyProject1MyFrame5( app.MyFrame5 ):
	def __init__( self, parent ):
		app.MyFrame5.__init__( self, parent )
		self.InitializeComponents()

	def InitializeComponents(self):
		self.grid = wx.grid.Grid( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, 0 )        
#		grid = wx.grid.Grid(self)
		self.grid.CreateGrid(1000, 4)

		# Set column labels.
		self.grid.SetColLabelValue(0, "法人名称")
		self.grid.SetColLabelValue(1, "住所")
		self.grid.SetColLabelValue(2, "電話番号")
		self.grid.SetColLabelValue(3, "ホームページ")        
        
		main_sizer = wx.BoxSizer(wx.VERTICAL)
		main_sizer.Add(self.grid, 0, wx.EXPAND)
#		main_sizer.Add(bsizer, 1, wx.EXPAND | wx.TOP, 5)
		self.SetSizer(main_sizer)
        
		self.tableShow()
        
	def tableShow(self):
		self.grid.AutoSize()
        

class MyProject1MyDialog( app.MyDialog ):
    def __init__(self, parent):
        app.MyDialog.__init__(self, parent)

#        get_resources().LoadDialog(self, parent, 'MyProject1MyDialog')
#        self.SetSize((300, 250))
        self.parent = parent
 
#        c = db_sqlite(DB_NAME)
 
#        self.dbtn1 = wx.xrc.XRCCTRL(self, 'dbtn1')
        self.Bind( wx.EVT_CLOSE, self.quit_button )
#        self.dbtn2 = wx.xrc.XRCCTRL(self, 'dbtn2')
#        self.Bind( wx.EVT_BUTTON, self.select_sql )
#        self.Bind( wx.EVT_BUTTON, self.Get_details )
        
        self.row1 = wx.xrc.XRCCTRL(self, 'row1')
        self.row2 = wx.xrc.XRCCTRL(self, 'row2')
        self.row3 = wx.xrc.XRCCTRL(self, 'row3')
        self.row4 = wx.xrc.XRCCTRL(self, 'row4')        
#        self.in3 = wx.xrc.XRCCTRL(self, 'in3')
#        in2Items = self.createitemname()
#        self.in2.SetItems(in2Items)
#        mainBox.Add( hbox1, 1, wx.EXPAND, 5 )
#        self.m_panel6 = wx.Panel( self.main_panel, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )


#値を渡す関数
    def import_sheet_title(self, key):
        print(key)
        
        self.m_panel22.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        gSizer21 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_staticText22 = wx.StaticText( self.m_panel22, wx.ID_ANY, u"SHEET KEY：", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.m_staticText22.Wrap( -1 )

        gSizer21.Add( self.m_staticText22, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )

        self.m_textCtrl3 = wx.TextCtrl( self.m_panel22, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 350,-1 ), 0 )
        gSizer21.Add( self.m_textCtrl3, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_RIGHT, 5 )
        self.m_textCtrl3.SetValue(key)
        self.m_textCtrl3.Disable()

        self.m_panel22.SetSizer( gSizer21 )
        self.m_panel22.Layout()
        gSizer21.Fit( self.m_panel22 )
        
        
        self.m_panel6.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer5 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel6, wx.ID_ANY, u"Please set the value." ), wx.VERTICAL )

        self.m_panel5 = wx.Panel( sbSizer5.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        bSizer16 = wx.BoxSizer( wx.VERTICAL )

        gSizer5 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_panel17 = wx.Panel( self.m_panel5, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        self.m_panel17.SetFont( wx.Font( 10, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer15 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel17, wx.ID_ANY, u"Check the page list." ), wx.VERTICAL )

#        m_comboBox1Choices = []
#        self.m_comboBox1 = wx.ComboBox( sbSizer15.GetStaticBox(), wx.ID_ANY, u"Combo!", wx.DefaultPosition, wx.DefaultSize, m_comboBox1Choices, wx.CB_DROPDOWN )
                
#存在するワークシートの情報を全て取得
        wb = gc.open_by_key(key)
        worksheets = wb.worksheets()
        
#現在のワークシートのタイトルをリストへ格納
        m_comboBox1Choices = [worksheet.title for worksheet in worksheets]
        print(m_comboBox1Choices)
        self.m_comboBox1 = wx.ComboBox( sbSizer15.GetStaticBox(), wx.ID_ANY, u"選択して下さい", wx.DefaultPosition, wx.DefaultSize, m_comboBox1Choices, wx.CB_DROPDOWN )
        
        sbSizer15.Add( self.m_comboBox1, 0, wx.ALL, 5 )

        self.dbtn2 = wx.Button( sbSizer15.GetStaticBox(), wx.ID_ANY, u"View index", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.dbtn2.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer15.Add( self.dbtn2, 0, wx.ALL, 5 )


        self.m_panel17.SetSizer( sbSizer15 )
        self.m_panel17.Layout()
        sbSizer15.Fit( self.m_panel17 )
        gSizer5.Add( self.m_panel17, 1, wx.EXPAND |wx.ALL, 5 )

        self.m_panel23 = wx.Panel( self.m_panel5, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )

        sbSizer18 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel23, wx.ID_ANY, u"Header list" ), wx.VERTICAL )

        sbSizer18.SetMinSize( wx.Size( 20,-1 ) )
        gSizer6 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_staticText5 = wx.StaticText( sbSizer18.GetStaticBox(), wx.ID_ANY, u"start", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.m_staticText5.Wrap( -1 )

        self.m_staticText5.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        gSizer6.Add( self.m_staticText5, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )

        self.row1 = wx.SpinCtrl( sbSizer18.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 100,-1 ), wx.SP_ARROW_KEYS, 0, 10000, 0 )
        gSizer6.Add( self.row1, 0, wx.ALL, 5 )

        self.m_staticText6 = wx.StaticText( sbSizer18.GetStaticBox(), wx.ID_ANY, u"last", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.m_staticText6.Wrap( -1 )

        gSizer6.Add( self.m_staticText6, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )

        self.row2 = wx.SpinCtrl( sbSizer18.GetStaticBox(), wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 100,-1 ), wx.SP_ARROW_KEYS, 0, 10000, 0 )
        gSizer6.Add( self.row2, 0, wx.ALL, 5 )

        m_comboBox3Choices = [worksheet.title for worksheet in worksheets]
        self.m_comboBox3 = wx.ComboBox( sbSizer18.GetStaticBox(), wx.ID_ANY, u"選択して下さい", wx.DefaultPosition, wx.DefaultSize, m_comboBox3Choices, 0 )
        gSizer6.Add( self.m_comboBox3, 0, wx.ALL, 5 )

        self.btn3 = wx.Button( sbSizer18.GetStaticBox(), wx.ID_ANY, u"Get", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.btn3.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        gSizer6.Add( self.btn3, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )


        sbSizer18.Add( gSizer6, 1, wx.EXPAND, 5 )


        self.m_panel23.SetSizer( sbSizer18 )
        self.m_panel23.Layout()
        sbSizer18.Fit( self.m_panel23 )
        gSizer5.Add( self.m_panel23, 1, wx.EXPAND |wx.ALL, 5 )


        bSizer16.Add( gSizer5, 1, wx.EXPAND, 5 )


        self.m_panel5.SetSizer( bSizer16 )
        self.m_panel5.Layout()
        bSizer16.Fit( self.m_panel5 )
        sbSizer5.Add( self.m_panel5, 1, wx.EXPAND |wx.ALL, 5 )


        self.m_panel6.SetSizer( sbSizer5 )
        self.m_panel6.Layout()
        sbSizer5.Fit( self.m_panel6 )
#        hbox1.Add( self.m_panel6, 1, wx.EXPAND |wx.ALL, 5 )


#        mainBox.Add( hbox1, 1, wx.EXPAND, 5 )

#        hbox4 = wx.BoxSizer( wx.VERTICAL )

#        self.m_panel15 = wx.Panel( self.main_panel, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        self.m_panel15.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        sbSizer12 = wx.StaticBoxSizer( wx.StaticBox( self.m_panel15, wx.ID_ANY, u"Please set the value." ), wx.VERTICAL )

        self.m_panel14 = wx.Panel( sbSizer12.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        bSizer161 = wx.BoxSizer( wx.VERTICAL )

        gSizer51 = wx.GridSizer( 0, 2, 0, 0 )

        gSizer61 = wx.GridSizer( 0, 2, 0, 0 )

        self.m_staticText51 = wx.StaticText( self.m_panel14, wx.ID_ANY, u"start", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.m_staticText51.Wrap( -1 )

        self.m_staticText51.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        gSizer61.Add( self.m_staticText51, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )

        self.row3 = wx.SpinCtrl( self.m_panel14, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, wx.SP_ARROW_KEYS, 0, 10000, 0 )
        gSizer61.Add( self.row3, 0, wx.ALL, 5 )

        self.m_staticText61 = wx.StaticText( self.m_panel14, wx.ID_ANY, u"last", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.m_staticText61.Wrap( -1 )

        gSizer61.Add( self.m_staticText61, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )

        self.row4 = wx.SpinCtrl( self.m_panel14, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, wx.SP_ARROW_KEYS, 0, 10000, 0 )
        gSizer61.Add( self.row4, 0, wx.ALL, 5 )

        self.btn4 = wx.Button( self.m_panel14, wx.ID_ANY, u"Get", wx.DefaultPosition, wx.DefaultSize, 0 )
        self.btn4.SetFont( wx.Font( 10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, False, "Meiryo UI" ) )

        gSizer61.Add( self.btn4, 0, wx.ALL, 5 )


        gSizer51.Add( gSizer61, 1, wx.EXPAND, 5 )


        bSizer161.Add( gSizer51, 1, wx.EXPAND, 5 )


        self.m_panel14.SetSizer( bSizer161 )
        self.m_panel14.Layout()
        bSizer161.Fit( self.m_panel14 )
        sbSizer12.Add( self.m_panel14, 1, wx.EXPAND |wx.ALL, 5 )


        self.m_panel15.SetSizer( sbSizer12 )
        self.m_panel15.Layout()
        sbSizer12.Fit( self.m_panel15 )


#存在するワークシートの情報を全て取得
#        wb = gc.open_by_key(key)
#        worksheets = wb.worksheets()
        
#現在のワークシートのタイトルをリストへ格納
#        m_comboBox1Choices = [worksheet.title for worksheet in worksheets]
#        print(m_comboBox1Choices)
#        self.m_comboBox1 = wx.ComboBox( sbSizer15.GetStaticBox(), wx.ID_ANY, u"選択して下さい", wx.DefaultPosition, wx.DefaultSize, m_comboBox1Choices, wx.CB_DROPDOWN )


        self.btn3.Bind( wx.EVT_BUTTON, self.select_sql )
        self.btn4.Bind( wx.EVT_BUTTON, self.Get_details )
        self.dbtn2.Bind( wx.EVT_BUTTON, self.page_list )


    def select_sql( self, event ):
		# TODO: Implement select_sql
        row1 = self.row1.GetValue()
        row2 = self.row2.GetValue()
#        print(row1)
#        print(row2)        

        if self.m_comboBox1.GetValue() == '選択して下さい' \
            or self.m_comboBox3.GetValue() == '選択して下さい':
         self.m_comboBox1.SetBackgroundColour("#ff0000")
         self.m_comboBox3.SetBackgroundColour("#ff0000")         
         wx.MessageBox(u'Please select the Worksheet title!!', u'Setting value error', wx.ICON_ERROR)
        elif not 'page' in self.m_comboBox1.GetValue() \
            or not 'リスト' in self.m_comboBox3.GetValue():
         self.m_comboBox1.SetBackgroundColour("#ff0000")
         self.m_comboBox3.SetBackgroundColour("#ff0000")         
         wx.MessageBox(u'Not a valid sheet name.!!', u'Setting value error', wx.ICON_ERROR)            
        elif row1 == 0 or row2 == 0:
         self.row1.SetBackgroundColour('#ff0000')
         self.row2.SetBackgroundColour('#ff0000')
         self.m_comboBox1.SetBackgroundColour("#FFFFFF")
         self.m_comboBox3.SetBackgroundColour("#FFFFFF")         
         wx.MessageBox(u'Please set the range!!', u'Setting value error', wx.ICON_ERROR)
        elif row2 - row1 > 10000:
         self.row1.SetBackgroundColour('#ff0000')
         self.row2.SetBackgroundColour('#ff0000')
         self.m_comboBox1.SetBackgroundColour("#FFFFFF")
         self.m_comboBox3.SetBackgroundColour("#FFFFFF")         
         wx.MessageBox(u'The value exceeds the configurable range!!', u'Setting value error', wx.ICON_ERROR)
        elif row2 - row1 < 0:
         self.row1.SetBackgroundColour('#ff0000')
         self.row2.SetBackgroundColour('#ff0000')
         self.m_comboBox1.SetBackgroundColour("#FFFFFF")
         self.m_comboBox3.SetBackgroundColour("#FFFFFF")         
         wx.MessageBox(u'Illegal range!!', u'Setting value error', wx.ICON_ERROR)
		# Set cell values.
        else:
         wb = gc.open_by_key(self.m_textCtrl3.GetValue())
         print(self.m_textCtrl3.GetValue())
         ws2 = wb.worksheet(self.m_comboBox1.GetValue())
         print(self.m_comboBox1.GetValue())
         ws3 = wb.worksheet(self.m_comboBox3.GetStringSelection())
         print(self.m_comboBox3.GetStringSelection())
         self.row1.SetBackgroundColour('#FFFFFF')
         self.row2.SetBackgroundColour('#FFFFFF')
         self.m_comboBox1.SetBackgroundColour("#FFFFFF")
         self.m_comboBox3.SetBackgroundColour("#FFFFFF")         
         answer = wx.MessageBox(u'All the data on the selected sheet will be cleared, is that okay?', u'Verification', wx.YES_NO | wx.ICON_EXCLAMATION)
         if answer == wx.NO:
             pass
         elif answer == wx.YES:
          ws3.clear()            
          dlg = wx.ProgressDialog(
            title="ヘッダー取得中",
            message="0/100",
            maximum=100,
            style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )         
         
# ダイアログ表示
          dlg.Show()
          rate = 0

#所要時間計測開始
          start = time.time()

#全国のホームページ制作会社一覧
          for j in tqdm(range(row1, row2)): #49ページで終わってしまわないよう「50+1」としている       
           driver.get(ws2.cell(j,1).value)
           time.sleep(8)
     
           html = driver.page_source
#     print(html)
           soup = BeautifulSoup(html, 'html.parser')

#「〇～○件を表示」
           KEN1 = driver.find_element_by_xpath('//*[@id="top"]/div[3]').text
#     HEN1 = KEN1.replace('件','')
           print(KEN1)

           service_urls = []
           for service_url in soup.select('.imc-color-a.imc-color-a--u'):
            print(service_url.get('href'))
            service_urls.append(service_url.get('href'))

#後で「https://imitsu.jp」と連結させること！！
#           time.sleep(5)
              
#ws1の行数を取得
           lastrow1 = len(ws3.col_values(1))
           print(lastrow1)       
           
           if lastrow1 == 0:
            cell_list2 = ws3.range(1, 1, str(len(service_urls)), 1)
            time.sleep(5)
#スプレッドシートに入力
            for v2,c2 in zip(service_urls,cell_list2):
             c2.value = v2
             ws3.update_cells(cell_list2)
            
           elif lastrow1 > 0:
            cell_list2 = ws3.range(lastrow1+1, 1, lastrow1+1+len(service_urls), 1)
            time.sleep(5)
            for v2,c2 in zip(service_urls,cell_list2):
             c2.value = v2
             ws3.update_cells(cell_list2)
            
        # ループ処理
#          for a in range(rate, 100):
#          while rate < 100:
            # 0.5秒待つ
#            time.sleep(0.5)
           rate += 1/(row2-row1)*100
            # 値の更新
           dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
           
          dlg.Destroy()

#chromeドライバーの終了
          driver.quit()      

# calculate elapsed time
          elapsed_time = int(time.time() - start)

# convert second to hour, minute and seconds
          elapsed_hour = elapsed_time // 3600
          elapsed_minute = (elapsed_time % 3600) // 60
          elapsed_second = (elapsed_time % 3600 % 60)

# print as 00:00:00
          print("所要時間：" + str(elapsed_hour).zfill(2) + "h" \
      + str(elapsed_minute).zfill(2) + "m" + str(elapsed_second).zfill(2) + "s")        


    def Get_details( self, event ):
		# TODO: Implement select_sql
        wb = gc.open_by_key(MyProject1MyFrame2(self).m_textCtrl1.GetValue())
        ws3 = wb.worksheet(MyProject1MyFrame2(self).m_comboBox1.GetValue())
        row3 = self.row3.GetValue()
        row4 = self.row4.GetValue()
        print(row3)
        print(row4)                

        if row3 == 0 or row4 == 0:
         wx.MessageBox(u'Please set the range!!', u'Setting value error', wx.ICON_ERROR)
        elif row4 - row3 > 10000:
         wx.MessageBox(u'The value exceeds the configurable range!!', u'Setting value error', wx.ICON_ERROR)
        elif row4 - row3 < 0:
         wx.MessageBox(u'Illegal range!!', u'Setting value error', wx.ICON_ERROR)
        # Set cell values.
        else:
#         ws3.clear()
         dlg = wx.ProgressDialog(
            title="会社概要取得中",
            message="0/100",
            maximum=100,
            style=wx.PD_AUTO_HIDE | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_REMAINING_TIME )         
         
# ダイアログ表示
         dlg.Show()
         rate = 0

#所要時間計測開始
         start = time.time()

#会社概要
#ws1の行数を取得
         lastrow1 = len(ws3.col_values(1))
         print(lastrow1)       
         for k in tqdm(range(row3, row4)):
              try:
               driver.get('https://imitsu.jp' + ws3.cell(k,1).value)
               time.sleep(5)
               ws3.update_cell(k, 1, driver.current_url)

               if driver.title == 'Error 502 (Server Error)!!1':
                lastcol = len(list(ws3.row_values(k)))                            
                ws3.update_cell(k,lastcol,driver.title)          
                break

               html = driver.page_source
#      print(html)
               soup = BeautifulSoup(html, 'html.parser')

#エラー発生時に回避（①～⑤は実施されない）
              except WebDriverException:
               break


#①各詳細データ

#１列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(1) > dd"):
               print(Content.getText())
       
#       if "会社名" in Content:           
#       Contents.append(Content.getText())
               time.sleep(3)       
#     for i in range(1,len(Contents)):
               lastcol = len(list(ws3.row_values(k)))                  
#       ws3.update_cell(k, lastcol+1, Contents[i-1])
               ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))

              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(1) > dd"):
               print(Content.getText())
       
#       if "会社名" in Content:           
#       Contents.append(Content.getText())
               time.sleep(3)       
#     for i in range(1,len(Contents)):
               lastcol = len(list(ws3.row_values(k)))                  
#       ws3.update_cell(k, lastcol+1, Contents[i-1])
               ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))

              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(1) > dd"):
               print(Content.getText())
       
#       if "会社名" in Content:           
#       Contents.append(Content.getText())
               time.sleep(3)       
#     for i in range(1,len(Contents)):
               lastcol = len(list(ws3.row_values(k)))                  
#       ws3.update_cell(k, lastcol+1, Contents[i-1])
               ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))


#（テキストパターン１）
#２列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(2) > dt"):
               print(Content.getText())
       
               if "設立年" in Content.getText():
                pass
               elif "資本金" in Content.getText():
                pass    
               elif "従業員" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(2) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))

               elif "会社URL" in Content.getText():
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, "-")                   
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, "-")                   

                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(2) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))

#３列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(3) > dt"):
               print(Content.getText())

               if "設立年" in Content.getText():
                pass
               elif "従業員" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(3) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(3) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                  
               elif "会社URL" in Content.getText():
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, "-")                                              
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(3) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))


#４列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(4) > dt"):
               print(Content.getText())

               if "従業員" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(4) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(4) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(4) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
#                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, 5, re.sub("[\n]", "", Content.getText(), 4))

#５列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(5) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(5) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(5) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(5) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
#                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, 5, re.sub("[\n]", "", Content.getText(), 4))

#６列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(6) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(6) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(6) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(6) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
#                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, 5, re.sub("[\n]", "", Content.getText(), 4))

#７列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(7) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(7) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(7) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(7) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))

#８列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(8) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(8) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(8) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(4) > div:nth-of-type(2) > dl:nth-of-type(8) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))

                
#（テキストパターン２）
#２列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(2) > dt"):
               print(Content.getText())
               
               if "設立年" in Content.getText():
                pass
               elif "資本金" in Content.getText():
                pass    
               elif "従業員" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(2) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))

               elif "会社URL" in Content.getText():
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, "-")                   
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, "-")                   

                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(2) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))

#３列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(3) > dt"):
               print(Content.getText())

               if "設立年" in Content.getText():
                pass
               elif "従業員" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(3) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(3) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                  
               elif "会社URL" in Content.getText():
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, "-")                                              
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(3) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))


#４列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(4) > dt"):
               print(Content.getText())

               if "従業員" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(4) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(4) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                  
               elif "会社URL" in Content.getText():
#                 lastcol = len(list(ws3.row_values(k)))                                  
#                 ws3.update_cell(k, lastcol+1, "-")                                                                 
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(4) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
#                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, 5, re.sub("[\n]", "", Content.getText(), 4))

#５列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(5) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(5) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(5) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(5) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
#                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, 5, re.sub("[\n]", "", Content.getText(), 4))

#６列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(6) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(6) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(6) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(6) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
#                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, 5, re.sub("[\n]", "", Content.getText(), 4))

#７列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(7) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(7) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(7) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(7) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))

#８列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(8) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(8) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(8) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(3) > div:nth-of-type(2) > dl:nth-of-type(8) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))


#（テキストパターン３）
#２列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(2) > dt"):
               print(Content.getText())
               
               if "設立年" in Content.getText():
                pass
               elif "資本金" in Content.getText():
                pass    
               elif "従業員" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(2) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))

               elif "会社URL" in Content.getText():
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, "-")                   
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, "-")                   

                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(2) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))

#３列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(3) > dt"):
               print(Content.getText())

               if "設立年" in Content.getText():
                pass
               elif "従業員" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(3) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(3) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                  
               elif "会社URL" in Content.getText():
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, "-")                                              
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(3) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
#                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, 5, re.sub("[\n]", "", Content.getText(), 4))


#４列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(4) > dt"):
               print(Content.getText())

               if "従業員" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(4) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(4) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(4) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
#                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, 5, re.sub("[\n]", "", Content.getText(), 4))

#５列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(5) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(5) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(5) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(5) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
#                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, 5, re.sub("[\n]", "", Content.getText(), 4))

#６列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(6) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(6) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(6) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(6) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
#                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, 5, re.sub("[\n]", "", Content.getText(), 4))
                  
#７列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(7) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(7) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(7) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(7) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))

#８列目
              for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(8) > dt"):
               print(Content.getText())

               if "会社概要" in Content.getText():
                pass    
               elif "住所" in Content.getText():
                for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(8) > dd"):
                 print(Content.getText())
                 time.sleep(3)               
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                 lastcol = len(list(ws3.row_values(k)))                                  
                 ws3.update_cell(k, lastcol, re.sub("[\s]", "", ws3.cell(k, lastcol).value, 34))
                 
               elif "電話番号" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(8) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))
                  
               elif "会社URL" in Content.getText():
                 for Content in soup.select("body > div:nth-of-type(3) > div \
> article > section:nth-of-type(2) > div:nth-of-type(2) > dl:nth-of-type(8) > dd"):
                  print(Content.getText())
                  time.sleep(3)               
                  lastcol = len(list(ws3.row_values(k)))                                  
                  ws3.update_cell(k, lastcol+1, re.sub("[\n]", "", Content.getText(), 4))


              rate += 1/(row4-row3)*100
            # 値の更新
              dlg.Update(value=rate, newmsg="%d/100" % rate + "%")
           
         dlg.Destroy()

#chromeドライバーの終了
         driver.quit()      

# calculate elapsed time
         elapsed_time = int(time.time() - start)

# convert second to hour, minute and seconds
         elapsed_hour = elapsed_time // 3600
         elapsed_minute = (elapsed_time % 3600) // 60
         elapsed_second = (elapsed_time % 3600 % 60)

# print as 00:00:00
         print("所要時間：" + str(elapsed_hour).zfill(2) + "h" \
      + str(elapsed_minute).zfill(2) + "m" + str(elapsed_second).zfill(2) + "s")


    def quit_button( self, event ):
		# TODO: Implement quit_button
#        self.parent.tableShow()
	    self.Destroy()

    def page_list( self, event ):
         adid = MyProject1MyFrame4(self)
         adid.grid.ClearGrid()
         wb = gc.open_by_key(self.m_textCtrl3.GetValue())
         print(self.m_textCtrl3.GetValue())
         print(self.m_comboBox1.GetValue())
         if self.m_comboBox1.GetValue() == '選択して下さい':
          self.m_comboBox1.SetBackgroundColour("#ff0000")
          wx.MessageBox(u'Please select the Worksheet title!!', u'Setting value error', wx.ICON_ERROR)
         elif not 'page' in self.m_comboBox1.GetValue():
          self.m_comboBox1.SetBackgroundColour("#ff0000")
          wx.MessageBox(u'The selected sheet name is not valid.!!', u'Setting value error', wx.ICON_ERROR)
         else:
          self.m_comboBox1.SetBackgroundColour("#FFFFFF")
          ws2 = wb.worksheet(self.m_comboBox1.GetValue())          
          lastrow = len(ws2.col_values(1))
          cell_list1 = ws2.range(1, 1, lastrow, 1)
          i = 0
          for row in range(lastrow):
            print(cell_list1[i].value)
            adid.grid.SetCellValue(row, 0, cell_list1[i].value)
            i += 1
          adid.grid.AutoSize()
          adid.Show()
         
            
class MyProject1MyFrame4( app.MyFrame4 ):
	def __init__( self, parent ):
		app.MyFrame4.__init__( self, parent )
		self.InitializeComponents()

	def InitializeComponents(self):
		lastrow = len(ws2.col_values(1))
		self.grid = wx.grid.Grid( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, 0 )        
#		grid = wx.grid.Grid(self)
		self.grid.CreateGrid(lastrow, 1)

		# Set column labels.
		self.grid.SetColLabelValue(0, "ページURL")
        
		main_sizer = wx.BoxSizer(wx.VERTICAL)
		main_sizer.Add(self.grid, 0, wx.EXPAND)
#		main_sizer.Add(bsizer, 1, wx.EXPAND | wx.TOP, 5)
		self.SetSizer(main_sizer)
        
		self.tableShow()
        
	def tableShow(self):
		self.grid.AutoSize()
